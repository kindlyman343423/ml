{"version":3,"sources":["webpack:///ml/webpack/universalModuleDefinition","webpack:///ml/./node_modules/ml-array-utils/src/getEquallySpaced.js","webpack:///ml/./node_modules/ml-fnn/src/activationFunctions.js","webpack:///ml/./node_modules/ml-curve-fitting/src/algebra.js","webpack:///ml/./node_modules/ml-stat/array.js","webpack:///ml/./node_modules/ml-matrix/src/abstractMatrix.js","webpack:///ml/./node_modules/ml-matrix/src/matrix.js","webpack:///ml/./node_modules/ml-distance-euclidean/euclidean.js","webpack:///ml/webpack/bootstrap dc9a19b9838106d06786","webpack:///ml/./node_modules/ml-array-utils/src/index.js","webpack:///ml/./node_modules/ml-stat/index.js","webpack:///ml/./node_modules/ml-regression-base/src/index.js","webpack:///ml/./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/matrix.js","webpack:///ml/./node_modules/ml-pca/node_modules/ml-matrix/src/matrix.js","webpack:///ml/./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/matrix.js","webpack:///ml/./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/matrix.js","webpack:///ml/./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/matrix.js","webpack:///ml/./node_modules/ml-naivebayes/node_modules/ml-matrix/src/matrix.js","webpack:///ml/./node_modules/ml-pls/node_modules/ml-matrix/src/matrix.js","webpack:///ml/./node_modules/ml-fnn/node_modules/ml-matrix/src/matrix.js","webpack:///ml/./node_modules/ml-matrix/src/index.js","webpack:///ml/./node_modules/ml-matrix/src/views/base.js","webpack:///ml/./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/views/base.js","webpack:///ml/./node_modules/ml-pca/node_modules/ml-matrix/src/views/base.js","webpack:///ml/./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/views/base.js","webpack:///ml/./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/views/base.js","webpack:///ml/./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/views/base.js","webpack:///ml/./node_modules/ml-naivebayes/node_modules/ml-matrix/src/views/base.js","webpack:///ml/./node_modules/ml-pls/node_modules/ml-matrix/src/views/base.js","webpack:///ml/./node_modules/ml-fnn/node_modules/ml-matrix/src/views/base.js","webpack:///ml/./node_modules/ml-matrix/src/util.js","webpack:///ml/./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/util.js","webpack:///ml/./node_modules/ml-pca/node_modules/ml-matrix/src/util.js","webpack:///ml/./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/util.js","webpack:///ml/./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/util.js","webpack:///ml/./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/util.js","webpack:///ml/./node_modules/ml-naivebayes/node_modules/ml-matrix/src/util.js","webpack:///ml/./node_modules/ml-pls/node_modules/ml-matrix/src/util.js","webpack:///ml/./node_modules/ml-fnn/node_modules/ml-matrix/src/util.js","webpack:///ml/./node_modules/ml-matrix/src/dc/lu.js","webpack:///ml/./node_modules/ml-matrix/src/dc/util.js","webpack:///ml/./node_modules/extend/index.js","webpack:///ml/./node_modules/ml-regression-simple-linear/src/index.js","webpack:///ml/./node_modules/ml-kernel/src/kernel.js","webpack:///ml/./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/dc/util.js","webpack:///ml/./node_modules/ml-pca/node_modules/ml-matrix/src/dc/util.js","webpack:///ml/./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/index.js","webpack:///ml/./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/dc/util.js","webpack:///ml/./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/dc/util.js","webpack:///ml/./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/dc/util.js","webpack:///ml/./node_modules/ml-naivebayes/node_modules/ml-matrix/src/dc/util.js","webpack:///ml/./node_modules/ml-pls/node_modules/ml-matrix/src/index.js","webpack:///ml/./node_modules/ml-pls/node_modules/ml-matrix/src/dc/util.js","webpack:///ml/./node_modules/ml-pls/src/utils.js","webpack:///ml/./node_modules/ml-hclust/src/Cluster.js","webpack:///ml/./node_modules/ml-fnn/node_modules/ml-matrix/src/index.js","webpack:///ml/./node_modules/ml-fnn/node_modules/ml-matrix/src/dc/util.js","webpack:///ml/./node_modules/ml-matrix/src/dc/svd.js","webpack:///ml/./node_modules/ml-matrix/src/dc/qr.js","webpack:///ml/./node_modules/ml-hash-table/src/HashTable.js","webpack:///ml/./node_modules/binary-search/index.js","webpack:///ml/./node_modules/num-sort/index.js","webpack:///ml/./node_modules/ml-pad-array/src/index.js","webpack:///ml/./node_modules/ml-regression-polynomial/src/index.js","webpack:///ml/./node_modules/ml-distance/src/similarities/czekanowski.js","webpack:///ml/./node_modules/ml-distance/src/distances/dice.js","webpack:///ml/./node_modules/ml-distance/src/distances/intersection.js","webpack:///ml/./node_modules/ml-distance/src/distances/jaccard.js","webpack:///ml/./node_modules/ml-distance/src/distances/kulczynski.js","webpack:///ml/./node_modules/ml-distance/src/distances/motyka.js","webpack:///ml/./node_modules/ml-distance/src/distances/squaredChord.js","webpack:///ml/./node_modules/ml-distance/src/similarities/tanimoto.js","webpack:///ml/./node_modules/ml-distance/src/similarities/cosine.js","webpack:///ml/./node_modules/ml-distance-matrix/src/index.js","webpack:///ml/./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/abstractMatrix.js","webpack:///ml/./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/dc/lu.js","webpack:///ml/./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/dc/svd.js","webpack:///ml/./node_modules/ml-savitzky-golay-generalized/node_modules/ml-stat/array.js","webpack:///ml/./node_modules/ml-pca/node_modules/ml-matrix/src/abstractMatrix.js","webpack:///ml/./node_modules/ml-pca/node_modules/ml-matrix/src/dc/lu.js","webpack:///ml/./node_modules/ml-pca/node_modules/ml-matrix/src/dc/svd.js","webpack:///ml/./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/abstractMatrix.js","webpack:///ml/./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/dc/lu.js","webpack:///ml/./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/dc/svd.js","webpack:///ml/./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/abstractMatrix.js","webpack:///ml/./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/dc/lu.js","webpack:///ml/./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/dc/svd.js","webpack:///ml/./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/abstractMatrix.js","webpack:///ml/./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/dc/lu.js","webpack:///ml/./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/dc/svd.js","webpack:///ml/./node_modules/ml-confusion-matrix/src/index.js","webpack:///ml/./node_modules/ml-naivebayes/src/naiveBayes.js","webpack:///ml/./node_modules/ml-naivebayes/node_modules/ml-matrix/src/abstractMatrix.js","webpack:///ml/./node_modules/ml-naivebayes/node_modules/ml-matrix/src/dc/lu.js","webpack:///ml/./node_modules/ml-naivebayes/node_modules/ml-matrix/src/dc/svd.js","webpack:///ml/./node_modules/ml-pls/node_modules/ml-matrix/src/abstractMatrix.js","webpack:///ml/./node_modules/ml-pls/node_modules/ml-matrix/src/dc/lu.js","webpack:///ml/./node_modules/ml-pls/node_modules/ml-matrix/src/dc/svd.js","webpack:///ml/./node_modules/ml-kmeans/src/utils.js","webpack:///ml/./node_modules/ml-hclust/src/ClusterLeaf.js","webpack:///ml/./node_modules/ml-som/src/node-square.js","webpack:///ml/./node_modules/ml-fnn/node_modules/ml-matrix/src/abstractMatrix.js","webpack:///ml/./node_modules/ml-fnn/node_modules/ml-matrix/src/dc/lu.js","webpack:///ml/./node_modules/ml-fnn/node_modules/ml-matrix/src/dc/svd.js","webpack:///ml/./node_modules/ml-fnn/src/Layer.js","webpack:///ml/./node_modules/ml-fnn/src/utils.js","webpack:///ml/./src/index.js","webpack:///ml/./node_modules/ml-matrix/src/symbol-species.js","webpack:///ml/./node_modules/ml-array-utils/src/ArrayUtils.js","webpack:///ml/./node_modules/ml-stat/matrix.js","webpack:///ml/./node_modules/ml-array-utils/src/snv.js","webpack:///ml/./node_modules/ml-matrix/src/views/transpose.js","webpack:///ml/./node_modules/ml-matrix/src/views/row.js","webpack:///ml/./node_modules/ml-matrix/src/views/sub.js","webpack:///ml/./node_modules/ml-matrix/src/views/selection.js","webpack:///ml/./node_modules/ml-matrix/src/views/column.js","webpack:///ml/./node_modules/ml-matrix/src/views/flipRow.js","webpack:///ml/./node_modules/ml-matrix/src/views/flipColumn.js","webpack:///ml/./node_modules/ml-matrix/src/decompositions.js","webpack:///ml/./node_modules/ml-matrix/src/dc/evd.js","webpack:///ml/./node_modules/ml-matrix/src/dc/cholesky.js","webpack:///ml/./node_modules/ml-bit-array/src/index.js","webpack:///ml/./node_modules/ml-bit-array/src/creator.js","webpack:///ml/./node_modules/new-array/index.js","webpack:///ml/./node_modules/ml-hash-table/src/primeFinder.js","webpack:///ml/./node_modules/number-is-nan/index.js","webpack:///ml/./node_modules/ml-regression/src/index.js","webpack:///ml/./node_modules/ml-regression-base/src/maybeToPrecision.js","webpack:///ml/./node_modules/ml-regression-base/src/checkArrayLength.js","webpack:///ml/./node_modules/ml-regression-exponential/src/index.js","webpack:///ml/./node_modules/ml-regression-power/src/index.js","webpack:///ml/./node_modules/ml-regression-multivariate-linear/src/index.js","webpack:///ml/./node_modules/ml-regression/src/regression/kernel-ridge-regression.js","webpack:///ml/./node_modules/ml-kernel-gaussian/gaussian-kernel.js","webpack:///ml/./node_modules/ml-kernel-polynomial/polynomial-kernel.js","webpack:///ml/./node_modules/ml-kernel/src/kernels/anova-kernel.js","webpack:///ml/./node_modules/ml-kernel/src/kernels/cauchy-kernel.js","webpack:///ml/./node_modules/ml-kernel/src/kernels/exponential-kernel.js","webpack:///ml/./node_modules/ml-kernel/src/kernels/histogram-intersection-kernel.js","webpack:///ml/./node_modules/ml-kernel/src/kernels/laplacian-kernel.js","webpack:///ml/./node_modules/ml-kernel/src/kernels/multiquadratic-kernel.js","webpack:///ml/./node_modules/ml-kernel/src/kernels/rational-quadratic-kernel.js","webpack:///ml/./node_modules/ml-kernel-sigmoid/sigmoid-kernel.js","webpack:///ml/./node_modules/ml-regression/src/regression/poly-fit-regression2d.js","webpack:///ml/./node_modules/ml-regression-theil-sen/src/index.js","webpack:///ml/./node_modules/ml-regression-robust-polynomial/src/index.js","webpack:///ml/./node_modules/ml-regression/src/regression/potential-regression.js","webpack:///ml/./node_modules/ml-distance/src/index.js","webpack:///ml/./node_modules/ml-distance/src/distances.js","webpack:///ml/./node_modules/ml-distance/src/distances/additiveSymmetric.js","webpack:///ml/./node_modules/ml-distance/src/distances/avg.js","webpack:///ml/./node_modules/ml-distance/src/distances/bhattacharyya.js","webpack:///ml/./node_modules/ml-distance/src/distances/canberra.js","webpack:///ml/./node_modules/ml-distance/src/distances/chebyshev.js","webpack:///ml/./node_modules/ml-distance/src/distances/clark.js","webpack:///ml/./node_modules/ml-distance/src/distances/czekanowski.js","webpack:///ml/./node_modules/ml-distance/src/distances/divergence.js","webpack:///ml/./node_modules/ml-distance/src/distances/fidelity.js","webpack:///ml/./node_modules/ml-distance/src/distances/gower.js","webpack:///ml/./node_modules/ml-distance/src/distances/harmonicMean.js","webpack:///ml/./node_modules/ml-distance/src/distances/hellinger.js","webpack:///ml/./node_modules/ml-distance/src/distances/innerProduct.js","webpack:///ml/./node_modules/ml-distance/src/distances/jeffreys.js","webpack:///ml/./node_modules/ml-distance/src/distances/jensenDifference.js","webpack:///ml/./node_modules/ml-distance/src/distances/jensenShannon.js","webpack:///ml/./node_modules/ml-distance/src/distances/kdivergence.js","webpack:///ml/./node_modules/ml-distance/src/distances/kullbackLeibler.js","webpack:///ml/./node_modules/ml-distance/src/distances/kumarHassebrook.js","webpack:///ml/./node_modules/ml-distance/src/distances/kumarJohnson.js","webpack:///ml/./node_modules/ml-distance/src/distances/lorentzian.js","webpack:///ml/./node_modules/ml-distance/src/distances/manhattan.js","webpack:///ml/./node_modules/ml-distance/src/distances/matusita.js","webpack:///ml/./node_modules/ml-distance/src/distances/minkowski.js","webpack:///ml/./node_modules/ml-distance/src/distances/neyman.js","webpack:///ml/./node_modules/ml-distance/src/distances/pearson.js","webpack:///ml/./node_modules/ml-distance/src/distances/probabilisticSymmetric.js","webpack:///ml/./node_modules/ml-distance/src/distances/ruzicka.js","webpack:///ml/./node_modules/ml-distance/src/distances/soergel.js","webpack:///ml/./node_modules/ml-distance/src/distances/sorensen.js","webpack:///ml/./node_modules/ml-distance/src/distances/squared.js","webpack:///ml/./node_modules/ml-distance/src/distances/taneja.js","webpack:///ml/./node_modules/ml-distance/src/distances/tanimoto.js","webpack:///ml/./node_modules/ml-distance/src/distances/topsoe.js","webpack:///ml/./node_modules/ml-tree-similarity/src/index.js","webpack:///ml/./node_modules/ml-distance/src/distances/waveHedges.js","webpack:///ml/./node_modules/ml-distance/src/similarities.js","webpack:///ml/./node_modules/ml-distance/src/similarities/dice.js","webpack:///ml/./node_modules/ml-distance/src/similarities/intersection.js","webpack:///ml/./node_modules/ml-distance/src/similarities/jaccard.js","webpack:///ml/./node_modules/ml-distance/src/similarities/kulczynski.js","webpack:///ml/./node_modules/ml-distance/src/similarities/motyka.js","webpack:///ml/./node_modules/ml-distance/src/similarities/pearson.js","webpack:///ml/./node_modules/ml-distance/src/similarities/squaredChord.js","webpack:///ml/./node_modules/ml-savitzky-golay/src/index.js","webpack:///ml/./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/index.js","webpack:///ml/./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/symbol-species.js","webpack:///ml/./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/views/transpose.js","webpack:///ml/./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/views/row.js","webpack:///ml/./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/views/sub.js","webpack:///ml/./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/views/selection.js","webpack:///ml/./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/views/column.js","webpack:///ml/./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/views/flipRow.js","webpack:///ml/./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/views/flipColumn.js","webpack:///ml/./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/decompositions.js","webpack:///ml/./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/dc/evd.js","webpack:///ml/./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/dc/qr.js","webpack:///ml/./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/dc/cholesky.js","webpack:///ml/./node_modules/ml-savitzky-golay-generalized/src/index.js","webpack:///ml/./node_modules/ml-savitzky-golay-generalized/node_modules/ml-stat/index.js","webpack:///ml/./node_modules/ml-savitzky-golay-generalized/node_modules/ml-stat/matrix.js","webpack:///ml/./node_modules/ml-sparse-matrix/src/SparseMatrix.js","webpack:///ml/./node_modules/ml-pca/src/pca.js","webpack:///ml/./node_modules/ml-pca/node_modules/ml-matrix/src/index.js","webpack:///ml/./node_modules/ml-pca/node_modules/ml-matrix/src/symbol-species.js","webpack:///ml/./node_modules/ml-pca/node_modules/ml-matrix/src/views/transpose.js","webpack:///ml/./node_modules/ml-pca/node_modules/ml-matrix/src/views/row.js","webpack:///ml/./node_modules/ml-pca/node_modules/ml-matrix/src/views/sub.js","webpack:///ml/./node_modules/ml-pca/node_modules/ml-matrix/src/views/selection.js","webpack:///ml/./node_modules/ml-pca/node_modules/ml-matrix/src/views/column.js","webpack:///ml/./node_modules/ml-pca/node_modules/ml-matrix/src/views/flipRow.js","webpack:///ml/./node_modules/ml-pca/node_modules/ml-matrix/src/views/flipColumn.js","webpack:///ml/./node_modules/ml-pca/node_modules/ml-matrix/src/decompositions.js","webpack:///ml/./node_modules/ml-pca/node_modules/ml-matrix/src/dc/evd.js","webpack:///ml/./node_modules/ml-pca/node_modules/ml-matrix/src/dc/qr.js","webpack:///ml/./node_modules/ml-pca/node_modules/ml-matrix/src/dc/cholesky.js","webpack:///ml/./node_modules/ml-performance/src/index.js","webpack:///ml/./node_modules/ml-performance/src/measures.js","webpack:///ml/./node_modules/ml-optimize-lorentzian/src/index.js","webpack:///ml/./node_modules/ml-curve-fitting/src/index.js","webpack:///ml/./node_modules/ml-curve-fitting/src/LM.js","webpack:///ml/./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/symbol-species.js","webpack:///ml/./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/views/transpose.js","webpack:///ml/./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/views/row.js","webpack:///ml/./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/views/sub.js","webpack:///ml/./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/views/selection.js","webpack:///ml/./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/views/column.js","webpack:///ml/./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/views/flipRow.js","webpack:///ml/./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/views/flipColumn.js","webpack:///ml/./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/decompositions.js","webpack:///ml/./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/dc/evd.js","webpack:///ml/./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/dc/qr.js","webpack:///ml/./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/dc/cholesky.js","webpack:///ml/./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/index.js","webpack:///ml/./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/symbol-species.js","webpack:///ml/./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/views/transpose.js","webpack:///ml/./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/views/row.js","webpack:///ml/./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/views/sub.js","webpack:///ml/./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/views/selection.js","webpack:///ml/./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/views/column.js","webpack:///ml/./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/views/flipRow.js","webpack:///ml/./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/views/flipColumn.js","webpack:///ml/./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/decompositions.js","webpack:///ml/./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/dc/evd.js","webpack:///ml/./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/dc/qr.js","webpack:///ml/./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/dc/cholesky.js","webpack:///ml/./node_modules/ml-levenberg-marquardt/src/index.js","webpack:///ml/./node_modules/ml-levenberg-marquardt/src/errorCalculation.js","webpack:///ml/./node_modules/ml-levenberg-marquardt/src/step.js","webpack:///ml/./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/index.js","webpack:///ml/./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/symbol-species.js","webpack:///ml/./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/views/transpose.js","webpack:///ml/./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/views/row.js","webpack:///ml/./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/views/sub.js","webpack:///ml/./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/views/selection.js","webpack:///ml/./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/views/column.js","webpack:///ml/./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/views/flipRow.js","webpack:///ml/./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/views/flipColumn.js","webpack:///ml/./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/decompositions.js","webpack:///ml/./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/dc/evd.js","webpack:///ml/./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/dc/qr.js","webpack:///ml/./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/dc/cholesky.js","webpack:///ml/./node_modules/ml-xsadd/xsadd-es5.js","webpack:///ml/./node_modules/ml-cross-validation/src/index.js","webpack:///ml/./node_modules/ml-combinations/src/index.js","webpack:///ml/./node_modules/ml-svm/src/svm.js","webpack:///ml/./node_modules/ml-knn/src/index.js","webpack:///ml/./node_modules/ml-knn/src/kdTree.js","webpack:///ml/./node_modules/ml-naivebayes/src/index.js","webpack:///ml/./node_modules/ml-naivebayes/node_modules/ml-matrix/src/index.js","webpack:///ml/./node_modules/ml-naivebayes/node_modules/ml-matrix/src/symbol-species.js","webpack:///ml/./node_modules/ml-naivebayes/node_modules/ml-matrix/src/views/transpose.js","webpack:///ml/./node_modules/ml-naivebayes/node_modules/ml-matrix/src/views/row.js","webpack:///ml/./node_modules/ml-naivebayes/node_modules/ml-matrix/src/views/sub.js","webpack:///ml/./node_modules/ml-naivebayes/node_modules/ml-matrix/src/views/selection.js","webpack:///ml/./node_modules/ml-naivebayes/node_modules/ml-matrix/src/views/column.js","webpack:///ml/./node_modules/ml-naivebayes/node_modules/ml-matrix/src/views/flipRow.js","webpack:///ml/./node_modules/ml-naivebayes/node_modules/ml-matrix/src/views/flipColumn.js","webpack:///ml/./node_modules/ml-naivebayes/node_modules/ml-matrix/src/decompositions.js","webpack:///ml/./node_modules/ml-naivebayes/node_modules/ml-matrix/src/dc/evd.js","webpack:///ml/./node_modules/ml-naivebayes/node_modules/ml-matrix/src/dc/qr.js","webpack:///ml/./node_modules/ml-naivebayes/node_modules/ml-matrix/src/dc/cholesky.js","webpack:///ml/./node_modules/ml-pls/src/index.js","webpack:///ml/./node_modules/ml-pls/src/pls.js","webpack:///ml/./node_modules/ml-pls/node_modules/ml-matrix/src/symbol-species.js","webpack:///ml/./node_modules/ml-pls/node_modules/ml-matrix/src/views/transpose.js","webpack:///ml/./node_modules/ml-pls/node_modules/ml-matrix/src/views/row.js","webpack:///ml/./node_modules/ml-pls/node_modules/ml-matrix/src/views/sub.js","webpack:///ml/./node_modules/ml-pls/node_modules/ml-matrix/src/views/selection.js","webpack:///ml/./node_modules/ml-pls/node_modules/ml-matrix/src/views/column.js","webpack:///ml/./node_modules/ml-pls/node_modules/ml-matrix/src/views/flipRow.js","webpack:///ml/./node_modules/ml-pls/node_modules/ml-matrix/src/views/flipColumn.js","webpack:///ml/./node_modules/ml-pls/node_modules/ml-matrix/src/decompositions.js","webpack:///ml/./node_modules/ml-pls/node_modules/ml-matrix/src/dc/evd.js","webpack:///ml/./node_modules/ml-pls/node_modules/ml-matrix/src/dc/qr.js","webpack:///ml/./node_modules/ml-pls/node_modules/ml-matrix/src/dc/cholesky.js","webpack:///ml/./node_modules/ml-pls/src/opls.js","webpack:///ml/./node_modules/ml-kmeans/src/kmeans.js","webpack:///ml/./node_modules/ml-nearest-vector/src/index.js","webpack:///ml/./node_modules/ml-kmeans/src/initialization.js","webpack:///ml/./node_modules/RandomSelection/lib/Picker.js","webpack:///ml/./node_modules/ml-kmeans/src/KMeansResult.js","webpack:///ml/./node_modules/ml-hclust/src/index.js","webpack:///ml/./node_modules/ml-hclust/src/agnes.js","webpack:///ml/./node_modules/heap/index.js","webpack:///ml/./node_modules/heap/lib/heap.js","webpack:///ml/./node_modules/util/util.js","webpack:///ml/(webpack)/buildin/global.js","webpack:///ml/./node_modules/process/browser.js","webpack:///ml/./node_modules/util/support/isBufferBrowser.js","webpack:///ml/./node_modules/util/node_modules/inherits/inherits_browser.js","webpack:///ml/./node_modules/ml-hclust/src/diana.js","webpack:///ml/./node_modules/ml-som/src/index.js","webpack:///ml/./node_modules/ml-som/src/node-hexagonal.js","webpack:///ml/./node_modules/ml-fnn/src/FeedForwardNeuralNetwork.js","webpack:///ml/./node_modules/ml-fnn/node_modules/ml-matrix/src/symbol-species.js","webpack:///ml/./node_modules/ml-fnn/node_modules/ml-matrix/src/views/transpose.js","webpack:///ml/./node_modules/ml-fnn/node_modules/ml-matrix/src/views/row.js","webpack:///ml/./node_modules/ml-fnn/node_modules/ml-matrix/src/views/sub.js","webpack:///ml/./node_modules/ml-fnn/node_modules/ml-matrix/src/views/selection.js","webpack:///ml/./node_modules/ml-fnn/node_modules/ml-matrix/src/views/column.js","webpack:///ml/./node_modules/ml-fnn/node_modules/ml-matrix/src/views/flipRow.js","webpack:///ml/./node_modules/ml-fnn/node_modules/ml-matrix/src/views/flipColumn.js","webpack:///ml/./node_modules/ml-fnn/node_modules/ml-matrix/src/decompositions.js","webpack:///ml/./node_modules/ml-fnn/node_modules/ml-matrix/src/dc/evd.js","webpack:///ml/./node_modules/ml-fnn/node_modules/ml-matrix/src/dc/qr.js","webpack:///ml/./node_modules/ml-fnn/node_modules/ml-matrix/src/dc/cholesky.js","webpack:///ml/./node_modules/ml-fnn/src/OutputLayer.js"],"names":[],"mappings":"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","file":"ml.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ML\"] = factory();\n\telse\n\t\troot[\"ML\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","'use strict';\n\n/**\n *\n * Function that returns a Number array of equally spaced numberOfPoints\n * containing a representation of intensities of the spectra arguments x\n * and y.\n *\n * The options parameter contains an object in the following form:\n * from: starting point\n * to: last point\n * numberOfPoints: number of points between from and to\n * variant: \"slot\" or \"smooth\" - smooth is the default option\n *\n * The slot variant consist that each point in the new array is calculated\n * averaging the existing points between the slot that belongs to the current\n * value. The smooth variant is the same but takes the integral of the range\n * of the slot and divide by the step size between two points in the new array.\n *\n * @param x - sorted increasing x values\n * @param y\n * @param options\n * @returns {Array} new array with the equally spaced data.\n *\n */\nfunction getEquallySpacedData(x, y, options) {\n    if (x.length>1 && x[0]>x[1]) {\n        x=x.slice().reverse();\n        y=y.slice().reverse();\n    }\n\n    var xLength = x.length;\n    if(xLength !== y.length)\n        throw new RangeError(\"the x and y vector doesn't have the same size.\");\n\n    if (options === undefined) options = {};\n\n    var from = options.from === undefined ? x[0] : options.from\n    if (isNaN(from) || !isFinite(from)) {\n        throw new RangeError(\"'From' value must be a number\");\n    }\n    var to = options.to === undefined ? x[x.length - 1] : options.to;\n    if (isNaN(to) || !isFinite(to)) {\n        throw new RangeError(\"'To' value must be a number\");\n    }\n\n    var reverse = from > to;\n    if(reverse) {\n        var temp = from;\n        from = to;\n        to = temp;\n    }\n\n    var numberOfPoints = options.numberOfPoints === undefined ? 100 : options.numberOfPoints;\n    if (isNaN(numberOfPoints) || !isFinite(numberOfPoints)) {\n        throw new RangeError(\"'Number of points' value must be a number\");\n    }\n    if(numberOfPoints < 1)\n        throw new RangeError(\"the number of point must be higher than 1\");\n\n    var algorithm = options.variant === \"slot\" ? \"slot\" : \"smooth\"; // default value: smooth\n\n    var output = algorithm === \"slot\" ? getEquallySpacedSlot(x, y, from, to, numberOfPoints) : getEquallySpacedSmooth(x, y, from, to, numberOfPoints);\n\n    return reverse ? output.reverse() : output;\n}\n\n/**\n * function that retrieves the getEquallySpacedData with the variant \"smooth\"\n *\n * @param x\n * @param y\n * @param from - Initial point\n * @param to - Final point\n * @param numberOfPoints\n * @returns {Array} - Array of y's equally spaced with the variant \"smooth\"\n */\nfunction getEquallySpacedSmooth(x, y, from, to, numberOfPoints) {\n    var xLength = x.length;\n\n    var step = (to - from) / (numberOfPoints - 1);\n    var halfStep = step / 2;\n\n    var start = from - halfStep;\n    var output = new Array(numberOfPoints);\n\n    var initialOriginalStep = x[1] - x[0];\n    var lastOriginalStep = x[x.length - 1] - x[x.length - 2];\n\n    // Init main variables\n    var min = start;\n    var max = start + step;\n\n    var previousX = Number.MIN_VALUE;\n    var previousY = 0;\n    var nextX = x[0] - initialOriginalStep;\n    var nextY = 0;\n\n    var currentValue = 0;\n    var slope = 0;\n    var intercept = 0;\n    var sumAtMin = 0;\n    var sumAtMax = 0;\n\n    var i = 0; // index of input\n    var j = 0; // index of output\n\n    function getSlope(x0, y0, x1, y1) {\n        return (y1 - y0) / (x1 - x0);\n    }\n\n    main: while(true) {\n        while (nextX - max >= 0) {\n            // no overlap with original point, just consume current value\n            var add = integral(0, max - previousX, slope, previousY);\n            sumAtMax = currentValue + add;\n\n            output[j] = (sumAtMax - sumAtMin) / step;\n            j++;\n\n            if (j === numberOfPoints)\n                break main;\n\n            min = max;\n            max += step;\n            sumAtMin = sumAtMax;\n        }\n\n        if(previousX <= min && min <= nextX) {\n            add = integral(0, min - previousX, slope, previousY);\n            sumAtMin = currentValue + add;\n        }\n\n        currentValue += integral(previousX, nextX, slope, intercept);\n\n        previousX = nextX;\n        previousY = nextY;\n\n        if (i < xLength) {\n            nextX = x[i];\n            nextY = y[i];\n            i++;\n        } else if (i === xLength) {\n            nextX += lastOriginalStep;\n            nextY = 0;\n        }\n        // updating parameters\n        slope = getSlope(previousX, previousY, nextX, nextY);\n        intercept = -slope*previousX + previousY;\n    }\n\n    return output;\n}\n\n/**\n * function that retrieves the getEquallySpacedData with the variant \"slot\"\n *\n * @param x\n * @param y\n * @param from - Initial point\n * @param to - Final point\n * @param numberOfPoints\n * @returns {Array} - Array of y's equally spaced with the variant \"slot\"\n */\nfunction getEquallySpacedSlot(x, y, from, to, numberOfPoints) {\n    var xLength = x.length;\n\n    var step = (to - from) / (numberOfPoints - 1);\n    var halfStep = step / 2;\n    var lastStep = x[x.length - 1] - x[x.length - 2];\n\n    var start = from - halfStep;\n    var output = new Array(numberOfPoints);\n\n    // Init main variables\n    var min = start;\n    var max = start + step;\n\n    var previousX = -Number.MAX_VALUE;\n    var previousY = 0;\n    var nextX = x[0];\n    var nextY = y[0];\n    var frontOutsideSpectra = 0;\n    var backOutsideSpectra = true;\n\n    var currentValue = 0;\n\n    // for slot algorithm\n    var currentPoints = 0;\n\n    var i = 1; // index of input\n    var j = 0; // index of output\n\n    main: while(true) {\n        if (previousX>=nextX) throw (new Error('x must be an increasing serie'));\n        while (previousX - max > 0) {\n            // no overlap with original point, just consume current value\n            if(backOutsideSpectra) {\n                currentPoints++;\n                backOutsideSpectra = false;\n            }\n\n            output[j] = currentPoints <= 0 ? 0 : currentValue / currentPoints;\n            j++;\n\n            if (j === numberOfPoints)\n                break main;\n\n            min = max;\n            max += step;\n            currentValue = 0;\n            currentPoints = 0;\n        }\n\n        if(previousX > min) {\n            currentValue += previousY;\n            currentPoints++;\n        }\n\n        if(previousX === -Number.MAX_VALUE || frontOutsideSpectra > 1)\n            currentPoints--;\n\n        previousX = nextX;\n        previousY = nextY;\n\n        if (i < xLength) {\n            nextX = x[i];\n            nextY = y[i];\n            i++;\n        } else {\n            nextX += lastStep;\n            nextY = 0;\n            frontOutsideSpectra++;\n        }\n    }\n\n    return output;\n}\n/**\n * Function that calculates the integral of the line between two\n * x-coordinates, given the slope and intercept of the line.\n *\n * @param x0\n * @param x1\n * @param slope\n * @param intercept\n * @returns {number} integral value.\n */\nfunction integral(x0, x1, slope, intercept) {\n    return (0.5 * slope * x1 * x1 + intercept * x1) - (0.5 * slope * x0 * x0 + intercept * x0);\n}\n\nexports.getEquallySpacedData = getEquallySpacedData;\nexports.integral = integral;\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-array-utils/src/getEquallySpaced.js","'use strict';\n\nfunction logistic(val) {\n    return 1 / (1 + Math.exp(-val));\n}\n\nfunction expELU(val, param) {\n    return val < 0 ? param * (Math.exp(val) - 1) : val;\n}\n\nfunction softExponential(val, param) {\n    if (param < 0) {\n        return -Math.log(1 - param * (val + param)) / param;\n    }\n    if (param > 0) {\n        return ((Math.exp(param * val) - 1) / param) + param;\n    }\n    return val;\n}\n\nfunction softExponentialPrime(val, param) {\n    if (param < 0) {\n        return 1 / (1 - param * (param + val));\n    } else {\n        return Math.exp(param * val);\n    }\n}\n\nconst ACTIVATION_FUNCTIONS = {\n    'tanh': {\n        activation: Math.tanh,\n        derivate: val => 1 - (val * val)\n    },\n    'identity': {\n        activation: val => val,\n        derivate: () => 1\n    },\n    'logistic': {\n        activation: logistic,\n        derivate: val => logistic(val) * (1 - logistic(val))\n    },\n    'arctan': {\n        activation: Math.atan,\n        derivate: val => 1 / (val * val + 1)\n    },\n    'softsign': {\n        activation: val => val / (1 + Math.abs(val)),\n        derivate: val => 1 / ((1 + Math.abs(val)) * (1 + Math.abs(val)))\n    },\n    'relu': {\n        activation: val => val < 0 ? 0 : val,\n        derivate: val => val < 0 ? 0 : 1\n    },\n    'softplus': {\n        activation: val => Math.log(1 + Math.exp(val)),\n        derivate: val => 1 / (1 + Math.exp(-val))\n    },\n    'bent': {\n        activation: val => ((Math.sqrt(val * val + 1) - 1) / 2) + val,\n        derivate: val => (val / (2 * Math.sqrt(val * val + 1))) + 1\n    },\n    'sinusoid': {\n        activation: Math.sin,\n        derivate: Math.cos\n    },\n    'sinc': {\n        activation: val => val === 0 ? 1 : Math.sin(val) / val,\n        derivate: val => val === 0 ? 0 : (Math.cos(val) / val) - (Math.sin(val) / (val * val))\n    },\n    'gaussian': {\n        activation: val => Math.exp(-(val * val)),\n        derivate: val => -2 * val * Math.exp(-(val * val))\n    },\n    'parametric-relu': {\n        activation: (val, param) => val < 0 ? param * val : val,\n        derivate: (val, param) => val < 0 ? param : 1\n    },\n    'exponential-elu': {\n        activation: expELU,\n        derivate: (val, param) => val < 0 ? expELU(val, param) + param : 1\n    },\n    'soft-exponential': {\n        activation: softExponential,\n        derivate: softExponentialPrime\n    }\n};\n\nmodule.exports = ACTIVATION_FUNCTIONS;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-fnn/src/activationFunctions.js","/**\n * Created by acastillo on 8/24/15.\n */\n/**\n * Non in-place function definitions, compatible with mathjs code *\n */\n\n'use strict';\n\nvar Matrix = require('ml-matrix');\n\nfunction matrix(A,B){\n    return new Matrix(A,B);\n}\n\nfunction ones(rows, cols){\n    return Matrix.ones(rows,cols);\n}\n\nfunction eye(rows, cols){\n    return Matrix.eye(rows, cols);\n}\n\nfunction zeros(rows, cols){\n    return Matrix.zeros(rows, cols);\n}\n\nfunction random(rows, cols){\n    return Matrix.rand(rows,cols);\n}\n\nfunction transpose(A){\n    if(typeof A == 'number')\n        return A;\n    var result = A.clone();\n    return result.transpose();\n}\n\nfunction add(A, B){\n    if(typeof A == 'number'&&typeof B === 'number')\n        return A+B;\n    if(typeof A == 'number')\n        return this.add(B,A);\n\n    var result = A.clone();\n    return result.add(B);\n\n}\n\nfunction subtract(A, B){\n    if(typeof A == 'number'&&typeof B === 'number')\n        return A-B;\n    if(typeof A == 'number')\n        return this.subtract(B,A);\n    var result = A.clone();\n    return result.sub(B);\n}\n\nfunction multiply(A, B){\n    if(typeof A == 'number'&&typeof B === 'number')\n        return A*B;\n    if(typeof A == 'number')\n        return this.multiply(B,A);\n\n    var result = A.clone();\n\n    if(typeof B === 'number')\n        result.mul(B);\n    else\n        result = result.mmul(B);\n\n    if(result.rows==1&&result.columns==1)\n        return result[0][0];\n    else\n        return result;\n\n}\n\nfunction dotMultiply(A, B){\n    var result = A.clone();\n    return result.mul(B);\n}\n\nfunction dotDivide(A, B){\n    var result = A.clone();\n    return result.div(B);\n}\n\nfunction diag(A){\n    var diag = null;\n    var rows = A.rows, cols = A.columns, j, r;\n    //It is an array\n    if(typeof cols === \"undefined\" && (typeof A)=='object'){\n        if(A[0]&&A[0].length){\n            rows = A.length;\n            cols = A[0].length;\n            r = Math.min(rows,cols);\n            diag = Matrix.zeros(cols, cols);\n            for (j = 0; j < cols; j++) {\n                diag[j][j]=A[j][j];\n            }\n        }\n        else{\n            cols = A.length;\n            diag = Matrix.zeros(cols, cols);\n            for (j = 0; j < cols; j++) {\n                diag[j][j]=A[j];\n            }\n        }\n\n    }\n    if(rows == 1){\n        diag = Matrix.zeros(cols, cols);\n        for (j = 0; j < cols; j++) {\n            diag[j][j]=A[0][j];\n        }\n    }\n    else{\n        if(rows>0 && cols > 0){\n            r = Math.min(rows,cols);\n            diag = new Array(r);\n            for (j = 0; j < r; j++) {\n                diag[j] = A[j][j];\n            }\n        }\n    }\n    return diag;\n}\n\nfunction min(A, B){\n    if(typeof A==='number' && typeof B ==='number')\n        return Math.min(A,B);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (A[i][j] < B[i][j]) {\n                result[i][j] = A[i][j];\n            }\n            else{\n                result[i][j] = B[i][j];\n            }\n        }\n    }\n    return result;\n}\n\nfunction max(A, B){\n    if(typeof A==='number' && typeof B ==='number')\n        return Math.max(A,B);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (A[i][j] > B[i][j]) {\n                result[i][j] = A[i][j];\n            }\n            else{\n                result[i][j] = B[i][j];\n            }\n        }\n    }\n    return result;\n}\n\nfunction sqrt(A){\n    if(typeof A==='number' )\n        return Math.sqrt(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.sqrt(A[i][j]);\n\n        }\n    }\n    return result;\n}\n\nfunction abs(A){\n    if(typeof A==='number' )\n        return Math.abs(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.abs(A[i][j]);\n\n        }\n    }\n    return result;\n}\n\nfunction exp(A){\n    if(typeof A==='number' )\n        return Math.sqrt(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.exp(A[i][j]);\n        }\n    }\n    return result;\n}\n\nfunction dotPow(A, b){\n    if(typeof A==='number' )\n        return Math.pow(A,b);\n    //console.log(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.pow(A[i][j],b);\n        }\n    }\n    return result;\n}\n\nfunction solve(A, B){\n    return A.solve(B);\n}\n\nfunction inv(A){\n    if(typeof A ===\"number\")\n        return 1/A;\n    return A.inverse();\n}\n\nmodule.exports = {\n    transpose:transpose,\n    add:add,\n    subtract:subtract,\n    multiply:multiply,\n    dotMultiply:dotMultiply,\n    dotDivide:dotDivide,\n    diag:diag,\n    min:min,\n    max:max,\n    solve:solve,\n    inv:inv,\n    sqrt:sqrt,\n    exp:exp,\n    dotPow:dotPow,\n    abs:abs,\n    matrix:matrix,\n    ones:ones,\n    zeros:zeros,\n    random:random,\n    eye:eye\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-curve-fitting/src/algebra.js","'use strict';\n\nfunction compareNumbers(a, b) {\n    return a - b;\n}\n\n/**\n * Computes the sum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.sum = function sum(values) {\n    var sum = 0;\n    for (var i = 0; i < values.length; i++) {\n        sum += values[i];\n    }\n    return sum;\n};\n\n/**\n * Computes the maximum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.max = function max(values) {\n    var max = values[0];\n    var l = values.length;\n    for (var i = 1; i < l; i++) {\n        if (values[i] > max) max = values[i];\n    }\n    return max;\n};\n\n/**\n * Computes the minimum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.min = function min(values) {\n    var min = values[0];\n    var l = values.length;\n    for (var i = 1; i < l; i++) {\n        if (values[i] < min) min = values[i];\n    }\n    return min;\n};\n\n/**\n * Computes the min and max of the given values\n * @param {Array} values\n * @returns {{min: number, max: number}}\n */\nexports.minMax = function minMax(values) {\n    var min = values[0];\n    var max = values[0];\n    var l = values.length;\n    for (var i = 1; i < l; i++) {\n        if (values[i] < min) min = values[i];\n        if (values[i] > max) max = values[i];\n    }\n    return {\n        min: min,\n        max: max\n    };\n};\n\n/**\n * Computes the arithmetic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.arithmeticMean = function arithmeticMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        sum += values[i];\n    }\n    return sum / l;\n};\n\n/**\n * {@link arithmeticMean}\n */\nexports.mean = exports.arithmeticMean;\n\n/**\n * Computes the geometric mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.geometricMean = function geometricMean(values) {\n    var mul = 1;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        mul *= values[i];\n    }\n    return Math.pow(mul, 1 / l);\n};\n\n/**\n * Computes the mean of the log of the given values\n * If the return value is exponentiated, it gives the same result as the\n * geometric mean.\n * @param {Array} values\n * @returns {number}\n */\nexports.logMean = function logMean(values) {\n    var lnsum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        lnsum += Math.log(values[i]);\n    }\n    return lnsum / l;\n};\n\n/**\n * Computes the weighted grand mean for a list of means and sample sizes\n * @param {Array} means - Mean values for each set of samples\n * @param {Array} samples - Number of original values for each set of samples\n * @returns {number}\n */\nexports.grandMean = function grandMean(means, samples) {\n    var sum = 0;\n    var n = 0;\n    var l = means.length;\n    for (var i = 0; i < l; i++) {\n        sum += samples[i] * means[i];\n        n += samples[i];\n    }\n    return sum / n;\n};\n\n/**\n * Computes the truncated mean of the given values using a given percentage\n * @param {Array} values\n * @param {number} percent - The percentage of values to keep (range: [0,1])\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.truncatedMean = function truncatedMean(values, percent, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = [].concat(values).sort(compareNumbers);\n    }\n    var l = values.length;\n    var k = Math.floor(l * percent);\n    var sum = 0;\n    for (var i = k; i < (l - k); i++) {\n        sum += values[i];\n    }\n    return sum / (l - 2 * k);\n};\n\n/**\n * Computes the harmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.harmonicMean = function harmonicMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] === 0) {\n            throw new RangeError('value at index ' + i + 'is zero');\n        }\n        sum += 1 / values[i];\n    }\n    return l / sum;\n};\n\n/**\n * Computes the contraharmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.contraHarmonicMean = function contraHarmonicMean(values) {\n    var r1 = 0;\n    var r2 = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        r1 += values[i] * values[i];\n        r2 += values[i];\n    }\n    if (r2 < 0) {\n        throw new RangeError('sum of values is negative');\n    }\n    return r1 / r2;\n};\n\n/**\n * Computes the median of the given values\n * @param {Array} values\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.median = function median(values, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = [].concat(values).sort(compareNumbers);\n    }\n    var l = values.length;\n    var half = Math.floor(l / 2);\n    if (l % 2 === 0) {\n        return (values[half - 1] + values[half]) * 0.5;\n    } else {\n        return values[half];\n    }\n};\n\n/**\n * Computes the variance of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.variance = function variance(values, unbiased) {\n    if (unbiased === undefined) unbiased = true;\n    var theMean = exports.mean(values);\n    var theVariance = 0;\n    var l = values.length;\n\n    for (var i = 0; i < l; i++) {\n        var x = values[i] - theMean;\n        theVariance += x * x;\n    }\n\n    if (unbiased) {\n        return theVariance / (l - 1);\n    } else {\n        return theVariance / l;\n    }\n};\n\n/**\n * Computes the standard deviation of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.standardDeviation = function standardDeviation(values, unbiased) {\n    return Math.sqrt(exports.variance(values, unbiased));\n};\n\nexports.standardError = function standardError(values) {\n    return exports.standardDeviation(values) / Math.sqrt(values.length);\n};\n\n/**\n * IEEE Transactions on biomedical engineering, vol. 52, no. 1, january 2005, p. 76-\n * Calculate the standard deviation via the Median of the absolute deviation\n *  The formula for the standard deviation only holds for Gaussian random variables.\n * @returns {{mean: number, stdev: number}}\n */\nexports.robustMeanAndStdev = function robustMeanAndStdev(y) {\n    var mean = 0, stdev = 0;\n    var length = y.length, i = 0;\n    for (i = 0; i < length; i++) {\n        mean += y[i];\n    }\n    mean /= length;\n    var averageDeviations = new Array(length);\n    for (i = 0; i < length; i++)\n        averageDeviations[i] = Math.abs(y[i] - mean);\n    averageDeviations.sort(compareNumbers);\n    if (length % 2 === 1) {\n        stdev = averageDeviations[(length - 1) / 2] / 0.6745;\n    } else {\n        stdev = 0.5 * (averageDeviations[length / 2] + averageDeviations[length / 2 - 1]) / 0.6745;\n    }\n\n    return {\n        mean: mean,\n        stdev: stdev\n    };\n};\n\nexports.quartiles = function quartiles(values, alreadySorted) {\n    if (typeof (alreadySorted) === 'undefined') alreadySorted = false;\n    if (!alreadySorted) {\n        values = [].concat(values).sort(compareNumbers);\n    }\n\n    var quart = values.length / 4;\n    var q1 = values[Math.ceil(quart) - 1];\n    var q2 = exports.median(values, true);\n    var q3 = values[Math.ceil(quart * 3) - 1];\n\n    return {q1: q1, q2: q2, q3: q3};\n};\n\nexports.pooledStandardDeviation = function pooledStandardDeviation(samples, unbiased) {\n    return Math.sqrt(exports.pooledVariance(samples, unbiased));\n};\n\nexports.pooledVariance = function pooledVariance(samples, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var sum = 0;\n    var length = 0, l = samples.length;\n    for (var i = 0; i < l; i++) {\n        var values = samples[i];\n        var vari = exports.variance(values);\n\n        sum += (values.length - 1) * vari;\n\n        if (unbiased)\n            length += values.length - 1;\n        else\n            length += values.length;\n    }\n    return sum / length;\n};\n\nexports.mode = function mode(values) {\n    var l = values.length,\n        itemCount = new Array(l),\n        i;\n    for (i = 0; i < l; i++) {\n        itemCount[i] = 0;\n    }\n    var itemArray = new Array(l);\n    var count = 0;\n\n    for (i = 0; i < l; i++) {\n        var index = itemArray.indexOf(values[i]);\n        if (index >= 0)\n            itemCount[index]++;\n        else {\n            itemArray[count] = values[i];\n            itemCount[count] = 1;\n            count++;\n        }\n    }\n\n    var maxValue = 0, maxIndex = 0;\n    for (i = 0; i < count; i++) {\n        if (itemCount[i] > maxValue) {\n            maxValue = itemCount[i];\n            maxIndex = i;\n        }\n    }\n\n    return itemArray[maxIndex];\n};\n\nexports.covariance = function covariance(vector1, vector2, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var mean1 = exports.mean(vector1);\n    var mean2 = exports.mean(vector2);\n\n    if (vector1.length !== vector2.length)\n        throw 'Vectors do not have the same dimensions';\n\n    var cov = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        var x = vector1[i] - mean1;\n        var y = vector2[i] - mean2;\n        cov += x * y;\n    }\n\n    if (unbiased)\n        return cov / (l - 1);\n    else\n        return cov / l;\n};\n\nexports.skewness = function skewness(values, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n\n    var s2 = 0, s3 = 0, l = values.length;\n    for (var i = 0; i < l; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s3 += dev * dev * dev;\n    }\n    var m2 = s2 / l;\n    var m3 = s3 / l;\n\n    var g = m3 / (Math.pow(m2, 3 / 2.0));\n    if (unbiased) {\n        var a = Math.sqrt(l * (l - 1));\n        var b = l - 2;\n        return (a / b) * g;\n    } else {\n        return g;\n    }\n};\n\nexports.kurtosis = function kurtosis(values, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n    var n = values.length, s2 = 0, s4 = 0;\n\n    for (var i = 0; i < n; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s4 += dev * dev * dev * dev;\n    }\n    var m2 = s2 / n;\n    var m4 = s4 / n;\n\n    if (unbiased) {\n        var v = s2 / (n - 1);\n        var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n        var b = s4 / (v * v);\n        var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\n        return a * b - 3 * c;\n    } else {\n        return m4 / (m2 * m2) - 3;\n    }\n};\n\nexports.entropy = function entropy(values, eps) {\n    if (typeof (eps) === 'undefined') eps = 0;\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * Math.log(values[i] + eps);\n    return -sum;\n};\n\nexports.weightedMean = function weightedMean(values, weights) {\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * weights[i];\n    return sum;\n};\n\nexports.weightedStandardDeviation = function weightedStandardDeviation(values, weights) {\n    return Math.sqrt(exports.weightedVariance(values, weights));\n};\n\nexports.weightedVariance = function weightedVariance(values, weights) {\n    var theMean = exports.weightedMean(values, weights);\n    var vari = 0, l = values.length;\n    var a = 0, b = 0;\n\n    for (var i = 0; i < l; i++) {\n        var z = values[i] - theMean;\n        var w = weights[i];\n\n        vari += w * (z * z);\n        b += w;\n        a += w * w;\n    }\n\n    return vari * (b / (b * b - a));\n};\n\nexports.center = function center(values, inPlace) {\n    if (typeof (inPlace) === 'undefined') inPlace = false;\n\n    var result = values;\n    if (!inPlace)\n        result = [].concat(values);\n\n    var theMean = exports.mean(result), l = result.length;\n    for (var i = 0; i < l; i++)\n        result[i] -= theMean;\n};\n\nexports.standardize = function standardize(values, standardDev, inPlace) {\n    if (typeof (standardDev) === 'undefined') standardDev = exports.standardDeviation(values);\n    if (typeof (inPlace) === 'undefined') inPlace = false;\n    var l = values.length;\n    var result = inPlace ? values : new Array(l);\n    for (var i = 0; i < l; i++)\n        result[i] = values[i] / standardDev;\n    return result;\n};\n\nexports.cumulativeSum = function cumulativeSum(array) {\n    var l = array.length;\n    var result = new Array(l);\n    result[0] = array[0];\n    for (var i = 1; i < l; i++)\n        result[i] = result[i - 1] + array[i];\n    return result;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-stat/array.js","import LuDecomposition from './dc/lu';\nimport SvDecomposition from './dc/svd';\nimport {scale} from 'ml-array-utils';\nimport * as util from './util';\nimport MatrixTransposeView from './views/transpose';\nimport MatrixRowView from './views/row';\nimport MatrixSubView from './views/sub';\nimport MatrixSelectionView from './views/selection';\nimport MatrixColumnView from './views/column';\nimport MatrixFlipRowView from './views/flipRow';\nimport MatrixFlipColumnView from './views/flipColumn';\n\nexport default function AbstractMatrix(superCtor) {\n    if (superCtor === undefined) superCtor = Object;\n\n    /**\n     * Real matrix\n     * @class Matrix\n     * @param {number|Array|Matrix} nRows - Number of rows of the new matrix,\n     * 2D array containing the data or Matrix instance to clone\n     * @param {number} [nColumns] - Number of columns of the new matrix\n     */\n    class Matrix extends superCtor {\n        static get [Symbol.species]() {\n            return this;\n        }\n\n        /**\n         * Constructs a Matrix with the chosen dimensions from a 1D array\n         * @param {number} newRows - Number of rows\n         * @param {number} newColumns - Number of columns\n         * @param {Array} newData - A 1D array containing data for the matrix\n         * @return {Matrix} - The new matrix\n         */\n        static from1DArray(newRows, newColumns, newData) {\n            var length = newRows * newColumns;\n            if (length !== newData.length) {\n                throw new RangeError('Data length does not match given dimensions');\n            }\n            var newMatrix = new this(newRows, newColumns);\n            for (var row = 0; row < newRows; row++) {\n                for (var column = 0; column < newColumns; column++) {\n                    newMatrix.set(row, column, newData[row * newColumns + column]);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Creates a row vector, a matrix with only one row.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n        static rowVector(newData) {\n            var vector = new this(1, newData.length);\n            for (var i = 0; i < newData.length; i++) {\n                vector.set(0, i, newData[i]);\n            }\n            return vector;\n        }\n\n        /**\n         * Creates a column vector, a matrix with only one column.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n        static columnVector(newData) {\n            var vector = new this(newData.length, 1);\n            for (var i = 0; i < newData.length; i++) {\n                vector.set(i, 0, newData[i]);\n            }\n            return vector;\n        }\n\n        /**\n         * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static empty(rows, columns) {\n            return new this(rows, columns);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be set to zero.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static zeros(rows, columns) {\n            return this.empty(rows, columns).fill(0);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be set to one.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static ones(rows, columns) {\n            return this.empty(rows, columns).fill(1);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be randomly set.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n        static rand(rows, columns, rng) {\n            if (rng === undefined) rng = Math.random;\n            var matrix = this.empty(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    matrix.set(i, j, rng());\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be random integers.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {number} [maxValue=1000] - Maximum value\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n        static randInt(rows, columns, maxValue, rng) {\n            if (maxValue === undefined) maxValue = 1000;\n            if (rng === undefined) rng = Math.random;\n            var matrix = this.empty(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    var value = Math.floor(rng() * maxValue);\n                    matrix.set(i, j, value);\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and others will be 0.\n         * @param {number} rows - Number of rows\n         * @param {number} [columns=rows] - Number of columns\n         * @param {number} [value=1] - Value to fill the diagonal with\n         * @return {Matrix} - The new identity matrix\n         */\n        static eye(rows, columns, value) {\n            if (columns === undefined) columns = rows;\n            if (value === undefined) value = 1;\n            var min = Math.min(rows, columns);\n            var matrix = this.zeros(rows, columns);\n            for (var i = 0; i < min; i++) {\n                matrix.set(i, i, value);\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates a diagonal matrix based on the given array.\n         * @param {Array} data - Array containing the data for the diagonal\n         * @param {number} [rows] - Number of rows (Default: data.length)\n         * @param {number} [columns] - Number of columns (Default: rows)\n         * @return {Matrix} - The new diagonal matrix\n         */\n        static diag(data, rows, columns) {\n            var l = data.length;\n            if (rows === undefined) rows = l;\n            if (columns === undefined) columns = rows;\n            var min = Math.min(l, rows, columns);\n            var matrix = this.zeros(rows, columns);\n            for (var i = 0; i < min; i++) {\n                matrix.set(i, i, data[i]);\n            }\n            return matrix;\n        }\n\n        /**\n         * Returns a matrix whose elements are the minimum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n        static min(matrix1, matrix2) {\n            matrix1 = this.checkMatrix(matrix1);\n            matrix2 = this.checkMatrix(matrix2);\n            var rows = matrix1.rows;\n            var columns = matrix1.columns;\n            var result = new this(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Returns a matrix whose elements are the maximum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n        static max(matrix1, matrix2) {\n            matrix1 = this.checkMatrix(matrix1);\n            matrix2 = this.checkMatrix(matrix2);\n            var rows = matrix1.rows;\n            var columns = matrix1.columns;\n            var result = new this(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Check that the provided value is a Matrix and tries to instantiate one if not\n         * @param {*} value - The value to check\n         * @return {Matrix}\n         */\n        static checkMatrix(value) {\n            return Matrix.isMatrix(value) ? value : new this(value);\n        }\n\n        /**\n         * Returns true if the argument is a Matrix, false otherwise\n         * @param {*} value - The value to check\n         * @return {boolean}\n         */\n        static isMatrix(value) {\n            return (value != null) && (value.klass === 'Matrix');\n        }\n\n        /**\n         * @prop {number} size - The number of elements in the matrix.\n         */\n        get size() {\n            return this.rows * this.columns;\n        }\n\n        /**\n         * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n         * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n         * @return {Matrix} this\n         */\n        apply(callback) {\n            if (typeof callback !== 'function') {\n                throw new TypeError('callback must be a function');\n            }\n            var ii = this.rows;\n            var jj = this.columns;\n            for (var i = 0; i < ii; i++) {\n                for (var j = 0; j < jj; j++) {\n                    callback.call(this, i, j);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Returns a new 1D array filled row by row with the matrix values\n         * @return {Array}\n         */\n        to1DArray() {\n            var array = new Array(this.size);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    array[i * this.columns + j] = this.get(i, j);\n                }\n            }\n            return array;\n        }\n\n        /**\n         * Returns a 2D array containing a copy of the data\n         * @return {Array}\n         */\n        to2DArray() {\n            var copy = new Array(this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                copy[i] = new Array(this.columns);\n                for (var j = 0; j < this.columns; j++) {\n                    copy[i][j] = this.get(i, j);\n                }\n            }\n            return copy;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one row\n         */\n        isRowVector() {\n            return this.rows === 1;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one column\n         */\n        isColumnVector() {\n            return this.columns === 1;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one row or one column\n         */\n        isVector() {\n            return (this.rows === 1) || (this.columns === 1);\n        }\n\n        /**\n         * @return {boolean} true if the matrix has the same number of rows and columns\n         */\n        isSquare() {\n            return this.rows === this.columns;\n        }\n\n        /**\n         * @return {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n         */\n        isSymmetric() {\n            if (this.isSquare()) {\n                for (var i = 0; i < this.rows; i++) {\n                    for (var j = 0; j <= i; j++) {\n                        if (this.get(i, j) !== this.get(j, i)) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            }\n            return false;\n        }\n\n        /**\n         * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @param {number} value - The new value for the element\n         * @return {Matrix} this\n         */\n        set(rowIndex, columnIndex, value) { // eslint-disable-line no-unused-vars\n            throw new Error('set method is unimplemented');\n        }\n\n        /**\n         * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @return {number}\n         */\n        get(rowIndex, columnIndex) { // eslint-disable-line no-unused-vars\n            throw new Error('get method is unimplemented');\n        }\n\n        /**\n         * Creates a new matrix that is a repetition of the current matrix. New matrix has rowRep times the number of\n         * rows of the matrix, and colRep times the number of columns of the matrix\n         * @param {number} rowRep - Number of times the rows should be repeated\n         * @param {number} colRep - Number of times the columns should be re\n         * @return {Matrix}\n         * @example\n         * var matrix = new Matrix([[1,2]]);\n         * matrix.repeat(2); // [[1,2],[1,2]]\n         */\n        repeat(rowRep, colRep) {\n            rowRep = rowRep || 1;\n            colRep = colRep || 1;\n            var matrix = new this.constructor[Symbol.species](this.rows * rowRep, this.columns * colRep);\n            for (var i = 0; i < rowRep; i++) {\n                for (var j = 0; j < colRep; j++) {\n                    matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Fills the matrix with a given value. All elements will be set to this value.\n         * @param {number} value - New value\n         * @return {Matrix} this\n         */\n        fill(value) {\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, value);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Negates the matrix. All elements will be multiplied by (-1)\n         * @return {Matrix} this\n         */\n        neg() {\n            return this.mulS(-1);\n        }\n\n        /**\n         * Returns a new array from the given row index\n         * @param {number} index - Row index\n         * @return {Array}\n         */\n        getRow(index) {\n            util.checkRowIndex(this, index);\n            var row = new Array(this.columns);\n            for (var i = 0; i < this.columns; i++) {\n                row[i] = this.get(index, i);\n            }\n            return row;\n        }\n\n        /**\n         * Returns a new row vector from the given row index\n         * @param {number} index - Row index\n         * @return {Matrix}\n         */\n        getRowVector(index) {\n            return this.constructor.rowVector(this.getRow(index));\n        }\n\n        /**\n         * Sets a row at the given index\n         * @param {number} index - Row index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n        setRow(index, array) {\n            util.checkRowIndex(this, index);\n            array = util.checkRowVector(this, array);\n            for (var i = 0; i < this.columns; i++) {\n                this.set(index, i, array[i]);\n            }\n            return this;\n        }\n\n        /**\n         * Swaps two rows\n         * @param {number} row1 - First row index\n         * @param {number} row2 - Second row index\n         * @return {Matrix} this\n         */\n        swapRows(row1, row2) {\n            util.checkRowIndex(this, row1);\n            util.checkRowIndex(this, row2);\n            for (var i = 0; i < this.columns; i++) {\n                var temp = this.get(row1, i);\n                this.set(row1, i, this.get(row2, i));\n                this.set(row2, i, temp);\n            }\n            return this;\n        }\n\n        /**\n         * Returns a new array from the given column index\n         * @param {number} index - Column index\n         * @return {Array}\n         */\n        getColumn(index) {\n            util.checkColumnIndex(this, index);\n            var column = new Array(this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                column[i] = this.get(i, index);\n            }\n            return column;\n        }\n\n        /**\n         * Returns a new column vector from the given column index\n         * @param {number} index - Column index\n         * @return {Matrix}\n         */\n        getColumnVector(index) {\n            return this.constructor.columnVector(this.getColumn(index));\n        }\n\n        /**\n         * Sets a column at the given index\n         * @param {number} index - Column index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n        setColumn(index, array) {\n            util.checkColumnIndex(this, index);\n            array = util.checkColumnVector(this, array);\n            for (var i = 0; i < this.rows; i++) {\n                this.set(i, index, array[i]);\n            }\n            return this;\n        }\n\n        /**\n         * Swaps two columns\n         * @param {number} column1 - First column index\n         * @param {number} column2 - Second column index\n         * @return {Matrix} this\n         */\n        swapColumns(column1, column2) {\n            util.checkColumnIndex(this, column1);\n            util.checkColumnIndex(this, column2);\n            for (var i = 0; i < this.rows; i++) {\n                var temp = this.get(i, column1);\n                this.set(i, column1, this.get(i, column2));\n                this.set(i, column2, temp);\n            }\n            return this;\n        }\n\n        /**\n         * Adds the values of a vector to each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        addRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) + vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Subtracts the values of a vector from each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        subRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) - vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a vector with each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        mulRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) * vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Divides the values of each row by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        divRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) / vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Adds the values of a vector to each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        addColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) + vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Subtracts the values of a vector from each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        subColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) - vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a vector with each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        mulColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) * vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Divides the values of each column by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        divColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) / vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a row with a scalar\n         * @param {number} index - Row index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n        mulRow(index, value) {\n            util.checkRowIndex(this, index);\n            for (var i = 0; i < this.columns; i++) {\n                this.set(index, i, this.get(index, i) * value);\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a column with a scalar\n         * @param {number} index - Column index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n        mulColumn(index, value) {\n            util.checkColumnIndex(this, index);\n            for (var i = 0; i < this.rows; i++) {\n                this.set(i, index, this.get(i, index) * value);\n            }\n            return this;\n        }\n\n        /**\n         * Returns the maximum value of the matrix\n         * @return {number}\n         */\n        max() {\n            var v = this.get(0, 0);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) > v) {\n                        v = this.get(i, j);\n                    }\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value\n         * @return {Array}\n         */\n        maxIndex() {\n            var v = this.get(0, 0);\n            var idx = [0, 0];\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) > v) {\n                        v = this.get(i, j);\n                        idx[0] = i;\n                        idx[1] = j;\n                    }\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of the matrix\n         * @return {number}\n         */\n        min() {\n            var v = this.get(0, 0);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) < v) {\n                        v = this.get(i, j);\n                    }\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the minimum value\n         * @return {Array}\n         */\n        minIndex() {\n            var v = this.get(0, 0);\n            var idx = [0, 0];\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) < v) {\n                        v = this.get(i, j);\n                        idx[0] = i;\n                        idx[1] = j;\n                    }\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the maximum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n        maxRow(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) > v) {\n                    v = this.get(row, i);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n        maxRowIndex(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            var idx = [row, 0];\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) > v) {\n                    v = this.get(row, i);\n                    idx[1] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n        minRow(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) < v) {\n                    v = this.get(row, i);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n        minRowIndex(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            var idx = [row, 0];\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) < v) {\n                    v = this.get(row, i);\n                    idx[1] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the maximum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n        maxColumn(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) > v) {\n                    v = this.get(i, column);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n        maxColumnIndex(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            var idx = [0, column];\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) > v) {\n                    v = this.get(i, column);\n                    idx[0] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n        minColumn(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) < v) {\n                    v = this.get(i, column);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the minimum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n        minColumnIndex(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            var idx = [0, column];\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) < v) {\n                    v = this.get(i, column);\n                    idx[0] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns an array containing the diagonal values of the matrix\n         * @return {Array}\n         */\n        diag() {\n            var min = Math.min(this.rows, this.columns);\n            var diag = new Array(min);\n            for (var i = 0; i < min; i++) {\n                diag[i] = this.get(i, i);\n            }\n            return diag;\n        }\n\n        /**\n         * Returns the sum by the argument given, if no argument given,\n         * it returns the sum of all elements of the matrix.\n         * @param {string} by - sum by 'row' or 'column'.\n         * @return {Matrix|number}\n         */\n        sum(by) {\n            switch (by) {\n                case 'row':\n                    return util.sumByRow(this);\n                case 'column':\n                    return util.sumByColumn(this);\n                default:\n                    return util.sumAll(this);\n            }\n        }\n\n        /**\n         * Returns the mean of all elements of the matrix\n         * @return {number}\n         */\n        mean() {\n            return this.sum() / this.size;\n        }\n\n        /**\n         * Returns the product of all elements of the matrix\n         * @return {number}\n         */\n        prod() {\n            var prod = 1;\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    prod *= this.get(i, j);\n                }\n            }\n            return prod;\n        }\n\n        /**\n         * Computes the cumulative sum of the matrix elements (in place, row by row)\n         * @return {Matrix} this\n         */\n        cumulativeSum() {\n            var sum = 0;\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    sum += this.get(i, j);\n                    this.set(i, j, sum);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Computes the dot (scalar) product between the matrix and another\n         * @param {Matrix} vector2 vector\n         * @return {number}\n         */\n        dot(vector2) {\n            if (Matrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n            var vector1 = this.to1DArray();\n            if (vector1.length !== vector2.length) {\n                throw new RangeError('vectors do not have the same size');\n            }\n            var dot = 0;\n            for (var i = 0; i < vector1.length; i++) {\n                dot += vector1[i] * vector2[i];\n            }\n            return dot;\n        }\n\n        /**\n         * Returns the matrix product between this and other\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n        mmul(other) {\n            other = this.constructor.checkMatrix(other);\n            if (this.columns !== other.rows) {\n                // eslint-disable-next-line no-console\n                console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n            }\n\n            var m = this.rows;\n            var n = this.columns;\n            var p = other.columns;\n\n            var result = new this.constructor[Symbol.species](m, p);\n\n            var Bcolj = new Array(n);\n            for (var j = 0; j < p; j++) {\n                for (var k = 0; k < n; k++) {\n                    Bcolj[k] = other.get(k, j);\n                }\n\n                for (var i = 0; i < m; i++) {\n                    var s = 0;\n                    for (k = 0; k < n; k++) {\n                        s += this.get(i, k) * Bcolj[k];\n                    }\n\n                    result.set(i, j, s);\n                }\n            }\n            return result;\n        }\n\n        strassen2x2(other) {\n            var result = new this.constructor[Symbol.species](2, 2);\n            const a11 = this.get(0, 0);\n            const b11 = other.get(0, 0);\n            const a12 = this.get(0, 1);\n            const b12 = other.get(0, 1);\n            const a21 = this.get(1, 0);\n            const b21 = other.get(1, 0);\n            const a22 = this.get(1, 1);\n            const b22 = other.get(1, 1);\n\n            // Compute intermediate values.\n            const m1 = (a11 + a22) * (b11 + b22);\n            const m2 = (a21 + a22) * b11;\n            const m3 = a11 * (b12 - b22);\n            const m4 = a22 * (b21 - b11);\n            const m5 = (a11 + a12) * b22;\n            const m6 = (a21 - a11) * (b11 + b12);\n            const m7 = (a12 - a22) * (b21 + b22);\n\n            // Combine intermediate values into the output.\n            const c00 = m1 + m4 - m5 + m7;\n            const c01 = m3 + m5;\n            const c10 = m2 + m4;\n            const c11 = m1 - m2 + m3 + m6;\n\n            result.set(0, 0, c00);\n            result.set(0, 1, c01);\n            result.set(1, 0, c10);\n            result.set(1, 1, c11);\n            return result;\n        }\n\n        strassen3x3(other) {\n            var result = new this.constructor[Symbol.species](3, 3);\n\n            const a00 = this.get(0, 0);\n            const a01 = this.get(0, 1);\n            const a02 = this.get(0, 2);\n            const a10 = this.get(1, 0);\n            const a11 = this.get(1, 1);\n            const a12 = this.get(1, 2);\n            const a20 = this.get(2, 0);\n            const a21 = this.get(2, 1);\n            const a22 = this.get(2, 2);\n\n            const b00 = other.get(0, 0);\n            const b01 = other.get(0, 1);\n            const b02 = other.get(0, 2);\n            const b10 = other.get(1, 0);\n            const b11 = other.get(1, 1);\n            const b12 = other.get(1, 2);\n            const b20 = other.get(2, 0);\n            const b21 = other.get(2, 1);\n            const b22 = other.get(2, 2);\n\n            const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n            const m2 = (a00 - a10) * (-b01 + b11);\n            const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n            const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n            const m5 = (a10 + a11) * (-b00 + b01);\n            const m6 = a00 * b00;\n            const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n            const m8 = (-a00 + a20) * (b02 - b12);\n            const m9 = (a20 + a21) * (-b00 + b02);\n            const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n            const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n            const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n            const m13 = (a02 - a22) * (b11 - b21);\n            const m14 = a02 * b20;\n            const m15 = (a21 + a22) * (-b20 + b21);\n            const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n            const m17 = (a02 - a12) * (b12 - b22);\n            const m18 = (a11 + a12) * (-b20 + b22);\n            const m19 = a01 * b10;\n            const m20 = a12 * b21;\n            const m21 = a10 * b02;\n            const m22 = a20 * b01;\n            const m23 = a22 * b22;\n\n            const c00 = m6 + m14 + m19;\n            const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n            const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n            const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n            const c11 = m2 + m4 + m5 + m6 + m20;\n            const c12 = m14 + m16 + m17 + m18 + m21;\n            const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n            const c21 = m12 + m13 + m14 + m15 + m22;\n            const c22 = m6 + m7 + m8 + m9 + m23;\n\n            result.set(0, 0, c00);\n            result.set(0, 1, c01);\n            result.set(0, 2, c02);\n            result.set(1, 0, c10);\n            result.set(1, 1, c11);\n            result.set(1, 2, c12);\n            result.set(2, 0, c20);\n            result.set(2, 1, c21);\n            result.set(2, 2, c22);\n            return result;\n        }\n\n        /**\n         * Returns the matrix product between x and y. More efficient than mmul(other) only when we multiply squared matrix and when the size of the matrix is > 1000.\n         * @param {Matrix} y\n         * @return {Matrix}\n         */\n        mmulStrassen(y) {\n            var x = this.clone();\n            var r1 = x.rows;\n            var c1 = x.columns;\n            var r2 = y.rows;\n            var c2 = y.columns;\n            if (c1 !== r2) {\n                // eslint-disable-next-line no-console\n                console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);\n            }\n\n            // Put a matrix into the top left of a matrix of zeros.\n            // `rows` and `cols` are the dimensions of the output matrix.\n            function embed(mat, rows, cols) {\n                var r = mat.rows;\n                var c = mat.columns;\n                if ((r === rows) && (c === cols)) {\n                    return mat;\n                } else {\n                    var resultat = Matrix.zeros(rows, cols);\n                    resultat = resultat.setSubMatrix(mat, 0, 0);\n                    return resultat;\n                }\n            }\n\n\n            // Make sure both matrices are the same size.\n            // This is exclusively for simplicity:\n            // this algorithm can be implemented with matrices of different sizes.\n\n            var r = Math.max(r1, r2);\n            var c = Math.max(c1, c2);\n            x = embed(x, r, c);\n            y = embed(y, r, c);\n\n            // Our recursive multiplication function.\n            function blockMult(a, b, rows, cols) {\n                // For small matrices, resort to naive multiplication.\n                if (rows <= 512 || cols <= 512) {\n                    return a.mmul(b); // a is equivalent to this\n                }\n\n                // Apply dynamic padding.\n                if ((rows % 2 === 1) && (cols % 2 === 1)) {\n                    a = embed(a, rows + 1, cols + 1);\n                    b = embed(b, rows + 1, cols + 1);\n                } else if (rows % 2 === 1) {\n                    a = embed(a, rows + 1, cols);\n                    b = embed(b, rows + 1, cols);\n                } else if (cols % 2 === 1) {\n                    a = embed(a, rows, cols + 1);\n                    b = embed(b, rows, cols + 1);\n                }\n\n                var halfRows = parseInt(a.rows / 2);\n                var halfCols = parseInt(a.columns / 2);\n                // Subdivide input matrices.\n                var a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n                var b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n                var a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n                var b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n                var a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n                var b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n                var a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n                var b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n                // Compute intermediate values.\n                var m1 = blockMult(Matrix.add(a11, a22), Matrix.add(b11, b22), halfRows, halfCols);\n                var m2 = blockMult(Matrix.add(a21, a22), b11, halfRows, halfCols);\n                var m3 = blockMult(a11, Matrix.sub(b12, b22), halfRows, halfCols);\n                var m4 = blockMult(a22, Matrix.sub(b21, b11), halfRows, halfCols);\n                var m5 = blockMult(Matrix.add(a11, a12), b22, halfRows, halfCols);\n                var m6 = blockMult(Matrix.sub(a21, a11), Matrix.add(b11, b12), halfRows, halfCols);\n                var m7 = blockMult(Matrix.sub(a12, a22), Matrix.add(b21, b22), halfRows, halfCols);\n\n                // Combine intermediate values into the output.\n                var c11 = Matrix.add(m1, m4);\n                c11.sub(m5);\n                c11.add(m7);\n                var c12 = Matrix.add(m3, m5);\n                var c21 = Matrix.add(m2, m4);\n                var c22 = Matrix.sub(m1, m2);\n                c22.add(m3);\n                c22.add(m6);\n\n                //Crop output to the desired size (undo dynamic padding).\n                var resultat = Matrix.zeros(2 * c11.rows, 2 * c11.columns);\n                resultat = resultat.setSubMatrix(c11, 0, 0);\n                resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n                resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n                resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n                return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n            }\n            return blockMult(x, y, r, c);\n        }\n\n        /**\n         * Returns a row-by-row scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The scaled matrix\n         */\n        scaleRows(min, max) {\n            min = min === undefined ? 0 : min;\n            max = max === undefined ? 1 : max;\n            if (min >= max) {\n                throw new RangeError('min should be strictly smaller than max');\n            }\n            var newMatrix = this.constructor.empty(this.rows, this.columns);\n            for (var i = 0; i < this.rows; i++) {\n                var scaled = scale(this.getRow(i), {min, max});\n                newMatrix.setRow(i, scaled);\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a new column-by-column scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The new scaled matrix\n         * @example\n         * var matrix = new Matrix([[1,2],[-1,0]]);\n         * var scaledMatrix = matrix.scaleColumns(); // [[1,1],[0,0]]\n         */\n        scaleColumns(min, max) {\n            min = min === undefined ? 0 : min;\n            max = max === undefined ? 1 : max;\n            if (min >= max) {\n                throw new RangeError('min should be strictly smaller than max');\n            }\n            var newMatrix = this.constructor.empty(this.rows, this.columns);\n            for (var i = 0; i < this.columns; i++) {\n                var scaled = scale(this.getColumn(i), {\n                    min: min,\n                    max: max\n                });\n                newMatrix.setColumn(i, scaled);\n            }\n            return newMatrix;\n        }\n\n\n        /**\n         * Returns the Kronecker product (also known as tensor product) between this and other\n         * See https://en.wikipedia.org/wiki/Kronecker_product\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n        kroneckerProduct(other) {\n            other = this.constructor.checkMatrix(other);\n\n            var m = this.rows;\n            var n = this.columns;\n            var p = other.rows;\n            var q = other.columns;\n\n            var result = new this.constructor[Symbol.species](m * p, n * q);\n            for (var i = 0; i < m; i++) {\n                for (var j = 0; j < n; j++) {\n                    for (var k = 0; k < p; k++) {\n                        for (var l = 0; l < q; l++) {\n                            result[p * i + k][q * j + l] = this.get(i, j) * other.get(k, l);\n                        }\n                    }\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Transposes the matrix and returns a new one containing the result\n         * @return {Matrix}\n         */\n        transpose() {\n            var result = new this.constructor[Symbol.species](this.columns, this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    result.set(j, i, this.get(i, j));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Sorts the rows (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n        sortRows(compareFunction) {\n            if (compareFunction === undefined) compareFunction = compareNumbers;\n            for (var i = 0; i < this.rows; i++) {\n                this.setRow(i, this.getRow(i).sort(compareFunction));\n            }\n            return this;\n        }\n\n        /**\n         * Sorts the columns (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n        sortColumns(compareFunction) {\n            if (compareFunction === undefined) compareFunction = compareNumbers;\n            for (var i = 0; i < this.columns; i++) {\n                this.setColumn(i, this.getColumn(i).sort(compareFunction));\n            }\n            return this;\n        }\n\n        /**\n         * Returns a subset of the matrix\n         * @param {number} startRow - First row index\n         * @param {number} endRow - Last row index\n         * @param {number} startColumn - First column index\n         * @param {number} endColumn - Last column index\n         * @return {Matrix}\n         */\n        subMatrix(startRow, endRow, startColumn, endColumn) {\n            util.checkRange(this, startRow, endRow, startColumn, endColumn);\n            var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, endColumn - startColumn + 1);\n            for (var i = startRow; i <= endRow; i++) {\n                for (var j = startColumn; j <= endColumn; j++) {\n                    newMatrix[i - startRow][j - startColumn] = this.get(i, j);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a subset of the matrix based on an array of row indices\n         * @param {Array} indices - Array containing the row indices\n         * @param {number} [startColumn = 0] - First column index\n         * @param {number} [endColumn = this.columns-1] - Last column index\n         * @return {Matrix}\n         */\n        subMatrixRow(indices, startColumn, endColumn) {\n            if (startColumn === undefined) startColumn = 0;\n            if (endColumn === undefined) endColumn = this.columns - 1;\n            if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns)) {\n                throw new RangeError('Argument out of range');\n            }\n\n            var newMatrix = new this.constructor[Symbol.species](indices.length, endColumn - startColumn + 1);\n            for (var i = 0; i < indices.length; i++) {\n                for (var j = startColumn; j <= endColumn; j++) {\n                    if (indices[i] < 0 || indices[i] >= this.rows) {\n                        throw new RangeError('Row index out of range: ' + indices[i]);\n                    }\n                    newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a subset of the matrix based on an array of column indices\n         * @param {Array} indices - Array containing the column indices\n         * @param {number} [startRow = 0] - First row index\n         * @param {number} [endRow = this.rows-1] - Last row index\n         * @return {Matrix}\n         */\n        subMatrixColumn(indices, startRow, endRow) {\n            if (startRow === undefined) startRow = 0;\n            if (endRow === undefined) endRow = this.rows - 1;\n            if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows)) {\n                throw new RangeError('Argument out of range');\n            }\n\n            var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, indices.length);\n            for (var i = 0; i < indices.length; i++) {\n                for (var j = startRow; j <= endRow; j++) {\n                    if (indices[i] < 0 || indices[i] >= this.columns) {\n                        throw new RangeError('Column index out of range: ' + indices[i]);\n                    }\n                    newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Set a part of the matrix to the given sub-matrix\n         * @param {Matrix|Array< Array >} matrix - The source matrix from which to extract values.\n         * @param {number} startRow - The index of the first row to set\n         * @param {number} startColumn - The index of the first column to set\n         * @return {Matrix}\n         */\n        setSubMatrix(matrix, startRow, startColumn) {\n            matrix = this.constructor.checkMatrix(matrix);\n            var endRow = startRow + matrix.rows - 1;\n            var endColumn = startColumn + matrix.columns - 1;\n            util.checkRange(this, startRow, endRow, startColumn, endColumn);\n            for (var i = 0; i < matrix.rows; i++) {\n                for (var j = 0; j < matrix.columns; j++) {\n                    this[startRow + i][startColumn + j] = matrix.get(i, j);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Return a new matrix based on a selection of rows and columns\n         * @param {Array<number>} rowIndices - The row indices to select. Order matters and an index can be more than once.\n         * @param {Array<number>} columnIndices - The column indices to select. Order matters and an index can be use more than once.\n         * @return {Matrix} The new matrix\n         */\n        selection(rowIndices, columnIndices) {\n            var indices = util.checkIndices(this, rowIndices, columnIndices);\n            var newMatrix = new this.constructor[Symbol.species](rowIndices.length, columnIndices.length);\n            for (var i = 0; i < indices.row.length; i++) {\n                var rowIndex = indices.row[i];\n                for (var j = 0; j < indices.column.length; j++) {\n                    var columnIndex = indices.column[j];\n                    newMatrix[i][j] = this.get(rowIndex, columnIndex);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns the trace of the matrix (sum of the diagonal elements)\n         * @return {number}\n         */\n        trace() {\n            var min = Math.min(this.rows, this.columns);\n            var trace = 0;\n            for (var i = 0; i < min; i++) {\n                trace += this.get(i, i);\n            }\n            return trace;\n        }\n\n        /*\n         Matrix views\n         */\n\n        /**\n         * Returns a view of the transposition of the matrix\n         * @return {MatrixTransposeView}\n         */\n        transposeView() {\n            return new MatrixTransposeView(this);\n        }\n\n        /**\n         * Returns a view of the row vector with the given index\n         * @param {number} row - row index of the vector\n         * @return {MatrixRowView}\n         */\n        rowView(row) {\n            util.checkRowIndex(this, row);\n            return new MatrixRowView(this, row);\n        }\n\n        /**\n         * Returns a view of the column vector with the given index\n         * @param {number} column - column index of the vector\n         * @return {MatrixColumnView}\n         */\n        columnView(column) {\n            util.checkColumnIndex(this, column);\n            return new MatrixColumnView(this, column);\n        }\n\n        /**\n         * Returns a view of the matrix flipped in the row axis\n         * @return {MatrixFlipRowView}\n         */\n        flipRowView() {\n            return new MatrixFlipRowView(this);\n        }\n\n        /**\n         * Returns a view of the matrix flipped in the column axis\n         * @return {MatrixFlipColumnView}\n         */\n        flipColumnView() {\n            return new MatrixFlipColumnView(this);\n        }\n\n        /**\n         * Returns a view of a submatrix giving the index boundaries\n         * @param {number} startRow - first row index of the submatrix\n         * @param {number} endRow - last row index of the submatrix\n         * @param {number} startColumn - first column index of the submatrix\n         * @param {number} endColumn - last column index of the submatrix\n         * @return {MatrixSubView}\n         */\n        subMatrixView(startRow, endRow, startColumn, endColumn) {\n            return new MatrixSubView(this, startRow, endRow, startColumn, endColumn);\n        }\n\n        /**\n         * Returns a view of the cross of the row indices and the column indices\n         * @example\n         * // resulting vector is [[2], [2]]\n         * var matrix = new Matrix([[1,2,3], [4,5,6]]).selectionView([0, 0], [1])\n         * @param {Array<number>} rowIndices\n         * @param {Array<number>} columnIndices\n         * @return {MatrixSelectionView}\n         */\n        selectionView(rowIndices, columnIndices) {\n            return new MatrixSelectionView(this, rowIndices, columnIndices);\n        }\n\n\n        /**\n        * Calculates and returns the determinant of a matrix as a Number\n        * @example\n        *   new Matrix([[1,2,3], [4,5,6]]).det()\n        * @return {number}\n        */\n        det() {\n            if (this.isSquare()) {\n                var a, b, c, d;\n                if (this.columns === 2) {\n                    // 2 x 2 matrix\n                    a = this.get(0, 0);\n                    b = this.get(0, 1);\n                    c = this.get(1, 0);\n                    d = this.get(1, 1);\n\n                    return a * d - (b * c);\n                } else if (this.columns === 3) {\n                    // 3 x 3 matrix\n                    var subMatrix0, subMatrix1, subMatrix2;\n                    subMatrix0 = this.selectionView([1, 2], [1, 2]);\n                    subMatrix1 = this.selectionView([1, 2], [0, 2]);\n                    subMatrix2 = this.selectionView([1, 2], [0, 1]);\n                    a = this.get(0, 0);\n                    b = this.get(0, 1);\n                    c = this.get(0, 2);\n\n                    return a * subMatrix0.det() - b * subMatrix1.det() + c * subMatrix2.det();\n                } else {\n                    // general purpose determinant using the LU decomposition\n                    return new LuDecomposition(this).determinant;\n                }\n\n            } else {\n                throw Error('Determinant can only be calculated for a square matrix.');\n            }\n        }\n\n        /**\n         * Returns inverse of a matrix if it exists or the pseudoinverse\n         * @param {number} threshold - threshold for taking inverse of singular values (default = 1e-15)\n         * @return {Matrix} the (pseudo)inverted matrix.\n         */\n        pseudoInverse(threshold) {\n            if (threshold === undefined) threshold = Number.EPSILON;\n            var svdSolution = new SvDecomposition(this, {autoTranspose: true});\n\n            var U = svdSolution.leftSingularVectors;\n            var V = svdSolution.rightSingularVectors;\n            var s = svdSolution.diagonal;\n\n            for (var i = 0; i < s.length; i++) {\n                if (Math.abs(s[i]) > threshold) {\n                    s[i] = 1.0 / s[i];\n                } else {\n                    s[i] = 0.0;\n                }\n            }\n\n            // convert list to diagonal\n            s = this.constructor[Symbol.species].diag(s);\n            return V.mmul(s.mmul(U.transposeView()));\n        }\n    }\n\n    Matrix.prototype.klass = 'Matrix';\n\n    function compareNumbers(a, b) {\n        return a - b;\n    }\n\n    /*\n     Synonyms\n     */\n\n    Matrix.random = Matrix.rand;\n    Matrix.diagonal = Matrix.diag;\n    Matrix.prototype.diagonal = Matrix.prototype.diag;\n    Matrix.identity = Matrix.eye;\n    Matrix.prototype.negate = Matrix.prototype.neg;\n    Matrix.prototype.tensorProduct = Matrix.prototype.kroneckerProduct;\n    Matrix.prototype.determinant = Matrix.prototype.det;\n\n    /*\n     Add dynamically instance and static methods for mathematical operations\n     */\n\n    var inplaceOperator = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n    var inplaceOperatorScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% value);\n        }\n    }\n    return this;\n})\n`;\n\n    var inplaceOperatorMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n        this.columns !== matrix.columns) {\n        throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% matrix.get(i, j));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticOperator = `\n(function %name%(matrix, value) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(value);\n})\n`;\n\n    var inplaceMethod = `\n(function %name%() {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticMethod = `\n(function %name%(matrix) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%();\n})\n`;\n\n    var inplaceMethodWithArgs = `\n(function %name%(%args%) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), %args%));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticMethodWithArgs = `\n(function %name%(matrix, %args%) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(%args%);\n})\n`;\n\n\n    var inplaceMethodWithOneArgScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), value));\n        }\n    }\n    return this;\n})\n`;\n    var inplaceMethodWithOneArgMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n        this.columns !== matrix.columns) {\n        throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), matrix.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n    var inplaceMethodWithOneArg = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n    var staticMethodWithOneArg = staticMethodWithArgs;\n\n    var operators = [\n        // Arithmetic operators\n        ['+', 'add'],\n        ['-', 'sub', 'subtract'],\n        ['*', 'mul', 'multiply'],\n        ['/', 'div', 'divide'],\n        ['%', 'mod', 'modulus'],\n        // Bitwise operators\n        ['&', 'and'],\n        ['|', 'or'],\n        ['^', 'xor'],\n        ['<<', 'leftShift'],\n        ['>>', 'signPropagatingRightShift'],\n        ['>>>', 'rightShift', 'zeroFillRightShift']\n    ];\n\n    var i;\n    var eval2 = eval;\n    for (var operator of operators) {\n        var inplaceOp = eval2(fillTemplateFunction(inplaceOperator, {name: operator[1], op: operator[0]}));\n        var inplaceOpS = eval2(fillTemplateFunction(inplaceOperatorScalar, {name: operator[1] + 'S', op: operator[0]}));\n        var inplaceOpM = eval2(fillTemplateFunction(inplaceOperatorMatrix, {name: operator[1] + 'M', op: operator[0]}));\n        var staticOp = eval2(fillTemplateFunction(staticOperator, {name: operator[1]}));\n        for (i = 1; i < operator.length; i++) {\n            Matrix.prototype[operator[i]] = inplaceOp;\n            Matrix.prototype[operator[i] + 'S'] = inplaceOpS;\n            Matrix.prototype[operator[i] + 'M'] = inplaceOpM;\n            Matrix[operator[i]] = staticOp;\n        }\n    }\n\n    var methods = [\n        ['~', 'not']\n    ];\n\n    [\n        'abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cbrt', 'ceil',\n        'clz32', 'cos', 'cosh', 'exp', 'expm1', 'floor', 'fround', 'log', 'log1p',\n        'log10', 'log2', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc'\n    ].forEach(function (mathMethod) {\n        methods.push(['Math.' + mathMethod, mathMethod]);\n    });\n\n    for (var method of methods) {\n        var inplaceMeth = eval2(fillTemplateFunction(inplaceMethod, {name: method[1], method: method[0]}));\n        var staticMeth = eval2(fillTemplateFunction(staticMethod, {name: method[1]}));\n        for (i = 1; i < method.length; i++) {\n            Matrix.prototype[method[i]] = inplaceMeth;\n            Matrix[method[i]] = staticMeth;\n        }\n    }\n\n    var methodsWithArgs = [\n        ['Math.pow', 1, 'pow']\n    ];\n\n    for (var methodWithArg of methodsWithArgs) {\n        var args = 'arg0';\n        for (i = 1; i < methodWithArg[1]; i++) {\n            args += `, arg${i}`;\n        }\n        if (methodWithArg[1] !== 1) {\n            var inplaceMethWithArgs = eval2(fillTemplateFunction(inplaceMethodWithArgs, {\n                name: methodWithArg[2],\n                method: methodWithArg[0],\n                args: args\n            }));\n            var staticMethWithArgs = eval2(fillTemplateFunction(staticMethodWithArgs, {name: methodWithArg[2], args: args}));\n            for (i = 2; i < methodWithArg.length; i++) {\n                Matrix.prototype[methodWithArg[i]] = inplaceMethWithArgs;\n                Matrix[methodWithArg[i]] = staticMethWithArgs;\n            }\n        } else {\n            var tmplVar = {\n                name: methodWithArg[2],\n                args: args,\n                method: methodWithArg[0]\n            };\n            var inplaceMethod2 = eval2(fillTemplateFunction(inplaceMethodWithOneArg, tmplVar));\n            var inplaceMethodS = eval2(fillTemplateFunction(inplaceMethodWithOneArgScalar, tmplVar));\n            var inplaceMethodM = eval2(fillTemplateFunction(inplaceMethodWithOneArgMatrix, tmplVar));\n            var staticMethod2 = eval2(fillTemplateFunction(staticMethodWithOneArg, tmplVar));\n            for (i = 2; i < methodWithArg.length; i++) {\n                Matrix.prototype[methodWithArg[i]] = inplaceMethod2;\n                Matrix.prototype[methodWithArg[i] + 'M'] = inplaceMethodM;\n                Matrix.prototype[methodWithArg[i] + 'S'] = inplaceMethodS;\n                Matrix[methodWithArg[i]] = staticMethod2;\n            }\n        }\n    }\n\n    function fillTemplateFunction(template, values) {\n        for (var value in values) {\n            template = template.replace(new RegExp('%' + value + '%', 'g'), values[value]);\n        }\n        return template;\n    }\n\n    return Matrix;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-matrix/src/abstractMatrix.js","import './symbol-species';\nimport AbstractMatrix from './abstractMatrix';\nimport {\n    checkColumnIndex,\n    checkColumnVector,\n    checkRowIndex,\n    checkRowVector\n} from './util';\n\nexport default class Matrix extends AbstractMatrix(Array) {\n    constructor(nRows, nColumns) {\n        var i;\n        if (arguments.length === 1 && typeof nRows === 'number') {\n            return new Array(nRows);\n        }\n        if (Matrix.isMatrix(nRows)) {\n            return nRows.clone();\n        } else if (Number.isInteger(nRows) && nRows > 0) { // Create an empty matrix\n            super(nRows);\n            if (Number.isInteger(nColumns) && nColumns > 0) {\n                for (i = 0; i < nRows; i++) {\n                    this[i] = new Array(nColumns);\n                }\n            } else {\n                throw new TypeError('nColumns must be a positive integer');\n            }\n        } else if (Array.isArray(nRows)) { // Copy the values from the 2D array\n            const matrix = nRows;\n            nRows = matrix.length;\n            nColumns = matrix[0].length;\n            if (typeof nColumns !== 'number' || nColumns === 0) {\n                throw new TypeError('Data must be a 2D array with at least one element');\n            }\n            super(nRows);\n            for (i = 0; i < nRows; i++) {\n                if (matrix[i].length !== nColumns) {\n                    throw new RangeError('Inconsistent array dimensions');\n                }\n                this[i] = [].concat(matrix[i]);\n            }\n        } else {\n            throw new TypeError('First argument must be a positive number or an array');\n        }\n        this.rows = nRows;\n        this.columns = nColumns;\n        return this;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this[rowIndex][columnIndex] = value;\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this[rowIndex][columnIndex];\n    }\n\n    /**\n     * Creates an exact and independent copy of the matrix\n     * @return {Matrix}\n     */\n    clone() {\n        var newMatrix = new this.constructor[Symbol.species](this.rows, this.columns);\n        for (var row = 0; row < this.rows; row++) {\n            for (var column = 0; column < this.columns; column++) {\n                newMatrix.set(row, column, this.get(row, column));\n            }\n        }\n        return newMatrix;\n    }\n\n    /**\n     * Removes a row from the given index\n     * @param {number} index - Row index\n     * @return {Matrix} this\n     */\n    removeRow(index) {\n        checkRowIndex(this, index);\n        if (this.rows === 1) {\n            throw new RangeError('A matrix cannot have less than one row');\n        }\n        this.splice(index, 1);\n        this.rows -= 1;\n        return this;\n    }\n\n    /**\n     * Adds a row at the given index\n     * @param {number} [index = this.rows] - Row index\n     * @param {Array|Matrix} array - Array or vector\n     * @return {Matrix} this\n     */\n    addRow(index, array) {\n        if (array === undefined) {\n            array = index;\n            index = this.rows;\n        }\n        checkRowIndex(this, index, true);\n        array = checkRowVector(this, array, true);\n        this.splice(index, 0, array);\n        this.rows += 1;\n        return this;\n    }\n\n    /**\n     * Removes a column from the given index\n     * @param {number} index - Column index\n     * @return {Matrix} this\n     */\n    removeColumn(index) {\n        checkColumnIndex(this, index);\n        if (this.columns === 1) {\n            throw new RangeError('A matrix cannot have less than one column');\n        }\n        for (var i = 0; i < this.rows; i++) {\n            this[i].splice(index, 1);\n        }\n        this.columns -= 1;\n        return this;\n    }\n\n    /**\n     * Adds a column at the given index\n     * @param {number} [index = this.columns] - Column index\n     * @param {Array|Matrix} array - Array or vector\n     * @return {Matrix} this\n     */\n    addColumn(index, array) {\n        if (typeof array === 'undefined') {\n            array = index;\n            index = this.columns;\n        }\n        checkColumnIndex(this, index, true);\n        array = checkColumnVector(this, array);\n        for (var i = 0; i < this.rows; i++) {\n            this[i].splice(index, 0, array[i]);\n        }\n        this.columns += 1;\n        return this;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-matrix/src/matrix.js","'use strict';\n\nfunction squaredEuclidean(p, q) {\n    var d = 0;\n    for (var i = 0; i < p.length; i++) {\n        d += (p[i] - q[i]) * (p[i] - q[i]);\n    }\n    return d;\n}\n\nfunction euclidean(p, q) {\n    return Math.sqrt(squaredEuclidean(p, q));\n}\n\nmodule.exports = euclidean;\neuclidean.squared = squaredEuclidean;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance-euclidean/euclidean.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 103);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap dc9a19b9838106d06786","module.exports = exports = require('./ArrayUtils');\n\n\nexports.getEquallySpacedData = require('./getEquallySpaced').getEquallySpacedData;\nexports.SNV = require('./snv').SNV;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-array-utils/src/index.js","'use strict';\n\nexports.array = require('./array');\nexports.matrix = require('./matrix');\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-stat/index.js","export {default as maybeToPrecision} from './maybeToPrecision';\nexport {default as checkArrayLength} from './checkArrayLength';\n\nexport default class BaseRegression {\n    constructor() {\n        if (new.target === BaseRegression) {\n            throw new Error('BaseRegression must be subclassed');\n        }\n    }\n\n    predict(x) {\n        if (typeof x === 'number') {\n            return this._predict(x);\n        } else if (Array.isArray(x)) {\n            const y = new Array(x.length);\n            for (let i = 0; i < x.length; i++) {\n                y[i] = this._predict(x[i]);\n            }\n            return y;\n        } else {\n            throw new TypeError('x must be a number or array');\n        }\n    }\n\n    _predict() {\n        throw new Error('_predict must be implemented');\n    }\n\n    train() {\n        //Do nothing for this package\n    }\n\n    toString() {\n        return '';\n    }\n\n    toLaTeX() {\n        return '';\n    }\n\n    /**\n     * Return the correlation coefficient of determination (r) and chi-square.\n     * @param {Array<number>} x\n     * @param {Array<number>} y\n     * @return {object}\n     */\n    score(x, y) {\n        if (!Array.isArray(x) || !Array.isArray(y) || x.length !== y.length) {\n            throw new Error('x and y must be arrays of the same length');\n        }\n\n        const n = x.length;\n        const y2 = new Array(n);\n        for (let i = 0; i < n; i++) {\n            y2[i] = this._predict(x[i]);\n        }\n\n        let xSum = 0;\n        let ySum = 0;\n        let chi2 = 0;\n        let rmsd = 0;\n        let xSquared = 0;\n        let ySquared = 0;\n        let xY = 0;\n        for (let i = 0; i < n; i++) {\n            xSum += y2[i];\n            ySum += y[i];\n            xSquared += y2[i] * y2[i];\n            ySquared += y[i] * y[i];\n            xY += y2[i] * y[i];\n            if (y[i] !== 0) {\n                chi2 += (y[i] - y2[i]) * (y[i] - y2[i]) / y[i];\n            }\n            rmsd = (y[i] - y2[i]) * (y[i] - y2[i]);\n        }\n\n        const r = (n * xY - xSum * ySum) / Math.sqrt((n * xSquared - xSum * xSum) * (n * ySquared - ySum * ySum));\n\n        return {\n            r: r,\n            r2: r * r,\n            chi2: chi2,\n            rmsd: rmsd * rmsd / n\n        };\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-regression-base/src/index.js","'use strict';\n\nrequire('./symbol-species');\nvar abstractMatrix = require('./abstractMatrix');\nvar util = require('./util');\n\nclass Matrix extends abstractMatrix(Array) {\n    constructor(nRows, nColumns) {\n        var i;\n        if (arguments.length === 1 && typeof nRows === 'number') {\n            return new Array(nRows);\n        }\n        if (Matrix.isMatrix(nRows)) {\n            return nRows.clone();\n        } else if (Number.isInteger(nRows) && nRows > 0) { // Create an empty matrix\n            super(nRows);\n            if (Number.isInteger(nColumns) && nColumns > 0) {\n                for (i = 0; i < nRows; i++) {\n                    this[i] = new Array(nColumns);\n                }\n            } else {\n                throw new TypeError('nColumns must be a positive integer');\n            }\n        } else if (Array.isArray(nRows)) { // Copy the values from the 2D array\n            const matrix = nRows;\n            nRows = matrix.length;\n            nColumns = matrix[0].length;\n            if (typeof nColumns !== 'number' || nColumns === 0) {\n                throw new TypeError('Data must be a 2D array with at least one element');\n            }\n            super(nRows);\n            for (i = 0; i < nRows; i++) {\n                if (matrix[i].length !== nColumns) {\n                    throw new RangeError('Inconsistent array dimensions');\n                }\n                this[i] = [].concat(matrix[i]);\n            }\n        } else {\n            throw new TypeError('First argument must be a positive number or an array');\n        }\n        this.rows = nRows;\n        this.columns = nColumns;\n        return this;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this[rowIndex][columnIndex] = value;\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this[rowIndex][columnIndex];\n    }\n\n    /**\n     * Creates an exact and independent copy of the matrix\n     * @return {Matrix}\n     */\n    clone() {\n        var newMatrix = new this.constructor[Symbol.species](this.rows, this.columns);\n        for (var row = 0; row < this.rows; row++) {\n            for (var column = 0; column < this.columns; column++) {\n                newMatrix.set(row, column, this.get(row, column));\n            }\n        }\n        return newMatrix;\n    }\n\n    /**\n     * Removes a row from the given index\n     * @param {number} index - Row index\n     * @return {Matrix} this\n     */\n    removeRow(index) {\n        util.checkRowIndex(this, index);\n        if (this.rows === 1) {\n            throw new RangeError('A matrix cannot have less than one row');\n        }\n        this.splice(index, 1);\n        this.rows -= 1;\n        return this;\n    }\n\n    /**\n     * Adds a row at the given index\n     * @param {number} [index = this.rows] - Row index\n     * @param {Array|Matrix} array - Array or vector\n     * @return {Matrix} this\n     */\n    addRow(index, array) {\n        if (array === undefined) {\n            array = index;\n            index = this.rows;\n        }\n        util.checkRowIndex(this, index, true);\n        array = util.checkRowVector(this, array, true);\n        this.splice(index, 0, array);\n        this.rows += 1;\n        return this;\n    }\n\n    /**\n     * Removes a column from the given index\n     * @param {number} index - Column index\n     * @return {Matrix} this\n     */\n    removeColumn(index) {\n        util.checkColumnIndex(this, index);\n        if (this.columns === 1) {\n            throw new RangeError('A matrix cannot have less than one column');\n        }\n        for (var i = 0; i < this.rows; i++) {\n            this[i].splice(index, 1);\n        }\n        this.columns -= 1;\n        return this;\n    }\n\n    /**\n     * Adds a column at the given index\n     * @param {number} [index = this.columns] - Column index\n     * @param {Array|Matrix} array - Array or vector\n     * @return {Matrix} this\n     */\n    addColumn(index, array) {\n        if (typeof array === 'undefined') {\n            array = index;\n            index = this.columns;\n        }\n        util.checkColumnIndex(this, index, true);\n        array = util.checkColumnVector(this, array);\n        for (var i = 0; i < this.rows; i++) {\n            this[i].splice(index, 0, array[i]);\n        }\n        this.columns += 1;\n        return this;\n    }\n}\n\nexports.Matrix = Matrix;\nMatrix.abstractMatrix = abstractMatrix;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/matrix.js","'use strict';\n\nrequire('./symbol-species');\nvar abstractMatrix = require('./abstractMatrix');\nvar util = require('./util');\n\nclass Matrix extends abstractMatrix(Array) {\n    constructor(nRows, nColumns) {\n        var i;\n        if (arguments.length === 1 && typeof nRows === 'number') {\n            return new Array(nRows);\n        }\n        if (Matrix.isMatrix(nRows)) {\n            return nRows.clone();\n        } else if (Number.isInteger(nRows) && nRows > 0) { // Create an empty matrix\n            super(nRows);\n            if (Number.isInteger(nColumns) && nColumns > 0) {\n                for (i = 0; i < nRows; i++) {\n                    this[i] = new Array(nColumns);\n                }\n            } else {\n                throw new TypeError('nColumns must be a positive integer');\n            }\n        } else if (Array.isArray(nRows)) { // Copy the values from the 2D array\n            const matrix = nRows;\n            nRows = matrix.length;\n            nColumns = matrix[0].length;\n            if (typeof nColumns !== 'number' || nColumns === 0) {\n                throw new TypeError('Data must be a 2D array with at least one element');\n            }\n            super(nRows);\n            for (i = 0; i < nRows; i++) {\n                if (matrix[i].length !== nColumns) {\n                    throw new RangeError('Inconsistent array dimensions');\n                }\n                this[i] = [].concat(matrix[i]);\n            }\n        } else {\n            throw new TypeError('First argument must be a positive number or an array');\n        }\n        this.rows = nRows;\n        this.columns = nColumns;\n        return this;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this[rowIndex][columnIndex] = value;\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this[rowIndex][columnIndex];\n    }\n\n    /**\n     * Creates an exact and independent copy of the matrix\n     * @return {Matrix}\n     */\n    clone() {\n        var newMatrix = new this.constructor[Symbol.species](this.rows, this.columns);\n        for (var row = 0; row < this.rows; row++) {\n            for (var column = 0; column < this.columns; column++) {\n                newMatrix.set(row, column, this.get(row, column));\n            }\n        }\n        return newMatrix;\n    }\n\n    /**\n     * Removes a row from the given index\n     * @param {number} index - Row index\n     * @return {Matrix} this\n     */\n    removeRow(index) {\n        util.checkRowIndex(this, index);\n        if (this.rows === 1) {\n            throw new RangeError('A matrix cannot have less than one row');\n        }\n        this.splice(index, 1);\n        this.rows -= 1;\n        return this;\n    }\n\n    /**\n     * Adds a row at the given index\n     * @param {number} [index = this.rows] - Row index\n     * @param {Array|Matrix} array - Array or vector\n     * @return {Matrix} this\n     */\n    addRow(index, array) {\n        if (array === undefined) {\n            array = index;\n            index = this.rows;\n        }\n        util.checkRowIndex(this, index, true);\n        array = util.checkRowVector(this, array, true);\n        this.splice(index, 0, array);\n        this.rows += 1;\n        return this;\n    }\n\n    /**\n     * Removes a column from the given index\n     * @param {number} index - Column index\n     * @return {Matrix} this\n     */\n    removeColumn(index) {\n        util.checkColumnIndex(this, index);\n        if (this.columns === 1) {\n            throw new RangeError('A matrix cannot have less than one column');\n        }\n        for (var i = 0; i < this.rows; i++) {\n            this[i].splice(index, 1);\n        }\n        this.columns -= 1;\n        return this;\n    }\n\n    /**\n     * Adds a column at the given index\n     * @param {number} [index = this.columns] - Column index\n     * @param {Array|Matrix} array - Array or vector\n     * @return {Matrix} this\n     */\n    addColumn(index, array) {\n        if (typeof array === 'undefined') {\n            array = index;\n            index = this.columns;\n        }\n        util.checkColumnIndex(this, index, true);\n        array = util.checkColumnVector(this, array);\n        for (var i = 0; i < this.rows; i++) {\n            this[i].splice(index, 0, array[i]);\n        }\n        this.columns += 1;\n        return this;\n    }\n}\n\nexports.Matrix = Matrix;\nMatrix.abstractMatrix = abstractMatrix;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pca/node_modules/ml-matrix/src/matrix.js","'use strict';\n\nrequire('./symbol-species');\nvar abstractMatrix = require('./abstractMatrix');\nvar util = require('./util');\n\nclass Matrix extends abstractMatrix(Array) {\n    constructor(nRows, nColumns) {\n        var i;\n        if (arguments.length === 1 && typeof nRows === 'number') {\n            return new Array(nRows);\n        }\n        if (Matrix.isMatrix(nRows)) {\n            return nRows.clone();\n        } else if (Number.isInteger(nRows) && nRows > 0) { // Create an empty matrix\n            super(nRows);\n            if (Number.isInteger(nColumns) && nColumns > 0) {\n                for (i = 0; i < nRows; i++) {\n                    this[i] = new Array(nColumns);\n                }\n            } else {\n                throw new TypeError('nColumns must be a positive integer');\n            }\n        } else if (Array.isArray(nRows)) { // Copy the values from the 2D array\n            const matrix = nRows;\n            nRows = matrix.length;\n            nColumns = matrix[0].length;\n            if (typeof nColumns !== 'number' || nColumns === 0) {\n                throw new TypeError('Data must be a 2D array with at least one element');\n            }\n            super(nRows);\n            for (i = 0; i < nRows; i++) {\n                if (matrix[i].length !== nColumns) {\n                    throw new RangeError('Inconsistent array dimensions');\n                }\n                this[i] = [].concat(matrix[i]);\n            }\n        } else {\n            throw new TypeError('First argument must be a positive number or an array');\n        }\n        this.rows = nRows;\n        this.columns = nColumns;\n        return this;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this[rowIndex][columnIndex] = value;\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this[rowIndex][columnIndex];\n    }\n\n    /**\n     * Creates an exact and independent copy of the matrix\n     * @return {Matrix}\n     */\n    clone() {\n        var newMatrix = new this.constructor[Symbol.species](this.rows, this.columns);\n        for (var row = 0; row < this.rows; row++) {\n            for (var column = 0; column < this.columns; column++) {\n                newMatrix.set(row, column, this.get(row, column));\n            }\n        }\n        return newMatrix;\n    }\n\n    /**\n     * Removes a row from the given index\n     * @param {number} index - Row index\n     * @return {Matrix} this\n     */\n    removeRow(index) {\n        util.checkRowIndex(this, index);\n        if (this.rows === 1) {\n            throw new RangeError('A matrix cannot have less than one row');\n        }\n        this.splice(index, 1);\n        this.rows -= 1;\n        return this;\n    }\n\n    /**\n     * Adds a row at the given index\n     * @param {number} [index = this.rows] - Row index\n     * @param {Array|Matrix} array - Array or vector\n     * @return {Matrix} this\n     */\n    addRow(index, array) {\n        if (array === undefined) {\n            array = index;\n            index = this.rows;\n        }\n        util.checkRowIndex(this, index, true);\n        array = util.checkRowVector(this, array, true);\n        this.splice(index, 0, array);\n        this.rows += 1;\n        return this;\n    }\n\n    /**\n     * Removes a column from the given index\n     * @param {number} index - Column index\n     * @return {Matrix} this\n     */\n    removeColumn(index) {\n        util.checkColumnIndex(this, index);\n        if (this.columns === 1) {\n            throw new RangeError('A matrix cannot have less than one column');\n        }\n        for (var i = 0; i < this.rows; i++) {\n            this[i].splice(index, 1);\n        }\n        this.columns -= 1;\n        return this;\n    }\n\n    /**\n     * Adds a column at the given index\n     * @param {number} [index = this.columns] - Column index\n     * @param {Array|Matrix} array - Array or vector\n     * @return {Matrix} this\n     */\n    addColumn(index, array) {\n        if (typeof array === 'undefined') {\n            array = index;\n            index = this.columns;\n        }\n        util.checkColumnIndex(this, index, true);\n        array = util.checkColumnVector(this, array);\n        for (var i = 0; i < this.rows; i++) {\n            this[i].splice(index, 0, array[i]);\n        }\n        this.columns += 1;\n        return this;\n    }\n}\n\nexports.Matrix = Matrix;\nMatrix.abstractMatrix = abstractMatrix;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/matrix.js","'use strict';\n\nrequire('./symbol-species');\nvar abstractMatrix = require('./abstractMatrix');\nvar util = require('./util');\n\nclass Matrix extends abstractMatrix(Array) {\n    constructor(nRows, nColumns) {\n        var i;\n        if (arguments.length === 1 && typeof nRows === 'number') {\n            return new Array(nRows);\n        }\n        if (Matrix.isMatrix(nRows)) {\n            return nRows.clone();\n        } else if (Number.isInteger(nRows) && nRows > 0) { // Create an empty matrix\n            super(nRows);\n            if (Number.isInteger(nColumns) && nColumns > 0) {\n                for (i = 0; i < nRows; i++) {\n                    this[i] = new Array(nColumns);\n                }\n            } else {\n                throw new TypeError('nColumns must be a positive integer');\n            }\n        } else if (Array.isArray(nRows)) { // Copy the values from the 2D array\n            const matrix = nRows;\n            nRows = matrix.length;\n            nColumns = matrix[0].length;\n            if (typeof nColumns !== 'number' || nColumns === 0) {\n                throw new TypeError('Data must be a 2D array with at least one element');\n            }\n            super(nRows);\n            for (i = 0; i < nRows; i++) {\n                if (matrix[i].length !== nColumns) {\n                    throw new RangeError('Inconsistent array dimensions');\n                }\n                this[i] = [].concat(matrix[i]);\n            }\n        } else {\n            throw new TypeError('First argument must be a positive number or an array');\n        }\n        this.rows = nRows;\n        this.columns = nColumns;\n        return this;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this[rowIndex][columnIndex] = value;\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this[rowIndex][columnIndex];\n    }\n\n    /**\n     * Creates an exact and independent copy of the matrix\n     * @return {Matrix}\n     */\n    clone() {\n        var newMatrix = new this.constructor[Symbol.species](this.rows, this.columns);\n        for (var row = 0; row < this.rows; row++) {\n            for (var column = 0; column < this.columns; column++) {\n                newMatrix.set(row, column, this.get(row, column));\n            }\n        }\n        return newMatrix;\n    }\n\n    /**\n     * Removes a row from the given index\n     * @param {number} index - Row index\n     * @return {Matrix} this\n     */\n    removeRow(index) {\n        util.checkRowIndex(this, index);\n        if (this.rows === 1) {\n            throw new RangeError('A matrix cannot have less than one row');\n        }\n        this.splice(index, 1);\n        this.rows -= 1;\n        return this;\n    }\n\n    /**\n     * Adds a row at the given index\n     * @param {number} [index = this.rows] - Row index\n     * @param {Array|Matrix} array - Array or vector\n     * @return {Matrix} this\n     */\n    addRow(index, array) {\n        if (array === undefined) {\n            array = index;\n            index = this.rows;\n        }\n        util.checkRowIndex(this, index, true);\n        array = util.checkRowVector(this, array, true);\n        this.splice(index, 0, array);\n        this.rows += 1;\n        return this;\n    }\n\n    /**\n     * Removes a column from the given index\n     * @param {number} index - Column index\n     * @return {Matrix} this\n     */\n    removeColumn(index) {\n        util.checkColumnIndex(this, index);\n        if (this.columns === 1) {\n            throw new RangeError('A matrix cannot have less than one column');\n        }\n        for (var i = 0; i < this.rows; i++) {\n            this[i].splice(index, 1);\n        }\n        this.columns -= 1;\n        return this;\n    }\n\n    /**\n     * Adds a column at the given index\n     * @param {number} [index = this.columns] - Column index\n     * @param {Array|Matrix} array - Array or vector\n     * @return {Matrix} this\n     */\n    addColumn(index, array) {\n        if (typeof array === 'undefined') {\n            array = index;\n            index = this.columns;\n        }\n        util.checkColumnIndex(this, index, true);\n        array = util.checkColumnVector(this, array);\n        for (var i = 0; i < this.rows; i++) {\n            this[i].splice(index, 0, array[i]);\n        }\n        this.columns += 1;\n        return this;\n    }\n}\n\nexports.Matrix = Matrix;\nMatrix.abstractMatrix = abstractMatrix;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/matrix.js","'use strict';\n\nrequire('./symbol-species');\nvar abstractMatrix = require('./abstractMatrix');\nvar util = require('./util');\n\nclass Matrix extends abstractMatrix(Array) {\n    constructor(nRows, nColumns) {\n        var i;\n        if (arguments.length === 1 && typeof nRows === 'number') {\n            return new Array(nRows);\n        }\n        if (Matrix.isMatrix(nRows)) {\n            return nRows.clone();\n        } else if (Number.isInteger(nRows) && nRows > 0) { // Create an empty matrix\n            super(nRows);\n            if (Number.isInteger(nColumns) && nColumns > 0) {\n                for (i = 0; i < nRows; i++) {\n                    this[i] = new Array(nColumns);\n                }\n            } else {\n                throw new TypeError('nColumns must be a positive integer');\n            }\n        } else if (Array.isArray(nRows)) { // Copy the values from the 2D array\n            const matrix = nRows;\n            nRows = matrix.length;\n            nColumns = matrix[0].length;\n            if (typeof nColumns !== 'number' || nColumns === 0) {\n                throw new TypeError('Data must be a 2D array with at least one element');\n            }\n            super(nRows);\n            for (i = 0; i < nRows; i++) {\n                if (matrix[i].length !== nColumns) {\n                    throw new RangeError('Inconsistent array dimensions');\n                }\n                this[i] = [].concat(matrix[i]);\n            }\n        } else {\n            throw new TypeError('First argument must be a positive number or an array');\n        }\n        this.rows = nRows;\n        this.columns = nColumns;\n        return this;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this[rowIndex][columnIndex] = value;\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this[rowIndex][columnIndex];\n    }\n\n    /**\n     * Creates an exact and independent copy of the matrix\n     * @return {Matrix}\n     */\n    clone() {\n        var newMatrix = new this.constructor[Symbol.species](this.rows, this.columns);\n        for (var row = 0; row < this.rows; row++) {\n            for (var column = 0; column < this.columns; column++) {\n                newMatrix.set(row, column, this.get(row, column));\n            }\n        }\n        return newMatrix;\n    }\n\n    /**\n     * Removes a row from the given index\n     * @param {number} index - Row index\n     * @return {Matrix} this\n     */\n    removeRow(index) {\n        util.checkRowIndex(this, index);\n        if (this.rows === 1) {\n            throw new RangeError('A matrix cannot have less than one row');\n        }\n        this.splice(index, 1);\n        this.rows -= 1;\n        return this;\n    }\n\n    /**\n     * Adds a row at the given index\n     * @param {number} [index = this.rows] - Row index\n     * @param {Array|Matrix} array - Array or vector\n     * @return {Matrix} this\n     */\n    addRow(index, array) {\n        if (array === undefined) {\n            array = index;\n            index = this.rows;\n        }\n        util.checkRowIndex(this, index, true);\n        array = util.checkRowVector(this, array, true);\n        this.splice(index, 0, array);\n        this.rows += 1;\n        return this;\n    }\n\n    /**\n     * Removes a column from the given index\n     * @param {number} index - Column index\n     * @return {Matrix} this\n     */\n    removeColumn(index) {\n        util.checkColumnIndex(this, index);\n        if (this.columns === 1) {\n            throw new RangeError('A matrix cannot have less than one column');\n        }\n        for (var i = 0; i < this.rows; i++) {\n            this[i].splice(index, 1);\n        }\n        this.columns -= 1;\n        return this;\n    }\n\n    /**\n     * Adds a column at the given index\n     * @param {number} [index = this.columns] - Column index\n     * @param {Array|Matrix} array - Array or vector\n     * @return {Matrix} this\n     */\n    addColumn(index, array) {\n        if (typeof array === 'undefined') {\n            array = index;\n            index = this.columns;\n        }\n        util.checkColumnIndex(this, index, true);\n        array = util.checkColumnVector(this, array);\n        for (var i = 0; i < this.rows; i++) {\n            this[i].splice(index, 0, array[i]);\n        }\n        this.columns += 1;\n        return this;\n    }\n}\n\nexports.Matrix = Matrix;\nMatrix.abstractMatrix = abstractMatrix;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/matrix.js","'use strict';\n\nrequire('./symbol-species');\nvar abstractMatrix = require('./abstractMatrix');\nvar util = require('./util');\n\nclass Matrix extends abstractMatrix(Array) {\n    constructor(nRows, nColumns) {\n        var i;\n        if (arguments.length === 1 && typeof nRows === 'number') {\n            return new Array(nRows);\n        }\n        if (Matrix.isMatrix(nRows)) {\n            return nRows.clone();\n        } else if (Number.isInteger(nRows) && nRows > 0) { // Create an empty matrix\n            super(nRows);\n            if (Number.isInteger(nColumns) && nColumns > 0) {\n                for (i = 0; i < nRows; i++) {\n                    this[i] = new Array(nColumns);\n                }\n            } else {\n                throw new TypeError('nColumns must be a positive integer');\n            }\n        } else if (Array.isArray(nRows)) { // Copy the values from the 2D array\n            const matrix = nRows;\n            nRows = matrix.length;\n            nColumns = matrix[0].length;\n            if (typeof nColumns !== 'number' || nColumns === 0) {\n                throw new TypeError('Data must be a 2D array with at least one element');\n            }\n            super(nRows);\n            for (i = 0; i < nRows; i++) {\n                if (matrix[i].length !== nColumns) {\n                    throw new RangeError('Inconsistent array dimensions');\n                }\n                this[i] = [].concat(matrix[i]);\n            }\n        } else {\n            throw new TypeError('First argument must be a positive number or an array');\n        }\n        this.rows = nRows;\n        this.columns = nColumns;\n        return this;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this[rowIndex][columnIndex] = value;\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this[rowIndex][columnIndex];\n    }\n\n    /**\n     * Creates an exact and independent copy of the matrix\n     * @return {Matrix}\n     */\n    clone() {\n        var newMatrix = new this.constructor[Symbol.species](this.rows, this.columns);\n        for (var row = 0; row < this.rows; row++) {\n            for (var column = 0; column < this.columns; column++) {\n                newMatrix.set(row, column, this.get(row, column));\n            }\n        }\n        return newMatrix;\n    }\n\n    /**\n     * Removes a row from the given index\n     * @param {number} index - Row index\n     * @return {Matrix} this\n     */\n    removeRow(index) {\n        util.checkRowIndex(this, index);\n        if (this.rows === 1) {\n            throw new RangeError('A matrix cannot have less than one row');\n        }\n        this.splice(index, 1);\n        this.rows -= 1;\n        return this;\n    }\n\n    /**\n     * Adds a row at the given index\n     * @param {number} [index = this.rows] - Row index\n     * @param {Array|Matrix} array - Array or vector\n     * @return {Matrix} this\n     */\n    addRow(index, array) {\n        if (array === undefined) {\n            array = index;\n            index = this.rows;\n        }\n        util.checkRowIndex(this, index, true);\n        array = util.checkRowVector(this, array, true);\n        this.splice(index, 0, array);\n        this.rows += 1;\n        return this;\n    }\n\n    /**\n     * Removes a column from the given index\n     * @param {number} index - Column index\n     * @return {Matrix} this\n     */\n    removeColumn(index) {\n        util.checkColumnIndex(this, index);\n        if (this.columns === 1) {\n            throw new RangeError('A matrix cannot have less than one column');\n        }\n        for (var i = 0; i < this.rows; i++) {\n            this[i].splice(index, 1);\n        }\n        this.columns -= 1;\n        return this;\n    }\n\n    /**\n     * Adds a column at the given index\n     * @param {number} [index = this.columns] - Column index\n     * @param {Array|Matrix} array - Array or vector\n     * @return {Matrix} this\n     */\n    addColumn(index, array) {\n        if (typeof array === 'undefined') {\n            array = index;\n            index = this.columns;\n        }\n        util.checkColumnIndex(this, index, true);\n        array = util.checkColumnVector(this, array);\n        for (var i = 0; i < this.rows; i++) {\n            this[i].splice(index, 0, array[i]);\n        }\n        this.columns += 1;\n        return this;\n    }\n}\n\nexports.Matrix = Matrix;\nMatrix.abstractMatrix = abstractMatrix;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-naivebayes/node_modules/ml-matrix/src/matrix.js","'use strict';\n\nrequire('./symbol-species');\nvar abstractMatrix = require('./abstractMatrix');\nvar util = require('./util');\n\nclass Matrix extends abstractMatrix(Array) {\n    constructor(nRows, nColumns) {\n        var i;\n        if (arguments.length === 1 && typeof nRows === 'number') {\n            return new Array(nRows);\n        }\n        if (Matrix.isMatrix(nRows)) {\n            return nRows.clone();\n        } else if (Number.isInteger(nRows) && nRows > 0) { // Create an empty matrix\n            super(nRows);\n            if (Number.isInteger(nColumns) && nColumns > 0) {\n                for (i = 0; i < nRows; i++) {\n                    this[i] = new Array(nColumns);\n                }\n            } else {\n                throw new TypeError('nColumns must be a positive integer');\n            }\n        } else if (Array.isArray(nRows)) { // Copy the values from the 2D array\n            const matrix = nRows;\n            nRows = matrix.length;\n            nColumns = matrix[0].length;\n            if (typeof nColumns !== 'number' || nColumns === 0) {\n                throw new TypeError('Data must be a 2D array with at least one element');\n            }\n            super(nRows);\n            for (i = 0; i < nRows; i++) {\n                if (matrix[i].length !== nColumns) {\n                    throw new RangeError('Inconsistent array dimensions');\n                }\n                this[i] = [].concat(matrix[i]);\n            }\n        } else {\n            throw new TypeError('First argument must be a positive number or an array');\n        }\n        this.rows = nRows;\n        this.columns = nColumns;\n        return this;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this[rowIndex][columnIndex] = value;\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this[rowIndex][columnIndex];\n    }\n\n    /**\n     * Creates an exact and independent copy of the matrix\n     * @return {Matrix}\n     */\n    clone() {\n        var newMatrix = new this.constructor[Symbol.species](this.rows, this.columns);\n        for (var row = 0; row < this.rows; row++) {\n            for (var column = 0; column < this.columns; column++) {\n                newMatrix.set(row, column, this.get(row, column));\n            }\n        }\n        return newMatrix;\n    }\n\n    /**\n     * Removes a row from the given index\n     * @param {number} index - Row index\n     * @return {Matrix} this\n     */\n    removeRow(index) {\n        util.checkRowIndex(this, index);\n        if (this.rows === 1) {\n            throw new RangeError('A matrix cannot have less than one row');\n        }\n        this.splice(index, 1);\n        this.rows -= 1;\n        return this;\n    }\n\n    /**\n     * Adds a row at the given index\n     * @param {number} [index = this.rows] - Row index\n     * @param {Array|Matrix} array - Array or vector\n     * @return {Matrix} this\n     */\n    addRow(index, array) {\n        if (array === undefined) {\n            array = index;\n            index = this.rows;\n        }\n        util.checkRowIndex(this, index, true);\n        array = util.checkRowVector(this, array, true);\n        this.splice(index, 0, array);\n        this.rows += 1;\n        return this;\n    }\n\n    /**\n     * Removes a column from the given index\n     * @param {number} index - Column index\n     * @return {Matrix} this\n     */\n    removeColumn(index) {\n        util.checkColumnIndex(this, index);\n        if (this.columns === 1) {\n            throw new RangeError('A matrix cannot have less than one column');\n        }\n        for (var i = 0; i < this.rows; i++) {\n            this[i].splice(index, 1);\n        }\n        this.columns -= 1;\n        return this;\n    }\n\n    /**\n     * Adds a column at the given index\n     * @param {number} [index = this.columns] - Column index\n     * @param {Array|Matrix} array - Array or vector\n     * @return {Matrix} this\n     */\n    addColumn(index, array) {\n        if (typeof array === 'undefined') {\n            array = index;\n            index = this.columns;\n        }\n        util.checkColumnIndex(this, index, true);\n        array = util.checkColumnVector(this, array);\n        for (var i = 0; i < this.rows; i++) {\n            this[i].splice(index, 0, array[i]);\n        }\n        this.columns += 1;\n        return this;\n    }\n}\n\nexports.Matrix = Matrix;\nMatrix.abstractMatrix = abstractMatrix;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pls/node_modules/ml-matrix/src/matrix.js","'use strict';\n\nrequire('./symbol-species');\nvar abstractMatrix = require('./abstractMatrix');\nvar util = require('./util');\n\nclass Matrix extends abstractMatrix(Array) {\n    constructor(nRows, nColumns) {\n        var i;\n        if (arguments.length === 1 && typeof nRows === 'number') {\n            return new Array(nRows);\n        }\n        if (Matrix.isMatrix(nRows)) {\n            return nRows.clone();\n        } else if (Number.isInteger(nRows) && nRows > 0) { // Create an empty matrix\n            super(nRows);\n            if (Number.isInteger(nColumns) && nColumns > 0) {\n                for (i = 0; i < nRows; i++) {\n                    this[i] = new Array(nColumns);\n                }\n            } else {\n                throw new TypeError('nColumns must be a positive integer');\n            }\n        } else if (Array.isArray(nRows)) { // Copy the values from the 2D array\n            const matrix = nRows;\n            nRows = matrix.length;\n            nColumns = matrix[0].length;\n            if (typeof nColumns !== 'number' || nColumns === 0) {\n                throw new TypeError('Data must be a 2D array with at least one element');\n            }\n            super(nRows);\n            for (i = 0; i < nRows; i++) {\n                if (matrix[i].length !== nColumns) {\n                    throw new RangeError('Inconsistent array dimensions');\n                }\n                this[i] = [].concat(matrix[i]);\n            }\n        } else {\n            throw new TypeError('First argument must be a positive number or an array');\n        }\n        this.rows = nRows;\n        this.columns = nColumns;\n        return this;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this[rowIndex][columnIndex] = value;\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this[rowIndex][columnIndex];\n    }\n\n    /**\n     * Creates an exact and independent copy of the matrix\n     * @return {Matrix}\n     */\n    clone() {\n        var newMatrix = new this.constructor[Symbol.species](this.rows, this.columns);\n        for (var row = 0; row < this.rows; row++) {\n            for (var column = 0; column < this.columns; column++) {\n                newMatrix.set(row, column, this.get(row, column));\n            }\n        }\n        return newMatrix;\n    }\n\n    /**\n     * Removes a row from the given index\n     * @param {number} index - Row index\n     * @return {Matrix} this\n     */\n    removeRow(index) {\n        util.checkRowIndex(this, index);\n        if (this.rows === 1) {\n            throw new RangeError('A matrix cannot have less than one row');\n        }\n        this.splice(index, 1);\n        this.rows -= 1;\n        return this;\n    }\n\n    /**\n     * Adds a row at the given index\n     * @param {number} [index = this.rows] - Row index\n     * @param {Array|Matrix} array - Array or vector\n     * @return {Matrix} this\n     */\n    addRow(index, array) {\n        if (array === undefined) {\n            array = index;\n            index = this.rows;\n        }\n        util.checkRowIndex(this, index, true);\n        array = util.checkRowVector(this, array, true);\n        this.splice(index, 0, array);\n        this.rows += 1;\n        return this;\n    }\n\n    /**\n     * Removes a column from the given index\n     * @param {number} index - Column index\n     * @return {Matrix} this\n     */\n    removeColumn(index) {\n        util.checkColumnIndex(this, index);\n        if (this.columns === 1) {\n            throw new RangeError('A matrix cannot have less than one column');\n        }\n        for (var i = 0; i < this.rows; i++) {\n            this[i].splice(index, 1);\n        }\n        this.columns -= 1;\n        return this;\n    }\n\n    /**\n     * Adds a column at the given index\n     * @param {number} [index = this.columns] - Column index\n     * @param {Array|Matrix} array - Array or vector\n     * @return {Matrix} this\n     */\n    addColumn(index, array) {\n        if (typeof array === 'undefined') {\n            array = index;\n            index = this.columns;\n        }\n        util.checkColumnIndex(this, index, true);\n        array = util.checkColumnVector(this, array);\n        for (var i = 0; i < this.rows; i++) {\n            this[i].splice(index, 0, array[i]);\n        }\n        this.columns += 1;\n        return this;\n    }\n}\n\nexports.Matrix = Matrix;\nMatrix.abstractMatrix = abstractMatrix;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-fnn/node_modules/ml-matrix/src/matrix.js","export {default as default, default as Matrix} from './matrix';\nexport {default as abstractMatrix} from './abstractMatrix';\n\nexport {solve, inverse} from './decompositions';\nexport {default as SingularValueDecomposition, default as SVD} from './dc/svd.js';\nexport {default as EigenvalueDecomposition, default as EVD} from './dc/evd.js';\nexport {default as CholeskyDecomposition, default as CHO} from './dc/cholesky.js';\nexport {default as LuDecomposition, default as LU} from './dc/lu.js';\nexport {default as QrDecomposition, default as QR} from './dc/qr.js';\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-matrix/src/index.js","import AbstractMatrix from '../abstractMatrix';\nimport Matrix from '../matrix';\n\nexport default class BaseView extends AbstractMatrix() {\n    constructor(matrix, rows, columns) {\n        super();\n        this.matrix = matrix;\n        this.rows = rows;\n        this.columns = columns;\n    }\n\n    static get [Symbol.species]() {\n        return Matrix;\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-matrix/src/views/base.js","'use strict';\n\nvar abstractMatrix = require('../abstractMatrix');\nvar Matrix = require('../matrix');\n\nclass BaseView extends abstractMatrix() {\n    constructor(matrix, rows, columns) {\n        super();\n        this.matrix = matrix;\n        this.rows = rows;\n        this.columns = columns;\n    }\n\n    static get [Symbol.species]() {\n        return Matrix.Matrix;\n    }\n}\n\nmodule.exports = BaseView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/views/base.js","'use strict';\n\nvar abstractMatrix = require('../abstractMatrix');\nvar Matrix = require('../matrix');\n\nclass BaseView extends abstractMatrix() {\n    constructor(matrix, rows, columns) {\n        super();\n        this.matrix = matrix;\n        this.rows = rows;\n        this.columns = columns;\n    }\n\n    static get [Symbol.species]() {\n        return Matrix.Matrix;\n    }\n}\n\nmodule.exports = BaseView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pca/node_modules/ml-matrix/src/views/base.js","'use strict';\n\nvar abstractMatrix = require('../abstractMatrix');\nvar Matrix = require('../matrix');\n\nclass BaseView extends abstractMatrix() {\n    constructor(matrix, rows, columns) {\n        super();\n        this.matrix = matrix;\n        this.rows = rows;\n        this.columns = columns;\n    }\n\n    static get [Symbol.species]() {\n        return Matrix.Matrix;\n    }\n}\n\nmodule.exports = BaseView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/views/base.js","'use strict';\n\nvar abstractMatrix = require('../abstractMatrix');\nvar Matrix = require('../matrix');\n\nclass BaseView extends abstractMatrix() {\n    constructor(matrix, rows, columns) {\n        super();\n        this.matrix = matrix;\n        this.rows = rows;\n        this.columns = columns;\n    }\n\n    static get [Symbol.species]() {\n        return Matrix.Matrix;\n    }\n}\n\nmodule.exports = BaseView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/views/base.js","'use strict';\n\nvar abstractMatrix = require('../abstractMatrix');\nvar Matrix = require('../matrix');\n\nclass BaseView extends abstractMatrix() {\n    constructor(matrix, rows, columns) {\n        super();\n        this.matrix = matrix;\n        this.rows = rows;\n        this.columns = columns;\n    }\n\n    static get [Symbol.species]() {\n        return Matrix.Matrix;\n    }\n}\n\nmodule.exports = BaseView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/views/base.js","'use strict';\n\nvar abstractMatrix = require('../abstractMatrix');\nvar Matrix = require('../matrix');\n\nclass BaseView extends abstractMatrix() {\n    constructor(matrix, rows, columns) {\n        super();\n        this.matrix = matrix;\n        this.rows = rows;\n        this.columns = columns;\n    }\n\n    static get [Symbol.species]() {\n        return Matrix.Matrix;\n    }\n}\n\nmodule.exports = BaseView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-naivebayes/node_modules/ml-matrix/src/views/base.js","'use strict';\n\nvar abstractMatrix = require('../abstractMatrix');\nvar Matrix = require('../matrix');\n\nclass BaseView extends abstractMatrix() {\n    constructor(matrix, rows, columns) {\n        super();\n        this.matrix = matrix;\n        this.rows = rows;\n        this.columns = columns;\n    }\n\n    static get [Symbol.species]() {\n        return Matrix.Matrix;\n    }\n}\n\nmodule.exports = BaseView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pls/node_modules/ml-matrix/src/views/base.js","'use strict';\n\nvar abstractMatrix = require('../abstractMatrix');\nvar Matrix = require('../matrix');\n\nclass BaseView extends abstractMatrix() {\n    constructor(matrix, rows, columns) {\n        super();\n        this.matrix = matrix;\n        this.rows = rows;\n        this.columns = columns;\n    }\n\n    static get [Symbol.species]() {\n        return Matrix.Matrix;\n    }\n}\n\nmodule.exports = BaseView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-fnn/node_modules/ml-matrix/src/views/base.js","import Matrix from './matrix';\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkRowIndex(matrix, index, outer) {\n    var max = outer ? matrix.rows : matrix.rows - 1;\n    if (index < 0 || index > max) {\n        throw new RangeError('Row index out of range');\n    }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkColumnIndex(matrix, index, outer) {\n    var max = outer ? matrix.columns : matrix.columns - 1;\n    if (index < 0 || index > max) {\n        throw new RangeError('Column index out of range');\n    }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkRowVector(matrix, vector) {\n    if (vector.to1DArray) {\n        vector = vector.to1DArray();\n    }\n    if (vector.length !== matrix.columns) {\n        throw new RangeError('vector size must be the same as the number of columns');\n    }\n    return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkColumnVector(matrix, vector) {\n    if (vector.to1DArray) {\n        vector = vector.to1DArray();\n    }\n    if (vector.length !== matrix.rows) {\n        throw new RangeError('vector size must be the same as the number of rows');\n    }\n    return vector;\n}\n\nexport function checkIndices(matrix, rowIndices, columnIndices) {\n    var rowOut = rowIndices.some(r => {\n        return r < 0 || r >= matrix.rows;\n\n    });\n\n    var columnOut = columnIndices.some(c => {\n        return c < 0 || c >= matrix.columns;\n    });\n\n    if (rowOut || columnOut) {\n        throw new RangeError('Indices are out of range');\n    }\n\n    if (typeof rowIndices !== 'object' || typeof columnIndices !== 'object') {\n        throw new TypeError('Unexpected type for row/column indices');\n    }\n    if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n    if (!Array.isArray(columnIndices)) rowIndices = Array.from(columnIndices);\n\n    return {\n        row: rowIndices,\n        column: columnIndices\n    };\n}\n\nexport function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n    if (arguments.length !== 5) throw new TypeError('Invalid argument type');\n    var notAllNumbers = Array.from(arguments).slice(1).some(function (arg) {\n        return typeof arg !== 'number';\n    });\n    if (notAllNumbers) throw new TypeError('Invalid argument type');\n    if (startRow > endRow || startColumn > endColumn || startRow < 0 || startRow >= matrix.rows || endRow < 0 || endRow >= matrix.rows || startColumn < 0 || startColumn >= matrix.columns || endColumn < 0 || endColumn >= matrix.columns) {\n        throw new RangeError('Submatrix indices are out of range');\n    }\n}\n\nexport function getRange(from, to) {\n    var arr = new Array(to - from + 1);\n    for (var i = 0; i < arr.length; i++) {\n        arr[i] = from + i;\n    }\n    return arr;\n}\n\nexport function sumByRow(matrix) {\n    var sum = Matrix.zeros(matrix.rows, 1);\n    for (var i = 0; i < matrix.rows; ++i) {\n        for (var j = 0; j < matrix.columns; ++j) {\n            sum.set(i, 0, sum.get(i, 0) + matrix.get(i, j));\n        }\n    }\n    return sum;\n}\n\nexport function sumByColumn(matrix) {\n    var sum = Matrix.zeros(1, matrix.columns);\n    for (var i = 0; i < matrix.rows; ++i) {\n        for (var j = 0; j < matrix.columns; ++j) {\n            sum.set(0, j, sum.get(0, j) + matrix.get(i, j));\n        }\n    }\n    return sum;\n}\n\nexport function sumAll(matrix) {\n    var v = 0;\n    for (var i = 0; i < matrix.rows; i++) {\n        for (var j = 0; j < matrix.columns; j++) {\n            v += matrix.get(i, j);\n        }\n    }\n    return v;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-matrix/src/util.js","'use strict';\n\nvar Matrix = require('./matrix');\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexports.checkRowIndex = function checkRowIndex(matrix, index, outer) {\n    var max = outer ? matrix.rows : matrix.rows - 1;\n    if (index < 0 || index > max) {\n        throw new RangeError('Row index out of range');\n    }\n};\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexports.checkColumnIndex = function checkColumnIndex(matrix, index, outer) {\n    var max = outer ? matrix.columns : matrix.columns - 1;\n    if (index < 0 || index > max) {\n        throw new RangeError('Column index out of range');\n    }\n};\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexports.checkRowVector = function checkRowVector(matrix, vector) {\n    if (vector.to1DArray) {\n        vector = vector.to1DArray();\n    }\n    if (vector.length !== matrix.columns) {\n        throw new RangeError('vector size must be the same as the number of columns');\n    }\n    return vector;\n};\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexports.checkColumnVector = function checkColumnVector(matrix, vector) {\n    if (vector.to1DArray) {\n        vector = vector.to1DArray();\n    }\n    if (vector.length !== matrix.rows) {\n        throw new RangeError('vector size must be the same as the number of rows');\n    }\n    return vector;\n};\n\nexports.checkIndices = function checkIndices(matrix, rowIndices, columnIndices) {\n    var rowOut = rowIndices.some(r => {\n        return r < 0 || r >= matrix.rows;\n\n    });\n\n    var columnOut = columnIndices.some(c => {\n        return c < 0 || c >= matrix.columns;\n    });\n\n    if (rowOut || columnOut) {\n        throw new RangeError('Indices are out of range');\n    }\n\n    if (typeof rowIndices !== 'object' || typeof columnIndices !== 'object') {\n        throw new TypeError('Unexpected type for row/column indices');\n    }\n    if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n    if (!Array.isArray(columnIndices)) rowIndices = Array.from(columnIndices);\n\n    return {\n        row: rowIndices,\n        column: columnIndices\n    };\n};\n\nexports.checkRange = function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n    if (arguments.length !== 5) throw new TypeError('Invalid argument type');\n    var notAllNumbers = Array.from(arguments).slice(1).some(function (arg) {\n        return typeof arg !== 'number';\n    });\n    if (notAllNumbers) throw new TypeError('Invalid argument type');\n    if (startRow > endRow || startColumn > endColumn || startRow < 0 || startRow >= matrix.rows || endRow < 0 || endRow >= matrix.rows || startColumn < 0 || startColumn >= matrix.columns || endColumn < 0 || endColumn >= matrix.columns) {\n        throw new RangeError('Submatrix indices are out of range');\n    }\n};\n\nexports.getRange = function getRange(from, to) {\n    var arr = new Array(to - from + 1);\n    for (var i = 0; i < arr.length; i++) {\n        arr[i] = from + i;\n    }\n    return arr;\n};\n\nexports.sumByRow = function sumByRow(matrix) {\n    var sum = Matrix.Matrix.zeros(matrix.rows, 1);\n    for (var i = 0; i < matrix.rows; ++i) {\n        for (var j = 0; j < matrix.columns; ++j) {\n            sum.set(i, 0, sum.get(i, 0) + matrix.get(i, j));\n        }\n    }\n    return sum;\n};\n\nexports.sumByColumn = function sumByColumn(matrix) {\n    var sum = Matrix.Matrix.zeros(1, matrix.columns);\n    for (var i = 0; i < matrix.rows; ++i) {\n        for (var j = 0; j < matrix.columns; ++j) {\n            sum.set(0, j, sum.get(0, j) + matrix.get(i, j));\n        }\n    }\n    return sum;\n};\n\nexports.sumAll = function sumAll(matrix) {\n    var v = 0;\n    for (var i = 0; i < matrix.rows; i++) {\n        for (var j = 0; j < matrix.columns; j++) {\n            v += matrix.get(i, j);\n        }\n    }\n    return v;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/util.js","'use strict';\n\nvar Matrix = require('./matrix');\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexports.checkRowIndex = function checkRowIndex(matrix, index, outer) {\n    var max = outer ? matrix.rows : matrix.rows - 1;\n    if (index < 0 || index > max) {\n        throw new RangeError('Row index out of range');\n    }\n};\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexports.checkColumnIndex = function checkColumnIndex(matrix, index, outer) {\n    var max = outer ? matrix.columns : matrix.columns - 1;\n    if (index < 0 || index > max) {\n        throw new RangeError('Column index out of range');\n    }\n};\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexports.checkRowVector = function checkRowVector(matrix, vector) {\n    if (vector.to1DArray) {\n        vector = vector.to1DArray();\n    }\n    if (vector.length !== matrix.columns) {\n        throw new RangeError('vector size must be the same as the number of columns');\n    }\n    return vector;\n};\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexports.checkColumnVector = function checkColumnVector(matrix, vector) {\n    if (vector.to1DArray) {\n        vector = vector.to1DArray();\n    }\n    if (vector.length !== matrix.rows) {\n        throw new RangeError('vector size must be the same as the number of rows');\n    }\n    return vector;\n};\n\nexports.checkIndices = function checkIndices(matrix, rowIndices, columnIndices) {\n    var rowOut = rowIndices.some(r => {\n        return r < 0 || r >= matrix.rows;\n\n    });\n\n    var columnOut = columnIndices.some(c => {\n        return c < 0 || c >= matrix.columns;\n    });\n\n    if (rowOut || columnOut) {\n        throw new RangeError('Indices are out of range');\n    }\n\n    if (typeof rowIndices !== 'object' || typeof columnIndices !== 'object') {\n        throw new TypeError('Unexpected type for row/column indices');\n    }\n    if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n    if (!Array.isArray(columnIndices)) rowIndices = Array.from(columnIndices);\n\n    return {\n        row: rowIndices,\n        column: columnIndices\n    };\n};\n\nexports.checkRange = function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n    if (arguments.length !== 5) throw new TypeError('Invalid argument type');\n    var notAllNumbers = Array.from(arguments).slice(1).some(function (arg) {\n        return typeof arg !== 'number';\n    });\n    if (notAllNumbers) throw new TypeError('Invalid argument type');\n    if (startRow > endRow || startColumn > endColumn || startRow < 0 || startRow >= matrix.rows || endRow < 0 || endRow >= matrix.rows || startColumn < 0 || startColumn >= matrix.columns || endColumn < 0 || endColumn >= matrix.columns) {\n        throw new RangeError('Submatrix indices are out of range');\n    }\n};\n\nexports.getRange = function getRange(from, to) {\n    var arr = new Array(to - from + 1);\n    for (var i = 0; i < arr.length; i++) {\n        arr[i] = from + i;\n    }\n    return arr;\n};\n\nexports.sumByRow = function sumByRow(matrix) {\n    var sum = Matrix.Matrix.zeros(matrix.rows, 1);\n    for (var i = 0; i < matrix.rows; ++i) {\n        for (var j = 0; j < matrix.columns; ++j) {\n            sum.set(i, 0, sum.get(i, 0) + matrix.get(i, j));\n        }\n    }\n    return sum;\n};\n\nexports.sumByColumn = function sumByColumn(matrix) {\n    var sum = Matrix.Matrix.zeros(1, matrix.columns);\n    for (var i = 0; i < matrix.rows; ++i) {\n        for (var j = 0; j < matrix.columns; ++j) {\n            sum.set(0, j, sum.get(0, j) + matrix.get(i, j));\n        }\n    }\n    return sum;\n};\n\nexports.sumAll = function sumAll(matrix) {\n    var v = 0;\n    for (var i = 0; i < matrix.rows; i++) {\n        for (var j = 0; j < matrix.columns; j++) {\n            v += matrix.get(i, j);\n        }\n    }\n    return v;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pca/node_modules/ml-matrix/src/util.js","'use strict';\n\nvar Matrix = require('./matrix');\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexports.checkRowIndex = function checkRowIndex(matrix, index, outer) {\n    var max = outer ? matrix.rows : matrix.rows - 1;\n    if (index < 0 || index > max) {\n        throw new RangeError('Row index out of range');\n    }\n};\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexports.checkColumnIndex = function checkColumnIndex(matrix, index, outer) {\n    var max = outer ? matrix.columns : matrix.columns - 1;\n    if (index < 0 || index > max) {\n        throw new RangeError('Column index out of range');\n    }\n};\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexports.checkRowVector = function checkRowVector(matrix, vector) {\n    if (vector.to1DArray) {\n        vector = vector.to1DArray();\n    }\n    if (vector.length !== matrix.columns) {\n        throw new RangeError('vector size must be the same as the number of columns');\n    }\n    return vector;\n};\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexports.checkColumnVector = function checkColumnVector(matrix, vector) {\n    if (vector.to1DArray) {\n        vector = vector.to1DArray();\n    }\n    if (vector.length !== matrix.rows) {\n        throw new RangeError('vector size must be the same as the number of rows');\n    }\n    return vector;\n};\n\nexports.checkIndices = function checkIndices(matrix, rowIndices, columnIndices) {\n    var rowOut = rowIndices.some(r => {\n        return r < 0 || r >= matrix.rows;\n\n    });\n\n    var columnOut = columnIndices.some(c => {\n        return c < 0 || c >= matrix.columns;\n    });\n\n    if (rowOut || columnOut) {\n        throw new RangeError('Indices are out of range');\n    }\n\n    if (typeof rowIndices !== 'object' || typeof columnIndices !== 'object') {\n        throw new TypeError('Unexpected type for row/column indices');\n    }\n    if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n    if (!Array.isArray(columnIndices)) rowIndices = Array.from(columnIndices);\n\n    return {\n        row: rowIndices,\n        column: columnIndices\n    };\n};\n\nexports.checkRange = function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n    if (arguments.length !== 5) throw new TypeError('Invalid argument type');\n    var notAllNumbers = Array.from(arguments).slice(1).some(function (arg) {\n        return typeof arg !== 'number';\n    });\n    if (notAllNumbers) throw new TypeError('Invalid argument type');\n    if (startRow > endRow || startColumn > endColumn || startRow < 0 || startRow >= matrix.rows || endRow < 0 || endRow >= matrix.rows || startColumn < 0 || startColumn >= matrix.columns || endColumn < 0 || endColumn >= matrix.columns) {\n        throw new RangeError('Submatrix indices are out of range');\n    }\n};\n\nexports.getRange = function getRange(from, to) {\n    var arr = new Array(to - from + 1);\n    for (var i = 0; i < arr.length; i++) {\n        arr[i] = from + i;\n    }\n    return arr;\n};\n\nexports.sumByRow = function sumByRow(matrix) {\n    var sum = Matrix.Matrix.zeros(matrix.rows, 1);\n    for (var i = 0; i < matrix.rows; ++i) {\n        for (var j = 0; j < matrix.columns; ++j) {\n            sum.set(i, 0, sum.get(i, 0) + matrix.get(i, j));\n        }\n    }\n    return sum;\n};\n\nexports.sumByColumn = function sumByColumn(matrix) {\n    var sum = Matrix.Matrix.zeros(1, matrix.columns);\n    for (var i = 0; i < matrix.rows; ++i) {\n        for (var j = 0; j < matrix.columns; ++j) {\n            sum.set(0, j, sum.get(0, j) + matrix.get(i, j));\n        }\n    }\n    return sum;\n};\n\nexports.sumAll = function sumAll(matrix) {\n    var v = 0;\n    for (var i = 0; i < matrix.rows; i++) {\n        for (var j = 0; j < matrix.columns; j++) {\n            v += matrix.get(i, j);\n        }\n    }\n    return v;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/util.js","'use strict';\n\nvar Matrix = require('./matrix');\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexports.checkRowIndex = function checkRowIndex(matrix, index, outer) {\n    var max = outer ? matrix.rows : matrix.rows - 1;\n    if (index < 0 || index > max) {\n        throw new RangeError('Row index out of range');\n    }\n};\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexports.checkColumnIndex = function checkColumnIndex(matrix, index, outer) {\n    var max = outer ? matrix.columns : matrix.columns - 1;\n    if (index < 0 || index > max) {\n        throw new RangeError('Column index out of range');\n    }\n};\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexports.checkRowVector = function checkRowVector(matrix, vector) {\n    if (vector.to1DArray) {\n        vector = vector.to1DArray();\n    }\n    if (vector.length !== matrix.columns) {\n        throw new RangeError('vector size must be the same as the number of columns');\n    }\n    return vector;\n};\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexports.checkColumnVector = function checkColumnVector(matrix, vector) {\n    if (vector.to1DArray) {\n        vector = vector.to1DArray();\n    }\n    if (vector.length !== matrix.rows) {\n        throw new RangeError('vector size must be the same as the number of rows');\n    }\n    return vector;\n};\n\nexports.checkIndices = function checkIndices(matrix, rowIndices, columnIndices) {\n    var rowOut = rowIndices.some(r => {\n        return r < 0 || r >= matrix.rows;\n\n    });\n\n    var columnOut = columnIndices.some(c => {\n        return c < 0 || c >= matrix.columns;\n    });\n\n    if (rowOut || columnOut) {\n        throw new RangeError('Indices are out of range');\n    }\n\n    if (typeof rowIndices !== 'object' || typeof columnIndices !== 'object') {\n        throw new TypeError('Unexpected type for row/column indices');\n    }\n    if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n    if (!Array.isArray(columnIndices)) rowIndices = Array.from(columnIndices);\n\n    return {\n        row: rowIndices,\n        column: columnIndices\n    };\n};\n\nexports.checkRange = function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n    if (arguments.length !== 5) throw new TypeError('Invalid argument type');\n    var notAllNumbers = Array.from(arguments).slice(1).some(function (arg) {\n        return typeof arg !== 'number';\n    });\n    if (notAllNumbers) throw new TypeError('Invalid argument type');\n    if (startRow > endRow || startColumn > endColumn || startRow < 0 || startRow >= matrix.rows || endRow < 0 || endRow >= matrix.rows || startColumn < 0 || startColumn >= matrix.columns || endColumn < 0 || endColumn >= matrix.columns) {\n        throw new RangeError('Submatrix indices are out of range');\n    }\n};\n\nexports.getRange = function getRange(from, to) {\n    var arr = new Array(to - from + 1);\n    for (var i = 0; i < arr.length; i++) {\n        arr[i] = from + i;\n    }\n    return arr;\n};\n\nexports.sumByRow = function sumByRow(matrix) {\n    var sum = Matrix.Matrix.zeros(matrix.rows, 1);\n    for (var i = 0; i < matrix.rows; ++i) {\n        for (var j = 0; j < matrix.columns; ++j) {\n            sum.set(i, 0, sum.get(i, 0) + matrix.get(i, j));\n        }\n    }\n    return sum;\n};\n\nexports.sumByColumn = function sumByColumn(matrix) {\n    var sum = Matrix.Matrix.zeros(1, matrix.columns);\n    for (var i = 0; i < matrix.rows; ++i) {\n        for (var j = 0; j < matrix.columns; ++j) {\n            sum.set(0, j, sum.get(0, j) + matrix.get(i, j));\n        }\n    }\n    return sum;\n};\n\nexports.sumAll = function sumAll(matrix) {\n    var v = 0;\n    for (var i = 0; i < matrix.rows; i++) {\n        for (var j = 0; j < matrix.columns; j++) {\n            v += matrix.get(i, j);\n        }\n    }\n    return v;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/util.js","'use strict';\n\nvar Matrix = require('./matrix');\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexports.checkRowIndex = function checkRowIndex(matrix, index, outer) {\n    var max = outer ? matrix.rows : matrix.rows - 1;\n    if (index < 0 || index > max) {\n        throw new RangeError('Row index out of range');\n    }\n};\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexports.checkColumnIndex = function checkColumnIndex(matrix, index, outer) {\n    var max = outer ? matrix.columns : matrix.columns - 1;\n    if (index < 0 || index > max) {\n        throw new RangeError('Column index out of range');\n    }\n};\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexports.checkRowVector = function checkRowVector(matrix, vector) {\n    if (vector.to1DArray) {\n        vector = vector.to1DArray();\n    }\n    if (vector.length !== matrix.columns) {\n        throw new RangeError('vector size must be the same as the number of columns');\n    }\n    return vector;\n};\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexports.checkColumnVector = function checkColumnVector(matrix, vector) {\n    if (vector.to1DArray) {\n        vector = vector.to1DArray();\n    }\n    if (vector.length !== matrix.rows) {\n        throw new RangeError('vector size must be the same as the number of rows');\n    }\n    return vector;\n};\n\nexports.checkIndices = function checkIndices(matrix, rowIndices, columnIndices) {\n    var rowOut = rowIndices.some(r => {\n        return r < 0 || r >= matrix.rows;\n\n    });\n\n    var columnOut = columnIndices.some(c => {\n        return c < 0 || c >= matrix.columns;\n    });\n\n    if (rowOut || columnOut) {\n        throw new RangeError('Indices are out of range');\n    }\n\n    if (typeof rowIndices !== 'object' || typeof columnIndices !== 'object') {\n        throw new TypeError('Unexpected type for row/column indices');\n    }\n    if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n    if (!Array.isArray(columnIndices)) rowIndices = Array.from(columnIndices);\n\n    return {\n        row: rowIndices,\n        column: columnIndices\n    };\n};\n\nexports.checkRange = function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n    if (arguments.length !== 5) throw new TypeError('Invalid argument type');\n    var notAllNumbers = Array.from(arguments).slice(1).some(function (arg) {\n        return typeof arg !== 'number';\n    });\n    if (notAllNumbers) throw new TypeError('Invalid argument type');\n    if (startRow > endRow || startColumn > endColumn || startRow < 0 || startRow >= matrix.rows || endRow < 0 || endRow >= matrix.rows || startColumn < 0 || startColumn >= matrix.columns || endColumn < 0 || endColumn >= matrix.columns) {\n        throw new RangeError('Submatrix indices are out of range');\n    }\n};\n\nexports.getRange = function getRange(from, to) {\n    var arr = new Array(to - from + 1);\n    for (var i = 0; i < arr.length; i++) {\n        arr[i] = from + i;\n    }\n    return arr;\n};\n\nexports.sumByRow = function sumByRow(matrix) {\n    var sum = Matrix.Matrix.zeros(matrix.rows, 1);\n    for (var i = 0; i < matrix.rows; ++i) {\n        for (var j = 0; j < matrix.columns; ++j) {\n            sum.set(i, 0, sum.get(i, 0) + matrix.get(i, j));\n        }\n    }\n    return sum;\n};\n\nexports.sumByColumn = function sumByColumn(matrix) {\n    var sum = Matrix.Matrix.zeros(1, matrix.columns);\n    for (var i = 0; i < matrix.rows; ++i) {\n        for (var j = 0; j < matrix.columns; ++j) {\n            sum.set(0, j, sum.get(0, j) + matrix.get(i, j));\n        }\n    }\n    return sum;\n};\n\nexports.sumAll = function sumAll(matrix) {\n    var v = 0;\n    for (var i = 0; i < matrix.rows; i++) {\n        for (var j = 0; j < matrix.columns; j++) {\n            v += matrix.get(i, j);\n        }\n    }\n    return v;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/util.js","'use strict';\n\nvar Matrix = require('./matrix');\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexports.checkRowIndex = function checkRowIndex(matrix, index, outer) {\n    var max = outer ? matrix.rows : matrix.rows - 1;\n    if (index < 0 || index > max) {\n        throw new RangeError('Row index out of range');\n    }\n};\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexports.checkColumnIndex = function checkColumnIndex(matrix, index, outer) {\n    var max = outer ? matrix.columns : matrix.columns - 1;\n    if (index < 0 || index > max) {\n        throw new RangeError('Column index out of range');\n    }\n};\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexports.checkRowVector = function checkRowVector(matrix, vector) {\n    if (vector.to1DArray) {\n        vector = vector.to1DArray();\n    }\n    if (vector.length !== matrix.columns) {\n        throw new RangeError('vector size must be the same as the number of columns');\n    }\n    return vector;\n};\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexports.checkColumnVector = function checkColumnVector(matrix, vector) {\n    if (vector.to1DArray) {\n        vector = vector.to1DArray();\n    }\n    if (vector.length !== matrix.rows) {\n        throw new RangeError('vector size must be the same as the number of rows');\n    }\n    return vector;\n};\n\nexports.checkIndices = function checkIndices(matrix, rowIndices, columnIndices) {\n    var rowOut = rowIndices.some(r => {\n        return r < 0 || r >= matrix.rows;\n\n    });\n\n    var columnOut = columnIndices.some(c => {\n        return c < 0 || c >= matrix.columns;\n    });\n\n    if (rowOut || columnOut) {\n        throw new RangeError('Indices are out of range');\n    }\n\n    if (typeof rowIndices !== 'object' || typeof columnIndices !== 'object') {\n        throw new TypeError('Unexpected type for row/column indices');\n    }\n    if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n    if (!Array.isArray(columnIndices)) rowIndices = Array.from(columnIndices);\n\n    return {\n        row: rowIndices,\n        column: columnIndices\n    };\n};\n\nexports.checkRange = function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n    if (arguments.length !== 5) throw new TypeError('Invalid argument type');\n    var notAllNumbers = Array.from(arguments).slice(1).some(function (arg) {\n        return typeof arg !== 'number';\n    });\n    if (notAllNumbers) throw new TypeError('Invalid argument type');\n    if (startRow > endRow || startColumn > endColumn || startRow < 0 || startRow >= matrix.rows || endRow < 0 || endRow >= matrix.rows || startColumn < 0 || startColumn >= matrix.columns || endColumn < 0 || endColumn >= matrix.columns) {\n        throw new RangeError('Submatrix indices are out of range');\n    }\n};\n\nexports.getRange = function getRange(from, to) {\n    var arr = new Array(to - from + 1);\n    for (var i = 0; i < arr.length; i++) {\n        arr[i] = from + i;\n    }\n    return arr;\n};\n\nexports.sumByRow = function sumByRow(matrix) {\n    var sum = Matrix.Matrix.zeros(matrix.rows, 1);\n    for (var i = 0; i < matrix.rows; ++i) {\n        for (var j = 0; j < matrix.columns; ++j) {\n            sum.set(i, 0, sum.get(i, 0) + matrix.get(i, j));\n        }\n    }\n    return sum;\n};\n\nexports.sumByColumn = function sumByColumn(matrix) {\n    var sum = Matrix.Matrix.zeros(1, matrix.columns);\n    for (var i = 0; i < matrix.rows; ++i) {\n        for (var j = 0; j < matrix.columns; ++j) {\n            sum.set(0, j, sum.get(0, j) + matrix.get(i, j));\n        }\n    }\n    return sum;\n};\n\nexports.sumAll = function sumAll(matrix) {\n    var v = 0;\n    for (var i = 0; i < matrix.rows; i++) {\n        for (var j = 0; j < matrix.columns; j++) {\n            v += matrix.get(i, j);\n        }\n    }\n    return v;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-naivebayes/node_modules/ml-matrix/src/util.js","'use strict';\n\nvar Matrix = require('./matrix');\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexports.checkRowIndex = function checkRowIndex(matrix, index, outer) {\n    var max = outer ? matrix.rows : matrix.rows - 1;\n    if (index < 0 || index > max) {\n        throw new RangeError('Row index out of range');\n    }\n};\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexports.checkColumnIndex = function checkColumnIndex(matrix, index, outer) {\n    var max = outer ? matrix.columns : matrix.columns - 1;\n    if (index < 0 || index > max) {\n        throw new RangeError('Column index out of range');\n    }\n};\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexports.checkRowVector = function checkRowVector(matrix, vector) {\n    if (vector.to1DArray) {\n        vector = vector.to1DArray();\n    }\n    if (vector.length !== matrix.columns) {\n        throw new RangeError('vector size must be the same as the number of columns');\n    }\n    return vector;\n};\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexports.checkColumnVector = function checkColumnVector(matrix, vector) {\n    if (vector.to1DArray) {\n        vector = vector.to1DArray();\n    }\n    if (vector.length !== matrix.rows) {\n        throw new RangeError('vector size must be the same as the number of rows');\n    }\n    return vector;\n};\n\nexports.checkIndices = function checkIndices(matrix, rowIndices, columnIndices) {\n    var rowOut = rowIndices.some(r => {\n        return r < 0 || r >= matrix.rows;\n\n    });\n\n    var columnOut = columnIndices.some(c => {\n        return c < 0 || c >= matrix.columns;\n    });\n\n    if (rowOut || columnOut) {\n        throw new RangeError('Indices are out of range');\n    }\n\n    if (typeof rowIndices !== 'object' || typeof columnIndices !== 'object') {\n        throw new TypeError('Unexpected type for row/column indices');\n    }\n    if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n    if (!Array.isArray(columnIndices)) rowIndices = Array.from(columnIndices);\n\n    return {\n        row: rowIndices,\n        column: columnIndices\n    };\n};\n\nexports.checkRange = function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n    if (arguments.length !== 5) throw new TypeError('Invalid argument type');\n    var notAllNumbers = Array.from(arguments).slice(1).some(function (arg) {\n        return typeof arg !== 'number';\n    });\n    if (notAllNumbers) throw new TypeError('Invalid argument type');\n    if (startRow > endRow || startColumn > endColumn || startRow < 0 || startRow >= matrix.rows || endRow < 0 || endRow >= matrix.rows || startColumn < 0 || startColumn >= matrix.columns || endColumn < 0 || endColumn >= matrix.columns) {\n        throw new RangeError('Submatrix indices are out of range');\n    }\n};\n\nexports.getRange = function getRange(from, to) {\n    var arr = new Array(to - from + 1);\n    for (var i = 0; i < arr.length; i++) {\n        arr[i] = from + i;\n    }\n    return arr;\n};\n\nexports.sumByRow = function sumByRow(matrix) {\n    var sum = Matrix.Matrix.zeros(matrix.rows, 1);\n    for (var i = 0; i < matrix.rows; ++i) {\n        for (var j = 0; j < matrix.columns; ++j) {\n            sum.set(i, 0, sum.get(i, 0) + matrix.get(i, j));\n        }\n    }\n    return sum;\n};\n\nexports.sumByColumn = function sumByColumn(matrix) {\n    var sum = Matrix.Matrix.zeros(1, matrix.columns);\n    for (var i = 0; i < matrix.rows; ++i) {\n        for (var j = 0; j < matrix.columns; ++j) {\n            sum.set(0, j, sum.get(0, j) + matrix.get(i, j));\n        }\n    }\n    return sum;\n};\n\nexports.sumAll = function sumAll(matrix) {\n    var v = 0;\n    for (var i = 0; i < matrix.rows; i++) {\n        for (var j = 0; j < matrix.columns; j++) {\n            v += matrix.get(i, j);\n        }\n    }\n    return v;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pls/node_modules/ml-matrix/src/util.js","'use strict';\n\nvar Matrix = require('./matrix');\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexports.checkRowIndex = function checkRowIndex(matrix, index, outer) {\n    var max = outer ? matrix.rows : matrix.rows - 1;\n    if (index < 0 || index > max) {\n        throw new RangeError('Row index out of range');\n    }\n};\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexports.checkColumnIndex = function checkColumnIndex(matrix, index, outer) {\n    var max = outer ? matrix.columns : matrix.columns - 1;\n    if (index < 0 || index > max) {\n        throw new RangeError('Column index out of range');\n    }\n};\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexports.checkRowVector = function checkRowVector(matrix, vector) {\n    if (vector.to1DArray) {\n        vector = vector.to1DArray();\n    }\n    if (vector.length !== matrix.columns) {\n        throw new RangeError('vector size must be the same as the number of columns');\n    }\n    return vector;\n};\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexports.checkColumnVector = function checkColumnVector(matrix, vector) {\n    if (vector.to1DArray) {\n        vector = vector.to1DArray();\n    }\n    if (vector.length !== matrix.rows) {\n        throw new RangeError('vector size must be the same as the number of rows');\n    }\n    return vector;\n};\n\nexports.checkIndices = function checkIndices(matrix, rowIndices, columnIndices) {\n    var rowOut = rowIndices.some(r => {\n        return r < 0 || r >= matrix.rows;\n\n    });\n\n    var columnOut = columnIndices.some(c => {\n        return c < 0 || c >= matrix.columns;\n    });\n\n    if (rowOut || columnOut) {\n        throw new RangeError('Indices are out of range');\n    }\n\n    if (typeof rowIndices !== 'object' || typeof columnIndices !== 'object') {\n        throw new TypeError('Unexpected type for row/column indices');\n    }\n    if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n    if (!Array.isArray(columnIndices)) rowIndices = Array.from(columnIndices);\n\n    return {\n        row: rowIndices,\n        column: columnIndices\n    };\n};\n\nexports.checkRange = function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n    if (arguments.length !== 5) throw new TypeError('Invalid argument type');\n    var notAllNumbers = Array.from(arguments).slice(1).some(function (arg) {\n        return typeof arg !== 'number';\n    });\n    if (notAllNumbers) throw new TypeError('Invalid argument type');\n    if (startRow > endRow || startColumn > endColumn || startRow < 0 || startRow >= matrix.rows || endRow < 0 || endRow >= matrix.rows || startColumn < 0 || startColumn >= matrix.columns || endColumn < 0 || endColumn >= matrix.columns) {\n        throw new RangeError('Submatrix indices are out of range');\n    }\n};\n\nexports.getRange = function getRange(from, to) {\n    var arr = new Array(to - from + 1);\n    for (var i = 0; i < arr.length; i++) {\n        arr[i] = from + i;\n    }\n    return arr;\n};\n\nexports.sumByRow = function sumByRow(matrix) {\n    var sum = Matrix.Matrix.zeros(matrix.rows, 1);\n    for (var i = 0; i < matrix.rows; ++i) {\n        for (var j = 0; j < matrix.columns; ++j) {\n            sum.set(i, 0, sum.get(i, 0) + matrix.get(i, j));\n        }\n    }\n    return sum;\n};\n\nexports.sumByColumn = function sumByColumn(matrix) {\n    var sum = Matrix.Matrix.zeros(1, matrix.columns);\n    for (var i = 0; i < matrix.rows; ++i) {\n        for (var j = 0; j < matrix.columns; ++j) {\n            sum.set(0, j, sum.get(0, j) + matrix.get(i, j));\n        }\n    }\n    return sum;\n};\n\nexports.sumAll = function sumAll(matrix) {\n    var v = 0;\n    for (var i = 0; i < matrix.rows; i++) {\n        for (var j = 0; j < matrix.columns; j++) {\n            v += matrix.get(i, j);\n        }\n    }\n    return v;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-fnn/node_modules/ml-matrix/src/util.js","import Matrix from '../matrix';\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\nfunction LuDecomposition(matrix) {\n    if (!(this instanceof LuDecomposition)) {\n        return new LuDecomposition(matrix);\n    }\n\n    matrix = Matrix.checkMatrix(matrix);\n\n    var lu = matrix.clone(),\n        rows = lu.rows,\n        columns = lu.columns,\n        pivotVector = new Array(rows),\n        pivotSign = 1,\n        i, j, k, p, s, t, v,\n        LUrowi, LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n        pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n\n        for (i = 0; i < rows; i++) {\n            LUcolj[i] = lu[i][j];\n        }\n\n        for (i = 0; i < rows; i++) {\n            LUrowi = lu[i];\n            kmax = Math.min(i, j);\n            s = 0;\n            for (k = 0; k < kmax; k++) {\n                s += LUrowi[k] * LUcolj[k];\n            }\n            LUrowi[j] = LUcolj[i] -= s;\n        }\n\n        p = j;\n        for (i = j + 1; i < rows; i++) {\n            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n                p = i;\n            }\n        }\n\n        if (p !== j) {\n            for (k = 0; k < columns; k++) {\n                t = lu[p][k];\n                lu[p][k] = lu[j][k];\n                lu[j][k] = t;\n            }\n\n            v = pivotVector[p];\n            pivotVector[p] = pivotVector[j];\n            pivotVector[j] = v;\n\n            pivotSign = -pivotSign;\n        }\n\n        if (j < rows && lu[j][j] !== 0) {\n            for (i = j + 1; i < rows; i++) {\n                lu[i][j] /= lu[j][j];\n            }\n        }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n}\n\nLuDecomposition.prototype = {\n    isSingular: function () {\n        var data = this.LU,\n            col = data.columns;\n        for (var j = 0; j < col; j++) {\n            if (data[j][j] === 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    get determinant() {\n        var data = this.LU;\n        if (!data.isSquare()) {\n            throw new Error('Matrix must be square');\n        }\n        var determinant = this.pivotSign, col = data.columns;\n        for (var j = 0; j < col; j++) {\n            determinant *= data[j][j];\n        }\n        return determinant;\n    },\n    get lowerTriangularMatrix() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i > j) {\n                    X[i][j] = data[i][j];\n                } else if (i === j) {\n                    X[i][j] = 1;\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get upperTriangularMatrix() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i <= j) {\n                    X[i][j] = data[i][j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get pivotPermutationVector() {\n        return this.pivotVector.slice();\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var lu = this.LU,\n            rows = lu.rows;\n\n        if (rows !== value.rows) {\n            throw new Error('Invalid matrix dimensions');\n        }\n        if (this.isSingular()) {\n            throw new Error('LU matrix is singular');\n        }\n\n        var count = value.columns;\n        var X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n        var columns = lu.columns;\n        var i, j, k;\n\n        for (k = 0; k < columns; k++) {\n            for (i = k + 1; i < columns; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        for (k = columns - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= lu[k][k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        return X;\n    }\n};\n\nexport default LuDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-matrix/src/dc/lu.js","export function hypotenuse(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n        r = b / a;\n        return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n        r = a / b;\n        return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n}\n\n// For use in the decomposition algorithms. With big matrices, access time is\n// too long on elements from array subclass\n// todo check when it is fixed in v8\n// http://jsperf.com/access-and-write-array-subclass\nexport function getEmpty2DArray(rows, columns) {\n    var array = new Array(rows);\n    for (var i = 0; i < rows; i++) {\n        array[i] = new Array(columns);\n    }\n    return array;\n}\n\nexport function getFilled2DArray(rows, columns, value) {\n    var array = new Array(rows);\n    for (var i = 0; i < rows; i++) {\n        array[i] = new Array(columns);\n        for (var j = 0; j < columns; j++) {\n            array[i][j] = value;\n        }\n    }\n    return array;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-matrix/src/dc/util.js","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/extend/index.js","import BaseRegression, {checkArrayLength, maybeToPrecision} from 'ml-regression-base';\n\nexport default class SimpleLinearRegression extends BaseRegression {\n    constructor(x, y) {\n        super();\n        if (x === true) {\n            this.slope = y.slope;\n            this.intercept = y.intercept;\n            this.coefficients = [y.intercept, y.slope];\n        } else {\n            checkArrayLength(x, y);\n            regress(this, x, y);\n        }\n    }\n\n    toJSON() {\n        return {\n            name: 'simpleLinearRegression',\n            slope: this.slope,\n            intercept: this.intercept\n        };\n    }\n\n    _predict(x) {\n        return this.slope * x + this.intercept;\n    }\n\n    computeX(y) {\n        return (y - this.intercept) / this.slope;\n    }\n\n    toString(precision) {\n        let result = 'f(x) = ';\n        if (this.slope !== 0) {\n            const xFactor = maybeToPrecision(this.slope, precision);\n            result += (xFactor === '1' ? '' : xFactor + ' * ') + 'x';\n            if (this.intercept) {\n                const absIntercept = Math.abs(this.intercept);\n                const operator = absIntercept === this.intercept ? '+' : '-';\n                result += ` ${operator} ${maybeToPrecision(absIntercept, precision)}`;\n            }\n        } else {\n            result += maybeToPrecision(this.intercept, precision);\n        }\n        return result;\n    }\n\n    toLaTeX(precision) {\n        return this.toString(precision);\n    }\n\n    static load(json) {\n        if (json.name !== 'simpleLinearRegression') {\n            throw new TypeError('not a SLR model');\n        }\n        return new SimpleLinearRegression(true, json);\n    }\n}\n\nfunction regress(slr, x, y) {\n    const n = x.length;\n    let xSum = 0;\n    let ySum = 0;\n\n    let xSquared = 0;\n    let xY = 0;\n\n    for (let i = 0; i < n; i++) {\n        xSum += x[i];\n        ySum += y[i];\n        xSquared += x[i] * x[i];\n        xY += x[i] * y[i];\n    }\n\n    const numerator = (n * xY - xSum * ySum);\n    slr.slope = numerator / (n * xSquared - xSum * xSum);\n    slr.intercept = (1 / n) * ySum - slr.slope * (1 / n) * xSum;\n    slr.coefficients = [slr.intercept, slr.slope];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-regression-simple-linear/src/index.js","'use strict';\n\nconst Matrix = require('ml-matrix').Matrix;\n\nconst GaussianKernel = require('ml-kernel-gaussian');\nconst PolynomialKernel = require('ml-kernel-polynomial');\nconst ANOVAKernel = require('./kernels/anova-kernel');\nconst CauchyKernel = require('./kernels/cauchy-kernel');\nconst ExponentialKernel = require('./kernels/exponential-kernel');\nconst HistogramKernel = require('./kernels/histogram-intersection-kernel');\nconst LaplacianKernel = require('./kernels/laplacian-kernel');\nconst MultiquadraticKernel = require('./kernels/multiquadratic-kernel');\nconst RationalKernel = require('./kernels/rational-quadratic-kernel');\nconst SigmoidKernel = require('ml-kernel-sigmoid');\n\nconst kernelType = {\n    gaussian: GaussianKernel,\n    rbf: GaussianKernel,\n    polynomial: PolynomialKernel,\n    poly: PolynomialKernel,\n    anova: ANOVAKernel,\n    cauchy: CauchyKernel,\n    exponential: ExponentialKernel,\n    histogram: HistogramKernel,\n    min: HistogramKernel,\n    laplacian: LaplacianKernel,\n    multiquadratic: MultiquadraticKernel,\n    rational: RationalKernel,\n    sigmoid: SigmoidKernel,\n    mlp: SigmoidKernel\n};\n\nclass Kernel {\n    constructor(type, options) {\n        this.kernelType = type;\n        if (type === 'linear') return;\n\n        if (typeof type === 'string') {\n            type = type.toLowerCase();\n\n            var KernelConstructor = kernelType[type];\n            if (KernelConstructor) {\n                this.kernelFunction = new KernelConstructor(options);\n            } else {\n                throw new Error('unsupported kernel type: ' + type);\n            }\n        } else if (typeof type === 'object' && typeof type.compute === 'function') {\n            this.kernelFunction = type;\n        } else {\n            throw new TypeError('first argument must be a valid kernel type or instance');\n        }\n    }\n\n    compute(inputs, landmarks) {\n        if (landmarks === undefined) {\n            landmarks = inputs;\n        }\n\n        if (this.kernelType === 'linear') {\n            var matrix = new Matrix(inputs);\n            return matrix.mmul(new Matrix(landmarks).transposeView());\n        }\n\n        const kernelMatrix = new Matrix(inputs.length, landmarks.length);\n        var i, j;\n        if (inputs === landmarks) { // fast path, matrix is symmetric\n            for (i = 0; i < inputs.length; i++) {\n                for (j = i; j < inputs.length; j++) {\n                    kernelMatrix[i][j] = kernelMatrix[j][i] = this.kernelFunction.compute(inputs[i], inputs[j]);\n                }\n            }\n        } else {\n            for (i = 0; i < inputs.length; i++) {\n                for (j = 0; j < landmarks.length; j++) {\n                    kernelMatrix[i][j] = this.kernelFunction.compute(inputs[i], landmarks[j]);\n                }\n            }\n        }\n        return kernelMatrix;\n    }\n}\n\nmodule.exports = Kernel;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-kernel/src/kernel.js","'use strict';\n\nexports.hypotenuse = function hypotenuse(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n        r = b / a;\n        return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n        r = a / b;\n        return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n};\n\n// For use in the decomposition algorithms. With big matrices, access time is\n// too long on elements from array subclass\n// todo check when it is fixed in v8\n// http://jsperf.com/access-and-write-array-subclass\nexports.getEmpty2DArray = function (rows, columns) {\n    var array = new Array(rows);\n    for (var i = 0; i < rows; i++) {\n        array[i] = new Array(columns);\n    }\n    return array;\n};\n\nexports.getFilled2DArray = function (rows, columns, value) {\n    var array = new Array(rows);\n    for (var i = 0; i < rows; i++) {\n        array[i] = new Array(columns);\n        for (var j = 0; j < columns; j++) {\n            array[i][j] = value;\n        }\n    }\n    return array;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/dc/util.js","'use strict';\n\nexports.hypotenuse = function hypotenuse(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n        r = b / a;\n        return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n        r = a / b;\n        return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n};\n\n// For use in the decomposition algorithms. With big matrices, access time is\n// too long on elements from array subclass\n// todo check when it is fixed in v8\n// http://jsperf.com/access-and-write-array-subclass\nexports.getEmpty2DArray = function (rows, columns) {\n    var array = new Array(rows);\n    for (var i = 0; i < rows; i++) {\n        array[i] = new Array(columns);\n    }\n    return array;\n};\n\nexports.getFilled2DArray = function (rows, columns, value) {\n    var array = new Array(rows);\n    for (var i = 0; i < rows; i++) {\n        array[i] = new Array(columns);\n        for (var j = 0; j < columns; j++) {\n            array[i][j] = value;\n        }\n    }\n    return array;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pca/node_modules/ml-matrix/src/dc/util.js","'use strict';\n\nmodule.exports = require('./matrix').Matrix;\nmodule.exports.Decompositions = module.exports.DC = require('./decompositions');\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/index.js","'use strict';\n\nexports.hypotenuse = function hypotenuse(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n        r = b / a;\n        return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n        r = a / b;\n        return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n};\n\n// For use in the decomposition algorithms. With big matrices, access time is\n// too long on elements from array subclass\n// todo check when it is fixed in v8\n// http://jsperf.com/access-and-write-array-subclass\nexports.getEmpty2DArray = function (rows, columns) {\n    var array = new Array(rows);\n    for (var i = 0; i < rows; i++) {\n        array[i] = new Array(columns);\n    }\n    return array;\n};\n\nexports.getFilled2DArray = function (rows, columns, value) {\n    var array = new Array(rows);\n    for (var i = 0; i < rows; i++) {\n        array[i] = new Array(columns);\n        for (var j = 0; j < columns; j++) {\n            array[i][j] = value;\n        }\n    }\n    return array;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/dc/util.js","'use strict';\n\nexports.hypotenuse = function hypotenuse(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n        r = b / a;\n        return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n        r = a / b;\n        return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n};\n\n// For use in the decomposition algorithms. With big matrices, access time is\n// too long on elements from array subclass\n// todo check when it is fixed in v8\n// http://jsperf.com/access-and-write-array-subclass\nexports.getEmpty2DArray = function (rows, columns) {\n    var array = new Array(rows);\n    for (var i = 0; i < rows; i++) {\n        array[i] = new Array(columns);\n    }\n    return array;\n};\n\nexports.getFilled2DArray = function (rows, columns, value) {\n    var array = new Array(rows);\n    for (var i = 0; i < rows; i++) {\n        array[i] = new Array(columns);\n        for (var j = 0; j < columns; j++) {\n            array[i][j] = value;\n        }\n    }\n    return array;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/dc/util.js","'use strict';\n\nexports.hypotenuse = function hypotenuse(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n        r = b / a;\n        return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n        r = a / b;\n        return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n};\n\n// For use in the decomposition algorithms. With big matrices, access time is\n// too long on elements from array subclass\n// todo check when it is fixed in v8\n// http://jsperf.com/access-and-write-array-subclass\nexports.getEmpty2DArray = function (rows, columns) {\n    var array = new Array(rows);\n    for (var i = 0; i < rows; i++) {\n        array[i] = new Array(columns);\n    }\n    return array;\n};\n\nexports.getFilled2DArray = function (rows, columns, value) {\n    var array = new Array(rows);\n    for (var i = 0; i < rows; i++) {\n        array[i] = new Array(columns);\n        for (var j = 0; j < columns; j++) {\n            array[i][j] = value;\n        }\n    }\n    return array;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/dc/util.js","'use strict';\n\nexports.hypotenuse = function hypotenuse(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n        r = b / a;\n        return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n        r = a / b;\n        return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n};\n\n// For use in the decomposition algorithms. With big matrices, access time is\n// too long on elements from array subclass\n// todo check when it is fixed in v8\n// http://jsperf.com/access-and-write-array-subclass\nexports.getEmpty2DArray = function (rows, columns) {\n    var array = new Array(rows);\n    for (var i = 0; i < rows; i++) {\n        array[i] = new Array(columns);\n    }\n    return array;\n};\n\nexports.getFilled2DArray = function (rows, columns, value) {\n    var array = new Array(rows);\n    for (var i = 0; i < rows; i++) {\n        array[i] = new Array(columns);\n        for (var j = 0; j < columns; j++) {\n            array[i][j] = value;\n        }\n    }\n    return array;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-naivebayes/node_modules/ml-matrix/src/dc/util.js","'use strict';\n\nmodule.exports = require('./matrix').Matrix;\nmodule.exports.Decompositions = module.exports.DC = require('./decompositions');\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pls/node_modules/ml-matrix/src/index.js","'use strict';\n\nexports.hypotenuse = function hypotenuse(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n        r = b / a;\n        return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n        r = a / b;\n        return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n};\n\n// For use in the decomposition algorithms. With big matrices, access time is\n// too long on elements from array subclass\n// todo check when it is fixed in v8\n// http://jsperf.com/access-and-write-array-subclass\nexports.getEmpty2DArray = function (rows, columns) {\n    var array = new Array(rows);\n    for (var i = 0; i < rows; i++) {\n        array[i] = new Array(columns);\n    }\n    return array;\n};\n\nexports.getFilled2DArray = function (rows, columns, value) {\n    var array = new Array(rows);\n    for (var i = 0; i < rows; i++) {\n        array[i] = new Array(columns);\n        for (var j = 0; j < columns; j++) {\n            array[i][j] = value;\n        }\n    }\n    return array;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pls/node_modules/ml-matrix/src/dc/util.js","'use strict';\n\nconst Matrix = require('ml-matrix');\nconst Stat = require('ml-stat');\n\n/**\n * Function that given vector, returns his norm\n * @param {Vector} X\n * @returns {number} Norm of the vector\n */\nfunction norm(X) {\n    return Math.sqrt(X.clone().apply(pow2array).sum());\n}\n\n/**\n * Function that pow 2 each element of a Matrix or a Vector,\n * used in the apply method of the Matrix object\n * @param i - index i.\n * @param j - index j.\n * @return The Matrix object modified at the index i, j.\n * */\nfunction pow2array(i, j) {\n    this[i][j] = this[i][j] * this[i][j];\n    return this;\n}\n\n/**\n * Function that normalize the dataset and return the means and\n * standard deviation of each feature.\n * @param dataset\n * @returns {{result: Matrix, means: (*|number), std: Matrix}} dataset normalized, means\n *                                                             and standard deviations\n */\nfunction featureNormalize(dataset) {\n    var means = Stat.matrix.mean(dataset);\n    var std = Stat.matrix.standardDeviation(dataset, means, true);\n    var result = Matrix.checkMatrix(dataset).subRowVector(means);\n    return {result: result.divRowVector(std), means: means, std: std};\n}\n\nmodule.exports = {\n    norm: norm,\n    pow2array: pow2array,\n    featureNormalize: featureNormalize\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pls/src/utils.js","'use strict';\n\nconst Heap = require('heap');\n\nfunction Cluster() {\n    this.children = [];\n    this.distance = -1;\n    this.index = [];\n}\n\n/**\n * Creates an array of values where maximum distance smaller than the threshold\n * @param {number} threshold\n * @return {Array <Cluster>}\n */\nCluster.prototype.cut = function (threshold) {\n    if (threshold < 0) throw new RangeError('Threshold too small');\n    var root = new Cluster();\n    root.children = this.children;\n    root.distance = this.distance;\n    root.index = this.index;\n    var list = [root];\n    var ans = [];\n    while (list.length > 0) {\n        var aux = list.shift();\n        if (threshold >= aux.distance) {\n            ans.push(aux);\n        } else {\n            list = list.concat(aux.children);\n        }\n    }\n    return ans;\n};\n\n/**\n * Merge the leaves in the minimum way to have 'minGroups' number of clusters\n * @param {number} minGroups - Them minimum number of children the first level of the tree should have\n * @return {Cluster}\n */\nCluster.prototype.group = function (minGroups) {\n    if (!Number.isInteger(minGroups) || minGroups < 1) throw new RangeError('Number of groups must be a positive integer');\n\n    const heap = new Heap(function (a, b) {\n        return b.distance - a.distance;\n    });\n\n    heap.push(this);\n\n    while (heap.size() < minGroups) {\n        var first = heap.pop();\n        if (first.children.length === 0) {\n            break;\n        }\n        first.children.forEach(child => heap.push(child));\n    }\n\n    var root = new Cluster();\n    root.children = heap.toArray();\n    root.distance = this.distance;\n\n    return root;\n};\n\n/**\n * Traverses the tree depth-first and provide callback to be called on each individual node\n * @param {function} cb - The callback to be called on each node encounter\n * @type {Cluster}\n */\nCluster.prototype.traverse = function (cb) {\n    function visit(root, callback) {\n        callback(root);\n        if (root.children) {\n            for (var i = root.children.length - 1; i >= 0; i--) {\n                visit(root.children[i], callback);\n            }\n        }\n    }\n    visit(this, cb);\n};\n\nmodule.exports = Cluster;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-hclust/src/Cluster.js","'use strict';\n\nmodule.exports = require('./matrix').Matrix;\nmodule.exports.Decompositions = module.exports.DC = require('./decompositions');\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-fnn/node_modules/ml-matrix/src/index.js","'use strict';\n\nexports.hypotenuse = function hypotenuse(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n        r = b / a;\n        return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n        r = a / b;\n        return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n};\n\n// For use in the decomposition algorithms. With big matrices, access time is\n// too long on elements from array subclass\n// todo check when it is fixed in v8\n// http://jsperf.com/access-and-write-array-subclass\nexports.getEmpty2DArray = function (rows, columns) {\n    var array = new Array(rows);\n    for (var i = 0; i < rows; i++) {\n        array[i] = new Array(columns);\n    }\n    return array;\n};\n\nexports.getFilled2DArray = function (rows, columns, value) {\n    var array = new Array(rows);\n    for (var i = 0; i < rows; i++) {\n        array[i] = new Array(columns);\n        for (var j = 0; j < columns; j++) {\n            array[i][j] = value;\n        }\n    }\n    return array;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-fnn/node_modules/ml-matrix/src/dc/util.js","import Matrix from '../matrix';\nimport {hypotenuse, getFilled2DArray} from './util';\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\nfunction SingularValueDecomposition(value, options) {\n    if (!(this instanceof SingularValueDecomposition)) {\n        return new SingularValueDecomposition(value, options);\n    }\n    value = Matrix.checkMatrix(value);\n\n    options = options || {};\n\n    var m = value.rows,\n        n = value.columns,\n        nu = Math.min(m, n);\n\n    var wantu = true, wantv = true;\n    if (options.computeLeftSingularVectors === false) wantu = false;\n    if (options.computeRightSingularVectors === false) wantv = false;\n    var autoTranspose = options.autoTranspose === true;\n\n    var swapped = false;\n    var a;\n    if (m < n) {\n        if (!autoTranspose) {\n            a = value.clone();\n            // eslint-disable-next-line no-console\n            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n        } else {\n            a = value.transpose();\n            m = a.rows;\n            n = a.columns;\n            swapped = true;\n            var aux = wantu;\n            wantu = wantv;\n            wantv = aux;\n        }\n    } else {\n        a = value.clone();\n    }\n\n    var s = new Array(Math.min(m + 1, n)),\n        U = getFilled2DArray(m, nu, 0),\n        V = getFilled2DArray(n, n, 0),\n        e = new Array(n),\n        work = new Array(m);\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n\n    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\n    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n        if (k < nct) {\n            s[k] = 0;\n            for (i = k; i < m; i++) {\n                s[k] = hypotenuse(s[k], a[i][k]);\n            }\n            if (s[k] !== 0) {\n                if (a[k][k] < 0) {\n                    s[k] = -s[k];\n                }\n                for (i = k; i < m; i++) {\n                    a[i][k] /= s[k];\n                }\n                a[k][k] += 1;\n            }\n            s[k] = -s[k];\n        }\n\n        for (j = k + 1; j < n; j++) {\n            if ((k < nct) && (s[k] !== 0)) {\n                t = 0;\n                for (i = k; i < m; i++) {\n                    t += a[i][k] * a[i][j];\n                }\n                t = -t / a[k][k];\n                for (i = k; i < m; i++) {\n                    a[i][j] += t * a[i][k];\n                }\n            }\n            e[j] = a[k][j];\n        }\n\n        if (wantu && (k < nct)) {\n            for (i = k; i < m; i++) {\n                U[i][k] = a[i][k];\n            }\n        }\n\n        if (k < nrt) {\n            e[k] = 0;\n            for (i = k + 1; i < n; i++) {\n                e[k] = hypotenuse(e[k], e[i]);\n            }\n            if (e[k] !== 0) {\n                if (e[k + 1] < 0) {\n                    e[k] = 0 - e[k];\n                }\n                for (i = k + 1; i < n; i++) {\n                    e[i] /= e[k];\n                }\n                e[k + 1] += 1;\n            }\n            e[k] = -e[k];\n            if ((k + 1 < m) && (e[k] !== 0)) {\n                for (i = k + 1; i < m; i++) {\n                    work[i] = 0;\n                }\n                for (j = k + 1; j < n; j++) {\n                    for (i = k + 1; i < m; i++) {\n                        work[i] += e[j] * a[i][j];\n                    }\n                }\n                for (j = k + 1; j < n; j++) {\n                    t = -e[j] / e[k + 1];\n                    for (i = k + 1; i < m; i++) {\n                        a[i][j] += t * work[i];\n                    }\n                }\n            }\n            if (wantv) {\n                for (i = k + 1; i < n; i++) {\n                    V[i][k] = e[i];\n                }\n            }\n        }\n    }\n\n    p = Math.min(n, m + 1);\n    if (nct < n) {\n        s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n        s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n        e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n        for (j = nct; j < nu; j++) {\n            for (i = 0; i < m; i++) {\n                U[i][j] = 0;\n            }\n            U[j][j] = 1;\n        }\n        for (k = nct - 1; k >= 0; k--) {\n            if (s[k] !== 0) {\n                for (j = k + 1; j < nu; j++) {\n                    t = 0;\n                    for (i = k; i < m; i++) {\n                        t += U[i][k] * U[i][j];\n                    }\n                    t = -t / U[k][k];\n                    for (i = k; i < m; i++) {\n                        U[i][j] += t * U[i][k];\n                    }\n                }\n                for (i = k; i < m; i++) {\n                    U[i][k] = -U[i][k];\n                }\n                U[k][k] = 1 + U[k][k];\n                for (i = 0; i < k - 1; i++) {\n                    U[i][k] = 0;\n                }\n            } else {\n                for (i = 0; i < m; i++) {\n                    U[i][k] = 0;\n                }\n                U[k][k] = 1;\n            }\n        }\n    }\n\n    if (wantv) {\n        for (k = n - 1; k >= 0; k--) {\n            if ((k < nrt) && (e[k] !== 0)) {\n                for (j = k + 1; j < n; j++) {\n                    t = 0;\n                    for (i = k + 1; i < n; i++) {\n                        t += V[i][k] * V[i][j];\n                    }\n                    t = -t / V[k + 1][k];\n                    for (i = k + 1; i < n; i++) {\n                        V[i][j] += t * V[i][k];\n                    }\n                }\n            }\n            for (i = 0; i < n; i++) {\n                V[i][k] = 0;\n            }\n            V[k][k] = 1;\n        }\n    }\n\n    var pp = p - 1,\n        iter = 0,\n        eps = Math.pow(2, -52);\n    while (p > 0) {\n        for (k = p - 2; k >= -1; k--) {\n            if (k === -1) {\n                break;\n            }\n            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n                e[k] = 0;\n                break;\n            }\n        }\n        if (k === p - 2) {\n            kase = 4;\n        } else {\n            for (ks = p - 1; ks >= k; ks--) {\n                if (ks === k) {\n                    break;\n                }\n                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n                if (Math.abs(s[ks]) <= eps * t) {\n                    s[ks] = 0;\n                    break;\n                }\n            }\n            if (ks === k) {\n                kase = 3;\n            } else if (ks === p - 1) {\n                kase = 1;\n            } else {\n                kase = 2;\n                k = ks;\n            }\n        }\n\n        k++;\n\n        switch (kase) {\n            case 1: {\n                f = e[p - 2];\n                e[p - 2] = 0;\n                for (j = p - 2; j >= k; j--) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    if (j !== k) {\n                        f = -sn * e[j - 1];\n                        e[j - 1] = cs * e[j - 1];\n                    }\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][p - 1];\n                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                            V[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 2 : {\n                f = e[k - 1];\n                e[k - 1] = 0;\n                for (j = k; j < p; j++) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    f = -sn * e[j];\n                    e[j] = cs * e[j];\n                    if (wantu) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][k - 1];\n                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 3 : {\n                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n                sp = s[p - 1] / scale;\n                spm1 = s[p - 2] / scale;\n                epm1 = e[p - 2] / scale;\n                sk = s[k] / scale;\n                ek = e[k] / scale;\n                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n                c = (sp * epm1) * (sp * epm1);\n                shift = 0;\n                if ((b !== 0) || (c !== 0)) {\n                    shift = Math.sqrt(b * b + c);\n                    if (b < 0) {\n                        shift = -shift;\n                    }\n                    shift = c / (b + shift);\n                }\n                f = (sk + sp) * (sk - sp) + shift;\n                g = sk * ek;\n                for (j = k; j < p - 1; j++) {\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    if (j !== k) {\n                        e[j - 1] = t;\n                    }\n                    f = cs * s[j] + sn * e[j];\n                    e[j] = cs * e[j] - sn * s[j];\n                    g = sn * s[j + 1];\n                    s[j + 1] = cs * s[j + 1];\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][j + 1];\n                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                            V[i][j] = t;\n                        }\n                    }\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    s[j] = t;\n                    f = cs * e[j] + sn * s[j + 1];\n                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n                    g = sn * e[j + 1];\n                    e[j + 1] = cs * e[j + 1];\n                    if (wantu && (j < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][j + 1];\n                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                e[p - 2] = f;\n                iter = iter + 1;\n                break;\n            }\n            case 4: {\n                if (s[k] <= 0) {\n                    s[k] = (s[k] < 0 ? -s[k] : 0);\n                    if (wantv) {\n                        for (i = 0; i <= pp; i++) {\n                            V[i][k] = -V[i][k];\n                        }\n                    }\n                }\n                while (k < pp) {\n                    if (s[k] >= s[k + 1]) {\n                        break;\n                    }\n                    t = s[k];\n                    s[k] = s[k + 1];\n                    s[k + 1] = t;\n                    if (wantv && (k < n - 1)) {\n                        for (i = 0; i < n; i++) {\n                            t = V[i][k + 1];\n                            V[i][k + 1] = V[i][k];\n                            V[i][k] = t;\n                        }\n                    }\n                    if (wantu && (k < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = U[i][k + 1];\n                            U[i][k + 1] = U[i][k];\n                            U[i][k] = t;\n                        }\n                    }\n                    k++;\n                }\n                iter = 0;\n                p--;\n                break;\n            }\n            // no default\n        }\n    }\n\n    if (swapped) {\n        var tmp = V;\n        V = U;\n        U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n}\n\nSingularValueDecomposition.prototype = {\n    get condition() {\n        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    get norm2() {\n        return this.s[0];\n    },\n    get rank() {\n        var eps = Math.pow(2, -52),\n            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n            r = 0,\n            s = this.s;\n        for (var i = 0, ii = s.length; i < ii; i++) {\n            if (s[i] > tol) {\n                r++;\n            }\n        }\n        return r;\n    },\n    get diagonal() {\n        return this.s;\n    },\n    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n    get threshold() {\n        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n    },\n    get leftSingularVectors() {\n        if (!Matrix.isMatrix(this.U)) {\n            this.U = new Matrix(this.U);\n        }\n        return this.U;\n    },\n    get rightSingularVectors() {\n        if (!Matrix.isMatrix(this.V)) {\n            this.V = new Matrix(this.V);\n        }\n        return this.V;\n    },\n    get diagonalMatrix() {\n        return Matrix.diag(this.s);\n    },\n    solve: function (value) {\n\n        var Y = value,\n            e = this.threshold,\n            scols = this.s.length,\n            Ls = Matrix.zeros(scols, scols),\n            i;\n\n        for (i = 0; i < scols; i++) {\n            if (Math.abs(this.s[i]) <= e) {\n                Ls[i][i] = 0;\n            } else {\n                Ls[i][i] = 1 / this.s[i];\n            }\n        }\n\n        var U = this.U;\n        var V = this.rightSingularVectors;\n\n        var VL = V.mmul(Ls),\n            vrows = V.rows,\n            urows = U.length,\n            VLU = Matrix.zeros(vrows, urows),\n            j, k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < scols; k++) {\n                    sum += VL[i][k] * U[j][k];\n                }\n                VLU[i][j] = sum;\n            }\n        }\n\n        return VLU.mmul(Y);\n    },\n    solveForDiagonal: function (value) {\n        return this.solve(Matrix.diag(value));\n    },\n    inverse: function () {\n        var V = this.V;\n        var e = this.threshold,\n            vrows = V.length,\n            vcols = V[0].length,\n            X = new Matrix(vrows, this.s.length),\n            i, j;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < vcols; j++) {\n                if (Math.abs(this.s[j]) > e) {\n                    X[i][j] = V[i][j] / this.s[j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n\n        var U = this.U;\n\n        var urows = U.length,\n            ucols = U[0].length,\n            Y = new Matrix(vrows, urows),\n            k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < ucols; k++) {\n                    sum += X[i][k] * U[j][k];\n                }\n                Y[i][j] = sum;\n            }\n        }\n\n        return Y;\n    }\n};\n\nexport default SingularValueDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-matrix/src/dc/svd.js","import Matrix from '../matrix';\nimport {hypotenuse} from './util';\n\n//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\nfunction QrDecomposition(value) {\n    if (!(this instanceof QrDecomposition)) {\n        return new QrDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n\n    var qr = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        rdiag = new Array(n),\n        i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) {\n            nrm = hypotenuse(nrm, qr[i][k]);\n        }\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) {\n                nrm = -nrm;\n            }\n            for (i = k; i < m; i++) {\n                qr[i][k] /= nrm;\n            }\n            qr[k][k] += 1;\n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * qr[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    qr[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n}\n\nQrDecomposition.prototype = {\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var qr = this.QR,\n            m = qr.rows;\n\n        if (value.rows !== m) {\n            throw new Error('Matrix row dimensions must agree');\n        }\n        if (!this.isFullRank()) {\n            throw new Error('Matrix is rank deficient');\n        }\n\n        var count = value.columns;\n        var X = value.clone();\n        var n = qr.columns;\n        var i, j, k, s;\n\n        for (k = 0; k < n; k++) {\n            for (j = 0; j < count; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * X[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    X[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        for (k = n - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= this.Rdiag[k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * qr[i][k];\n                }\n            }\n        }\n\n        return X.subMatrix(0, n - 1, 0, count - 1);\n    },\n    isFullRank: function () {\n        var columns = this.QR.columns;\n        for (var i = 0; i < columns; i++) {\n            if (this.Rdiag[i] === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n    get upperTriangularMatrix() {\n        var qr = this.QR,\n            n = qr.columns,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                if (i < j) {\n                    X[i][j] = qr[i][j];\n                } else if (i === j) {\n                    X[i][j] = this.Rdiag[i];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get orthogonalMatrix() {\n        var qr = this.QR,\n            rows = qr.rows,\n            columns = qr.columns,\n            X = new Matrix(rows, columns),\n            i, j, k, s;\n\n        for (k = columns - 1; k >= 0; k--) {\n            for (i = 0; i < rows; i++) {\n                X[i][k] = 0;\n            }\n            X[k][k] = 1;\n            for (j = k; j < columns; j++) {\n                if (qr[k][k] !== 0) {\n                    s = 0;\n                    for (i = k; i < rows; i++) {\n                        s += qr[i][k] * X[i][j];\n                    }\n\n                    s = -s / qr[k][k];\n\n                    for (i = k; i < rows; i++) {\n                        X[i][j] += s * qr[i][k];\n                    }\n                }\n            }\n        }\n        return X;\n    }\n};\n\nexport default QrDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-matrix/src/dc/qr.js","'use strict';\n\nconst newArray = require('new-array');\n\nconst primeFinder = require('./primeFinder');\nconst nextPrime = primeFinder.nextPrime;\nconst largestPrime = primeFinder.largestPrime;\n\nconst FREE = 0;\nconst FULL = 1;\nconst REMOVED = 2;\n\nconst defaultInitialCapacity = 150;\nconst defaultMinLoadFactor = 1 / 6;\nconst defaultMaxLoadFactor = 2 / 3;\n\nclass HashTable {\n    constructor(options = {}) {\n        if (options instanceof HashTable) {\n            this.table = options.table.slice();\n            this.values = options.values.slice();\n            this.state = options.state.slice();\n            this.minLoadFactor = options.minLoadFactor;\n            this.maxLoadFactor = options.maxLoadFactor;\n            this.distinct = options.distinct;\n            this.freeEntries = options.freeEntries;\n            this.lowWaterMark = options.lowWaterMark;\n            this.highWaterMark = options.maxLoadFactor;\n            return;\n        }\n\n        const initialCapacity = options.initialCapacity === undefined ? defaultInitialCapacity : options.initialCapacity;\n        if (initialCapacity < 0) {\n            throw new RangeError(`initial capacity must not be less than zero: ${initialCapacity}`);\n        }\n\n        const minLoadFactor = options.minLoadFactor === undefined ? defaultMinLoadFactor : options.minLoadFactor;\n        const maxLoadFactor = options.maxLoadFactor === undefined ? defaultMaxLoadFactor : options.maxLoadFactor;\n        if (minLoadFactor < 0 || minLoadFactor >= 1) {\n            throw new RangeError(`invalid minLoadFactor: ${minLoadFactor}`);\n        }\n        if (maxLoadFactor <= 0 || maxLoadFactor >= 1) {\n            throw new RangeError(`invalid maxLoadFactor: ${maxLoadFactor}`);\n        }\n        if (minLoadFactor >= maxLoadFactor) {\n            throw new RangeError(`minLoadFactor (${minLoadFactor}) must be smaller than maxLoadFactor (${maxLoadFactor})`);\n        }\n\n        let capacity = initialCapacity;\n        // User wants to put at least capacity elements. We need to choose the size based on the maxLoadFactor to\n        // avoid the need to rehash before this capacity is reached.\n        // actualCapacity * maxLoadFactor >= capacity\n        capacity = (capacity / maxLoadFactor) | 0;\n        capacity = nextPrime(capacity);\n        if (capacity === 0) capacity = 1;\n\n        this.table = newArray(capacity, 0);\n        this.values = newArray(capacity, 0);\n        this.state = newArray(capacity, 0);\n\n        this.minLoadFactor = minLoadFactor;\n        if (capacity === largestPrime) {\n            this.maxLoadFactor = 1;\n        } else {\n            this.maxLoadFactor = maxLoadFactor;\n        }\n\n        this.distinct = 0;\n        this.freeEntries = capacity;\n\n        this.lowWaterMark = 0;\n        this.highWaterMark = chooseHighWaterMark(capacity, this.maxLoadFactor);\n    }\n\n    clone() {\n        return new HashTable(this);\n    }\n\n    get size() {\n        return this.distinct;\n    }\n\n    get(key) {\n        const i = this.indexOfKey(key);\n        if (i < 0) return 0;\n        return this.values[i];\n    }\n\n    set(key, value) {\n        let i = this.indexOfInsertion(key);\n        if (i < 0) {\n            i = -i - 1;\n            this.values[i] = value;\n            return false;\n        }\n\n        if (this.distinct > this.highWaterMark) {\n            const newCapacity = chooseGrowCapacity(this.distinct + 1, this.minLoadFactor, this.maxLoadFactor);\n            this.rehash(newCapacity);\n            return this.set(key, value);\n        }\n\n        this.table[i] = key;\n        this.values[i] = value;\n        if (this.state[i] === FREE) this.freeEntries--;\n        this.state[i] = FULL;\n        this.distinct++;\n\n        if (this.freeEntries < 1) {\n            const newCapacity = chooseGrowCapacity(this.distinct + 1, this.minLoadFactor, this.maxLoadFactor);\n            this.rehash(newCapacity);\n        }\n\n        return true;\n    }\n    \n    remove(key, noRehash) {\n        const i = this.indexOfKey(key);\n        if (i < 0) return false;\n\n        this.state[i] = REMOVED;\n        this.distinct--;\n\n        if (!noRehash) this.maybeShrinkCapacity();\n\n        return true;\n    }\n\n    delete(key, noRehash) {\n        const i = this.indexOfKey(key);\n        if (i < 0) return false;\n\n        this.state[i] = FREE;\n        this.distinct--;\n\n        if (!noRehash) this.maybeShrinkCapacity();\n\n        return true;\n    }\n\n    maybeShrinkCapacity() {\n        if (this.distinct < this.lowWaterMark) {\n            const newCapacity = chooseShrinkCapacity(this.distinct, this.minLoadFactor, this.maxLoadFactor);\n            this.rehash(newCapacity);\n        }\n    }\n\n    containsKey(key) {\n        return this.indexOfKey(key) >= 0;\n    }\n\n    indexOfKey(key) {\n        const table = this.table;\n        const state = this.state;\n        const length = this.table.length;\n\n        const hash = key & 0x7fffffff;\n        let i = hash % length;\n        let decrement = hash % (length - 2);\n        if (decrement === 0) decrement = 1;\n\n        while (state[i] !== FREE && (state[i] === REMOVED || table[i] !== key)) {\n            i -= decrement;\n            if (i < 0) i += length;\n        }\n\n        if (state[i] === FREE) return -1;\n        return i;\n    }\n\n    containsValue(value) {\n        return this.indexOfValue(value) >= 0;\n    }\n\n    indexOfValue(value) {\n        const values = this.values;\n        const state = this.state;\n\n        for (var i = 0; i < state.length; i++) {\n            if (state[i] === FULL && values[i] === value) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    indexOfInsertion(key) {\n        const table = this.table;\n        const state = this.state;\n        const length = table.length;\n\n\n        const hash = key & 0x7fffffff;\n        let i = hash % length;\n        let decrement = hash % (length - 2);\n        if (decrement === 0) decrement = 1;\n\n        while (state[i] === FULL && table[i] !== key) {\n            i -= decrement;\n            if (i < 0) i += length;\n        }\n\n        if (state[i] === REMOVED) {\n            const j = i;\n            while (state[i] !== FREE && (state[i] === REMOVED || table[i] !== key)) {\n                i -= decrement;\n                if (i < 0) i += length;\n            }\n            if (state[i] === FREE) i = j;\n        }\n\n        if (state[i] === FULL) {\n            return -i - 1;\n        }\n\n        return i;\n    }\n\n    ensureCapacity(minCapacity) {\n        if (this.table.length < minCapacity) {\n            const newCapacity = nextPrime(minCapacity);\n            this.rehash(newCapacity);\n        }\n    }\n\n    rehash(newCapacity) {\n        const oldCapacity = this.table.length;\n\n        if (newCapacity <= this.distinct) throw new Error('Unexpected');\n\n        const oldTable = this.table;\n        const oldValues = this.values;\n        const oldState = this.state;\n\n        const newTable = newArray(newCapacity, 0);\n        const newValues = newArray(newCapacity, 0);\n        const newState = newArray(newCapacity, 0);\n\n        this.lowWaterMark = chooseLowWaterMark(newCapacity, this.minLoadFactor);\n        this.highWaterMark = chooseHighWaterMark(newCapacity, this.maxLoadFactor);\n\n        this.table = newTable;\n        this.values = newValues;\n        this.state = newState;\n        this.freeEntries = newCapacity - this.distinct;\n\n        for (var i = 0; i < oldCapacity; i++) {\n            if (oldState[i] === FULL) {\n                var element = oldTable[i];\n                var index = this.indexOfInsertion(element);\n                newTable[index] = element;\n                newValues[index] = oldValues[i];\n                newState[index] = FULL;\n            }\n        }\n    }\n\n    forEachKey(callback) {\n        for (var i = 0; i < this.state.length; i++) {\n            if (this.state[i] === FULL) {\n                if (!callback(this.table[i])) return false;\n            }\n        }\n        return true;\n    }\n\n    forEachValue(callback) {\n        for (var i = 0; i < this.state.length; i++) {\n            if (this.state[i] === FULL) {\n                if (!callback(this.values[i])) return false;\n            }\n        }\n        return true;\n    }\n\n    forEachPair(callback) {\n        for (var i = 0; i < this.state.length; i++) {\n            if (this.state[i] === FULL) {\n                if (!callback(this.table[i], this.values[i])) return false;\n            }\n        }\n        return true;\n    }\n}\n\nmodule.exports = HashTable;\n\nfunction chooseLowWaterMark(capacity, minLoad) {\n    return (capacity * minLoad) | 0;\n}\n\nfunction chooseHighWaterMark(capacity, maxLoad) {\n    return Math.min(capacity - 2, (capacity * maxLoad) | 0);\n}\n\nfunction chooseGrowCapacity(size, minLoad, maxLoad) {\n    return nextPrime(Math.max(size + 1, (4 * size / (3 * minLoad + maxLoad)) | 0));\n}\n\nfunction chooseShrinkCapacity(size, minLoad, maxLoad) {\n    return nextPrime(Math.max(size + 1, (4 * size / (minLoad + 3 * maxLoad)) | 0));\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-hash-table/src/HashTable.js","module.exports = function(haystack, needle, comparator, low, high) {\n  var mid, cmp;\n\n  if(low === undefined)\n    low = 0;\n\n  else {\n    low = low|0;\n    if(low < 0 || low >= haystack.length)\n      throw new RangeError(\"invalid lower bound\");\n  }\n\n  if(high === undefined)\n    high = haystack.length - 1;\n\n  else {\n    high = high|0;\n    if(high < low || high >= haystack.length)\n      throw new RangeError(\"invalid upper bound\");\n  }\n\n  while(low <= high) {\n    /* Note that \"(low + high) >>> 1\" may overflow, and results in a typecast\n     * to double (which gives the wrong results). */\n    mid = low + (high - low >> 1);\n    cmp = +comparator(haystack[mid], needle, mid, haystack);\n\n    /* Too low. */\n    if(cmp < 0.0)\n      low  = mid + 1;\n\n    /* Too high. */\n    else if(cmp > 0.0)\n      high = mid - 1;\n\n    /* Key found. */\n    else\n      return mid;\n  }\n\n  /* Key not found. */\n  return ~low;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/binary-search/index.js","'use strict';\nvar numberIsNan = require('number-is-nan');\n\nfunction assertNum(x) {\n\tif (typeof x !== 'number' || numberIsNan(x)) {\n\t\tthrow new TypeError('Expected a number');\n\t}\n}\n\nexports.asc = function (a, b) {\n\tassertNum(a);\n\tassertNum(b);\n\treturn a - b;\n};\n\nexports.desc = function (a, b) {\n\tassertNum(a);\n\tassertNum(b);\n\treturn b - a;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/num-sort/index.js","'use strict';\n\nvar extend = require('extend');\n\nvar defaultOptions = {\n    size: 1,\n    value: 0\n};\n\n/**\n * Case when the entry is an array\n * @param data\n * @param options\n * @returns {Array}\n */\nfunction arrayCase(data, options) {\n    var len = data.length;\n    if (typeof options.size === 'number')\n        options.size = [options.size, options.size];\n\n    var cond = len + options.size[0] + options.size[1];\n\n    var output;\n    if (options.output) {\n        if (options.output.length !== cond)\n            throw new RangeError('Wrong output size');\n        output = options.output;\n    }\n    else\n        output = new Array(cond);\n\n    var i;\n\n    // circular option\n    if (options.value === 'circular') {\n        for (i = 0; i < cond; i++) {\n            if (i < options.size[0])\n                output[i] = data[((len - (options.size[0] % len)) + i) % len];\n            else if (i < (options.size[0] + len))\n                output[i] = data[i - options.size[0]];\n            else\n                output[i] = data[(i - options.size[0]) % len];\n        }\n    }\n\n    // replicate option\n    else if (options.value === 'replicate') {\n        for (i = 0; i < cond; i++) {\n            if (i < options.size[0])\n                output[i] = data[0];\n            else if (i < (options.size[0] + len))\n                output[i] = data[i - options.size[0]];\n            else\n                output[i] = data[len - 1];\n        }\n    }\n\n    // symmetric option\n    else if (options.value === 'symmetric') {\n        if ((options.size[0] > len) || (options.size[1] > len))\n            throw new RangeError('expanded value should not be bigger than the data length');\n        for (i = 0; i < cond; i++) {\n            if (i < options.size[0])\n                output[i] = data[options.size[0] - 1 - i];\n            else if (i < (options.size[0] + len))\n                output[i] = data[i - options.size[0]];\n            else\n                output[i] = data[2*len + options.size[0] - i - 1];\n        }\n    }\n\n    // default option\n    else {\n        for (i = 0; i < cond; i++) {\n            if (i < options.size[0])\n                output[i] = options.value;\n            else if (i < (options.size[0] + len))\n                output[i] = data[i - options.size[0]];\n            else\n                output[i] = options.value;\n        }\n    }\n\n    return output;\n}\n\n/**\n * Case when the entry is a matrix\n * @param data\n * @param options\n * @returns {Array}\n */\nfunction matrixCase(data, options) {\n    var row = data.length;\n    var col = data[0].length;\n    if (options.size[0] === undefined)\n        options.size = [options.size, options.size, options.size, options.size];\n    throw new Error('matrix not supported yet, sorry');\n}\n\n/**\n * Pads and array\n * @param {Array <number>} data\n * @param {object} options\n */\nfunction padArray (data, options) {\n    options = extend({}, defaultOptions, options);\n\n    if (Array.isArray(data)) {\n        if (Array.isArray(data[0]))\n            return matrixCase(data, options);\n        else\n            return arrayCase(data, options);\n    }\n    else\n        throw new TypeError('data should be an array');\n}\n\nmodule.exports = padArray;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pad-array/src/index.js","import BaseRegression, {checkArrayLength, maybeToPrecision} from 'ml-regression-base';\nimport Matrix, {solve} from 'ml-matrix';\n\nexport default class PolynomialRegression extends BaseRegression {\n    constructor(x, y, degree) {\n        super();\n        if (x === true) {\n            this.degree = y.degree;\n            this.powers = y.powers;\n            this.coefficients = y.coefficients;\n        } else {\n            checkArrayLength(x, y);\n            regress(this, x, y, degree);\n        }\n    }\n\n    _predict(x) {\n        let y = 0;\n        for (let k = 0; k < this.powers.length; k++) {\n            y += this.coefficients[k] * Math.pow(x, this.powers[k]);\n        }\n        return y;\n    }\n\n    toJSON() {\n        return {\n            name: 'polynomialRegression',\n            degree: this.degree,\n            powers: this.powers,\n            coefficients: this.coefficients\n        };\n    }\n\n    toString(precision) {\n        return this._toFormula(precision, false);\n    }\n\n    toLaTeX(precision) {\n        return this._toFormula(precision, true);\n    }\n\n    _toFormula(precision, isLaTeX) {\n        let sup = '^';\n        let closeSup = '';\n        let times = ' * ';\n        if (isLaTeX) {\n            sup = '^{';\n            closeSup = '}';\n            times = '';\n        }\n\n        let fn = '';\n        let str = '';\n        for (let k = 0; k < this.coefficients.length; k++) {\n            str = '';\n            if (this.coefficients[k] !== 0) {\n                if (this.powers[k] === 0) {\n                    str = maybeToPrecision(this.coefficients[k], precision);\n                } else {\n                    if (this.powers[k] === 1) {\n                        str = maybeToPrecision(this.coefficients[k], precision) + times + 'x';\n                    } else {\n                        str = maybeToPrecision(this.coefficients[k], precision) + times + 'x' + sup + this.powers[k] + closeSup;\n                    }\n                }\n\n                if (this.coefficients[k] > 0 && k !== (this.coefficients.length - 1)) {\n                    str = ' + ' + str;\n                } else if (k !== (this.coefficients.length - 1)) {\n                    str = ' ' + str;\n                }\n            }\n            fn = str + fn;\n        }\n        if (fn.charAt(0) === '+') {\n            fn = fn.slice(1);\n        }\n\n        return 'f(x) = ' + fn;\n    }\n\n    static load(json) {\n        if (json.name !== 'polynomialRegression') {\n            throw new TypeError('not a polynomial regression model');\n        }\n        return new PolynomialRegression(true, json);\n    }\n}\n\nfunction regress(pr, x, y, degree) {\n    const n = x.length;\n    let powers;\n    if (Array.isArray(degree)) {\n        powers = degree;\n        degree = powers.length;\n    } else {\n        degree++;\n        powers = new Array(degree);\n        for (let k = 0; k < degree; k++) {\n            powers[k] = k;\n        }\n    }\n    const F = new Matrix(n, degree);\n    const Y = new Matrix([y]);\n    for (let k = 0; k < degree; k++) {\n        for (let i = 0; i < n; i++) {\n            if (powers[k] === 0) {\n                F[i][k] = 1;\n            } else {\n                F[i][k] = Math.pow(x[i], powers[k]);\n            }\n        }\n    }\n\n    const FT = F.transposeView();\n    const A = FT.mmul(F);\n    const B = FT.mmul(Y.transposeView());\n\n    pr.degree = degree - 1;\n    pr.powers = powers;\n    pr.coefficients = solve(A, B).to1DArray();\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-regression-polynomial/src/index.js","'use strict';\n\nmodule.exports = function czekanowskiSimilarity(a, b) {\n    var up = 0;\n    var down = 0;\n    for (var i = 0; i < a.length; i++) {\n        up += Math.min(a[i], b[i]);\n        down += a[i] + b[i];\n    }\n    return 2 * up / down;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/similarities/czekanowski.js","module.exports = function dice(a, b) {\n    var ii = a.length,\n        p = 0,\n        q1 = 0,\n        q2 = 0;\n    for (var i = 0; i < ii ; i++) {\n        p += a[i] * a[i];\n        q1 += b[i] * b[i];\n        q2 += (a[i] - b[i]) * (a[i] - b[i]);\n    }\n    return q2 / (p + q1);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/dice.js","module.exports = function intersection(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += Math.min(a[i], b[i]);\n    }\n    return 1 - ans;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/intersection.js","module.exports = function jaccard(a, b) {\n    var ii = a.length,\n        p1 = 0,\n        p2 = 0,\n        q1 = 0,\n        q2 = 0;\n    for (var i = 0; i < ii ; i++) {\n        p1 += a[i] * b[i];\n        p2 += a[i] * a[i];\n        q1 += b[i] * b[i];\n        q2 += (a[i] - b[i]) * (a[i] - b[i]);\n    }\n    return q2 / (p2 + q1 - p1);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/jaccard.js","module.exports = function kulczynski(a, b) {\n    var ii = a.length,\n        up = 0,\n        down = 0;\n    for (var i = 0; i < ii ; i++) {\n        up += Math.abs(a[i] - b[i]);\n        down += Math.min(a[i],b[i]);\n    }\n    return up / down;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/kulczynski.js","module.exports = function motyka(a, b) {\n    var ii = a.length,\n        up = 0,\n        down = 0;\n    for (var i = 0; i < ii ; i++) {\n        up += Math.min(a[i], b[i]);\n        down += a[i] + b[i];\n    }\n    return 1 - (up / down);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/motyka.js","module.exports = function squaredChord(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += (Math.sqrt(a[i]) - Math.sqrt(b[i])) * (Math.sqrt(a[i]) - Math.sqrt(b[i]));\n    }\n    return ans;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/squaredChord.js","module.exports = function tanimoto(a, b, bitvector) {\n    if (bitvector) {\n        var inter = 0,\n            union = 0;\n        for (var j = 0; j < a.length; j++) {\n            inter += a[j] && b[j];\n            union += a[j] || b[j];\n        }\n        if (union === 0)\n            return 1;\n        return inter / union;\n    }\n    else {\n        var ii = a.length,\n            p = 0,\n            q = 0,\n            m = 0;\n        for (var i = 0; i < ii ; i++) {\n            p += a[i];\n            q += b[i];\n            m += Math.min(a[i],b[i]);\n        }\n        return 1 - (p + q - 2 * m) / (p + q - m);\n    }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/similarities/tanimoto.js","module.exports = function cosine(a, b) {\n    var ii = a.length,\n        p = 0,\n        p2 = 0,\n        q2 = 0;\n    for (var i = 0; i < ii ; i++) {\n        p += a[i] * b[i];\n        p2 += a[i] * a[i];\n        q2 += b[i] * b[i];\n    }\n    return p / (Math.sqrt(p2) * Math.sqrt(q2));\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/similarities/cosine.js","'use strict';\n\n\n/**\n * Computes a distance/similarity matrix given an array of data and a distance/similarity function.\n * @param {Array} data An array of data\n * @param {function} distanceFn  A function that accepts two arguments and computes a distance/similarity between them\n * @return {Array<Array>} The similarity matrix. The similarity matrix is square and has a size equal to the length of\n * the data array\n */\nfunction distanceMatrix(data, distanceFn) {\n    const length = data.length;\n    let result = Array.from({length}).map(() => Array.from({length}));\n\n    // Compute upper distance matrix\n    for (let i = 0; i < length; i++) {\n        for (let j = 0; j <= i; j++) {\n            result[i][j] = distanceFn(data[i], data[j]);\n        }\n    }\n\n    // Copy to lower distance matrix\n    for (let i = 0; i < length; i++) {\n        for (let j = i + 1; j < length; j++) {\n            result[i][j] = result[j][i];\n        }\n    }\n\n    return result;\n}\n\nmodule.exports = distanceMatrix;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance-matrix/src/index.js","'use strict';\n\nmodule.exports = abstractMatrix;\n\nvar LuDecomposition = require('./dc/lu');\nvar SvDecomposition = require('./dc/svd');\nvar arrayUtils = require('ml-array-utils');\nvar util = require('./util');\nvar MatrixTransposeView = require('./views/transpose');\nvar MatrixRowView = require('./views/row');\nvar MatrixSubView = require('./views/sub');\nvar MatrixSelectionView = require('./views/selection');\nvar MatrixColumnView = require('./views/column');\nvar MatrixFlipRowView = require('./views/flipRow');\nvar MatrixFlipColumnView = require('./views/flipColumn');\n\nfunction abstractMatrix(superCtor) {\n    if (superCtor === undefined) superCtor = Object;\n\n    /**\n     * Real matrix\n     * @class Matrix\n     * @param {number|Array|Matrix} nRows - Number of rows of the new matrix,\n     * 2D array containing the data or Matrix instance to clone\n     * @param {number} [nColumns] - Number of columns of the new matrix\n     */\n    class Matrix extends superCtor {\n        static get [Symbol.species]() {\n            return this;\n        }\n\n        /**\n         * Constructs a Matrix with the chosen dimensions from a 1D array\n         * @param {number} newRows - Number of rows\n         * @param {number} newColumns - Number of columns\n         * @param {Array} newData - A 1D array containing data for the matrix\n         * @return {Matrix} - The new matrix\n         */\n        static from1DArray(newRows, newColumns, newData) {\n            var length = newRows * newColumns;\n            if (length !== newData.length) {\n                throw new RangeError('Data length does not match given dimensions');\n            }\n            var newMatrix = new this(newRows, newColumns);\n            for (var row = 0; row < newRows; row++) {\n                for (var column = 0; column < newColumns; column++) {\n                    newMatrix.set(row, column, newData[row * newColumns + column]);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Creates a row vector, a matrix with only one row.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n        static rowVector(newData) {\n            var vector = new this(1, newData.length);\n            for (var i = 0; i < newData.length; i++) {\n                vector.set(0, i, newData[i]);\n            }\n            return vector;\n        }\n\n        /**\n         * Creates a column vector, a matrix with only one column.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n        static columnVector(newData) {\n            var vector = new this(newData.length, 1);\n            for (var i = 0; i < newData.length; i++) {\n                vector.set(i, 0, newData[i]);\n            }\n            return vector;\n        }\n\n        /**\n         * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static empty(rows, columns) {\n            return new this(rows, columns);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be set to zero.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static zeros(rows, columns) {\n            return this.empty(rows, columns).fill(0);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be set to one.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static ones(rows, columns) {\n            return this.empty(rows, columns).fill(1);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be randomly set.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n        static rand(rows, columns, rng) {\n            if (rng === undefined) rng = Math.random;\n            var matrix = this.empty(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    matrix.set(i, j, rng());\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be random integers.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {number} [maxValue=1000] - Maximum value\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n        static randInt(rows, columns, maxValue, rng) {\n            if (maxValue === undefined) maxValue = 1000;\n            if (rng === undefined) rng = Math.random;\n            var matrix = this.empty(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    var value = Math.floor(rng() * maxValue);\n                    matrix.set(i, j, value);\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and others will be 0.\n         * @param {number} rows - Number of rows\n         * @param {number} [columns=rows] - Number of columns\n         * @param {number} [value=1] - Value to fill the diagonal with\n         * @return {Matrix} - The new identity matrix\n         */\n        static eye(rows, columns, value) {\n            if (columns === undefined) columns = rows;\n            if (value === undefined) value = 1;\n            var min = Math.min(rows, columns);\n            var matrix = this.zeros(rows, columns);\n            for (var i = 0; i < min; i++) {\n                matrix.set(i, i, value);\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates a diagonal matrix based on the given array.\n         * @param {Array} data - Array containing the data for the diagonal\n         * @param {number} [rows] - Number of rows (Default: data.length)\n         * @param {number} [columns] - Number of columns (Default: rows)\n         * @return {Matrix} - The new diagonal matrix\n         */\n        static diag(data, rows, columns) {\n            var l = data.length;\n            if (rows === undefined) rows = l;\n            if (columns === undefined) columns = rows;\n            var min = Math.min(l, rows, columns);\n            var matrix = this.zeros(rows, columns);\n            for (var i = 0; i < min; i++) {\n                matrix.set(i, i, data[i]);\n            }\n            return matrix;\n        }\n\n        /**\n         * Returns a matrix whose elements are the minimum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n        static min(matrix1, matrix2) {\n            matrix1 = this.checkMatrix(matrix1);\n            matrix2 = this.checkMatrix(matrix2);\n            var rows = matrix1.rows;\n            var columns = matrix1.columns;\n            var result = new this(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Returns a matrix whose elements are the maximum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n        static max(matrix1, matrix2) {\n            matrix1 = this.checkMatrix(matrix1);\n            matrix2 = this.checkMatrix(matrix2);\n            var rows = matrix1.rows;\n            var columns = matrix1.columns;\n            var result = new this(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Check that the provided value is a Matrix and tries to instantiate one if not\n         * @param {*} value - The value to check\n         * @return {Matrix}\n         */\n        static checkMatrix(value) {\n            return Matrix.isMatrix(value) ? value : new this(value);\n        }\n\n        /**\n         * Returns true if the argument is a Matrix, false otherwise\n         * @param {*} value - The value to check\n         * @return {boolean}\n         */\n        static isMatrix(value) {\n            return (value != null) && (value.klass === 'Matrix');\n        }\n\n        /**\n         * @prop {number} size - The number of elements in the matrix.\n         */\n        get size() {\n            return this.rows * this.columns;\n        }\n\n        /**\n         * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n         * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n         * @return {Matrix} this\n         */\n        apply(callback) {\n            if (typeof callback !== 'function') {\n                throw new TypeError('callback must be a function');\n            }\n            var ii = this.rows;\n            var jj = this.columns;\n            for (var i = 0; i < ii; i++) {\n                for (var j = 0; j < jj; j++) {\n                    callback.call(this, i, j);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Returns a new 1D array filled row by row with the matrix values\n         * @return {Array}\n         */\n        to1DArray() {\n            var array = new Array(this.size);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    array[i * this.columns + j] = this.get(i, j);\n                }\n            }\n            return array;\n        }\n\n        /**\n         * Returns a 2D array containing a copy of the data\n         * @return {Array}\n         */\n        to2DArray() {\n            var copy = new Array(this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                copy[i] = new Array(this.columns);\n                for (var j = 0; j < this.columns; j++) {\n                    copy[i][j] = this.get(i, j);\n                }\n            }\n            return copy;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one row\n         */\n        isRowVector() {\n            return this.rows === 1;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one column\n         */\n        isColumnVector() {\n            return this.columns === 1;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one row or one column\n         */\n        isVector() {\n            return (this.rows === 1) || (this.columns === 1);\n        }\n\n        /**\n         * @return {boolean} true if the matrix has the same number of rows and columns\n         */\n        isSquare() {\n            return this.rows === this.columns;\n        }\n\n        /**\n         * @return {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n         */\n        isSymmetric() {\n            if (this.isSquare()) {\n                for (var i = 0; i < this.rows; i++) {\n                    for (var j = 0; j <= i; j++) {\n                        if (this.get(i, j) !== this.get(j, i)) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            }\n            return false;\n        }\n\n        /**\n         * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @param {number} value - The new value for the element\n         * @return {Matrix} this\n         */\n        set(rowIndex, columnIndex, value) { // eslint-disable-line no-unused-vars\n            throw new Error('set method is unimplemented');\n        }\n\n        /**\n         * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @return {number}\n         */\n        get(rowIndex, columnIndex) { // eslint-disable-line no-unused-vars\n            throw new Error('get method is unimplemented');\n        }\n\n        /**\n         * Creates a new matrix that is a repetition of the current matrix. New matrix has rowRep times the number of\n         * rows of the matrix, and colRep times the number of columns of the matrix\n         * @param {number} rowRep - Number of times the rows should be repeated\n         * @param {number} colRep - Number of times the columns should be re\n         * @return {Matrix}\n         * @example\n         * var matrix = new Matrix([[1,2]]);\n         * matrix.repeat(2); // [[1,2],[1,2]]\n         */\n        repeat(rowRep, colRep) {\n            rowRep = rowRep || 1;\n            colRep = colRep || 1;\n            var matrix = new this.constructor[Symbol.species](this.rows * rowRep, this.columns * colRep);\n            for (var i = 0; i < rowRep; i++) {\n                for (var j = 0; j < colRep; j++) {\n                    matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Fills the matrix with a given value. All elements will be set to this value.\n         * @param {number} value - New value\n         * @return {Matrix} this\n         */\n        fill(value) {\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, value);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Negates the matrix. All elements will be multiplied by (-1)\n         * @return {Matrix} this\n         */\n        neg() {\n            return this.mulS(-1);\n        }\n\n        /**\n         * Returns a new array from the given row index\n         * @param {number} index - Row index\n         * @return {Array}\n         */\n        getRow(index) {\n            util.checkRowIndex(this, index);\n            var row = new Array(this.columns);\n            for (var i = 0; i < this.columns; i++) {\n                row[i] = this.get(index, i);\n            }\n            return row;\n        }\n\n        /**\n         * Returns a new row vector from the given row index\n         * @param {number} index - Row index\n         * @return {Matrix}\n         */\n        getRowVector(index) {\n            return this.constructor.rowVector(this.getRow(index));\n        }\n\n        /**\n         * Sets a row at the given index\n         * @param {number} index - Row index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n        setRow(index, array) {\n            util.checkRowIndex(this, index);\n            array = util.checkRowVector(this, array);\n            for (var i = 0; i < this.columns; i++) {\n                this.set(index, i, array[i]);\n            }\n            return this;\n        }\n\n        /**\n         * Swaps two rows\n         * @param {number} row1 - First row index\n         * @param {number} row2 - Second row index\n         * @return {Matrix} this\n         */\n        swapRows(row1, row2) {\n            util.checkRowIndex(this, row1);\n            util.checkRowIndex(this, row2);\n            for (var i = 0; i < this.columns; i++) {\n                var temp = this.get(row1, i);\n                this.set(row1, i, this.get(row2, i));\n                this.set(row2, i, temp);\n            }\n            return this;\n        }\n\n        /**\n         * Returns a new array from the given column index\n         * @param {number} index - Column index\n         * @return {Array}\n         */\n        getColumn(index) {\n            util.checkColumnIndex(this, index);\n            var column = new Array(this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                column[i] = this.get(i, index);\n            }\n            return column;\n        }\n\n        /**\n         * Returns a new column vector from the given column index\n         * @param {number} index - Column index\n         * @return {Matrix}\n         */\n        getColumnVector(index) {\n            return this.constructor.columnVector(this.getColumn(index));\n        }\n\n        /**\n         * Sets a column at the given index\n         * @param {number} index - Column index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n        setColumn(index, array) {\n            util.checkColumnIndex(this, index);\n            array = util.checkColumnVector(this, array);\n            for (var i = 0; i < this.rows; i++) {\n                this.set(i, index, array[i]);\n            }\n            return this;\n        }\n\n        /**\n         * Swaps two columns\n         * @param {number} column1 - First column index\n         * @param {number} column2 - Second column index\n         * @return {Matrix} this\n         */\n        swapColumns(column1, column2) {\n            util.checkColumnIndex(this, column1);\n            util.checkColumnIndex(this, column2);\n            for (var i = 0; i < this.rows; i++) {\n                var temp = this.get(i, column1);\n                this.set(i, column1, this.get(i, column2));\n                this.set(i, column2, temp);\n            }\n            return this;\n        }\n\n        /**\n         * Adds the values of a vector to each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        addRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) + vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Subtracts the values of a vector from each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        subRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) - vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a vector with each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        mulRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) * vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Divides the values of each row by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        divRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) / vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Adds the values of a vector to each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        addColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) + vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Subtracts the values of a vector from each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        subColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) - vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a vector with each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        mulColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) * vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Divides the values of each column by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        divColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) / vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a row with a scalar\n         * @param {number} index - Row index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n        mulRow(index, value) {\n            util.checkRowIndex(this, index);\n            for (var i = 0; i < this.columns; i++) {\n                this.set(index, i, this.get(index, i) * value);\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a column with a scalar\n         * @param {number} index - Column index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n        mulColumn(index, value) {\n            util.checkColumnIndex(this, index);\n            for (var i = 0; i < this.rows; i++) {\n                this.set(i, index, this.get(i, index) * value);\n            }\n            return this;\n        }\n\n        /**\n         * Returns the maximum value of the matrix\n         * @return {number}\n         */\n        max() {\n            var v = this.get(0, 0);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) > v) {\n                        v = this.get(i, j);\n                    }\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value\n         * @return {Array}\n         */\n        maxIndex() {\n            var v = this.get(0, 0);\n            var idx = [0, 0];\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) > v) {\n                        v = this.get(i, j);\n                        idx[0] = i;\n                        idx[1] = j;\n                    }\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of the matrix\n         * @return {number}\n         */\n        min() {\n            var v = this.get(0, 0);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) < v) {\n                        v = this.get(i, j);\n                    }\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the minimum value\n         * @return {Array}\n         */\n        minIndex() {\n            var v = this.get(0, 0);\n            var idx = [0, 0];\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) < v) {\n                        v = this.get(i, j);\n                        idx[0] = i;\n                        idx[1] = j;\n                    }\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the maximum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n        maxRow(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) > v) {\n                    v = this.get(row, i);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n        maxRowIndex(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            var idx = [row, 0];\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) > v) {\n                    v = this.get(row, i);\n                    idx[1] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n        minRow(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) < v) {\n                    v = this.get(row, i);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n        minRowIndex(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            var idx = [row, 0];\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) < v) {\n                    v = this.get(row, i);\n                    idx[1] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the maximum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n        maxColumn(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) > v) {\n                    v = this.get(i, column);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n        maxColumnIndex(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            var idx = [0, column];\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) > v) {\n                    v = this.get(i, column);\n                    idx[0] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n        minColumn(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) < v) {\n                    v = this.get(i, column);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the minimum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n        minColumnIndex(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            var idx = [0, column];\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) < v) {\n                    v = this.get(i, column);\n                    idx[0] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns an array containing the diagonal values of the matrix\n         * @return {Array}\n         */\n        diag() {\n            var min = Math.min(this.rows, this.columns);\n            var diag = new Array(min);\n            for (var i = 0; i < min; i++) {\n                diag[i] = this.get(i, i);\n            }\n            return diag;\n        }\n\n        /**\n         * Returns the sum by the argument given, if no argument given,\n         * it returns the sum of all elements of the matrix.\n         * @param {string} by - sum by 'row' or 'column'.\n         * @return {Matrix|number}\n         */\n        sum(by) {\n            switch (by) {\n                case 'row':\n                    return util.sumByRow(this);\n                case 'column':\n                    return util.sumByColumn(this);\n                default:\n                    return util.sumAll(this);\n            }\n        }\n\n        /**\n         * Returns the mean of all elements of the matrix\n         * @return {number}\n         */\n        mean() {\n            return this.sum() / this.size;\n        }\n\n        /**\n         * Returns the product of all elements of the matrix\n         * @return {number}\n         */\n        prod() {\n            var prod = 1;\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    prod *= this.get(i, j);\n                }\n            }\n            return prod;\n        }\n\n        /**\n         * Computes the cumulative sum of the matrix elements (in place, row by row)\n         * @return {Matrix} this\n         */\n        cumulativeSum() {\n            var sum = 0;\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    sum += this.get(i, j);\n                    this.set(i, j, sum);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Computes the dot (scalar) product between the matrix and another\n         * @param {Matrix} vector2 vector\n         * @return {number}\n         */\n        dot(vector2) {\n            if (Matrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n            var vector1 = this.to1DArray();\n            if (vector1.length !== vector2.length) {\n                throw new RangeError('vectors do not have the same size');\n            }\n            var dot = 0;\n            for (var i = 0; i < vector1.length; i++) {\n                dot += vector1[i] * vector2[i];\n            }\n            return dot;\n        }\n\n        /**\n         * Returns the matrix product between this and other\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n        mmul(other) {\n            other = this.constructor.checkMatrix(other);\n            if (this.columns !== other.rows) {\n                // eslint-disable-next-line no-console\n                console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n            }\n\n            var m = this.rows;\n            var n = this.columns;\n            var p = other.columns;\n\n            var result = new this.constructor[Symbol.species](m, p);\n\n            var Bcolj = new Array(n);\n            for (var j = 0; j < p; j++) {\n                for (var k = 0; k < n; k++) {\n                    Bcolj[k] = other.get(k, j);\n                }\n\n                for (var i = 0; i < m; i++) {\n                    var s = 0;\n                    for (k = 0; k < n; k++) {\n                        s += this.get(i, k) * Bcolj[k];\n                    }\n\n                    result.set(i, j, s);\n                }\n            }\n            return result;\n        }\n\n        strassen2x2(other) {\n            var result = new this.constructor[Symbol.species](2, 2);\n            const a11 = this.get(0, 0);\n            const b11 = other.get(0, 0);\n            const a12 = this.get(0, 1);\n            const b12 = other.get(0, 1);\n            const a21 = this.get(1, 0);\n            const b21 = other.get(1, 0);\n            const a22 = this.get(1, 1);\n            const b22 = other.get(1, 1);\n\n            // Compute intermediate values.\n            const m1 = (a11 + a22) * (b11 + b22);\n            const m2 = (a21 + a22) * b11;\n            const m3 = a11 * (b12 - b22);\n            const m4 = a22 * (b21 - b11);\n            const m5 = (a11 + a12) * b22;\n            const m6 = (a21 - a11) * (b11 + b12);\n            const m7 = (a12 - a22) * (b21 + b22);\n\n            // Combine intermediate values into the output.\n            const c00 = m1 + m4 - m5 + m7;\n            const c01 = m3 + m5;\n            const c10 = m2 + m4;\n            const c11 = m1 - m2 + m3 + m6;\n\n            result.set(0, 0, c00);\n            result.set(0, 1, c01);\n            result.set(1, 0, c10);\n            result.set(1, 1, c11);\n            return result;\n        }\n\n        strassen3x3(other) {\n            var result = new this.constructor[Symbol.species](3, 3);\n\n            const a00 = this.get(0, 0);\n            const a01 = this.get(0, 1);\n            const a02 = this.get(0, 2);\n            const a10 = this.get(1, 0);\n            const a11 = this.get(1, 1);\n            const a12 = this.get(1, 2);\n            const a20 = this.get(2, 0);\n            const a21 = this.get(2, 1);\n            const a22 = this.get(2, 2);\n\n            const b00 = other.get(0, 0);\n            const b01 = other.get(0, 1);\n            const b02 = other.get(0, 2);\n            const b10 = other.get(1, 0);\n            const b11 = other.get(1, 1);\n            const b12 = other.get(1, 2);\n            const b20 = other.get(2, 0);\n            const b21 = other.get(2, 1);\n            const b22 = other.get(2, 2);\n\n            const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n            const m2 = (a00 - a10) * (-b01 + b11);\n            const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n            const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n            const m5 = (a10 + a11) * (-b00 + b01);\n            const m6 = a00 * b00;\n            const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n            const m8 = (-a00 + a20) * (b02 - b12);\n            const m9 = (a20 + a21) * (-b00 + b02);\n            const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n            const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n            const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n            const m13 = (a02 - a22) * (b11 - b21);\n            const m14 = a02 * b20;\n            const m15 = (a21 + a22) * (-b20 + b21);\n            const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n            const m17 = (a02 - a12) * (b12 - b22);\n            const m18 = (a11 + a12) * (-b20 + b22);\n            const m19 = a01 * b10;\n            const m20 = a12 * b21;\n            const m21 = a10 * b02;\n            const m22 = a20 * b01;\n            const m23 = a22 * b22;\n\n            const c00 = m6 + m14 + m19;\n            const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n            const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n            const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n            const c11 = m2 + m4 + m5 + m6 + m20;\n            const c12 = m14 + m16 + m17 + m18 + m21;\n            const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n            const c21 = m12 + m13 + m14 + m15 + m22;\n            const c22 = m6 + m7 + m8 + m9 + m23;\n\n            result.set(0, 0, c00);\n            result.set(0, 1, c01);\n            result.set(0, 2, c02);\n            result.set(1, 0, c10);\n            result.set(1, 1, c11);\n            result.set(1, 2, c12);\n            result.set(2, 0, c20);\n            result.set(2, 1, c21);\n            result.set(2, 2, c22);\n            return result;\n        }\n\n        /**\n         * Returns the matrix product between x and y. More efficient than mmul(other) only when we multiply squared matrix and when the size of the matrix is > 1000.\n         * @param {Matrix} y\n         * @return {Matrix}\n         */\n        mmulStrassen(y) {\n            var x = this.clone();\n            var r1 = x.rows;\n            var c1 = x.columns;\n            var r2 = y.rows;\n            var c2 = y.columns;\n            if (c1 !== r2) {\n                // eslint-disable-next-line no-console\n                console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);\n            }\n\n            // Put a matrix into the top left of a matrix of zeros.\n            // `rows` and `cols` are the dimensions of the output matrix.\n            function embed(mat, rows, cols) {\n                var r = mat.rows;\n                var c = mat.columns;\n                if ((r === rows) && (c === cols)) {\n                    return mat;\n                } else {\n                    var resultat = Matrix.zeros(rows, cols);\n                    resultat = resultat.setSubMatrix(mat, 0, 0);\n                    return resultat;\n                }\n            }\n\n\n            // Make sure both matrices are the same size.\n            // This is exclusively for simplicity:\n            // this algorithm can be implemented with matrices of different sizes.\n\n            var r = Math.max(r1, r2);\n            var c = Math.max(c1, c2);\n            x = embed(x, r, c);\n            y = embed(y, r, c);\n\n            // Our recursive multiplication function.\n            function blockMult(a, b, rows, cols) {\n                // For small matrices, resort to naive multiplication.\n                if (rows <= 512 || cols <= 512) {\n                    return a.mmul(b); // a is equivalent to this\n                }\n\n                // Apply dynamic padding.\n                if ((rows % 2 === 1) && (cols % 2 === 1)) {\n                    a = embed(a, rows + 1, cols + 1);\n                    b = embed(b, rows + 1, cols + 1);\n                } else if (rows % 2 === 1) {\n                    a = embed(a, rows + 1, cols);\n                    b = embed(b, rows + 1, cols);\n                } else if (cols % 2 === 1) {\n                    a = embed(a, rows, cols + 1);\n                    b = embed(b, rows, cols + 1);\n                }\n\n                var halfRows = parseInt(a.rows / 2);\n                var halfCols = parseInt(a.columns / 2);\n                // Subdivide input matrices.\n                var a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n                var b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n                var a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n                var b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n                var a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n                var b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n                var a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n                var b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n                // Compute intermediate values.\n                var m1 = blockMult(Matrix.add(a11, a22), Matrix.add(b11, b22), halfRows, halfCols);\n                var m2 = blockMult(Matrix.add(a21, a22), b11, halfRows, halfCols);\n                var m3 = blockMult(a11, Matrix.sub(b12, b22), halfRows, halfCols);\n                var m4 = blockMult(a22, Matrix.sub(b21, b11), halfRows, halfCols);\n                var m5 = blockMult(Matrix.add(a11, a12), b22, halfRows, halfCols);\n                var m6 = blockMult(Matrix.sub(a21, a11), Matrix.add(b11, b12), halfRows, halfCols);\n                var m7 = blockMult(Matrix.sub(a12, a22), Matrix.add(b21, b22), halfRows, halfCols);\n\n                // Combine intermediate values into the output.\n                var c11 = Matrix.add(m1, m4);\n                c11.sub(m5);\n                c11.add(m7);\n                var c12 = Matrix.add(m3, m5);\n                var c21 = Matrix.add(m2, m4);\n                var c22 = Matrix.sub(m1, m2);\n                c22.add(m3);\n                c22.add(m6);\n\n                //Crop output to the desired size (undo dynamic padding).\n                var resultat = Matrix.zeros(2 * c11.rows, 2 * c11.columns);\n                resultat = resultat.setSubMatrix(c11, 0, 0);\n                resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n                resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n                resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n                return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n            }\n            return blockMult(x, y, r, c);\n        }\n\n        /**\n         * Returns a row-by-row scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The scaled matrix\n         */\n        scaleRows(min, max) {\n            min = min === undefined ? 0 : min;\n            max = max === undefined ? 1 : max;\n            if (min >= max) {\n                throw new RangeError('min should be strictly smaller than max');\n            }\n            var newMatrix = this.constructor.empty(this.rows, this.columns);\n            for (var i = 0; i < this.rows; i++) {\n                var scaled = arrayUtils.scale(this.getRow(i), {min, max});\n                newMatrix.setRow(i, scaled);\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a new column-by-column scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The new scaled matrix\n         * @example\n         * var matrix = new Matrix([[1,2],[-1,0]]);\n         * var scaledMatrix = matrix.scaleColumns(); // [[1,1],[0,0]]\n         */\n        scaleColumns(min, max) {\n            min = min === undefined ? 0 : min;\n            max = max === undefined ? 1 : max;\n            if (min >= max) {\n                throw new RangeError('min should be strictly smaller than max');\n            }\n            var newMatrix = this.constructor.empty(this.rows, this.columns);\n            for (var i = 0; i < this.columns; i++) {\n                var scaled = arrayUtils.scale(this.getColumn(i), {\n                    min: min,\n                    max: max\n                });\n                newMatrix.setColumn(i, scaled);\n            }\n            return newMatrix;\n        }\n\n\n        /**\n         * Returns the Kronecker product (also known as tensor product) between this and other\n         * See https://en.wikipedia.org/wiki/Kronecker_product\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n        kroneckerProduct(other) {\n            other = this.constructor.checkMatrix(other);\n\n            var m = this.rows;\n            var n = this.columns;\n            var p = other.rows;\n            var q = other.columns;\n\n            var result = new this.constructor[Symbol.species](m * p, n * q);\n            for (var i = 0; i < m; i++) {\n                for (var j = 0; j < n; j++) {\n                    for (var k = 0; k < p; k++) {\n                        for (var l = 0; l < q; l++) {\n                            result[p * i + k][q * j + l] = this.get(i, j) * other.get(k, l);\n                        }\n                    }\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Transposes the matrix and returns a new one containing the result\n         * @return {Matrix}\n         */\n        transpose() {\n            var result = new this.constructor[Symbol.species](this.columns, this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    result.set(j, i, this.get(i, j));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Sorts the rows (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n        sortRows(compareFunction) {\n            if (compareFunction === undefined) compareFunction = compareNumbers;\n            for (var i = 0; i < this.rows; i++) {\n                this.setRow(i, this.getRow(i).sort(compareFunction));\n            }\n            return this;\n        }\n\n        /**\n         * Sorts the columns (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n        sortColumns(compareFunction) {\n            if (compareFunction === undefined) compareFunction = compareNumbers;\n            for (var i = 0; i < this.columns; i++) {\n                this.setColumn(i, this.getColumn(i).sort(compareFunction));\n            }\n            return this;\n        }\n\n        /**\n         * Returns a subset of the matrix\n         * @param {number} startRow - First row index\n         * @param {number} endRow - Last row index\n         * @param {number} startColumn - First column index\n         * @param {number} endColumn - Last column index\n         * @return {Matrix}\n         */\n        subMatrix(startRow, endRow, startColumn, endColumn) {\n            util.checkRange(this, startRow, endRow, startColumn, endColumn);\n            var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, endColumn - startColumn + 1);\n            for (var i = startRow; i <= endRow; i++) {\n                for (var j = startColumn; j <= endColumn; j++) {\n                    newMatrix[i - startRow][j - startColumn] = this.get(i, j);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a subset of the matrix based on an array of row indices\n         * @param {Array} indices - Array containing the row indices\n         * @param {number} [startColumn = 0] - First column index\n         * @param {number} [endColumn = this.columns-1] - Last column index\n         * @return {Matrix}\n         */\n        subMatrixRow(indices, startColumn, endColumn) {\n            if (startColumn === undefined) startColumn = 0;\n            if (endColumn === undefined) endColumn = this.columns - 1;\n            if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns)) {\n                throw new RangeError('Argument out of range');\n            }\n\n            var newMatrix = new this.constructor[Symbol.species](indices.length, endColumn - startColumn + 1);\n            for (var i = 0; i < indices.length; i++) {\n                for (var j = startColumn; j <= endColumn; j++) {\n                    if (indices[i] < 0 || indices[i] >= this.rows) {\n                        throw new RangeError('Row index out of range: ' + indices[i]);\n                    }\n                    newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a subset of the matrix based on an array of column indices\n         * @param {Array} indices - Array containing the column indices\n         * @param {number} [startRow = 0] - First row index\n         * @param {number} [endRow = this.rows-1] - Last row index\n         * @return {Matrix}\n         */\n        subMatrixColumn(indices, startRow, endRow) {\n            if (startRow === undefined) startRow = 0;\n            if (endRow === undefined) endRow = this.rows - 1;\n            if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows)) {\n                throw new RangeError('Argument out of range');\n            }\n\n            var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, indices.length);\n            for (var i = 0; i < indices.length; i++) {\n                for (var j = startRow; j <= endRow; j++) {\n                    if (indices[i] < 0 || indices[i] >= this.columns) {\n                        throw new RangeError('Column index out of range: ' + indices[i]);\n                    }\n                    newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Set a part of the matrix to the given sub-matrix\n         * @param {Matrix|Array< Array >} matrix - The source matrix from which to extract values.\n         * @param {number} startRow - The index of the first row to set\n         * @param {number} startColumn - The index of the first column to set\n         * @return {Matrix}\n         */\n        setSubMatrix(matrix, startRow, startColumn) {\n            matrix = this.constructor.checkMatrix(matrix);\n            var endRow = startRow + matrix.rows - 1;\n            var endColumn = startColumn + matrix.columns - 1;\n            util.checkRange(this, startRow, endRow, startColumn, endColumn);\n            for (var i = 0; i < matrix.rows; i++) {\n                for (var j = 0; j < matrix.columns; j++) {\n                    this[startRow + i][startColumn + j] = matrix.get(i, j);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Return a new matrix based on a selection of rows and columns\n         * @param {Array<number>} rowIndices - The row indices to select. Order matters and an index can be more than once.\n         * @param {Array<number>} columnIndices - The column indices to select. Order matters and an index can be use more than once.\n         * @return {Matrix} The new matrix\n         */\n        selection(rowIndices, columnIndices) {\n            var indices = util.checkIndices(this, rowIndices, columnIndices);\n            var newMatrix = new this.constructor[Symbol.species](rowIndices.length, columnIndices.length);\n            for (var i = 0; i < indices.row.length; i++) {\n                var rowIndex = indices.row[i];\n                for (var j = 0; j < indices.column.length; j++) {\n                    var columnIndex = indices.column[j];\n                    newMatrix[i][j] = this.get(rowIndex, columnIndex);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns the trace of the matrix (sum of the diagonal elements)\n         * @return {number}\n         */\n        trace() {\n            var min = Math.min(this.rows, this.columns);\n            var trace = 0;\n            for (var i = 0; i < min; i++) {\n                trace += this.get(i, i);\n            }\n            return trace;\n        }\n\n        /*\n         Matrix views\n         */\n\n        /**\n         * Returns a view of the transposition of the matrix\n         * @return {MatrixTransposeView}\n         */\n        transposeView() {\n            return new MatrixTransposeView(this);\n        }\n\n        /**\n         * Returns a view of the row vector with the given index\n         * @param {number} row - row index of the vector\n         * @return {MatrixRowView}\n         */\n        rowView(row) {\n            util.checkRowIndex(this, row);\n            return new MatrixRowView(this, row);\n        }\n\n        /**\n         * Returns a view of the column vector with the given index\n         * @param {number} column - column index of the vector\n         * @return {MatrixColumnView}\n         */\n        columnView(column) {\n            util.checkColumnIndex(this, column);\n            return new MatrixColumnView(this, column);\n        }\n\n        /**\n         * Returns a view of the matrix flipped in the row axis\n         * @return {MatrixFlipRowView}\n         */\n        flipRowView() {\n            return new MatrixFlipRowView(this);\n        }\n\n        /**\n         * Returns a view of the matrix flipped in the column axis\n         * @return {MatrixFlipColumnView}\n         */\n        flipColumnView() {\n            return new MatrixFlipColumnView(this);\n        }\n\n        /**\n         * Returns a view of a submatrix giving the index boundaries\n         * @param {number} startRow - first row index of the submatrix\n         * @param {number} endRow - last row index of the submatrix\n         * @param {number} startColumn - first column index of the submatrix\n         * @param {number} endColumn - last column index of the submatrix\n         * @return {MatrixSubView}\n         */\n        subMatrixView(startRow, endRow, startColumn, endColumn) {\n            return new MatrixSubView(this, startRow, endRow, startColumn, endColumn);\n        }\n\n        /**\n         * Returns a view of the cross of the row indices and the column indices\n         * @example\n         * // resulting vector is [[2], [2]]\n         * var matrix = new Matrix([[1,2,3], [4,5,6]]).selectionView([0, 0], [1])\n         * @param {Array<number>} rowIndices\n         * @param {Array<number>} columnIndices\n         * @return {MatrixSelectionView}\n         */\n        selectionView(rowIndices, columnIndices) {\n            return new MatrixSelectionView(this, rowIndices, columnIndices);\n        }\n\n\n        /**\n        * Calculates and returns the determinant of a matrix as a Number\n        * @example\n        *   new Matrix([[1,2,3], [4,5,6]]).det()\n        * @return {number}\n        */\n        det() {\n            if (this.isSquare()) {\n                var a, b, c, d;\n                if (this.columns === 2) {\n                    // 2 x 2 matrix\n                    a = this.get(0, 0);\n                    b = this.get(0, 1);\n                    c = this.get(1, 0);\n                    d = this.get(1, 1);\n\n                    return a * d - (b * c);\n                } else if (this.columns === 3) {\n                    // 3 x 3 matrix\n                    var subMatrix0, subMatrix1, subMatrix2;\n                    subMatrix0 = this.selectionView([1, 2], [1, 2]);\n                    subMatrix1 = this.selectionView([1, 2], [0, 2]);\n                    subMatrix2 = this.selectionView([1, 2], [0, 1]);\n                    a = this.get(0, 0);\n                    b = this.get(0, 1);\n                    c = this.get(0, 2);\n\n                    return a * subMatrix0.det() - b * subMatrix1.det() + c * subMatrix2.det();\n                } else {\n                    // general purpose determinant using the LU decomposition\n                    return new LuDecomposition(this).determinant;\n                }\n\n            } else {\n                throw Error('Determinant can only be calculated for a square matrix.');\n            }\n        }\n\n        /**\n         * Returns inverse of a matrix if it exists or the pseudoinverse\n         * @param {number} threshold - threshold for taking inverse of singular values (default = 1e-15)\n         * @return {Matrix} the (pseudo)inverted matrix.\n         */\n        pseudoInverse(threshold) {\n            if (threshold === undefined) threshold = Number.EPSILON;\n            var svdSolution = new SvDecomposition(this, {autoTranspose: true});\n\n            var U = svdSolution.leftSingularVectors;\n            var V = svdSolution.rightSingularVectors;\n            var s = svdSolution.diagonal;\n\n            for (var i = 0; i < s.length; i++) {\n                if (Math.abs(s[i]) > threshold) {\n                    s[i] = 1.0 / s[i];\n                } else {\n                    s[i] = 0.0;\n                }\n            }\n\n            // convert list to diagonal\n            s = this.constructor[Symbol.species].diag(s);\n            return V.mmul(s.mmul(U.transposeView()));\n        }\n    }\n\n    Matrix.prototype.klass = 'Matrix';\n\n    /**\n     * @private\n     * Check that two matrices have the same dimensions\n     * @param {Matrix} matrix\n     * @param {Matrix} otherMatrix\n     */\n    function checkDimensions(matrix, otherMatrix) { // eslint-disable-line no-unused-vars\n        if (matrix.rows !== otherMatrix.rows ||\n            matrix.columns !== otherMatrix.columns) {\n            throw new RangeError('Matrices dimensions must be equal');\n        }\n    }\n\n    function compareNumbers(a, b) {\n        return a - b;\n    }\n\n    /*\n     Synonyms\n     */\n\n    Matrix.random = Matrix.rand;\n    Matrix.diagonal = Matrix.diag;\n    Matrix.prototype.diagonal = Matrix.prototype.diag;\n    Matrix.identity = Matrix.eye;\n    Matrix.prototype.negate = Matrix.prototype.neg;\n    Matrix.prototype.tensorProduct = Matrix.prototype.kroneckerProduct;\n    Matrix.prototype.determinant = Matrix.prototype.det;\n\n    /*\n     Add dynamically instance and static methods for mathematical operations\n     */\n\n    var inplaceOperator = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n    var inplaceOperatorScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% value);\n        }\n    }\n    return this;\n})\n`;\n\n    var inplaceOperatorMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    checkDimensions(this, matrix);\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% matrix.get(i, j));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticOperator = `\n(function %name%(matrix, value) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(value);\n})\n`;\n\n    var inplaceMethod = `\n(function %name%() {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticMethod = `\n(function %name%(matrix) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%();\n})\n`;\n\n    var inplaceMethodWithArgs = `\n(function %name%(%args%) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), %args%));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticMethodWithArgs = `\n(function %name%(matrix, %args%) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(%args%);\n})\n`;\n\n\n    var inplaceMethodWithOneArgScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), value));\n        }\n    }\n    return this;\n})\n`;\n    var inplaceMethodWithOneArgMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    checkDimensions(this, matrix);\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), matrix.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n    var inplaceMethodWithOneArg = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n    var staticMethodWithOneArg = staticMethodWithArgs;\n\n    var operators = [\n        // Arithmetic operators\n        ['+', 'add'],\n        ['-', 'sub', 'subtract'],\n        ['*', 'mul', 'multiply'],\n        ['/', 'div', 'divide'],\n        ['%', 'mod', 'modulus'],\n        // Bitwise operators\n        ['&', 'and'],\n        ['|', 'or'],\n        ['^', 'xor'],\n        ['<<', 'leftShift'],\n        ['>>', 'signPropagatingRightShift'],\n        ['>>>', 'rightShift', 'zeroFillRightShift']\n    ];\n\n    var i;\n\n    for (var operator of operators) {\n        var inplaceOp = eval(fillTemplateFunction(inplaceOperator, {name: operator[1], op: operator[0]}));\n        var inplaceOpS = eval(fillTemplateFunction(inplaceOperatorScalar, {name: operator[1] + 'S', op: operator[0]}));\n        var inplaceOpM = eval(fillTemplateFunction(inplaceOperatorMatrix, {name: operator[1] + 'M', op: operator[0]}));\n        var staticOp = eval(fillTemplateFunction(staticOperator, {name: operator[1]}));\n        for (i = 1; i < operator.length; i++) {\n            Matrix.prototype[operator[i]] = inplaceOp;\n            Matrix.prototype[operator[i] + 'S'] = inplaceOpS;\n            Matrix.prototype[operator[i] + 'M'] = inplaceOpM;\n            Matrix[operator[i]] = staticOp;\n        }\n    }\n\n    var methods = [\n        ['~', 'not']\n    ];\n\n    [\n        'abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cbrt', 'ceil',\n        'clz32', 'cos', 'cosh', 'exp', 'expm1', 'floor', 'fround', 'log', 'log1p',\n        'log10', 'log2', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc'\n    ].forEach(function (mathMethod) {\n        methods.push(['Math.' + mathMethod, mathMethod]);\n    });\n\n    for (var method of methods) {\n        var inplaceMeth = eval(fillTemplateFunction(inplaceMethod, {name: method[1], method: method[0]}));\n        var staticMeth = eval(fillTemplateFunction(staticMethod, {name: method[1]}));\n        for (i = 1; i < method.length; i++) {\n            Matrix.prototype[method[i]] = inplaceMeth;\n            Matrix[method[i]] = staticMeth;\n        }\n    }\n\n    var methodsWithArgs = [\n        ['Math.pow', 1, 'pow']\n    ];\n\n    for (var methodWithArg of methodsWithArgs) {\n        var args = 'arg0';\n        for (i = 1; i < methodWithArg[1]; i++) {\n            args += `, arg${i}`;\n        }\n        if (methodWithArg[1] !== 1) {\n            var inplaceMethWithArgs = eval(fillTemplateFunction(inplaceMethodWithArgs, {\n                name: methodWithArg[2],\n                method: methodWithArg[0],\n                args: args\n            }));\n            var staticMethWithArgs = eval(fillTemplateFunction(staticMethodWithArgs, {name: methodWithArg[2], args: args}));\n            for (i = 2; i < methodWithArg.length; i++) {\n                Matrix.prototype[methodWithArg[i]] = inplaceMethWithArgs;\n                Matrix[methodWithArg[i]] = staticMethWithArgs;\n            }\n        } else {\n            var tmplVar = {\n                name: methodWithArg[2],\n                args: args,\n                method: methodWithArg[0]\n            };\n            var inplaceMethod2 = eval(fillTemplateFunction(inplaceMethodWithOneArg, tmplVar));\n            var inplaceMethodS = eval(fillTemplateFunction(inplaceMethodWithOneArgScalar, tmplVar));\n            var inplaceMethodM = eval(fillTemplateFunction(inplaceMethodWithOneArgMatrix, tmplVar));\n            var staticMethod2 = eval(fillTemplateFunction(staticMethodWithOneArg, tmplVar));\n            for (i = 2; i < methodWithArg.length; i++) {\n                Matrix.prototype[methodWithArg[i]] = inplaceMethod2;\n                Matrix.prototype[methodWithArg[i] + 'M'] = inplaceMethodM;\n                Matrix.prototype[methodWithArg[i] + 'S'] = inplaceMethodS;\n                Matrix[methodWithArg[i]] = staticMethod2;\n            }\n        }\n    }\n\n    function fillTemplateFunction(template, values) {\n        for (var value in values) {\n            template = template.replace(new RegExp('%' + value + '%', 'g'), values[value]);\n        }\n        return template;\n    }\n\n    return Matrix;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/abstractMatrix.js","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\nfunction LuDecomposition(matrix) {\n    if (!(this instanceof LuDecomposition)) {\n        return new LuDecomposition(matrix);\n    }\n\n    matrix = Matrix.Matrix.checkMatrix(matrix);\n\n    var lu = matrix.clone(),\n        rows = lu.rows,\n        columns = lu.columns,\n        pivotVector = new Array(rows),\n        pivotSign = 1,\n        i, j, k, p, s, t, v,\n        LUrowi, LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n        pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n\n        for (i = 0; i < rows; i++) {\n            LUcolj[i] = lu[i][j];\n        }\n\n        for (i = 0; i < rows; i++) {\n            LUrowi = lu[i];\n            kmax = Math.min(i, j);\n            s = 0;\n            for (k = 0; k < kmax; k++) {\n                s += LUrowi[k] * LUcolj[k];\n            }\n            LUrowi[j] = LUcolj[i] -= s;\n        }\n\n        p = j;\n        for (i = j + 1; i < rows; i++) {\n            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n                p = i;\n            }\n        }\n\n        if (p !== j) {\n            for (k = 0; k < columns; k++) {\n                t = lu[p][k];\n                lu[p][k] = lu[j][k];\n                lu[j][k] = t;\n            }\n\n            v = pivotVector[p];\n            pivotVector[p] = pivotVector[j];\n            pivotVector[j] = v;\n\n            pivotSign = -pivotSign;\n        }\n\n        if (j < rows && lu[j][j] !== 0) {\n            for (i = j + 1; i < rows; i++) {\n                lu[i][j] /= lu[j][j];\n            }\n        }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n}\n\nLuDecomposition.prototype = {\n    isSingular: function () {\n        var data = this.LU,\n            col = data.columns;\n        for (var j = 0; j < col; j++) {\n            if (data[j][j] === 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    get determinant() {\n        var data = this.LU;\n        if (!data.isSquare()) {\n            throw new Error('Matrix must be square');\n        }\n        var determinant = this.pivotSign, col = data.columns;\n        for (var j = 0; j < col; j++) {\n            determinant *= data[j][j];\n        }\n        return determinant;\n    },\n    get lowerTriangularMatrix() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix.Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i > j) {\n                    X[i][j] = data[i][j];\n                } else if (i === j) {\n                    X[i][j] = 1;\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get upperTriangularMatrix() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix.Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i <= j) {\n                    X[i][j] = data[i][j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get pivotPermutationVector() {\n        return this.pivotVector.slice();\n    },\n    solve: function (value) {\n        value = Matrix.Matrix.checkMatrix(value);\n\n        var lu = this.LU,\n            rows = lu.rows;\n\n        if (rows !== value.rows) {\n            throw new Error('Invalid matrix dimensions');\n        }\n        if (this.isSingular()) {\n            throw new Error('LU matrix is singular');\n        }\n\n        var count = value.columns;\n        var X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n        var columns = lu.columns;\n        var i, j, k;\n\n        for (k = 0; k < columns; k++) {\n            for (i = k + 1; i < columns; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        for (k = columns - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= lu[k][k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = LuDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/dc/lu.js","'use strict';\n\nvar Matrix = require('../matrix');\nvar util = require('./util');\nvar hypotenuse = util.hypotenuse;\nvar getFilled2DArray = util.getFilled2DArray;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\nfunction SingularValueDecomposition(value, options) {\n    if (!(this instanceof SingularValueDecomposition)) {\n        return new SingularValueDecomposition(value, options);\n    }\n    value = Matrix.Matrix.checkMatrix(value);\n\n    options = options || {};\n\n    var m = value.rows,\n        n = value.columns,\n        nu = Math.min(m, n);\n\n    var wantu = true, wantv = true;\n    if (options.computeLeftSingularVectors === false) wantu = false;\n    if (options.computeRightSingularVectors === false) wantv = false;\n    var autoTranspose = options.autoTranspose === true;\n\n    var swapped = false;\n    var a;\n    if (m < n) {\n        if (!autoTranspose) {\n            a = value.clone();\n            // eslint-disable-next-line no-console\n            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n        } else {\n            a = value.transpose();\n            m = a.rows;\n            n = a.columns;\n            swapped = true;\n            var aux = wantu;\n            wantu = wantv;\n            wantv = aux;\n        }\n    } else {\n        a = value.clone();\n    }\n\n    var s = new Array(Math.min(m + 1, n)),\n        U = getFilled2DArray(m, nu, 0),\n        V = getFilled2DArray(n, n, 0),\n        e = new Array(n),\n        work = new Array(m);\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n\n    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\n    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n        if (k < nct) {\n            s[k] = 0;\n            for (i = k; i < m; i++) {\n                s[k] = hypotenuse(s[k], a[i][k]);\n            }\n            if (s[k] !== 0) {\n                if (a[k][k] < 0) {\n                    s[k] = -s[k];\n                }\n                for (i = k; i < m; i++) {\n                    a[i][k] /= s[k];\n                }\n                a[k][k] += 1;\n            }\n            s[k] = -s[k];\n        }\n\n        for (j = k + 1; j < n; j++) {\n            if ((k < nct) && (s[k] !== 0)) {\n                t = 0;\n                for (i = k; i < m; i++) {\n                    t += a[i][k] * a[i][j];\n                }\n                t = -t / a[k][k];\n                for (i = k; i < m; i++) {\n                    a[i][j] += t * a[i][k];\n                }\n            }\n            e[j] = a[k][j];\n        }\n\n        if (wantu && (k < nct)) {\n            for (i = k; i < m; i++) {\n                U[i][k] = a[i][k];\n            }\n        }\n\n        if (k < nrt) {\n            e[k] = 0;\n            for (i = k + 1; i < n; i++) {\n                e[k] = hypotenuse(e[k], e[i]);\n            }\n            if (e[k] !== 0) {\n                if (e[k + 1] < 0) {\n                    e[k] = 0 - e[k];\n                }\n                for (i = k + 1; i < n; i++) {\n                    e[i] /= e[k];\n                }\n                e[k + 1] += 1;\n            }\n            e[k] = -e[k];\n            if ((k + 1 < m) && (e[k] !== 0)) {\n                for (i = k + 1; i < m; i++) {\n                    work[i] = 0;\n                }\n                for (j = k + 1; j < n; j++) {\n                    for (i = k + 1; i < m; i++) {\n                        work[i] += e[j] * a[i][j];\n                    }\n                }\n                for (j = k + 1; j < n; j++) {\n                    t = -e[j] / e[k + 1];\n                    for (i = k + 1; i < m; i++) {\n                        a[i][j] += t * work[i];\n                    }\n                }\n            }\n            if (wantv) {\n                for (i = k + 1; i < n; i++) {\n                    V[i][k] = e[i];\n                }\n            }\n        }\n    }\n\n    p = Math.min(n, m + 1);\n    if (nct < n) {\n        s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n        s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n        e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n        for (j = nct; j < nu; j++) {\n            for (i = 0; i < m; i++) {\n                U[i][j] = 0;\n            }\n            U[j][j] = 1;\n        }\n        for (k = nct - 1; k >= 0; k--) {\n            if (s[k] !== 0) {\n                for (j = k + 1; j < nu; j++) {\n                    t = 0;\n                    for (i = k; i < m; i++) {\n                        t += U[i][k] * U[i][j];\n                    }\n                    t = -t / U[k][k];\n                    for (i = k; i < m; i++) {\n                        U[i][j] += t * U[i][k];\n                    }\n                }\n                for (i = k; i < m; i++) {\n                    U[i][k] = -U[i][k];\n                }\n                U[k][k] = 1 + U[k][k];\n                for (i = 0; i < k - 1; i++) {\n                    U[i][k] = 0;\n                }\n            } else {\n                for (i = 0; i < m; i++) {\n                    U[i][k] = 0;\n                }\n                U[k][k] = 1;\n            }\n        }\n    }\n\n    if (wantv) {\n        for (k = n - 1; k >= 0; k--) {\n            if ((k < nrt) && (e[k] !== 0)) {\n                for (j = k + 1; j < n; j++) {\n                    t = 0;\n                    for (i = k + 1; i < n; i++) {\n                        t += V[i][k] * V[i][j];\n                    }\n                    t = -t / V[k + 1][k];\n                    for (i = k + 1; i < n; i++) {\n                        V[i][j] += t * V[i][k];\n                    }\n                }\n            }\n            for (i = 0; i < n; i++) {\n                V[i][k] = 0;\n            }\n            V[k][k] = 1;\n        }\n    }\n\n    var pp = p - 1,\n        iter = 0,\n        eps = Math.pow(2, -52);\n    while (p > 0) {\n        for (k = p - 2; k >= -1; k--) {\n            if (k === -1) {\n                break;\n            }\n            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n                e[k] = 0;\n                break;\n            }\n        }\n        if (k === p - 2) {\n            kase = 4;\n        } else {\n            for (ks = p - 1; ks >= k; ks--) {\n                if (ks === k) {\n                    break;\n                }\n                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n                if (Math.abs(s[ks]) <= eps * t) {\n                    s[ks] = 0;\n                    break;\n                }\n            }\n            if (ks === k) {\n                kase = 3;\n            } else if (ks === p - 1) {\n                kase = 1;\n            } else {\n                kase = 2;\n                k = ks;\n            }\n        }\n\n        k++;\n\n        switch (kase) {\n            case 1: {\n                f = e[p - 2];\n                e[p - 2] = 0;\n                for (j = p - 2; j >= k; j--) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    if (j !== k) {\n                        f = -sn * e[j - 1];\n                        e[j - 1] = cs * e[j - 1];\n                    }\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][p - 1];\n                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                            V[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 2 : {\n                f = e[k - 1];\n                e[k - 1] = 0;\n                for (j = k; j < p; j++) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    f = -sn * e[j];\n                    e[j] = cs * e[j];\n                    if (wantu) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][k - 1];\n                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 3 : {\n                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n                sp = s[p - 1] / scale;\n                spm1 = s[p - 2] / scale;\n                epm1 = e[p - 2] / scale;\n                sk = s[k] / scale;\n                ek = e[k] / scale;\n                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n                c = (sp * epm1) * (sp * epm1);\n                shift = 0;\n                if ((b !== 0) || (c !== 0)) {\n                    shift = Math.sqrt(b * b + c);\n                    if (b < 0) {\n                        shift = -shift;\n                    }\n                    shift = c / (b + shift);\n                }\n                f = (sk + sp) * (sk - sp) + shift;\n                g = sk * ek;\n                for (j = k; j < p - 1; j++) {\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    if (j !== k) {\n                        e[j - 1] = t;\n                    }\n                    f = cs * s[j] + sn * e[j];\n                    e[j] = cs * e[j] - sn * s[j];\n                    g = sn * s[j + 1];\n                    s[j + 1] = cs * s[j + 1];\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][j + 1];\n                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                            V[i][j] = t;\n                        }\n                    }\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    s[j] = t;\n                    f = cs * e[j] + sn * s[j + 1];\n                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n                    g = sn * e[j + 1];\n                    e[j + 1] = cs * e[j + 1];\n                    if (wantu && (j < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][j + 1];\n                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                e[p - 2] = f;\n                iter = iter + 1;\n                break;\n            }\n            case 4: {\n                if (s[k] <= 0) {\n                    s[k] = (s[k] < 0 ? -s[k] : 0);\n                    if (wantv) {\n                        for (i = 0; i <= pp; i++) {\n                            V[i][k] = -V[i][k];\n                        }\n                    }\n                }\n                while (k < pp) {\n                    if (s[k] >= s[k + 1]) {\n                        break;\n                    }\n                    t = s[k];\n                    s[k] = s[k + 1];\n                    s[k + 1] = t;\n                    if (wantv && (k < n - 1)) {\n                        for (i = 0; i < n; i++) {\n                            t = V[i][k + 1];\n                            V[i][k + 1] = V[i][k];\n                            V[i][k] = t;\n                        }\n                    }\n                    if (wantu && (k < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = U[i][k + 1];\n                            U[i][k + 1] = U[i][k];\n                            U[i][k] = t;\n                        }\n                    }\n                    k++;\n                }\n                iter = 0;\n                p--;\n                break;\n            }\n            // no default\n        }\n    }\n\n    if (swapped) {\n        var tmp = V;\n        V = U;\n        U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n}\n\nSingularValueDecomposition.prototype = {\n    get condition() {\n        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    get norm2() {\n        return this.s[0];\n    },\n    get rank() {\n        var eps = Math.pow(2, -52),\n            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n            r = 0,\n            s = this.s;\n        for (var i = 0, ii = s.length; i < ii; i++) {\n            if (s[i] > tol) {\n                r++;\n            }\n        }\n        return r;\n    },\n    get diagonal() {\n        return this.s;\n    },\n    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n    get threshold() {\n        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n    },\n    get leftSingularVectors() {\n        if (!Matrix.Matrix.isMatrix(this.U)) {\n            this.U = new Matrix.Matrix(this.U);\n        }\n        return this.U;\n    },\n    get rightSingularVectors() {\n        if (!Matrix.Matrix.isMatrix(this.V)) {\n            this.V = new Matrix.Matrix(this.V);\n        }\n        return this.V;\n    },\n    get diagonalMatrix() {\n        return Matrix.Matrix.diag(this.s);\n    },\n    solve: function (value) {\n\n        var Y = value,\n            e = this.threshold,\n            scols = this.s.length,\n            Ls = Matrix.Matrix.zeros(scols, scols),\n            i;\n\n        for (i = 0; i < scols; i++) {\n            if (Math.abs(this.s[i]) <= e) {\n                Ls[i][i] = 0;\n            } else {\n                Ls[i][i] = 1 / this.s[i];\n            }\n        }\n\n        var U = this.U;\n        var V = this.rightSingularVectors;\n\n        var VL = V.mmul(Ls),\n            vrows = V.rows,\n            urows = U.length,\n            VLU = Matrix.Matrix.zeros(vrows, urows),\n            j, k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < scols; k++) {\n                    sum += VL[i][k] * U[j][k];\n                }\n                VLU[i][j] = sum;\n            }\n        }\n\n        return VLU.mmul(Y);\n    },\n    solveForDiagonal: function (value) {\n        return this.solve(Matrix.Matrix.diag(value));\n    },\n    inverse: function () {\n        var V = this.V;\n        var e = this.threshold,\n            vrows = V.length,\n            vcols = V[0].length,\n            X = new Matrix.Matrix(vrows, this.s.length),\n            i, j;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < vcols; j++) {\n                if (Math.abs(this.s[j]) > e) {\n                    X[i][j] = V[i][j] / this.s[j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n\n        var U = this.U;\n\n        var urows = U.length,\n            ucols = U[0].length,\n            Y = new Matrix.Matrix(vrows, urows),\n            k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < ucols; k++) {\n                    sum += X[i][k] * U[j][k];\n                }\n                Y[i][j] = sum;\n            }\n        }\n\n        return Y;\n    }\n};\n\nmodule.exports = SingularValueDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/dc/svd.js","'use strict';\n\nfunction compareNumbers(a, b) {\n    return a - b;\n}\n\n/**\n * Computes the sum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.sum = function sum(values) {\n    var sum = 0;\n    for (var i = 0; i < values.length; i++) {\n        sum += values[i];\n    }\n    return sum;\n};\n\n/**\n * Computes the maximum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.max = function max(values) {\n    var max = -Infinity;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] > max) max = values[i];\n    }\n    return max;\n};\n\n/**\n * Computes the minimum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.min = function min(values) {\n    var min = Infinity;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] < min) min = values[i];\n    }\n    return min;\n};\n\n/**\n * Computes the min and max of the given values\n * @param {Array} values\n * @returns {{min: number, max: number}}\n */\nexports.minMax = function minMax(values) {\n    var min = Infinity;\n    var max = -Infinity;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] < min) min = values[i];\n        if (values[i] > max) max = values[i];\n    }\n    return {\n        min: min,\n        max: max\n    };\n};\n\n/**\n * Computes the arithmetic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.arithmeticMean = function arithmeticMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        sum += values[i];\n    }\n    return sum / l;\n};\n\n/**\n * {@link arithmeticMean}\n */\nexports.mean = exports.arithmeticMean;\n\n/**\n * Computes the geometric mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.geometricMean = function geometricMean(values) {\n    var mul = 1;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        mul *= values[i];\n    }\n    return Math.pow(mul, 1 / l);\n};\n\n/**\n * Computes the mean of the log of the given values\n * If the return value is exponentiated, it gives the same result as the\n * geometric mean.\n * @param {Array} values\n * @returns {number}\n */\nexports.logMean = function logMean(values) {\n    var lnsum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        lnsum += Math.log(values[i]);\n    }\n    return lnsum / l;\n};\n\n/**\n * Computes the weighted grand mean for a list of means and sample sizes\n * @param {Array} means - Mean values for each set of samples\n * @param {Array} samples - Number of original values for each set of samples\n * @returns {number}\n */\nexports.grandMean = function grandMean(means, samples) {\n    var sum = 0;\n    var n = 0;\n    var l = means.length;\n    for (var i = 0; i < l; i++) {\n        sum += samples[i] * means[i];\n        n += samples[i];\n    }\n    return sum / n;\n};\n\n/**\n * Computes the truncated mean of the given values using a given percentage\n * @param {Array} values\n * @param {number} percent - The percentage of values to keep (range: [0,1])\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.truncatedMean = function truncatedMean(values, percent, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice().sort(compareNumbers);\n    }\n    var l = values.length;\n    var k = Math.floor(l * percent);\n    var sum = 0;\n    for (var i = k; i < (l - k); i++) {\n        sum += values[i];\n    }\n    return sum / (l - 2 * k);\n};\n\n/**\n * Computes the harmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.harmonicMean = function harmonicMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] === 0) {\n            throw new RangeError('value at index ' + i + 'is zero');\n        }\n        sum += 1 / values[i];\n    }\n    return l / sum;\n};\n\n/**\n * Computes the contraharmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.contraHarmonicMean = function contraHarmonicMean(values) {\n    var r1 = 0;\n    var r2 = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        r1 += values[i] * values[i];\n        r2 += values[i];\n    }\n    if (r2 < 0) {\n        throw new RangeError('sum of values is negative');\n    }\n    return r1 / r2;\n};\n\n/**\n * Computes the median of the given values\n * @param {Array} values\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.median = function median(values, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice().sort(compareNumbers);\n    }\n    var l = values.length;\n    var half = Math.floor(l / 2);\n    if (l % 2 === 0) {\n        return (values[half - 1] + values[half]) * 0.5;\n    } else {\n        return values[half];\n    }\n};\n\n/**\n * Computes the variance of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.variance = function variance(values, unbiased) {\n    if (unbiased === undefined) unbiased = true;\n    var theMean = exports.mean(values);\n    var theVariance = 0;\n    var l = values.length;\n\n    for (var i = 0; i < l; i++) {\n        var x = values[i] - theMean;\n        theVariance += x * x;\n    }\n\n    if (unbiased) {\n        return theVariance / (l - 1);\n    } else {\n        return theVariance / l;\n    }\n};\n\n/**\n * Computes the standard deviation of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.standardDeviation = function standardDeviation(values, unbiased) {\n    return Math.sqrt(exports.variance(values, unbiased));\n};\n\nexports.standardError = function standardError(values) {\n    return exports.standardDeviation(values) / Math.sqrt(values.length);\n};\n\nexports.quartiles = function quartiles(values, alreadySorted) {\n    if (typeof(alreadySorted) === 'undefined') alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice();\n        values.sort(compareNumbers);\n    }\n\n    var quart = values.length / 4;\n    var q1 = values[Math.ceil(quart) - 1];\n    var q2 = exports.median(values, true);\n    var q3 = values[Math.ceil(quart * 3) - 1];\n\n    return {q1: q1, q2: q2, q3: q3};\n};\n\nexports.pooledStandardDeviation = function pooledStandardDeviation(samples, unbiased) {\n    return Math.sqrt(exports.pooledVariance(samples, unbiased));\n};\n\nexports.pooledVariance = function pooledVariance(samples, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var sum = 0;\n    var length = 0, l = samples.length;\n    for (var i = 0; i < l; i++) {\n        var values = samples[i];\n        var vari = exports.variance(values);\n\n        sum += (values.length - 1) * vari;\n\n        if (unbiased)\n            length += values.length - 1;\n        else\n            length += values.length;\n    }\n    return sum / length;\n};\n\nexports.mode = function mode(values) {\n    var l = values.length,\n        itemCount = new Array(l),\n        i;\n    for (i = 0; i < l; i++) {\n        itemCount[i] = 0;\n    }\n    var itemArray = new Array(l);\n    var count = 0;\n\n    for (i = 0; i < l; i++) {\n        var index = itemArray.indexOf(values[i]);\n        if (index >= 0)\n            itemCount[index]++;\n        else {\n            itemArray[count] = values[i];\n            itemCount[count] = 1;\n            count++;\n        }\n    }\n\n    var maxValue = 0, maxIndex = 0;\n    for (i = 0; i < count; i++) {\n        if (itemCount[i] > maxValue) {\n            maxValue = itemCount[i];\n            maxIndex = i;\n        }\n    }\n\n    return itemArray[maxIndex];\n};\n\nexports.covariance = function covariance(vector1, vector2, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var mean1 = exports.mean(vector1);\n    var mean2 = exports.mean(vector2);\n\n    if (vector1.length !== vector2.length)\n        throw \"Vectors do not have the same dimensions\";\n\n    var cov = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        var x = vector1[i] - mean1;\n        var y = vector2[i] - mean2;\n        cov += x * y;\n    }\n\n    if (unbiased)\n        return cov / (l - 1);\n    else\n        return cov / l;\n};\n\nexports.skewness = function skewness(values, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n\n    var s2 = 0, s3 = 0, l = values.length;\n    for (var i = 0; i < l; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s3 += dev * dev * dev;\n    }\n    var m2 = s2 / l;\n    var m3 = s3 / l;\n\n    var g = m3 / (Math.pow(m2, 3 / 2.0));\n    if (unbiased) {\n        var a = Math.sqrt(l * (l - 1));\n        var b = l - 2;\n        return (a / b) * g;\n    }\n    else {\n        return g;\n    }\n};\n\nexports.kurtosis = function kurtosis(values, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n    var n = values.length, s2 = 0, s4 = 0;\n\n    for (var i = 0; i < n; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s4 += dev * dev * dev * dev;\n    }\n    var m2 = s2 / n;\n    var m4 = s4 / n;\n\n    if (unbiased) {\n        var v = s2 / (n - 1);\n        var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n        var b = s4 / (v * v);\n        var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\n        return a * b - 3 * c;\n    }\n    else {\n        return m4 / (m2 * m2) - 3;\n    }\n};\n\nexports.entropy = function entropy(values, eps) {\n    if (typeof(eps) === 'undefined') eps = 0;\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * Math.log(values[i] + eps);\n    return -sum;\n};\n\nexports.weightedMean = function weightedMean(values, weights) {\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * weights[i];\n    return sum;\n};\n\nexports.weightedStandardDeviation = function weightedStandardDeviation(values, weights) {\n    return Math.sqrt(exports.weightedVariance(values, weights));\n};\n\nexports.weightedVariance = function weightedVariance(values, weights) {\n    var theMean = exports.weightedMean(values, weights);\n    var vari = 0, l = values.length;\n    var a = 0, b = 0;\n\n    for (var i = 0; i < l; i++) {\n        var z = values[i] - theMean;\n        var w = weights[i];\n\n        vari += w * (z * z);\n        b += w;\n        a += w * w;\n    }\n\n    return vari * (b / (b * b - a));\n};\n\nexports.center = function center(values, inPlace) {\n    if (typeof(inPlace) === 'undefined') inPlace = false;\n\n    var result = values;\n    if (!inPlace)\n        result = values.slice();\n\n    var theMean = exports.mean(result), l = result.length;\n    for (var i = 0; i < l; i++)\n        result[i] -= theMean;\n};\n\nexports.standardize = function standardize(values, standardDev, inPlace) {\n    if (typeof(standardDev) === 'undefined') standardDev = exports.standardDeviation(values);\n    if (typeof(inPlace) === 'undefined') inPlace = false;\n    var l = values.length;\n    var result = inPlace ? values : new Array(l);\n    for (var i = 0; i < l; i++)\n        result[i] = values[i] / standardDev;\n    return result;\n};\n\nexports.cumulativeSum = function cumulativeSum(array) {\n    var l = array.length;\n    var result = new Array(l);\n    result[0] = array[0];\n    for (var i = 1; i < l; i++)\n        result[i] = result[i - 1] + array[i];\n    return result;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-savitzky-golay-generalized/node_modules/ml-stat/array.js","'use strict';\n\nmodule.exports = abstractMatrix;\n\nvar LuDecomposition = require('./dc/lu');\nvar SvDecomposition = require('./dc/svd');\nvar arrayUtils = require('ml-array-utils');\nvar util = require('./util');\nvar MatrixTransposeView = require('./views/transpose');\nvar MatrixRowView = require('./views/row');\nvar MatrixSubView = require('./views/sub');\nvar MatrixSelectionView = require('./views/selection');\nvar MatrixColumnView = require('./views/column');\nvar MatrixFlipRowView = require('./views/flipRow');\nvar MatrixFlipColumnView = require('./views/flipColumn');\n\nfunction abstractMatrix(superCtor) {\n    if (superCtor === undefined) superCtor = Object;\n\n    /**\n     * Real matrix\n     * @class Matrix\n     * @param {number|Array|Matrix} nRows - Number of rows of the new matrix,\n     * 2D array containing the data or Matrix instance to clone\n     * @param {number} [nColumns] - Number of columns of the new matrix\n     */\n    class Matrix extends superCtor {\n        static get [Symbol.species]() {\n            return this;\n        }\n\n        /**\n         * Constructs a Matrix with the chosen dimensions from a 1D array\n         * @param {number} newRows - Number of rows\n         * @param {number} newColumns - Number of columns\n         * @param {Array} newData - A 1D array containing data for the matrix\n         * @return {Matrix} - The new matrix\n         */\n        static from1DArray(newRows, newColumns, newData) {\n            var length = newRows * newColumns;\n            if (length !== newData.length) {\n                throw new RangeError('Data length does not match given dimensions');\n            }\n            var newMatrix = new this(newRows, newColumns);\n            for (var row = 0; row < newRows; row++) {\n                for (var column = 0; column < newColumns; column++) {\n                    newMatrix.set(row, column, newData[row * newColumns + column]);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Creates a row vector, a matrix with only one row.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n        static rowVector(newData) {\n            var vector = new this(1, newData.length);\n            for (var i = 0; i < newData.length; i++) {\n                vector.set(0, i, newData[i]);\n            }\n            return vector;\n        }\n\n        /**\n         * Creates a column vector, a matrix with only one column.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n        static columnVector(newData) {\n            var vector = new this(newData.length, 1);\n            for (var i = 0; i < newData.length; i++) {\n                vector.set(i, 0, newData[i]);\n            }\n            return vector;\n        }\n\n        /**\n         * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static empty(rows, columns) {\n            return new this(rows, columns);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be set to zero.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static zeros(rows, columns) {\n            return this.empty(rows, columns).fill(0);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be set to one.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static ones(rows, columns) {\n            return this.empty(rows, columns).fill(1);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be randomly set.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n        static rand(rows, columns, rng) {\n            if (rng === undefined) rng = Math.random;\n            var matrix = this.empty(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    matrix.set(i, j, rng());\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be random integers.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {number} [maxValue=1000] - Maximum value\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n        static randInt(rows, columns, maxValue, rng) {\n            if (maxValue === undefined) maxValue = 1000;\n            if (rng === undefined) rng = Math.random;\n            var matrix = this.empty(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    var value = Math.floor(rng() * maxValue);\n                    matrix.set(i, j, value);\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and others will be 0.\n         * @param {number} rows - Number of rows\n         * @param {number} [columns=rows] - Number of columns\n         * @param {number} [value=1] - Value to fill the diagonal with\n         * @return {Matrix} - The new identity matrix\n         */\n        static eye(rows, columns, value) {\n            if (columns === undefined) columns = rows;\n            if (value === undefined) value = 1;\n            var min = Math.min(rows, columns);\n            var matrix = this.zeros(rows, columns);\n            for (var i = 0; i < min; i++) {\n                matrix.set(i, i, value);\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates a diagonal matrix based on the given array.\n         * @param {Array} data - Array containing the data for the diagonal\n         * @param {number} [rows] - Number of rows (Default: data.length)\n         * @param {number} [columns] - Number of columns (Default: rows)\n         * @return {Matrix} - The new diagonal matrix\n         */\n        static diag(data, rows, columns) {\n            var l = data.length;\n            if (rows === undefined) rows = l;\n            if (columns === undefined) columns = rows;\n            var min = Math.min(l, rows, columns);\n            var matrix = this.zeros(rows, columns);\n            for (var i = 0; i < min; i++) {\n                matrix.set(i, i, data[i]);\n            }\n            return matrix;\n        }\n\n        /**\n         * Returns a matrix whose elements are the minimum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n        static min(matrix1, matrix2) {\n            matrix1 = this.checkMatrix(matrix1);\n            matrix2 = this.checkMatrix(matrix2);\n            var rows = matrix1.rows;\n            var columns = matrix1.columns;\n            var result = new this(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Returns a matrix whose elements are the maximum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n        static max(matrix1, matrix2) {\n            matrix1 = this.checkMatrix(matrix1);\n            matrix2 = this.checkMatrix(matrix2);\n            var rows = matrix1.rows;\n            var columns = matrix1.columns;\n            var result = new this(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Check that the provided value is a Matrix and tries to instantiate one if not\n         * @param {*} value - The value to check\n         * @return {Matrix}\n         */\n        static checkMatrix(value) {\n            return Matrix.isMatrix(value) ? value : new this(value);\n        }\n\n        /**\n         * Returns true if the argument is a Matrix, false otherwise\n         * @param {*} value - The value to check\n         * @return {boolean}\n         */\n        static isMatrix(value) {\n            return (value != null) && (value.klass === 'Matrix');\n        }\n\n        /**\n         * @prop {number} size - The number of elements in the matrix.\n         */\n        get size() {\n            return this.rows * this.columns;\n        }\n\n        /**\n         * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n         * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n         * @return {Matrix} this\n         */\n        apply(callback) {\n            if (typeof callback !== 'function') {\n                throw new TypeError('callback must be a function');\n            }\n            var ii = this.rows;\n            var jj = this.columns;\n            for (var i = 0; i < ii; i++) {\n                for (var j = 0; j < jj; j++) {\n                    callback.call(this, i, j);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Returns a new 1D array filled row by row with the matrix values\n         * @return {Array}\n         */\n        to1DArray() {\n            var array = new Array(this.size);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    array[i * this.columns + j] = this.get(i, j);\n                }\n            }\n            return array;\n        }\n\n        /**\n         * Returns a 2D array containing a copy of the data\n         * @return {Array}\n         */\n        to2DArray() {\n            var copy = new Array(this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                copy[i] = new Array(this.columns);\n                for (var j = 0; j < this.columns; j++) {\n                    copy[i][j] = this.get(i, j);\n                }\n            }\n            return copy;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one row\n         */\n        isRowVector() {\n            return this.rows === 1;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one column\n         */\n        isColumnVector() {\n            return this.columns === 1;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one row or one column\n         */\n        isVector() {\n            return (this.rows === 1) || (this.columns === 1);\n        }\n\n        /**\n         * @return {boolean} true if the matrix has the same number of rows and columns\n         */\n        isSquare() {\n            return this.rows === this.columns;\n        }\n\n        /**\n         * @return {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n         */\n        isSymmetric() {\n            if (this.isSquare()) {\n                for (var i = 0; i < this.rows; i++) {\n                    for (var j = 0; j <= i; j++) {\n                        if (this.get(i, j) !== this.get(j, i)) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            }\n            return false;\n        }\n\n        /**\n         * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @param {number} value - The new value for the element\n         * @return {Matrix} this\n         */\n        set(rowIndex, columnIndex, value) { // eslint-disable-line no-unused-vars\n            throw new Error('set method is unimplemented');\n        }\n\n        /**\n         * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @return {number}\n         */\n        get(rowIndex, columnIndex) { // eslint-disable-line no-unused-vars\n            throw new Error('get method is unimplemented');\n        }\n\n        /**\n         * Creates a new matrix that is a repetition of the current matrix. New matrix has rowRep times the number of\n         * rows of the matrix, and colRep times the number of columns of the matrix\n         * @param {number} rowRep - Number of times the rows should be repeated\n         * @param {number} colRep - Number of times the columns should be re\n         * @return {Matrix}\n         * @example\n         * var matrix = new Matrix([[1,2]]);\n         * matrix.repeat(2); // [[1,2],[1,2]]\n         */\n        repeat(rowRep, colRep) {\n            rowRep = rowRep || 1;\n            colRep = colRep || 1;\n            var matrix = new this.constructor[Symbol.species](this.rows * rowRep, this.columns * colRep);\n            for (var i = 0; i < rowRep; i++) {\n                for (var j = 0; j < colRep; j++) {\n                    matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Fills the matrix with a given value. All elements will be set to this value.\n         * @param {number} value - New value\n         * @return {Matrix} this\n         */\n        fill(value) {\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, value);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Negates the matrix. All elements will be multiplied by (-1)\n         * @return {Matrix} this\n         */\n        neg() {\n            return this.mulS(-1);\n        }\n\n        /**\n         * Returns a new array from the given row index\n         * @param {number} index - Row index\n         * @return {Array}\n         */\n        getRow(index) {\n            util.checkRowIndex(this, index);\n            var row = new Array(this.columns);\n            for (var i = 0; i < this.columns; i++) {\n                row[i] = this.get(index, i);\n            }\n            return row;\n        }\n\n        /**\n         * Returns a new row vector from the given row index\n         * @param {number} index - Row index\n         * @return {Matrix}\n         */\n        getRowVector(index) {\n            return this.constructor.rowVector(this.getRow(index));\n        }\n\n        /**\n         * Sets a row at the given index\n         * @param {number} index - Row index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n        setRow(index, array) {\n            util.checkRowIndex(this, index);\n            array = util.checkRowVector(this, array);\n            for (var i = 0; i < this.columns; i++) {\n                this.set(index, i, array[i]);\n            }\n            return this;\n        }\n\n        /**\n         * Swaps two rows\n         * @param {number} row1 - First row index\n         * @param {number} row2 - Second row index\n         * @return {Matrix} this\n         */\n        swapRows(row1, row2) {\n            util.checkRowIndex(this, row1);\n            util.checkRowIndex(this, row2);\n            for (var i = 0; i < this.columns; i++) {\n                var temp = this.get(row1, i);\n                this.set(row1, i, this.get(row2, i));\n                this.set(row2, i, temp);\n            }\n            return this;\n        }\n\n        /**\n         * Returns a new array from the given column index\n         * @param {number} index - Column index\n         * @return {Array}\n         */\n        getColumn(index) {\n            util.checkColumnIndex(this, index);\n            var column = new Array(this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                column[i] = this.get(i, index);\n            }\n            return column;\n        }\n\n        /**\n         * Returns a new column vector from the given column index\n         * @param {number} index - Column index\n         * @return {Matrix}\n         */\n        getColumnVector(index) {\n            return this.constructor.columnVector(this.getColumn(index));\n        }\n\n        /**\n         * Sets a column at the given index\n         * @param {number} index - Column index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n        setColumn(index, array) {\n            util.checkColumnIndex(this, index);\n            array = util.checkColumnVector(this, array);\n            for (var i = 0; i < this.rows; i++) {\n                this.set(i, index, array[i]);\n            }\n            return this;\n        }\n\n        /**\n         * Swaps two columns\n         * @param {number} column1 - First column index\n         * @param {number} column2 - Second column index\n         * @return {Matrix} this\n         */\n        swapColumns(column1, column2) {\n            util.checkColumnIndex(this, column1);\n            util.checkColumnIndex(this, column2);\n            for (var i = 0; i < this.rows; i++) {\n                var temp = this.get(i, column1);\n                this.set(i, column1, this.get(i, column2));\n                this.set(i, column2, temp);\n            }\n            return this;\n        }\n\n        /**\n         * Adds the values of a vector to each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        addRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) + vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Subtracts the values of a vector from each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        subRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) - vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a vector with each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        mulRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) * vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Divides the values of each row by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        divRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) / vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Adds the values of a vector to each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        addColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) + vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Subtracts the values of a vector from each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        subColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) - vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a vector with each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        mulColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) * vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Divides the values of each column by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        divColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) / vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a row with a scalar\n         * @param {number} index - Row index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n        mulRow(index, value) {\n            util.checkRowIndex(this, index);\n            for (var i = 0; i < this.columns; i++) {\n                this.set(index, i, this.get(index, i) * value);\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a column with a scalar\n         * @param {number} index - Column index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n        mulColumn(index, value) {\n            util.checkColumnIndex(this, index);\n            for (var i = 0; i < this.rows; i++) {\n                this.set(i, index, this.get(i, index) * value);\n            }\n            return this;\n        }\n\n        /**\n         * Returns the maximum value of the matrix\n         * @return {number}\n         */\n        max() {\n            var v = this.get(0, 0);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) > v) {\n                        v = this.get(i, j);\n                    }\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value\n         * @return {Array}\n         */\n        maxIndex() {\n            var v = this.get(0, 0);\n            var idx = [0, 0];\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) > v) {\n                        v = this.get(i, j);\n                        idx[0] = i;\n                        idx[1] = j;\n                    }\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of the matrix\n         * @return {number}\n         */\n        min() {\n            var v = this.get(0, 0);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) < v) {\n                        v = this.get(i, j);\n                    }\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the minimum value\n         * @return {Array}\n         */\n        minIndex() {\n            var v = this.get(0, 0);\n            var idx = [0, 0];\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) < v) {\n                        v = this.get(i, j);\n                        idx[0] = i;\n                        idx[1] = j;\n                    }\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the maximum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n        maxRow(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) > v) {\n                    v = this.get(row, i);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n        maxRowIndex(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            var idx = [row, 0];\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) > v) {\n                    v = this.get(row, i);\n                    idx[1] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n        minRow(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) < v) {\n                    v = this.get(row, i);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n        minRowIndex(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            var idx = [row, 0];\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) < v) {\n                    v = this.get(row, i);\n                    idx[1] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the maximum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n        maxColumn(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) > v) {\n                    v = this.get(i, column);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n        maxColumnIndex(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            var idx = [0, column];\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) > v) {\n                    v = this.get(i, column);\n                    idx[0] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n        minColumn(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) < v) {\n                    v = this.get(i, column);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the minimum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n        minColumnIndex(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            var idx = [0, column];\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) < v) {\n                    v = this.get(i, column);\n                    idx[0] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns an array containing the diagonal values of the matrix\n         * @return {Array}\n         */\n        diag() {\n            var min = Math.min(this.rows, this.columns);\n            var diag = new Array(min);\n            for (var i = 0; i < min; i++) {\n                diag[i] = this.get(i, i);\n            }\n            return diag;\n        }\n\n        /**\n         * Returns the sum by the argument given, if no argument given,\n         * it returns the sum of all elements of the matrix.\n         * @param {string} by - sum by 'row' or 'column'.\n         * @return {Matrix|number}\n         */\n        sum(by) {\n            switch (by) {\n                case 'row':\n                    return util.sumByRow(this);\n                case 'column':\n                    return util.sumByColumn(this);\n                default:\n                    return util.sumAll(this);\n            }\n        }\n\n        /**\n         * Returns the mean of all elements of the matrix\n         * @return {number}\n         */\n        mean() {\n            return this.sum() / this.size;\n        }\n\n        /**\n         * Returns the product of all elements of the matrix\n         * @return {number}\n         */\n        prod() {\n            var prod = 1;\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    prod *= this.get(i, j);\n                }\n            }\n            return prod;\n        }\n\n        /**\n         * Computes the cumulative sum of the matrix elements (in place, row by row)\n         * @return {Matrix} this\n         */\n        cumulativeSum() {\n            var sum = 0;\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    sum += this.get(i, j);\n                    this.set(i, j, sum);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Computes the dot (scalar) product between the matrix and another\n         * @param {Matrix} vector2 vector\n         * @return {number}\n         */\n        dot(vector2) {\n            if (Matrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n            var vector1 = this.to1DArray();\n            if (vector1.length !== vector2.length) {\n                throw new RangeError('vectors do not have the same size');\n            }\n            var dot = 0;\n            for (var i = 0; i < vector1.length; i++) {\n                dot += vector1[i] * vector2[i];\n            }\n            return dot;\n        }\n\n        /**\n         * Returns the matrix product between this and other\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n        mmul(other) {\n            other = this.constructor.checkMatrix(other);\n            if (this.columns !== other.rows) {\n                // eslint-disable-next-line no-console\n                console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n            }\n\n            var m = this.rows;\n            var n = this.columns;\n            var p = other.columns;\n\n            var result = new this.constructor[Symbol.species](m, p);\n\n            var Bcolj = new Array(n);\n            for (var j = 0; j < p; j++) {\n                for (var k = 0; k < n; k++) {\n                    Bcolj[k] = other.get(k, j);\n                }\n\n                for (var i = 0; i < m; i++) {\n                    var s = 0;\n                    for (k = 0; k < n; k++) {\n                        s += this.get(i, k) * Bcolj[k];\n                    }\n\n                    result.set(i, j, s);\n                }\n            }\n            return result;\n        }\n\n        strassen2x2(other) {\n            var result = new this.constructor[Symbol.species](2, 2);\n            const a11 = this.get(0, 0);\n            const b11 = other.get(0, 0);\n            const a12 = this.get(0, 1);\n            const b12 = other.get(0, 1);\n            const a21 = this.get(1, 0);\n            const b21 = other.get(1, 0);\n            const a22 = this.get(1, 1);\n            const b22 = other.get(1, 1);\n\n            // Compute intermediate values.\n            const m1 = (a11 + a22) * (b11 + b22);\n            const m2 = (a21 + a22) * b11;\n            const m3 = a11 * (b12 - b22);\n            const m4 = a22 * (b21 - b11);\n            const m5 = (a11 + a12) * b22;\n            const m6 = (a21 - a11) * (b11 + b12);\n            const m7 = (a12 - a22) * (b21 + b22);\n\n            // Combine intermediate values into the output.\n            const c00 = m1 + m4 - m5 + m7;\n            const c01 = m3 + m5;\n            const c10 = m2 + m4;\n            const c11 = m1 - m2 + m3 + m6;\n\n            result.set(0, 0, c00);\n            result.set(0, 1, c01);\n            result.set(1, 0, c10);\n            result.set(1, 1, c11);\n            return result;\n        }\n\n        strassen3x3(other) {\n            var result = new this.constructor[Symbol.species](3, 3);\n\n            const a00 = this.get(0, 0);\n            const a01 = this.get(0, 1);\n            const a02 = this.get(0, 2);\n            const a10 = this.get(1, 0);\n            const a11 = this.get(1, 1);\n            const a12 = this.get(1, 2);\n            const a20 = this.get(2, 0);\n            const a21 = this.get(2, 1);\n            const a22 = this.get(2, 2);\n\n            const b00 = other.get(0, 0);\n            const b01 = other.get(0, 1);\n            const b02 = other.get(0, 2);\n            const b10 = other.get(1, 0);\n            const b11 = other.get(1, 1);\n            const b12 = other.get(1, 2);\n            const b20 = other.get(2, 0);\n            const b21 = other.get(2, 1);\n            const b22 = other.get(2, 2);\n\n            const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n            const m2 = (a00 - a10) * (-b01 + b11);\n            const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n            const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n            const m5 = (a10 + a11) * (-b00 + b01);\n            const m6 = a00 * b00;\n            const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n            const m8 = (-a00 + a20) * (b02 - b12);\n            const m9 = (a20 + a21) * (-b00 + b02);\n            const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n            const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n            const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n            const m13 = (a02 - a22) * (b11 - b21);\n            const m14 = a02 * b20;\n            const m15 = (a21 + a22) * (-b20 + b21);\n            const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n            const m17 = (a02 - a12) * (b12 - b22);\n            const m18 = (a11 + a12) * (-b20 + b22);\n            const m19 = a01 * b10;\n            const m20 = a12 * b21;\n            const m21 = a10 * b02;\n            const m22 = a20 * b01;\n            const m23 = a22 * b22;\n\n            const c00 = m6 + m14 + m19;\n            const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n            const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n            const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n            const c11 = m2 + m4 + m5 + m6 + m20;\n            const c12 = m14 + m16 + m17 + m18 + m21;\n            const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n            const c21 = m12 + m13 + m14 + m15 + m22;\n            const c22 = m6 + m7 + m8 + m9 + m23;\n\n            result.set(0, 0, c00);\n            result.set(0, 1, c01);\n            result.set(0, 2, c02);\n            result.set(1, 0, c10);\n            result.set(1, 1, c11);\n            result.set(1, 2, c12);\n            result.set(2, 0, c20);\n            result.set(2, 1, c21);\n            result.set(2, 2, c22);\n            return result;\n        }\n\n        /**\n         * Returns the matrix product between x and y. More efficient than mmul(other) only when we multiply squared matrix and when the size of the matrix is > 1000.\n         * @param {Matrix} y\n         * @return {Matrix}\n         */\n        mmulStrassen(y) {\n            var x = this.clone();\n            var r1 = x.rows;\n            var c1 = x.columns;\n            var r2 = y.rows;\n            var c2 = y.columns;\n            if (c1 !== r2) {\n                // eslint-disable-next-line no-console\n                console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);\n            }\n\n            // Put a matrix into the top left of a matrix of zeros.\n            // `rows` and `cols` are the dimensions of the output matrix.\n            function embed(mat, rows, cols) {\n                var r = mat.rows;\n                var c = mat.columns;\n                if ((r === rows) && (c === cols)) {\n                    return mat;\n                } else {\n                    var resultat = Matrix.zeros(rows, cols);\n                    resultat = resultat.setSubMatrix(mat, 0, 0);\n                    return resultat;\n                }\n            }\n\n\n            // Make sure both matrices are the same size.\n            // This is exclusively for simplicity:\n            // this algorithm can be implemented with matrices of different sizes.\n\n            var r = Math.max(r1, r2);\n            var c = Math.max(c1, c2);\n            x = embed(x, r, c);\n            y = embed(y, r, c);\n\n            // Our recursive multiplication function.\n            function blockMult(a, b, rows, cols) {\n                // For small matrices, resort to naive multiplication.\n                if (rows <= 512 || cols <= 512) {\n                    return a.mmul(b); // a is equivalent to this\n                }\n\n                // Apply dynamic padding.\n                if ((rows % 2 === 1) && (cols % 2 === 1)) {\n                    a = embed(a, rows + 1, cols + 1);\n                    b = embed(b, rows + 1, cols + 1);\n                } else if (rows % 2 === 1) {\n                    a = embed(a, rows + 1, cols);\n                    b = embed(b, rows + 1, cols);\n                } else if (cols % 2 === 1) {\n                    a = embed(a, rows, cols + 1);\n                    b = embed(b, rows, cols + 1);\n                }\n\n                var halfRows = parseInt(a.rows / 2);\n                var halfCols = parseInt(a.columns / 2);\n                // Subdivide input matrices.\n                var a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n                var b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n                var a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n                var b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n                var a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n                var b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n                var a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n                var b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n                // Compute intermediate values.\n                var m1 = blockMult(Matrix.add(a11, a22), Matrix.add(b11, b22), halfRows, halfCols);\n                var m2 = blockMult(Matrix.add(a21, a22), b11, halfRows, halfCols);\n                var m3 = blockMult(a11, Matrix.sub(b12, b22), halfRows, halfCols);\n                var m4 = blockMult(a22, Matrix.sub(b21, b11), halfRows, halfCols);\n                var m5 = blockMult(Matrix.add(a11, a12), b22, halfRows, halfCols);\n                var m6 = blockMult(Matrix.sub(a21, a11), Matrix.add(b11, b12), halfRows, halfCols);\n                var m7 = blockMult(Matrix.sub(a12, a22), Matrix.add(b21, b22), halfRows, halfCols);\n\n                // Combine intermediate values into the output.\n                var c11 = Matrix.add(m1, m4);\n                c11.sub(m5);\n                c11.add(m7);\n                var c12 = Matrix.add(m3, m5);\n                var c21 = Matrix.add(m2, m4);\n                var c22 = Matrix.sub(m1, m2);\n                c22.add(m3);\n                c22.add(m6);\n\n                //Crop output to the desired size (undo dynamic padding).\n                var resultat = Matrix.zeros(2 * c11.rows, 2 * c11.columns);\n                resultat = resultat.setSubMatrix(c11, 0, 0);\n                resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n                resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n                resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n                return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n            }\n            return blockMult(x, y, r, c);\n        }\n\n        /**\n         * Returns a row-by-row scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The scaled matrix\n         */\n        scaleRows(min, max) {\n            min = min === undefined ? 0 : min;\n            max = max === undefined ? 1 : max;\n            if (min >= max) {\n                throw new RangeError('min should be strictly smaller than max');\n            }\n            var newMatrix = this.constructor.empty(this.rows, this.columns);\n            for (var i = 0; i < this.rows; i++) {\n                var scaled = arrayUtils.scale(this.getRow(i), {min, max});\n                newMatrix.setRow(i, scaled);\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a new column-by-column scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The new scaled matrix\n         * @example\n         * var matrix = new Matrix([[1,2],[-1,0]]);\n         * var scaledMatrix = matrix.scaleColumns(); // [[1,1],[0,0]]\n         */\n        scaleColumns(min, max) {\n            min = min === undefined ? 0 : min;\n            max = max === undefined ? 1 : max;\n            if (min >= max) {\n                throw new RangeError('min should be strictly smaller than max');\n            }\n            var newMatrix = this.constructor.empty(this.rows, this.columns);\n            for (var i = 0; i < this.columns; i++) {\n                var scaled = arrayUtils.scale(this.getColumn(i), {\n                    min: min,\n                    max: max\n                });\n                newMatrix.setColumn(i, scaled);\n            }\n            return newMatrix;\n        }\n\n\n        /**\n         * Returns the Kronecker product (also known as tensor product) between this and other\n         * See https://en.wikipedia.org/wiki/Kronecker_product\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n        kroneckerProduct(other) {\n            other = this.constructor.checkMatrix(other);\n\n            var m = this.rows;\n            var n = this.columns;\n            var p = other.rows;\n            var q = other.columns;\n\n            var result = new this.constructor[Symbol.species](m * p, n * q);\n            for (var i = 0; i < m; i++) {\n                for (var j = 0; j < n; j++) {\n                    for (var k = 0; k < p; k++) {\n                        for (var l = 0; l < q; l++) {\n                            result[p * i + k][q * j + l] = this.get(i, j) * other.get(k, l);\n                        }\n                    }\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Transposes the matrix and returns a new one containing the result\n         * @return {Matrix}\n         */\n        transpose() {\n            var result = new this.constructor[Symbol.species](this.columns, this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    result.set(j, i, this.get(i, j));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Sorts the rows (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n        sortRows(compareFunction) {\n            if (compareFunction === undefined) compareFunction = compareNumbers;\n            for (var i = 0; i < this.rows; i++) {\n                this.setRow(i, this.getRow(i).sort(compareFunction));\n            }\n            return this;\n        }\n\n        /**\n         * Sorts the columns (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n        sortColumns(compareFunction) {\n            if (compareFunction === undefined) compareFunction = compareNumbers;\n            for (var i = 0; i < this.columns; i++) {\n                this.setColumn(i, this.getColumn(i).sort(compareFunction));\n            }\n            return this;\n        }\n\n        /**\n         * Returns a subset of the matrix\n         * @param {number} startRow - First row index\n         * @param {number} endRow - Last row index\n         * @param {number} startColumn - First column index\n         * @param {number} endColumn - Last column index\n         * @return {Matrix}\n         */\n        subMatrix(startRow, endRow, startColumn, endColumn) {\n            util.checkRange(this, startRow, endRow, startColumn, endColumn);\n            var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, endColumn - startColumn + 1);\n            for (var i = startRow; i <= endRow; i++) {\n                for (var j = startColumn; j <= endColumn; j++) {\n                    newMatrix[i - startRow][j - startColumn] = this.get(i, j);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a subset of the matrix based on an array of row indices\n         * @param {Array} indices - Array containing the row indices\n         * @param {number} [startColumn = 0] - First column index\n         * @param {number} [endColumn = this.columns-1] - Last column index\n         * @return {Matrix}\n         */\n        subMatrixRow(indices, startColumn, endColumn) {\n            if (startColumn === undefined) startColumn = 0;\n            if (endColumn === undefined) endColumn = this.columns - 1;\n            if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns)) {\n                throw new RangeError('Argument out of range');\n            }\n\n            var newMatrix = new this.constructor[Symbol.species](indices.length, endColumn - startColumn + 1);\n            for (var i = 0; i < indices.length; i++) {\n                for (var j = startColumn; j <= endColumn; j++) {\n                    if (indices[i] < 0 || indices[i] >= this.rows) {\n                        throw new RangeError('Row index out of range: ' + indices[i]);\n                    }\n                    newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a subset of the matrix based on an array of column indices\n         * @param {Array} indices - Array containing the column indices\n         * @param {number} [startRow = 0] - First row index\n         * @param {number} [endRow = this.rows-1] - Last row index\n         * @return {Matrix}\n         */\n        subMatrixColumn(indices, startRow, endRow) {\n            if (startRow === undefined) startRow = 0;\n            if (endRow === undefined) endRow = this.rows - 1;\n            if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows)) {\n                throw new RangeError('Argument out of range');\n            }\n\n            var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, indices.length);\n            for (var i = 0; i < indices.length; i++) {\n                for (var j = startRow; j <= endRow; j++) {\n                    if (indices[i] < 0 || indices[i] >= this.columns) {\n                        throw new RangeError('Column index out of range: ' + indices[i]);\n                    }\n                    newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Set a part of the matrix to the given sub-matrix\n         * @param {Matrix|Array< Array >} matrix - The source matrix from which to extract values.\n         * @param {number} startRow - The index of the first row to set\n         * @param {number} startColumn - The index of the first column to set\n         * @return {Matrix}\n         */\n        setSubMatrix(matrix, startRow, startColumn) {\n            matrix = this.constructor.checkMatrix(matrix);\n            var endRow = startRow + matrix.rows - 1;\n            var endColumn = startColumn + matrix.columns - 1;\n            util.checkRange(this, startRow, endRow, startColumn, endColumn);\n            for (var i = 0; i < matrix.rows; i++) {\n                for (var j = 0; j < matrix.columns; j++) {\n                    this[startRow + i][startColumn + j] = matrix.get(i, j);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Return a new matrix based on a selection of rows and columns\n         * @param {Array<number>} rowIndices - The row indices to select. Order matters and an index can be more than once.\n         * @param {Array<number>} columnIndices - The column indices to select. Order matters and an index can be use more than once.\n         * @return {Matrix} The new matrix\n         */\n        selection(rowIndices, columnIndices) {\n            var indices = util.checkIndices(this, rowIndices, columnIndices);\n            var newMatrix = new this.constructor[Symbol.species](rowIndices.length, columnIndices.length);\n            for (var i = 0; i < indices.row.length; i++) {\n                var rowIndex = indices.row[i];\n                for (var j = 0; j < indices.column.length; j++) {\n                    var columnIndex = indices.column[j];\n                    newMatrix[i][j] = this.get(rowIndex, columnIndex);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns the trace of the matrix (sum of the diagonal elements)\n         * @return {number}\n         */\n        trace() {\n            var min = Math.min(this.rows, this.columns);\n            var trace = 0;\n            for (var i = 0; i < min; i++) {\n                trace += this.get(i, i);\n            }\n            return trace;\n        }\n\n        /*\n         Matrix views\n         */\n\n        /**\n         * Returns a view of the transposition of the matrix\n         * @return {MatrixTransposeView}\n         */\n        transposeView() {\n            return new MatrixTransposeView(this);\n        }\n\n        /**\n         * Returns a view of the row vector with the given index\n         * @param {number} row - row index of the vector\n         * @return {MatrixRowView}\n         */\n        rowView(row) {\n            util.checkRowIndex(this, row);\n            return new MatrixRowView(this, row);\n        }\n\n        /**\n         * Returns a view of the column vector with the given index\n         * @param {number} column - column index of the vector\n         * @return {MatrixColumnView}\n         */\n        columnView(column) {\n            util.checkColumnIndex(this, column);\n            return new MatrixColumnView(this, column);\n        }\n\n        /**\n         * Returns a view of the matrix flipped in the row axis\n         * @return {MatrixFlipRowView}\n         */\n        flipRowView() {\n            return new MatrixFlipRowView(this);\n        }\n\n        /**\n         * Returns a view of the matrix flipped in the column axis\n         * @return {MatrixFlipColumnView}\n         */\n        flipColumnView() {\n            return new MatrixFlipColumnView(this);\n        }\n\n        /**\n         * Returns a view of a submatrix giving the index boundaries\n         * @param {number} startRow - first row index of the submatrix\n         * @param {number} endRow - last row index of the submatrix\n         * @param {number} startColumn - first column index of the submatrix\n         * @param {number} endColumn - last column index of the submatrix\n         * @return {MatrixSubView}\n         */\n        subMatrixView(startRow, endRow, startColumn, endColumn) {\n            return new MatrixSubView(this, startRow, endRow, startColumn, endColumn);\n        }\n\n        /**\n         * Returns a view of the cross of the row indices and the column indices\n         * @example\n         * // resulting vector is [[2], [2]]\n         * var matrix = new Matrix([[1,2,3], [4,5,6]]).selectionView([0, 0], [1])\n         * @param {Array<number>} rowIndices\n         * @param {Array<number>} columnIndices\n         * @return {MatrixSelectionView}\n         */\n        selectionView(rowIndices, columnIndices) {\n            return new MatrixSelectionView(this, rowIndices, columnIndices);\n        }\n\n\n        /**\n        * Calculates and returns the determinant of a matrix as a Number\n        * @example\n        *   new Matrix([[1,2,3], [4,5,6]]).det()\n        * @return {number}\n        */\n        det() {\n            if (this.isSquare()) {\n                var a, b, c, d;\n                if (this.columns === 2) {\n                    // 2 x 2 matrix\n                    a = this.get(0, 0);\n                    b = this.get(0, 1);\n                    c = this.get(1, 0);\n                    d = this.get(1, 1);\n\n                    return a * d - (b * c);\n                } else if (this.columns === 3) {\n                    // 3 x 3 matrix\n                    var subMatrix0, subMatrix1, subMatrix2;\n                    subMatrix0 = this.selectionView([1, 2], [1, 2]);\n                    subMatrix1 = this.selectionView([1, 2], [0, 2]);\n                    subMatrix2 = this.selectionView([1, 2], [0, 1]);\n                    a = this.get(0, 0);\n                    b = this.get(0, 1);\n                    c = this.get(0, 2);\n\n                    return a * subMatrix0.det() - b * subMatrix1.det() + c * subMatrix2.det();\n                } else {\n                    // general purpose determinant using the LU decomposition\n                    return new LuDecomposition(this).determinant;\n                }\n\n            } else {\n                throw Error('Determinant can only be calculated for a square matrix.');\n            }\n        }\n\n        /**\n         * Returns inverse of a matrix if it exists or the pseudoinverse\n         * @param {number} threshold - threshold for taking inverse of singular values (default = 1e-15)\n         * @return {Matrix} the (pseudo)inverted matrix.\n         */\n        pseudoInverse(threshold) {\n            if (threshold === undefined) threshold = Number.EPSILON;\n            var svdSolution = new SvDecomposition(this, {autoTranspose: true});\n\n            var U = svdSolution.leftSingularVectors;\n            var V = svdSolution.rightSingularVectors;\n            var s = svdSolution.diagonal;\n\n            for (var i = 0; i < s.length; i++) {\n                if (Math.abs(s[i]) > threshold) {\n                    s[i] = 1.0 / s[i];\n                } else {\n                    s[i] = 0.0;\n                }\n            }\n\n            // convert list to diagonal\n            s = this.constructor[Symbol.species].diag(s);\n            return V.mmul(s.mmul(U.transposeView()));\n        }\n    }\n\n    Matrix.prototype.klass = 'Matrix';\n\n    /**\n     * @private\n     * Check that two matrices have the same dimensions\n     * @param {Matrix} matrix\n     * @param {Matrix} otherMatrix\n     */\n    function checkDimensions(matrix, otherMatrix) { // eslint-disable-line no-unused-vars\n        if (matrix.rows !== otherMatrix.rows ||\n            matrix.columns !== otherMatrix.columns) {\n            throw new RangeError('Matrices dimensions must be equal');\n        }\n    }\n\n    function compareNumbers(a, b) {\n        return a - b;\n    }\n\n    /*\n     Synonyms\n     */\n\n    Matrix.random = Matrix.rand;\n    Matrix.diagonal = Matrix.diag;\n    Matrix.prototype.diagonal = Matrix.prototype.diag;\n    Matrix.identity = Matrix.eye;\n    Matrix.prototype.negate = Matrix.prototype.neg;\n    Matrix.prototype.tensorProduct = Matrix.prototype.kroneckerProduct;\n    Matrix.prototype.determinant = Matrix.prototype.det;\n\n    /*\n     Add dynamically instance and static methods for mathematical operations\n     */\n\n    var inplaceOperator = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n    var inplaceOperatorScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% value);\n        }\n    }\n    return this;\n})\n`;\n\n    var inplaceOperatorMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    checkDimensions(this, matrix);\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% matrix.get(i, j));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticOperator = `\n(function %name%(matrix, value) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(value);\n})\n`;\n\n    var inplaceMethod = `\n(function %name%() {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticMethod = `\n(function %name%(matrix) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%();\n})\n`;\n\n    var inplaceMethodWithArgs = `\n(function %name%(%args%) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), %args%));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticMethodWithArgs = `\n(function %name%(matrix, %args%) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(%args%);\n})\n`;\n\n\n    var inplaceMethodWithOneArgScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), value));\n        }\n    }\n    return this;\n})\n`;\n    var inplaceMethodWithOneArgMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    checkDimensions(this, matrix);\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), matrix.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n    var inplaceMethodWithOneArg = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n    var staticMethodWithOneArg = staticMethodWithArgs;\n\n    var operators = [\n        // Arithmetic operators\n        ['+', 'add'],\n        ['-', 'sub', 'subtract'],\n        ['*', 'mul', 'multiply'],\n        ['/', 'div', 'divide'],\n        ['%', 'mod', 'modulus'],\n        // Bitwise operators\n        ['&', 'and'],\n        ['|', 'or'],\n        ['^', 'xor'],\n        ['<<', 'leftShift'],\n        ['>>', 'signPropagatingRightShift'],\n        ['>>>', 'rightShift', 'zeroFillRightShift']\n    ];\n\n    var i;\n\n    for (var operator of operators) {\n        var inplaceOp = eval(fillTemplateFunction(inplaceOperator, {name: operator[1], op: operator[0]}));\n        var inplaceOpS = eval(fillTemplateFunction(inplaceOperatorScalar, {name: operator[1] + 'S', op: operator[0]}));\n        var inplaceOpM = eval(fillTemplateFunction(inplaceOperatorMatrix, {name: operator[1] + 'M', op: operator[0]}));\n        var staticOp = eval(fillTemplateFunction(staticOperator, {name: operator[1]}));\n        for (i = 1; i < operator.length; i++) {\n            Matrix.prototype[operator[i]] = inplaceOp;\n            Matrix.prototype[operator[i] + 'S'] = inplaceOpS;\n            Matrix.prototype[operator[i] + 'M'] = inplaceOpM;\n            Matrix[operator[i]] = staticOp;\n        }\n    }\n\n    var methods = [\n        ['~', 'not']\n    ];\n\n    [\n        'abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cbrt', 'ceil',\n        'clz32', 'cos', 'cosh', 'exp', 'expm1', 'floor', 'fround', 'log', 'log1p',\n        'log10', 'log2', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc'\n    ].forEach(function (mathMethod) {\n        methods.push(['Math.' + mathMethod, mathMethod]);\n    });\n\n    for (var method of methods) {\n        var inplaceMeth = eval(fillTemplateFunction(inplaceMethod, {name: method[1], method: method[0]}));\n        var staticMeth = eval(fillTemplateFunction(staticMethod, {name: method[1]}));\n        for (i = 1; i < method.length; i++) {\n            Matrix.prototype[method[i]] = inplaceMeth;\n            Matrix[method[i]] = staticMeth;\n        }\n    }\n\n    var methodsWithArgs = [\n        ['Math.pow', 1, 'pow']\n    ];\n\n    for (var methodWithArg of methodsWithArgs) {\n        var args = 'arg0';\n        for (i = 1; i < methodWithArg[1]; i++) {\n            args += `, arg${i}`;\n        }\n        if (methodWithArg[1] !== 1) {\n            var inplaceMethWithArgs = eval(fillTemplateFunction(inplaceMethodWithArgs, {\n                name: methodWithArg[2],\n                method: methodWithArg[0],\n                args: args\n            }));\n            var staticMethWithArgs = eval(fillTemplateFunction(staticMethodWithArgs, {name: methodWithArg[2], args: args}));\n            for (i = 2; i < methodWithArg.length; i++) {\n                Matrix.prototype[methodWithArg[i]] = inplaceMethWithArgs;\n                Matrix[methodWithArg[i]] = staticMethWithArgs;\n            }\n        } else {\n            var tmplVar = {\n                name: methodWithArg[2],\n                args: args,\n                method: methodWithArg[0]\n            };\n            var inplaceMethod2 = eval(fillTemplateFunction(inplaceMethodWithOneArg, tmplVar));\n            var inplaceMethodS = eval(fillTemplateFunction(inplaceMethodWithOneArgScalar, tmplVar));\n            var inplaceMethodM = eval(fillTemplateFunction(inplaceMethodWithOneArgMatrix, tmplVar));\n            var staticMethod2 = eval(fillTemplateFunction(staticMethodWithOneArg, tmplVar));\n            for (i = 2; i < methodWithArg.length; i++) {\n                Matrix.prototype[methodWithArg[i]] = inplaceMethod2;\n                Matrix.prototype[methodWithArg[i] + 'M'] = inplaceMethodM;\n                Matrix.prototype[methodWithArg[i] + 'S'] = inplaceMethodS;\n                Matrix[methodWithArg[i]] = staticMethod2;\n            }\n        }\n    }\n\n    function fillTemplateFunction(template, values) {\n        for (var value in values) {\n            template = template.replace(new RegExp('%' + value + '%', 'g'), values[value]);\n        }\n        return template;\n    }\n\n    return Matrix;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pca/node_modules/ml-matrix/src/abstractMatrix.js","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\nfunction LuDecomposition(matrix) {\n    if (!(this instanceof LuDecomposition)) {\n        return new LuDecomposition(matrix);\n    }\n\n    matrix = Matrix.Matrix.checkMatrix(matrix);\n\n    var lu = matrix.clone(),\n        rows = lu.rows,\n        columns = lu.columns,\n        pivotVector = new Array(rows),\n        pivotSign = 1,\n        i, j, k, p, s, t, v,\n        LUrowi, LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n        pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n\n        for (i = 0; i < rows; i++) {\n            LUcolj[i] = lu[i][j];\n        }\n\n        for (i = 0; i < rows; i++) {\n            LUrowi = lu[i];\n            kmax = Math.min(i, j);\n            s = 0;\n            for (k = 0; k < kmax; k++) {\n                s += LUrowi[k] * LUcolj[k];\n            }\n            LUrowi[j] = LUcolj[i] -= s;\n        }\n\n        p = j;\n        for (i = j + 1; i < rows; i++) {\n            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n                p = i;\n            }\n        }\n\n        if (p !== j) {\n            for (k = 0; k < columns; k++) {\n                t = lu[p][k];\n                lu[p][k] = lu[j][k];\n                lu[j][k] = t;\n            }\n\n            v = pivotVector[p];\n            pivotVector[p] = pivotVector[j];\n            pivotVector[j] = v;\n\n            pivotSign = -pivotSign;\n        }\n\n        if (j < rows && lu[j][j] !== 0) {\n            for (i = j + 1; i < rows; i++) {\n                lu[i][j] /= lu[j][j];\n            }\n        }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n}\n\nLuDecomposition.prototype = {\n    isSingular: function () {\n        var data = this.LU,\n            col = data.columns;\n        for (var j = 0; j < col; j++) {\n            if (data[j][j] === 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    get determinant() {\n        var data = this.LU;\n        if (!data.isSquare()) {\n            throw new Error('Matrix must be square');\n        }\n        var determinant = this.pivotSign, col = data.columns;\n        for (var j = 0; j < col; j++) {\n            determinant *= data[j][j];\n        }\n        return determinant;\n    },\n    get lowerTriangularMatrix() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix.Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i > j) {\n                    X[i][j] = data[i][j];\n                } else if (i === j) {\n                    X[i][j] = 1;\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get upperTriangularMatrix() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix.Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i <= j) {\n                    X[i][j] = data[i][j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get pivotPermutationVector() {\n        return this.pivotVector.slice();\n    },\n    solve: function (value) {\n        value = Matrix.Matrix.checkMatrix(value);\n\n        var lu = this.LU,\n            rows = lu.rows;\n\n        if (rows !== value.rows) {\n            throw new Error('Invalid matrix dimensions');\n        }\n        if (this.isSingular()) {\n            throw new Error('LU matrix is singular');\n        }\n\n        var count = value.columns;\n        var X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n        var columns = lu.columns;\n        var i, j, k;\n\n        for (k = 0; k < columns; k++) {\n            for (i = k + 1; i < columns; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        for (k = columns - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= lu[k][k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = LuDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pca/node_modules/ml-matrix/src/dc/lu.js","'use strict';\n\nvar Matrix = require('../matrix');\nvar util = require('./util');\nvar hypotenuse = util.hypotenuse;\nvar getFilled2DArray = util.getFilled2DArray;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\nfunction SingularValueDecomposition(value, options) {\n    if (!(this instanceof SingularValueDecomposition)) {\n        return new SingularValueDecomposition(value, options);\n    }\n    value = Matrix.Matrix.checkMatrix(value);\n\n    options = options || {};\n\n    var m = value.rows,\n        n = value.columns,\n        nu = Math.min(m, n);\n\n    var wantu = true, wantv = true;\n    if (options.computeLeftSingularVectors === false) wantu = false;\n    if (options.computeRightSingularVectors === false) wantv = false;\n    var autoTranspose = options.autoTranspose === true;\n\n    var swapped = false;\n    var a;\n    if (m < n) {\n        if (!autoTranspose) {\n            a = value.clone();\n            // eslint-disable-next-line no-console\n            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n        } else {\n            a = value.transpose();\n            m = a.rows;\n            n = a.columns;\n            swapped = true;\n            var aux = wantu;\n            wantu = wantv;\n            wantv = aux;\n        }\n    } else {\n        a = value.clone();\n    }\n\n    var s = new Array(Math.min(m + 1, n)),\n        U = getFilled2DArray(m, nu, 0),\n        V = getFilled2DArray(n, n, 0),\n        e = new Array(n),\n        work = new Array(m);\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n\n    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\n    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n        if (k < nct) {\n            s[k] = 0;\n            for (i = k; i < m; i++) {\n                s[k] = hypotenuse(s[k], a[i][k]);\n            }\n            if (s[k] !== 0) {\n                if (a[k][k] < 0) {\n                    s[k] = -s[k];\n                }\n                for (i = k; i < m; i++) {\n                    a[i][k] /= s[k];\n                }\n                a[k][k] += 1;\n            }\n            s[k] = -s[k];\n        }\n\n        for (j = k + 1; j < n; j++) {\n            if ((k < nct) && (s[k] !== 0)) {\n                t = 0;\n                for (i = k; i < m; i++) {\n                    t += a[i][k] * a[i][j];\n                }\n                t = -t / a[k][k];\n                for (i = k; i < m; i++) {\n                    a[i][j] += t * a[i][k];\n                }\n            }\n            e[j] = a[k][j];\n        }\n\n        if (wantu && (k < nct)) {\n            for (i = k; i < m; i++) {\n                U[i][k] = a[i][k];\n            }\n        }\n\n        if (k < nrt) {\n            e[k] = 0;\n            for (i = k + 1; i < n; i++) {\n                e[k] = hypotenuse(e[k], e[i]);\n            }\n            if (e[k] !== 0) {\n                if (e[k + 1] < 0) {\n                    e[k] = 0 - e[k];\n                }\n                for (i = k + 1; i < n; i++) {\n                    e[i] /= e[k];\n                }\n                e[k + 1] += 1;\n            }\n            e[k] = -e[k];\n            if ((k + 1 < m) && (e[k] !== 0)) {\n                for (i = k + 1; i < m; i++) {\n                    work[i] = 0;\n                }\n                for (j = k + 1; j < n; j++) {\n                    for (i = k + 1; i < m; i++) {\n                        work[i] += e[j] * a[i][j];\n                    }\n                }\n                for (j = k + 1; j < n; j++) {\n                    t = -e[j] / e[k + 1];\n                    for (i = k + 1; i < m; i++) {\n                        a[i][j] += t * work[i];\n                    }\n                }\n            }\n            if (wantv) {\n                for (i = k + 1; i < n; i++) {\n                    V[i][k] = e[i];\n                }\n            }\n        }\n    }\n\n    p = Math.min(n, m + 1);\n    if (nct < n) {\n        s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n        s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n        e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n        for (j = nct; j < nu; j++) {\n            for (i = 0; i < m; i++) {\n                U[i][j] = 0;\n            }\n            U[j][j] = 1;\n        }\n        for (k = nct - 1; k >= 0; k--) {\n            if (s[k] !== 0) {\n                for (j = k + 1; j < nu; j++) {\n                    t = 0;\n                    for (i = k; i < m; i++) {\n                        t += U[i][k] * U[i][j];\n                    }\n                    t = -t / U[k][k];\n                    for (i = k; i < m; i++) {\n                        U[i][j] += t * U[i][k];\n                    }\n                }\n                for (i = k; i < m; i++) {\n                    U[i][k] = -U[i][k];\n                }\n                U[k][k] = 1 + U[k][k];\n                for (i = 0; i < k - 1; i++) {\n                    U[i][k] = 0;\n                }\n            } else {\n                for (i = 0; i < m; i++) {\n                    U[i][k] = 0;\n                }\n                U[k][k] = 1;\n            }\n        }\n    }\n\n    if (wantv) {\n        for (k = n - 1; k >= 0; k--) {\n            if ((k < nrt) && (e[k] !== 0)) {\n                for (j = k + 1; j < n; j++) {\n                    t = 0;\n                    for (i = k + 1; i < n; i++) {\n                        t += V[i][k] * V[i][j];\n                    }\n                    t = -t / V[k + 1][k];\n                    for (i = k + 1; i < n; i++) {\n                        V[i][j] += t * V[i][k];\n                    }\n                }\n            }\n            for (i = 0; i < n; i++) {\n                V[i][k] = 0;\n            }\n            V[k][k] = 1;\n        }\n    }\n\n    var pp = p - 1,\n        iter = 0,\n        eps = Math.pow(2, -52);\n    while (p > 0) {\n        for (k = p - 2; k >= -1; k--) {\n            if (k === -1) {\n                break;\n            }\n            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n                e[k] = 0;\n                break;\n            }\n        }\n        if (k === p - 2) {\n            kase = 4;\n        } else {\n            for (ks = p - 1; ks >= k; ks--) {\n                if (ks === k) {\n                    break;\n                }\n                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n                if (Math.abs(s[ks]) <= eps * t) {\n                    s[ks] = 0;\n                    break;\n                }\n            }\n            if (ks === k) {\n                kase = 3;\n            } else if (ks === p - 1) {\n                kase = 1;\n            } else {\n                kase = 2;\n                k = ks;\n            }\n        }\n\n        k++;\n\n        switch (kase) {\n            case 1: {\n                f = e[p - 2];\n                e[p - 2] = 0;\n                for (j = p - 2; j >= k; j--) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    if (j !== k) {\n                        f = -sn * e[j - 1];\n                        e[j - 1] = cs * e[j - 1];\n                    }\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][p - 1];\n                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                            V[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 2 : {\n                f = e[k - 1];\n                e[k - 1] = 0;\n                for (j = k; j < p; j++) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    f = -sn * e[j];\n                    e[j] = cs * e[j];\n                    if (wantu) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][k - 1];\n                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 3 : {\n                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n                sp = s[p - 1] / scale;\n                spm1 = s[p - 2] / scale;\n                epm1 = e[p - 2] / scale;\n                sk = s[k] / scale;\n                ek = e[k] / scale;\n                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n                c = (sp * epm1) * (sp * epm1);\n                shift = 0;\n                if ((b !== 0) || (c !== 0)) {\n                    shift = Math.sqrt(b * b + c);\n                    if (b < 0) {\n                        shift = -shift;\n                    }\n                    shift = c / (b + shift);\n                }\n                f = (sk + sp) * (sk - sp) + shift;\n                g = sk * ek;\n                for (j = k; j < p - 1; j++) {\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    if (j !== k) {\n                        e[j - 1] = t;\n                    }\n                    f = cs * s[j] + sn * e[j];\n                    e[j] = cs * e[j] - sn * s[j];\n                    g = sn * s[j + 1];\n                    s[j + 1] = cs * s[j + 1];\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][j + 1];\n                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                            V[i][j] = t;\n                        }\n                    }\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    s[j] = t;\n                    f = cs * e[j] + sn * s[j + 1];\n                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n                    g = sn * e[j + 1];\n                    e[j + 1] = cs * e[j + 1];\n                    if (wantu && (j < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][j + 1];\n                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                e[p - 2] = f;\n                iter = iter + 1;\n                break;\n            }\n            case 4: {\n                if (s[k] <= 0) {\n                    s[k] = (s[k] < 0 ? -s[k] : 0);\n                    if (wantv) {\n                        for (i = 0; i <= pp; i++) {\n                            V[i][k] = -V[i][k];\n                        }\n                    }\n                }\n                while (k < pp) {\n                    if (s[k] >= s[k + 1]) {\n                        break;\n                    }\n                    t = s[k];\n                    s[k] = s[k + 1];\n                    s[k + 1] = t;\n                    if (wantv && (k < n - 1)) {\n                        for (i = 0; i < n; i++) {\n                            t = V[i][k + 1];\n                            V[i][k + 1] = V[i][k];\n                            V[i][k] = t;\n                        }\n                    }\n                    if (wantu && (k < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = U[i][k + 1];\n                            U[i][k + 1] = U[i][k];\n                            U[i][k] = t;\n                        }\n                    }\n                    k++;\n                }\n                iter = 0;\n                p--;\n                break;\n            }\n            // no default\n        }\n    }\n\n    if (swapped) {\n        var tmp = V;\n        V = U;\n        U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n}\n\nSingularValueDecomposition.prototype = {\n    get condition() {\n        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    get norm2() {\n        return this.s[0];\n    },\n    get rank() {\n        var eps = Math.pow(2, -52),\n            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n            r = 0,\n            s = this.s;\n        for (var i = 0, ii = s.length; i < ii; i++) {\n            if (s[i] > tol) {\n                r++;\n            }\n        }\n        return r;\n    },\n    get diagonal() {\n        return this.s;\n    },\n    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n    get threshold() {\n        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n    },\n    get leftSingularVectors() {\n        if (!Matrix.Matrix.isMatrix(this.U)) {\n            this.U = new Matrix.Matrix(this.U);\n        }\n        return this.U;\n    },\n    get rightSingularVectors() {\n        if (!Matrix.Matrix.isMatrix(this.V)) {\n            this.V = new Matrix.Matrix(this.V);\n        }\n        return this.V;\n    },\n    get diagonalMatrix() {\n        return Matrix.Matrix.diag(this.s);\n    },\n    solve: function (value) {\n\n        var Y = value,\n            e = this.threshold,\n            scols = this.s.length,\n            Ls = Matrix.Matrix.zeros(scols, scols),\n            i;\n\n        for (i = 0; i < scols; i++) {\n            if (Math.abs(this.s[i]) <= e) {\n                Ls[i][i] = 0;\n            } else {\n                Ls[i][i] = 1 / this.s[i];\n            }\n        }\n\n        var U = this.U;\n        var V = this.rightSingularVectors;\n\n        var VL = V.mmul(Ls),\n            vrows = V.rows,\n            urows = U.length,\n            VLU = Matrix.Matrix.zeros(vrows, urows),\n            j, k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < scols; k++) {\n                    sum += VL[i][k] * U[j][k];\n                }\n                VLU[i][j] = sum;\n            }\n        }\n\n        return VLU.mmul(Y);\n    },\n    solveForDiagonal: function (value) {\n        return this.solve(Matrix.Matrix.diag(value));\n    },\n    inverse: function () {\n        var V = this.V;\n        var e = this.threshold,\n            vrows = V.length,\n            vcols = V[0].length,\n            X = new Matrix.Matrix(vrows, this.s.length),\n            i, j;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < vcols; j++) {\n                if (Math.abs(this.s[j]) > e) {\n                    X[i][j] = V[i][j] / this.s[j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n\n        var U = this.U;\n\n        var urows = U.length,\n            ucols = U[0].length,\n            Y = new Matrix.Matrix(vrows, urows),\n            k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < ucols; k++) {\n                    sum += X[i][k] * U[j][k];\n                }\n                Y[i][j] = sum;\n            }\n        }\n\n        return Y;\n    }\n};\n\nmodule.exports = SingularValueDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pca/node_modules/ml-matrix/src/dc/svd.js","'use strict';\n\nmodule.exports = abstractMatrix;\n\nvar LuDecomposition = require('./dc/lu');\nvar SvDecomposition = require('./dc/svd');\nvar arrayUtils = require('ml-array-utils');\nvar util = require('./util');\nvar MatrixTransposeView = require('./views/transpose');\nvar MatrixRowView = require('./views/row');\nvar MatrixSubView = require('./views/sub');\nvar MatrixSelectionView = require('./views/selection');\nvar MatrixColumnView = require('./views/column');\nvar MatrixFlipRowView = require('./views/flipRow');\nvar MatrixFlipColumnView = require('./views/flipColumn');\n\nfunction abstractMatrix(superCtor) {\n    if (superCtor === undefined) superCtor = Object;\n\n    /**\n     * Real matrix\n     * @class Matrix\n     * @param {number|Array|Matrix} nRows - Number of rows of the new matrix,\n     * 2D array containing the data or Matrix instance to clone\n     * @param {number} [nColumns] - Number of columns of the new matrix\n     */\n    class Matrix extends superCtor {\n        static get [Symbol.species]() {\n            return this;\n        }\n\n        /**\n         * Constructs a Matrix with the chosen dimensions from a 1D array\n         * @param {number} newRows - Number of rows\n         * @param {number} newColumns - Number of columns\n         * @param {Array} newData - A 1D array containing data for the matrix\n         * @return {Matrix} - The new matrix\n         */\n        static from1DArray(newRows, newColumns, newData) {\n            var length = newRows * newColumns;\n            if (length !== newData.length) {\n                throw new RangeError('Data length does not match given dimensions');\n            }\n            var newMatrix = new this(newRows, newColumns);\n            for (var row = 0; row < newRows; row++) {\n                for (var column = 0; column < newColumns; column++) {\n                    newMatrix.set(row, column, newData[row * newColumns + column]);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Creates a row vector, a matrix with only one row.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n        static rowVector(newData) {\n            var vector = new this(1, newData.length);\n            for (var i = 0; i < newData.length; i++) {\n                vector.set(0, i, newData[i]);\n            }\n            return vector;\n        }\n\n        /**\n         * Creates a column vector, a matrix with only one column.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n        static columnVector(newData) {\n            var vector = new this(newData.length, 1);\n            for (var i = 0; i < newData.length; i++) {\n                vector.set(i, 0, newData[i]);\n            }\n            return vector;\n        }\n\n        /**\n         * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static empty(rows, columns) {\n            return new this(rows, columns);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be set to zero.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static zeros(rows, columns) {\n            return this.empty(rows, columns).fill(0);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be set to one.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static ones(rows, columns) {\n            return this.empty(rows, columns).fill(1);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be randomly set.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n        static rand(rows, columns, rng) {\n            if (rng === undefined) rng = Math.random;\n            var matrix = this.empty(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    matrix.set(i, j, rng());\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be random integers.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {number} [maxValue=1000] - Maximum value\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n        static randInt(rows, columns, maxValue, rng) {\n            if (maxValue === undefined) maxValue = 1000;\n            if (rng === undefined) rng = Math.random;\n            var matrix = this.empty(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    var value = Math.floor(rng() * maxValue);\n                    matrix.set(i, j, value);\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and others will be 0.\n         * @param {number} rows - Number of rows\n         * @param {number} [columns=rows] - Number of columns\n         * @param {number} [value=1] - Value to fill the diagonal with\n         * @return {Matrix} - The new identity matrix\n         */\n        static eye(rows, columns, value) {\n            if (columns === undefined) columns = rows;\n            if (value === undefined) value = 1;\n            var min = Math.min(rows, columns);\n            var matrix = this.zeros(rows, columns);\n            for (var i = 0; i < min; i++) {\n                matrix.set(i, i, value);\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates a diagonal matrix based on the given array.\n         * @param {Array} data - Array containing the data for the diagonal\n         * @param {number} [rows] - Number of rows (Default: data.length)\n         * @param {number} [columns] - Number of columns (Default: rows)\n         * @return {Matrix} - The new diagonal matrix\n         */\n        static diag(data, rows, columns) {\n            var l = data.length;\n            if (rows === undefined) rows = l;\n            if (columns === undefined) columns = rows;\n            var min = Math.min(l, rows, columns);\n            var matrix = this.zeros(rows, columns);\n            for (var i = 0; i < min; i++) {\n                matrix.set(i, i, data[i]);\n            }\n            return matrix;\n        }\n\n        /**\n         * Returns a matrix whose elements are the minimum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n        static min(matrix1, matrix2) {\n            matrix1 = this.checkMatrix(matrix1);\n            matrix2 = this.checkMatrix(matrix2);\n            var rows = matrix1.rows;\n            var columns = matrix1.columns;\n            var result = new this(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Returns a matrix whose elements are the maximum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n        static max(matrix1, matrix2) {\n            matrix1 = this.checkMatrix(matrix1);\n            matrix2 = this.checkMatrix(matrix2);\n            var rows = matrix1.rows;\n            var columns = matrix1.columns;\n            var result = new this(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Check that the provided value is a Matrix and tries to instantiate one if not\n         * @param {*} value - The value to check\n         * @return {Matrix}\n         */\n        static checkMatrix(value) {\n            return Matrix.isMatrix(value) ? value : new this(value);\n        }\n\n        /**\n         * Returns true if the argument is a Matrix, false otherwise\n         * @param {*} value - The value to check\n         * @return {boolean}\n         */\n        static isMatrix(value) {\n            return (value != null) && (value.klass === 'Matrix');\n        }\n\n        /**\n         * @prop {number} size - The number of elements in the matrix.\n         */\n        get size() {\n            return this.rows * this.columns;\n        }\n\n        /**\n         * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n         * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n         * @return {Matrix} this\n         */\n        apply(callback) {\n            if (typeof callback !== 'function') {\n                throw new TypeError('callback must be a function');\n            }\n            var ii = this.rows;\n            var jj = this.columns;\n            for (var i = 0; i < ii; i++) {\n                for (var j = 0; j < jj; j++) {\n                    callback.call(this, i, j);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Returns a new 1D array filled row by row with the matrix values\n         * @return {Array}\n         */\n        to1DArray() {\n            var array = new Array(this.size);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    array[i * this.columns + j] = this.get(i, j);\n                }\n            }\n            return array;\n        }\n\n        /**\n         * Returns a 2D array containing a copy of the data\n         * @return {Array}\n         */\n        to2DArray() {\n            var copy = new Array(this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                copy[i] = new Array(this.columns);\n                for (var j = 0; j < this.columns; j++) {\n                    copy[i][j] = this.get(i, j);\n                }\n            }\n            return copy;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one row\n         */\n        isRowVector() {\n            return this.rows === 1;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one column\n         */\n        isColumnVector() {\n            return this.columns === 1;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one row or one column\n         */\n        isVector() {\n            return (this.rows === 1) || (this.columns === 1);\n        }\n\n        /**\n         * @return {boolean} true if the matrix has the same number of rows and columns\n         */\n        isSquare() {\n            return this.rows === this.columns;\n        }\n\n        /**\n         * @return {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n         */\n        isSymmetric() {\n            if (this.isSquare()) {\n                for (var i = 0; i < this.rows; i++) {\n                    for (var j = 0; j <= i; j++) {\n                        if (this.get(i, j) !== this.get(j, i)) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            }\n            return false;\n        }\n\n        /**\n         * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @param {number} value - The new value for the element\n         * @return {Matrix} this\n         */\n        set(rowIndex, columnIndex, value) { // eslint-disable-line no-unused-vars\n            throw new Error('set method is unimplemented');\n        }\n\n        /**\n         * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @return {number}\n         */\n        get(rowIndex, columnIndex) { // eslint-disable-line no-unused-vars\n            throw new Error('get method is unimplemented');\n        }\n\n        /**\n         * Creates a new matrix that is a repetition of the current matrix. New matrix has rowRep times the number of\n         * rows of the matrix, and colRep times the number of columns of the matrix\n         * @param {number} rowRep - Number of times the rows should be repeated\n         * @param {number} colRep - Number of times the columns should be re\n         * @return {Matrix}\n         * @example\n         * var matrix = new Matrix([[1,2]]);\n         * matrix.repeat(2); // [[1,2],[1,2]]\n         */\n        repeat(rowRep, colRep) {\n            rowRep = rowRep || 1;\n            colRep = colRep || 1;\n            var matrix = new this.constructor[Symbol.species](this.rows * rowRep, this.columns * colRep);\n            for (var i = 0; i < rowRep; i++) {\n                for (var j = 0; j < colRep; j++) {\n                    matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Fills the matrix with a given value. All elements will be set to this value.\n         * @param {number} value - New value\n         * @return {Matrix} this\n         */\n        fill(value) {\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, value);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Negates the matrix. All elements will be multiplied by (-1)\n         * @return {Matrix} this\n         */\n        neg() {\n            return this.mulS(-1);\n        }\n\n        /**\n         * Returns a new array from the given row index\n         * @param {number} index - Row index\n         * @return {Array}\n         */\n        getRow(index) {\n            util.checkRowIndex(this, index);\n            var row = new Array(this.columns);\n            for (var i = 0; i < this.columns; i++) {\n                row[i] = this.get(index, i);\n            }\n            return row;\n        }\n\n        /**\n         * Returns a new row vector from the given row index\n         * @param {number} index - Row index\n         * @return {Matrix}\n         */\n        getRowVector(index) {\n            return this.constructor.rowVector(this.getRow(index));\n        }\n\n        /**\n         * Sets a row at the given index\n         * @param {number} index - Row index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n        setRow(index, array) {\n            util.checkRowIndex(this, index);\n            array = util.checkRowVector(this, array);\n            for (var i = 0; i < this.columns; i++) {\n                this.set(index, i, array[i]);\n            }\n            return this;\n        }\n\n        /**\n         * Swaps two rows\n         * @param {number} row1 - First row index\n         * @param {number} row2 - Second row index\n         * @return {Matrix} this\n         */\n        swapRows(row1, row2) {\n            util.checkRowIndex(this, row1);\n            util.checkRowIndex(this, row2);\n            for (var i = 0; i < this.columns; i++) {\n                var temp = this.get(row1, i);\n                this.set(row1, i, this.get(row2, i));\n                this.set(row2, i, temp);\n            }\n            return this;\n        }\n\n        /**\n         * Returns a new array from the given column index\n         * @param {number} index - Column index\n         * @return {Array}\n         */\n        getColumn(index) {\n            util.checkColumnIndex(this, index);\n            var column = new Array(this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                column[i] = this.get(i, index);\n            }\n            return column;\n        }\n\n        /**\n         * Returns a new column vector from the given column index\n         * @param {number} index - Column index\n         * @return {Matrix}\n         */\n        getColumnVector(index) {\n            return this.constructor.columnVector(this.getColumn(index));\n        }\n\n        /**\n         * Sets a column at the given index\n         * @param {number} index - Column index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n        setColumn(index, array) {\n            util.checkColumnIndex(this, index);\n            array = util.checkColumnVector(this, array);\n            for (var i = 0; i < this.rows; i++) {\n                this.set(i, index, array[i]);\n            }\n            return this;\n        }\n\n        /**\n         * Swaps two columns\n         * @param {number} column1 - First column index\n         * @param {number} column2 - Second column index\n         * @return {Matrix} this\n         */\n        swapColumns(column1, column2) {\n            util.checkColumnIndex(this, column1);\n            util.checkColumnIndex(this, column2);\n            for (var i = 0; i < this.rows; i++) {\n                var temp = this.get(i, column1);\n                this.set(i, column1, this.get(i, column2));\n                this.set(i, column2, temp);\n            }\n            return this;\n        }\n\n        /**\n         * Adds the values of a vector to each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        addRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) + vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Subtracts the values of a vector from each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        subRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) - vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a vector with each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        mulRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) * vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Divides the values of each row by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        divRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) / vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Adds the values of a vector to each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        addColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) + vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Subtracts the values of a vector from each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        subColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) - vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a vector with each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        mulColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) * vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Divides the values of each column by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        divColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) / vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a row with a scalar\n         * @param {number} index - Row index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n        mulRow(index, value) {\n            util.checkRowIndex(this, index);\n            for (var i = 0; i < this.columns; i++) {\n                this.set(index, i, this.get(index, i) * value);\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a column with a scalar\n         * @param {number} index - Column index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n        mulColumn(index, value) {\n            util.checkColumnIndex(this, index);\n            for (var i = 0; i < this.rows; i++) {\n                this.set(i, index, this.get(i, index) * value);\n            }\n            return this;\n        }\n\n        /**\n         * Returns the maximum value of the matrix\n         * @return {number}\n         */\n        max() {\n            var v = this.get(0, 0);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) > v) {\n                        v = this.get(i, j);\n                    }\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value\n         * @return {Array}\n         */\n        maxIndex() {\n            var v = this.get(0, 0);\n            var idx = [0, 0];\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) > v) {\n                        v = this.get(i, j);\n                        idx[0] = i;\n                        idx[1] = j;\n                    }\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of the matrix\n         * @return {number}\n         */\n        min() {\n            var v = this.get(0, 0);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) < v) {\n                        v = this.get(i, j);\n                    }\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the minimum value\n         * @return {Array}\n         */\n        minIndex() {\n            var v = this.get(0, 0);\n            var idx = [0, 0];\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) < v) {\n                        v = this.get(i, j);\n                        idx[0] = i;\n                        idx[1] = j;\n                    }\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the maximum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n        maxRow(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) > v) {\n                    v = this.get(row, i);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n        maxRowIndex(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            var idx = [row, 0];\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) > v) {\n                    v = this.get(row, i);\n                    idx[1] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n        minRow(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) < v) {\n                    v = this.get(row, i);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n        minRowIndex(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            var idx = [row, 0];\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) < v) {\n                    v = this.get(row, i);\n                    idx[1] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the maximum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n        maxColumn(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) > v) {\n                    v = this.get(i, column);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n        maxColumnIndex(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            var idx = [0, column];\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) > v) {\n                    v = this.get(i, column);\n                    idx[0] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n        minColumn(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) < v) {\n                    v = this.get(i, column);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the minimum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n        minColumnIndex(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            var idx = [0, column];\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) < v) {\n                    v = this.get(i, column);\n                    idx[0] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns an array containing the diagonal values of the matrix\n         * @return {Array}\n         */\n        diag() {\n            var min = Math.min(this.rows, this.columns);\n            var diag = new Array(min);\n            for (var i = 0; i < min; i++) {\n                diag[i] = this.get(i, i);\n            }\n            return diag;\n        }\n\n        /**\n         * Returns the sum by the argument given, if no argument given,\n         * it returns the sum of all elements of the matrix.\n         * @param {string} by - sum by 'row' or 'column'.\n         * @return {Matrix|number}\n         */\n        sum(by) {\n            switch (by) {\n                case 'row':\n                    return util.sumByRow(this);\n                case 'column':\n                    return util.sumByColumn(this);\n                default:\n                    return util.sumAll(this);\n            }\n        }\n\n        /**\n         * Returns the mean of all elements of the matrix\n         * @return {number}\n         */\n        mean() {\n            return this.sum() / this.size;\n        }\n\n        /**\n         * Returns the product of all elements of the matrix\n         * @return {number}\n         */\n        prod() {\n            var prod = 1;\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    prod *= this.get(i, j);\n                }\n            }\n            return prod;\n        }\n\n        /**\n         * Computes the cumulative sum of the matrix elements (in place, row by row)\n         * @return {Matrix} this\n         */\n        cumulativeSum() {\n            var sum = 0;\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    sum += this.get(i, j);\n                    this.set(i, j, sum);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Computes the dot (scalar) product between the matrix and another\n         * @param {Matrix} vector2 vector\n         * @return {number}\n         */\n        dot(vector2) {\n            if (Matrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n            var vector1 = this.to1DArray();\n            if (vector1.length !== vector2.length) {\n                throw new RangeError('vectors do not have the same size');\n            }\n            var dot = 0;\n            for (var i = 0; i < vector1.length; i++) {\n                dot += vector1[i] * vector2[i];\n            }\n            return dot;\n        }\n\n        /**\n         * Returns the matrix product between this and other\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n        mmul(other) {\n            other = this.constructor.checkMatrix(other);\n            if (this.columns !== other.rows) {\n                // eslint-disable-next-line no-console\n                console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n            }\n\n            var m = this.rows;\n            var n = this.columns;\n            var p = other.columns;\n\n            var result = new this.constructor[Symbol.species](m, p);\n\n            var Bcolj = new Array(n);\n            for (var j = 0; j < p; j++) {\n                for (var k = 0; k < n; k++) {\n                    Bcolj[k] = other.get(k, j);\n                }\n\n                for (var i = 0; i < m; i++) {\n                    var s = 0;\n                    for (k = 0; k < n; k++) {\n                        s += this.get(i, k) * Bcolj[k];\n                    }\n\n                    result.set(i, j, s);\n                }\n            }\n            return result;\n        }\n\n        strassen2x2(other) {\n            var result = new this.constructor[Symbol.species](2, 2);\n            const a11 = this.get(0, 0);\n            const b11 = other.get(0, 0);\n            const a12 = this.get(0, 1);\n            const b12 = other.get(0, 1);\n            const a21 = this.get(1, 0);\n            const b21 = other.get(1, 0);\n            const a22 = this.get(1, 1);\n            const b22 = other.get(1, 1);\n\n            // Compute intermediate values.\n            const m1 = (a11 + a22) * (b11 + b22);\n            const m2 = (a21 + a22) * b11;\n            const m3 = a11 * (b12 - b22);\n            const m4 = a22 * (b21 - b11);\n            const m5 = (a11 + a12) * b22;\n            const m6 = (a21 - a11) * (b11 + b12);\n            const m7 = (a12 - a22) * (b21 + b22);\n\n            // Combine intermediate values into the output.\n            const c00 = m1 + m4 - m5 + m7;\n            const c01 = m3 + m5;\n            const c10 = m2 + m4;\n            const c11 = m1 - m2 + m3 + m6;\n\n            result.set(0, 0, c00);\n            result.set(0, 1, c01);\n            result.set(1, 0, c10);\n            result.set(1, 1, c11);\n            return result;\n        }\n\n        strassen3x3(other) {\n            var result = new this.constructor[Symbol.species](3, 3);\n\n            const a00 = this.get(0, 0);\n            const a01 = this.get(0, 1);\n            const a02 = this.get(0, 2);\n            const a10 = this.get(1, 0);\n            const a11 = this.get(1, 1);\n            const a12 = this.get(1, 2);\n            const a20 = this.get(2, 0);\n            const a21 = this.get(2, 1);\n            const a22 = this.get(2, 2);\n\n            const b00 = other.get(0, 0);\n            const b01 = other.get(0, 1);\n            const b02 = other.get(0, 2);\n            const b10 = other.get(1, 0);\n            const b11 = other.get(1, 1);\n            const b12 = other.get(1, 2);\n            const b20 = other.get(2, 0);\n            const b21 = other.get(2, 1);\n            const b22 = other.get(2, 2);\n\n            const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n            const m2 = (a00 - a10) * (-b01 + b11);\n            const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n            const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n            const m5 = (a10 + a11) * (-b00 + b01);\n            const m6 = a00 * b00;\n            const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n            const m8 = (-a00 + a20) * (b02 - b12);\n            const m9 = (a20 + a21) * (-b00 + b02);\n            const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n            const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n            const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n            const m13 = (a02 - a22) * (b11 - b21);\n            const m14 = a02 * b20;\n            const m15 = (a21 + a22) * (-b20 + b21);\n            const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n            const m17 = (a02 - a12) * (b12 - b22);\n            const m18 = (a11 + a12) * (-b20 + b22);\n            const m19 = a01 * b10;\n            const m20 = a12 * b21;\n            const m21 = a10 * b02;\n            const m22 = a20 * b01;\n            const m23 = a22 * b22;\n\n            const c00 = m6 + m14 + m19;\n            const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n            const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n            const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n            const c11 = m2 + m4 + m5 + m6 + m20;\n            const c12 = m14 + m16 + m17 + m18 + m21;\n            const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n            const c21 = m12 + m13 + m14 + m15 + m22;\n            const c22 = m6 + m7 + m8 + m9 + m23;\n\n            result.set(0, 0, c00);\n            result.set(0, 1, c01);\n            result.set(0, 2, c02);\n            result.set(1, 0, c10);\n            result.set(1, 1, c11);\n            result.set(1, 2, c12);\n            result.set(2, 0, c20);\n            result.set(2, 1, c21);\n            result.set(2, 2, c22);\n            return result;\n        }\n\n        /**\n         * Returns the matrix product between x and y. More efficient than mmul(other) only when we multiply squared matrix and when the size of the matrix is > 1000.\n         * @param {Matrix} y\n         * @return {Matrix}\n         */\n        mmulStrassen(y) {\n            var x = this.clone();\n            var r1 = x.rows;\n            var c1 = x.columns;\n            var r2 = y.rows;\n            var c2 = y.columns;\n            if (c1 !== r2) {\n                // eslint-disable-next-line no-console\n                console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);\n            }\n\n            // Put a matrix into the top left of a matrix of zeros.\n            // `rows` and `cols` are the dimensions of the output matrix.\n            function embed(mat, rows, cols) {\n                var r = mat.rows;\n                var c = mat.columns;\n                if ((r === rows) && (c === cols)) {\n                    return mat;\n                } else {\n                    var resultat = Matrix.zeros(rows, cols);\n                    resultat = resultat.setSubMatrix(mat, 0, 0);\n                    return resultat;\n                }\n            }\n\n\n            // Make sure both matrices are the same size.\n            // This is exclusively for simplicity:\n            // this algorithm can be implemented with matrices of different sizes.\n\n            var r = Math.max(r1, r2);\n            var c = Math.max(c1, c2);\n            x = embed(x, r, c);\n            y = embed(y, r, c);\n\n            // Our recursive multiplication function.\n            function blockMult(a, b, rows, cols) {\n                // For small matrices, resort to naive multiplication.\n                if (rows <= 512 || cols <= 512) {\n                    return a.mmul(b); // a is equivalent to this\n                }\n\n                // Apply dynamic padding.\n                if ((rows % 2 === 1) && (cols % 2 === 1)) {\n                    a = embed(a, rows + 1, cols + 1);\n                    b = embed(b, rows + 1, cols + 1);\n                } else if (rows % 2 === 1) {\n                    a = embed(a, rows + 1, cols);\n                    b = embed(b, rows + 1, cols);\n                } else if (cols % 2 === 1) {\n                    a = embed(a, rows, cols + 1);\n                    b = embed(b, rows, cols + 1);\n                }\n\n                var halfRows = parseInt(a.rows / 2);\n                var halfCols = parseInt(a.columns / 2);\n                // Subdivide input matrices.\n                var a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n                var b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n                var a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n                var b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n                var a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n                var b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n                var a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n                var b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n                // Compute intermediate values.\n                var m1 = blockMult(Matrix.add(a11, a22), Matrix.add(b11, b22), halfRows, halfCols);\n                var m2 = blockMult(Matrix.add(a21, a22), b11, halfRows, halfCols);\n                var m3 = blockMult(a11, Matrix.sub(b12, b22), halfRows, halfCols);\n                var m4 = blockMult(a22, Matrix.sub(b21, b11), halfRows, halfCols);\n                var m5 = blockMult(Matrix.add(a11, a12), b22, halfRows, halfCols);\n                var m6 = blockMult(Matrix.sub(a21, a11), Matrix.add(b11, b12), halfRows, halfCols);\n                var m7 = blockMult(Matrix.sub(a12, a22), Matrix.add(b21, b22), halfRows, halfCols);\n\n                // Combine intermediate values into the output.\n                var c11 = Matrix.add(m1, m4);\n                c11.sub(m5);\n                c11.add(m7);\n                var c12 = Matrix.add(m3, m5);\n                var c21 = Matrix.add(m2, m4);\n                var c22 = Matrix.sub(m1, m2);\n                c22.add(m3);\n                c22.add(m6);\n\n                //Crop output to the desired size (undo dynamic padding).\n                var resultat = Matrix.zeros(2 * c11.rows, 2 * c11.columns);\n                resultat = resultat.setSubMatrix(c11, 0, 0);\n                resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n                resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n                resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n                return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n            }\n            return blockMult(x, y, r, c);\n        }\n\n        /**\n         * Returns a row-by-row scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The scaled matrix\n         */\n        scaleRows(min, max) {\n            min = min === undefined ? 0 : min;\n            max = max === undefined ? 1 : max;\n            if (min >= max) {\n                throw new RangeError('min should be strictly smaller than max');\n            }\n            var newMatrix = this.constructor.empty(this.rows, this.columns);\n            for (var i = 0; i < this.rows; i++) {\n                var scaled = arrayUtils.scale(this.getRow(i), {min, max});\n                newMatrix.setRow(i, scaled);\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a new column-by-column scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The new scaled matrix\n         * @example\n         * var matrix = new Matrix([[1,2],[-1,0]]);\n         * var scaledMatrix = matrix.scaleColumns(); // [[1,1],[0,0]]\n         */\n        scaleColumns(min, max) {\n            min = min === undefined ? 0 : min;\n            max = max === undefined ? 1 : max;\n            if (min >= max) {\n                throw new RangeError('min should be strictly smaller than max');\n            }\n            var newMatrix = this.constructor.empty(this.rows, this.columns);\n            for (var i = 0; i < this.columns; i++) {\n                var scaled = arrayUtils.scale(this.getColumn(i), {\n                    min: min,\n                    max: max\n                });\n                newMatrix.setColumn(i, scaled);\n            }\n            return newMatrix;\n        }\n\n\n        /**\n         * Returns the Kronecker product (also known as tensor product) between this and other\n         * See https://en.wikipedia.org/wiki/Kronecker_product\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n        kroneckerProduct(other) {\n            other = this.constructor.checkMatrix(other);\n\n            var m = this.rows;\n            var n = this.columns;\n            var p = other.rows;\n            var q = other.columns;\n\n            var result = new this.constructor[Symbol.species](m * p, n * q);\n            for (var i = 0; i < m; i++) {\n                for (var j = 0; j < n; j++) {\n                    for (var k = 0; k < p; k++) {\n                        for (var l = 0; l < q; l++) {\n                            result[p * i + k][q * j + l] = this.get(i, j) * other.get(k, l);\n                        }\n                    }\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Transposes the matrix and returns a new one containing the result\n         * @return {Matrix}\n         */\n        transpose() {\n            var result = new this.constructor[Symbol.species](this.columns, this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    result.set(j, i, this.get(i, j));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Sorts the rows (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n        sortRows(compareFunction) {\n            if (compareFunction === undefined) compareFunction = compareNumbers;\n            for (var i = 0; i < this.rows; i++) {\n                this.setRow(i, this.getRow(i).sort(compareFunction));\n            }\n            return this;\n        }\n\n        /**\n         * Sorts the columns (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n        sortColumns(compareFunction) {\n            if (compareFunction === undefined) compareFunction = compareNumbers;\n            for (var i = 0; i < this.columns; i++) {\n                this.setColumn(i, this.getColumn(i).sort(compareFunction));\n            }\n            return this;\n        }\n\n        /**\n         * Returns a subset of the matrix\n         * @param {number} startRow - First row index\n         * @param {number} endRow - Last row index\n         * @param {number} startColumn - First column index\n         * @param {number} endColumn - Last column index\n         * @return {Matrix}\n         */\n        subMatrix(startRow, endRow, startColumn, endColumn) {\n            util.checkRange(this, startRow, endRow, startColumn, endColumn);\n            var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, endColumn - startColumn + 1);\n            for (var i = startRow; i <= endRow; i++) {\n                for (var j = startColumn; j <= endColumn; j++) {\n                    newMatrix[i - startRow][j - startColumn] = this.get(i, j);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a subset of the matrix based on an array of row indices\n         * @param {Array} indices - Array containing the row indices\n         * @param {number} [startColumn = 0] - First column index\n         * @param {number} [endColumn = this.columns-1] - Last column index\n         * @return {Matrix}\n         */\n        subMatrixRow(indices, startColumn, endColumn) {\n            if (startColumn === undefined) startColumn = 0;\n            if (endColumn === undefined) endColumn = this.columns - 1;\n            if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns)) {\n                throw new RangeError('Argument out of range');\n            }\n\n            var newMatrix = new this.constructor[Symbol.species](indices.length, endColumn - startColumn + 1);\n            for (var i = 0; i < indices.length; i++) {\n                for (var j = startColumn; j <= endColumn; j++) {\n                    if (indices[i] < 0 || indices[i] >= this.rows) {\n                        throw new RangeError('Row index out of range: ' + indices[i]);\n                    }\n                    newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a subset of the matrix based on an array of column indices\n         * @param {Array} indices - Array containing the column indices\n         * @param {number} [startRow = 0] - First row index\n         * @param {number} [endRow = this.rows-1] - Last row index\n         * @return {Matrix}\n         */\n        subMatrixColumn(indices, startRow, endRow) {\n            if (startRow === undefined) startRow = 0;\n            if (endRow === undefined) endRow = this.rows - 1;\n            if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows)) {\n                throw new RangeError('Argument out of range');\n            }\n\n            var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, indices.length);\n            for (var i = 0; i < indices.length; i++) {\n                for (var j = startRow; j <= endRow; j++) {\n                    if (indices[i] < 0 || indices[i] >= this.columns) {\n                        throw new RangeError('Column index out of range: ' + indices[i]);\n                    }\n                    newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Set a part of the matrix to the given sub-matrix\n         * @param {Matrix|Array< Array >} matrix - The source matrix from which to extract values.\n         * @param {number} startRow - The index of the first row to set\n         * @param {number} startColumn - The index of the first column to set\n         * @return {Matrix}\n         */\n        setSubMatrix(matrix, startRow, startColumn) {\n            matrix = this.constructor.checkMatrix(matrix);\n            var endRow = startRow + matrix.rows - 1;\n            var endColumn = startColumn + matrix.columns - 1;\n            util.checkRange(this, startRow, endRow, startColumn, endColumn);\n            for (var i = 0; i < matrix.rows; i++) {\n                for (var j = 0; j < matrix.columns; j++) {\n                    this[startRow + i][startColumn + j] = matrix.get(i, j);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Return a new matrix based on a selection of rows and columns\n         * @param {Array<number>} rowIndices - The row indices to select. Order matters and an index can be more than once.\n         * @param {Array<number>} columnIndices - The column indices to select. Order matters and an index can be use more than once.\n         * @return {Matrix} The new matrix\n         */\n        selection(rowIndices, columnIndices) {\n            var indices = util.checkIndices(this, rowIndices, columnIndices);\n            var newMatrix = new this.constructor[Symbol.species](rowIndices.length, columnIndices.length);\n            for (var i = 0; i < indices.row.length; i++) {\n                var rowIndex = indices.row[i];\n                for (var j = 0; j < indices.column.length; j++) {\n                    var columnIndex = indices.column[j];\n                    newMatrix[i][j] = this.get(rowIndex, columnIndex);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns the trace of the matrix (sum of the diagonal elements)\n         * @return {number}\n         */\n        trace() {\n            var min = Math.min(this.rows, this.columns);\n            var trace = 0;\n            for (var i = 0; i < min; i++) {\n                trace += this.get(i, i);\n            }\n            return trace;\n        }\n\n        /*\n         Matrix views\n         */\n\n        /**\n         * Returns a view of the transposition of the matrix\n         * @return {MatrixTransposeView}\n         */\n        transposeView() {\n            return new MatrixTransposeView(this);\n        }\n\n        /**\n         * Returns a view of the row vector with the given index\n         * @param {number} row - row index of the vector\n         * @return {MatrixRowView}\n         */\n        rowView(row) {\n            util.checkRowIndex(this, row);\n            return new MatrixRowView(this, row);\n        }\n\n        /**\n         * Returns a view of the column vector with the given index\n         * @param {number} column - column index of the vector\n         * @return {MatrixColumnView}\n         */\n        columnView(column) {\n            util.checkColumnIndex(this, column);\n            return new MatrixColumnView(this, column);\n        }\n\n        /**\n         * Returns a view of the matrix flipped in the row axis\n         * @return {MatrixFlipRowView}\n         */\n        flipRowView() {\n            return new MatrixFlipRowView(this);\n        }\n\n        /**\n         * Returns a view of the matrix flipped in the column axis\n         * @return {MatrixFlipColumnView}\n         */\n        flipColumnView() {\n            return new MatrixFlipColumnView(this);\n        }\n\n        /**\n         * Returns a view of a submatrix giving the index boundaries\n         * @param {number} startRow - first row index of the submatrix\n         * @param {number} endRow - last row index of the submatrix\n         * @param {number} startColumn - first column index of the submatrix\n         * @param {number} endColumn - last column index of the submatrix\n         * @return {MatrixSubView}\n         */\n        subMatrixView(startRow, endRow, startColumn, endColumn) {\n            return new MatrixSubView(this, startRow, endRow, startColumn, endColumn);\n        }\n\n        /**\n         * Returns a view of the cross of the row indices and the column indices\n         * @example\n         * // resulting vector is [[2], [2]]\n         * var matrix = new Matrix([[1,2,3], [4,5,6]]).selectionView([0, 0], [1])\n         * @param {Array<number>} rowIndices\n         * @param {Array<number>} columnIndices\n         * @return {MatrixSelectionView}\n         */\n        selectionView(rowIndices, columnIndices) {\n            return new MatrixSelectionView(this, rowIndices, columnIndices);\n        }\n\n\n        /**\n        * Calculates and returns the determinant of a matrix as a Number\n        * @example\n        *   new Matrix([[1,2,3], [4,5,6]]).det()\n        * @return {number}\n        */\n        det() {\n            if (this.isSquare()) {\n                var a, b, c, d;\n                if (this.columns === 2) {\n                    // 2 x 2 matrix\n                    a = this.get(0, 0);\n                    b = this.get(0, 1);\n                    c = this.get(1, 0);\n                    d = this.get(1, 1);\n\n                    return a * d - (b * c);\n                } else if (this.columns === 3) {\n                    // 3 x 3 matrix\n                    var subMatrix0, subMatrix1, subMatrix2;\n                    subMatrix0 = this.selectionView([1, 2], [1, 2]);\n                    subMatrix1 = this.selectionView([1, 2], [0, 2]);\n                    subMatrix2 = this.selectionView([1, 2], [0, 1]);\n                    a = this.get(0, 0);\n                    b = this.get(0, 1);\n                    c = this.get(0, 2);\n\n                    return a * subMatrix0.det() - b * subMatrix1.det() + c * subMatrix2.det();\n                } else {\n                    // general purpose determinant using the LU decomposition\n                    return new LuDecomposition(this).determinant;\n                }\n\n            } else {\n                throw Error('Determinant can only be calculated for a square matrix.');\n            }\n        }\n\n        /**\n         * Returns inverse of a matrix if it exists or the pseudoinverse\n         * @param {number} threshold - threshold for taking inverse of singular values (default = 1e-15)\n         * @return {Matrix} the (pseudo)inverted matrix.\n         */\n        pseudoInverse(threshold) {\n            if (threshold === undefined) threshold = Number.EPSILON;\n            var svdSolution = new SvDecomposition(this, {autoTranspose: true});\n\n            var U = svdSolution.leftSingularVectors;\n            var V = svdSolution.rightSingularVectors;\n            var s = svdSolution.diagonal;\n\n            for (var i = 0; i < s.length; i++) {\n                if (Math.abs(s[i]) > threshold) {\n                    s[i] = 1.0 / s[i];\n                } else {\n                    s[i] = 0.0;\n                }\n            }\n\n            // convert list to diagonal\n            s = this.constructor[Symbol.species].diag(s);\n            return V.mmul(s.mmul(U.transposeView()));\n        }\n    }\n\n    Matrix.prototype.klass = 'Matrix';\n\n    /**\n     * @private\n     * Check that two matrices have the same dimensions\n     * @param {Matrix} matrix\n     * @param {Matrix} otherMatrix\n     */\n    function checkDimensions(matrix, otherMatrix) { // eslint-disable-line no-unused-vars\n        if (matrix.rows !== otherMatrix.rows ||\n            matrix.columns !== otherMatrix.columns) {\n            throw new RangeError('Matrices dimensions must be equal');\n        }\n    }\n\n    function compareNumbers(a, b) {\n        return a - b;\n    }\n\n    /*\n     Synonyms\n     */\n\n    Matrix.random = Matrix.rand;\n    Matrix.diagonal = Matrix.diag;\n    Matrix.prototype.diagonal = Matrix.prototype.diag;\n    Matrix.identity = Matrix.eye;\n    Matrix.prototype.negate = Matrix.prototype.neg;\n    Matrix.prototype.tensorProduct = Matrix.prototype.kroneckerProduct;\n    Matrix.prototype.determinant = Matrix.prototype.det;\n\n    /*\n     Add dynamically instance and static methods for mathematical operations\n     */\n\n    var inplaceOperator = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n    var inplaceOperatorScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% value);\n        }\n    }\n    return this;\n})\n`;\n\n    var inplaceOperatorMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    checkDimensions(this, matrix);\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% matrix.get(i, j));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticOperator = `\n(function %name%(matrix, value) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(value);\n})\n`;\n\n    var inplaceMethod = `\n(function %name%() {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticMethod = `\n(function %name%(matrix) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%();\n})\n`;\n\n    var inplaceMethodWithArgs = `\n(function %name%(%args%) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), %args%));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticMethodWithArgs = `\n(function %name%(matrix, %args%) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(%args%);\n})\n`;\n\n\n    var inplaceMethodWithOneArgScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), value));\n        }\n    }\n    return this;\n})\n`;\n    var inplaceMethodWithOneArgMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    checkDimensions(this, matrix);\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), matrix.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n    var inplaceMethodWithOneArg = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n    var staticMethodWithOneArg = staticMethodWithArgs;\n\n    var operators = [\n        // Arithmetic operators\n        ['+', 'add'],\n        ['-', 'sub', 'subtract'],\n        ['*', 'mul', 'multiply'],\n        ['/', 'div', 'divide'],\n        ['%', 'mod', 'modulus'],\n        // Bitwise operators\n        ['&', 'and'],\n        ['|', 'or'],\n        ['^', 'xor'],\n        ['<<', 'leftShift'],\n        ['>>', 'signPropagatingRightShift'],\n        ['>>>', 'rightShift', 'zeroFillRightShift']\n    ];\n\n    var i;\n\n    for (var operator of operators) {\n        var inplaceOp = eval(fillTemplateFunction(inplaceOperator, {name: operator[1], op: operator[0]}));\n        var inplaceOpS = eval(fillTemplateFunction(inplaceOperatorScalar, {name: operator[1] + 'S', op: operator[0]}));\n        var inplaceOpM = eval(fillTemplateFunction(inplaceOperatorMatrix, {name: operator[1] + 'M', op: operator[0]}));\n        var staticOp = eval(fillTemplateFunction(staticOperator, {name: operator[1]}));\n        for (i = 1; i < operator.length; i++) {\n            Matrix.prototype[operator[i]] = inplaceOp;\n            Matrix.prototype[operator[i] + 'S'] = inplaceOpS;\n            Matrix.prototype[operator[i] + 'M'] = inplaceOpM;\n            Matrix[operator[i]] = staticOp;\n        }\n    }\n\n    var methods = [\n        ['~', 'not']\n    ];\n\n    [\n        'abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cbrt', 'ceil',\n        'clz32', 'cos', 'cosh', 'exp', 'expm1', 'floor', 'fround', 'log', 'log1p',\n        'log10', 'log2', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc'\n    ].forEach(function (mathMethod) {\n        methods.push(['Math.' + mathMethod, mathMethod]);\n    });\n\n    for (var method of methods) {\n        var inplaceMeth = eval(fillTemplateFunction(inplaceMethod, {name: method[1], method: method[0]}));\n        var staticMeth = eval(fillTemplateFunction(staticMethod, {name: method[1]}));\n        for (i = 1; i < method.length; i++) {\n            Matrix.prototype[method[i]] = inplaceMeth;\n            Matrix[method[i]] = staticMeth;\n        }\n    }\n\n    var methodsWithArgs = [\n        ['Math.pow', 1, 'pow']\n    ];\n\n    for (var methodWithArg of methodsWithArgs) {\n        var args = 'arg0';\n        for (i = 1; i < methodWithArg[1]; i++) {\n            args += `, arg${i}`;\n        }\n        if (methodWithArg[1] !== 1) {\n            var inplaceMethWithArgs = eval(fillTemplateFunction(inplaceMethodWithArgs, {\n                name: methodWithArg[2],\n                method: methodWithArg[0],\n                args: args\n            }));\n            var staticMethWithArgs = eval(fillTemplateFunction(staticMethodWithArgs, {name: methodWithArg[2], args: args}));\n            for (i = 2; i < methodWithArg.length; i++) {\n                Matrix.prototype[methodWithArg[i]] = inplaceMethWithArgs;\n                Matrix[methodWithArg[i]] = staticMethWithArgs;\n            }\n        } else {\n            var tmplVar = {\n                name: methodWithArg[2],\n                args: args,\n                method: methodWithArg[0]\n            };\n            var inplaceMethod2 = eval(fillTemplateFunction(inplaceMethodWithOneArg, tmplVar));\n            var inplaceMethodS = eval(fillTemplateFunction(inplaceMethodWithOneArgScalar, tmplVar));\n            var inplaceMethodM = eval(fillTemplateFunction(inplaceMethodWithOneArgMatrix, tmplVar));\n            var staticMethod2 = eval(fillTemplateFunction(staticMethodWithOneArg, tmplVar));\n            for (i = 2; i < methodWithArg.length; i++) {\n                Matrix.prototype[methodWithArg[i]] = inplaceMethod2;\n                Matrix.prototype[methodWithArg[i] + 'M'] = inplaceMethodM;\n                Matrix.prototype[methodWithArg[i] + 'S'] = inplaceMethodS;\n                Matrix[methodWithArg[i]] = staticMethod2;\n            }\n        }\n    }\n\n    function fillTemplateFunction(template, values) {\n        for (var value in values) {\n            template = template.replace(new RegExp('%' + value + '%', 'g'), values[value]);\n        }\n        return template;\n    }\n\n    return Matrix;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/abstractMatrix.js","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\nfunction LuDecomposition(matrix) {\n    if (!(this instanceof LuDecomposition)) {\n        return new LuDecomposition(matrix);\n    }\n\n    matrix = Matrix.Matrix.checkMatrix(matrix);\n\n    var lu = matrix.clone(),\n        rows = lu.rows,\n        columns = lu.columns,\n        pivotVector = new Array(rows),\n        pivotSign = 1,\n        i, j, k, p, s, t, v,\n        LUrowi, LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n        pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n\n        for (i = 0; i < rows; i++) {\n            LUcolj[i] = lu[i][j];\n        }\n\n        for (i = 0; i < rows; i++) {\n            LUrowi = lu[i];\n            kmax = Math.min(i, j);\n            s = 0;\n            for (k = 0; k < kmax; k++) {\n                s += LUrowi[k] * LUcolj[k];\n            }\n            LUrowi[j] = LUcolj[i] -= s;\n        }\n\n        p = j;\n        for (i = j + 1; i < rows; i++) {\n            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n                p = i;\n            }\n        }\n\n        if (p !== j) {\n            for (k = 0; k < columns; k++) {\n                t = lu[p][k];\n                lu[p][k] = lu[j][k];\n                lu[j][k] = t;\n            }\n\n            v = pivotVector[p];\n            pivotVector[p] = pivotVector[j];\n            pivotVector[j] = v;\n\n            pivotSign = -pivotSign;\n        }\n\n        if (j < rows && lu[j][j] !== 0) {\n            for (i = j + 1; i < rows; i++) {\n                lu[i][j] /= lu[j][j];\n            }\n        }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n}\n\nLuDecomposition.prototype = {\n    isSingular: function () {\n        var data = this.LU,\n            col = data.columns;\n        for (var j = 0; j < col; j++) {\n            if (data[j][j] === 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    get determinant() {\n        var data = this.LU;\n        if (!data.isSquare()) {\n            throw new Error('Matrix must be square');\n        }\n        var determinant = this.pivotSign, col = data.columns;\n        for (var j = 0; j < col; j++) {\n            determinant *= data[j][j];\n        }\n        return determinant;\n    },\n    get lowerTriangularMatrix() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix.Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i > j) {\n                    X[i][j] = data[i][j];\n                } else if (i === j) {\n                    X[i][j] = 1;\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get upperTriangularMatrix() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix.Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i <= j) {\n                    X[i][j] = data[i][j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get pivotPermutationVector() {\n        return this.pivotVector.slice();\n    },\n    solve: function (value) {\n        value = Matrix.Matrix.checkMatrix(value);\n\n        var lu = this.LU,\n            rows = lu.rows;\n\n        if (rows !== value.rows) {\n            throw new Error('Invalid matrix dimensions');\n        }\n        if (this.isSingular()) {\n            throw new Error('LU matrix is singular');\n        }\n\n        var count = value.columns;\n        var X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n        var columns = lu.columns;\n        var i, j, k;\n\n        for (k = 0; k < columns; k++) {\n            for (i = k + 1; i < columns; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        for (k = columns - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= lu[k][k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = LuDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/dc/lu.js","'use strict';\n\nvar Matrix = require('../matrix');\nvar util = require('./util');\nvar hypotenuse = util.hypotenuse;\nvar getFilled2DArray = util.getFilled2DArray;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\nfunction SingularValueDecomposition(value, options) {\n    if (!(this instanceof SingularValueDecomposition)) {\n        return new SingularValueDecomposition(value, options);\n    }\n    value = Matrix.Matrix.checkMatrix(value);\n\n    options = options || {};\n\n    var m = value.rows,\n        n = value.columns,\n        nu = Math.min(m, n);\n\n    var wantu = true, wantv = true;\n    if (options.computeLeftSingularVectors === false) wantu = false;\n    if (options.computeRightSingularVectors === false) wantv = false;\n    var autoTranspose = options.autoTranspose === true;\n\n    var swapped = false;\n    var a;\n    if (m < n) {\n        if (!autoTranspose) {\n            a = value.clone();\n            // eslint-disable-next-line no-console\n            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n        } else {\n            a = value.transpose();\n            m = a.rows;\n            n = a.columns;\n            swapped = true;\n            var aux = wantu;\n            wantu = wantv;\n            wantv = aux;\n        }\n    } else {\n        a = value.clone();\n    }\n\n    var s = new Array(Math.min(m + 1, n)),\n        U = getFilled2DArray(m, nu, 0),\n        V = getFilled2DArray(n, n, 0),\n        e = new Array(n),\n        work = new Array(m);\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n\n    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\n    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n        if (k < nct) {\n            s[k] = 0;\n            for (i = k; i < m; i++) {\n                s[k] = hypotenuse(s[k], a[i][k]);\n            }\n            if (s[k] !== 0) {\n                if (a[k][k] < 0) {\n                    s[k] = -s[k];\n                }\n                for (i = k; i < m; i++) {\n                    a[i][k] /= s[k];\n                }\n                a[k][k] += 1;\n            }\n            s[k] = -s[k];\n        }\n\n        for (j = k + 1; j < n; j++) {\n            if ((k < nct) && (s[k] !== 0)) {\n                t = 0;\n                for (i = k; i < m; i++) {\n                    t += a[i][k] * a[i][j];\n                }\n                t = -t / a[k][k];\n                for (i = k; i < m; i++) {\n                    a[i][j] += t * a[i][k];\n                }\n            }\n            e[j] = a[k][j];\n        }\n\n        if (wantu && (k < nct)) {\n            for (i = k; i < m; i++) {\n                U[i][k] = a[i][k];\n            }\n        }\n\n        if (k < nrt) {\n            e[k] = 0;\n            for (i = k + 1; i < n; i++) {\n                e[k] = hypotenuse(e[k], e[i]);\n            }\n            if (e[k] !== 0) {\n                if (e[k + 1] < 0) {\n                    e[k] = 0 - e[k];\n                }\n                for (i = k + 1; i < n; i++) {\n                    e[i] /= e[k];\n                }\n                e[k + 1] += 1;\n            }\n            e[k] = -e[k];\n            if ((k + 1 < m) && (e[k] !== 0)) {\n                for (i = k + 1; i < m; i++) {\n                    work[i] = 0;\n                }\n                for (j = k + 1; j < n; j++) {\n                    for (i = k + 1; i < m; i++) {\n                        work[i] += e[j] * a[i][j];\n                    }\n                }\n                for (j = k + 1; j < n; j++) {\n                    t = -e[j] / e[k + 1];\n                    for (i = k + 1; i < m; i++) {\n                        a[i][j] += t * work[i];\n                    }\n                }\n            }\n            if (wantv) {\n                for (i = k + 1; i < n; i++) {\n                    V[i][k] = e[i];\n                }\n            }\n        }\n    }\n\n    p = Math.min(n, m + 1);\n    if (nct < n) {\n        s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n        s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n        e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n        for (j = nct; j < nu; j++) {\n            for (i = 0; i < m; i++) {\n                U[i][j] = 0;\n            }\n            U[j][j] = 1;\n        }\n        for (k = nct - 1; k >= 0; k--) {\n            if (s[k] !== 0) {\n                for (j = k + 1; j < nu; j++) {\n                    t = 0;\n                    for (i = k; i < m; i++) {\n                        t += U[i][k] * U[i][j];\n                    }\n                    t = -t / U[k][k];\n                    for (i = k; i < m; i++) {\n                        U[i][j] += t * U[i][k];\n                    }\n                }\n                for (i = k; i < m; i++) {\n                    U[i][k] = -U[i][k];\n                }\n                U[k][k] = 1 + U[k][k];\n                for (i = 0; i < k - 1; i++) {\n                    U[i][k] = 0;\n                }\n            } else {\n                for (i = 0; i < m; i++) {\n                    U[i][k] = 0;\n                }\n                U[k][k] = 1;\n            }\n        }\n    }\n\n    if (wantv) {\n        for (k = n - 1; k >= 0; k--) {\n            if ((k < nrt) && (e[k] !== 0)) {\n                for (j = k + 1; j < n; j++) {\n                    t = 0;\n                    for (i = k + 1; i < n; i++) {\n                        t += V[i][k] * V[i][j];\n                    }\n                    t = -t / V[k + 1][k];\n                    for (i = k + 1; i < n; i++) {\n                        V[i][j] += t * V[i][k];\n                    }\n                }\n            }\n            for (i = 0; i < n; i++) {\n                V[i][k] = 0;\n            }\n            V[k][k] = 1;\n        }\n    }\n\n    var pp = p - 1,\n        iter = 0,\n        eps = Math.pow(2, -52);\n    while (p > 0) {\n        for (k = p - 2; k >= -1; k--) {\n            if (k === -1) {\n                break;\n            }\n            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n                e[k] = 0;\n                break;\n            }\n        }\n        if (k === p - 2) {\n            kase = 4;\n        } else {\n            for (ks = p - 1; ks >= k; ks--) {\n                if (ks === k) {\n                    break;\n                }\n                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n                if (Math.abs(s[ks]) <= eps * t) {\n                    s[ks] = 0;\n                    break;\n                }\n            }\n            if (ks === k) {\n                kase = 3;\n            } else if (ks === p - 1) {\n                kase = 1;\n            } else {\n                kase = 2;\n                k = ks;\n            }\n        }\n\n        k++;\n\n        switch (kase) {\n            case 1: {\n                f = e[p - 2];\n                e[p - 2] = 0;\n                for (j = p - 2; j >= k; j--) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    if (j !== k) {\n                        f = -sn * e[j - 1];\n                        e[j - 1] = cs * e[j - 1];\n                    }\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][p - 1];\n                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                            V[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 2 : {\n                f = e[k - 1];\n                e[k - 1] = 0;\n                for (j = k; j < p; j++) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    f = -sn * e[j];\n                    e[j] = cs * e[j];\n                    if (wantu) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][k - 1];\n                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 3 : {\n                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n                sp = s[p - 1] / scale;\n                spm1 = s[p - 2] / scale;\n                epm1 = e[p - 2] / scale;\n                sk = s[k] / scale;\n                ek = e[k] / scale;\n                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n                c = (sp * epm1) * (sp * epm1);\n                shift = 0;\n                if ((b !== 0) || (c !== 0)) {\n                    shift = Math.sqrt(b * b + c);\n                    if (b < 0) {\n                        shift = -shift;\n                    }\n                    shift = c / (b + shift);\n                }\n                f = (sk + sp) * (sk - sp) + shift;\n                g = sk * ek;\n                for (j = k; j < p - 1; j++) {\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    if (j !== k) {\n                        e[j - 1] = t;\n                    }\n                    f = cs * s[j] + sn * e[j];\n                    e[j] = cs * e[j] - sn * s[j];\n                    g = sn * s[j + 1];\n                    s[j + 1] = cs * s[j + 1];\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][j + 1];\n                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                            V[i][j] = t;\n                        }\n                    }\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    s[j] = t;\n                    f = cs * e[j] + sn * s[j + 1];\n                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n                    g = sn * e[j + 1];\n                    e[j + 1] = cs * e[j + 1];\n                    if (wantu && (j < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][j + 1];\n                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                e[p - 2] = f;\n                iter = iter + 1;\n                break;\n            }\n            case 4: {\n                if (s[k] <= 0) {\n                    s[k] = (s[k] < 0 ? -s[k] : 0);\n                    if (wantv) {\n                        for (i = 0; i <= pp; i++) {\n                            V[i][k] = -V[i][k];\n                        }\n                    }\n                }\n                while (k < pp) {\n                    if (s[k] >= s[k + 1]) {\n                        break;\n                    }\n                    t = s[k];\n                    s[k] = s[k + 1];\n                    s[k + 1] = t;\n                    if (wantv && (k < n - 1)) {\n                        for (i = 0; i < n; i++) {\n                            t = V[i][k + 1];\n                            V[i][k + 1] = V[i][k];\n                            V[i][k] = t;\n                        }\n                    }\n                    if (wantu && (k < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = U[i][k + 1];\n                            U[i][k + 1] = U[i][k];\n                            U[i][k] = t;\n                        }\n                    }\n                    k++;\n                }\n                iter = 0;\n                p--;\n                break;\n            }\n            // no default\n        }\n    }\n\n    if (swapped) {\n        var tmp = V;\n        V = U;\n        U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n}\n\nSingularValueDecomposition.prototype = {\n    get condition() {\n        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    get norm2() {\n        return this.s[0];\n    },\n    get rank() {\n        var eps = Math.pow(2, -52),\n            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n            r = 0,\n            s = this.s;\n        for (var i = 0, ii = s.length; i < ii; i++) {\n            if (s[i] > tol) {\n                r++;\n            }\n        }\n        return r;\n    },\n    get diagonal() {\n        return this.s;\n    },\n    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n    get threshold() {\n        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n    },\n    get leftSingularVectors() {\n        if (!Matrix.Matrix.isMatrix(this.U)) {\n            this.U = new Matrix.Matrix(this.U);\n        }\n        return this.U;\n    },\n    get rightSingularVectors() {\n        if (!Matrix.Matrix.isMatrix(this.V)) {\n            this.V = new Matrix.Matrix(this.V);\n        }\n        return this.V;\n    },\n    get diagonalMatrix() {\n        return Matrix.Matrix.diag(this.s);\n    },\n    solve: function (value) {\n\n        var Y = value,\n            e = this.threshold,\n            scols = this.s.length,\n            Ls = Matrix.Matrix.zeros(scols, scols),\n            i;\n\n        for (i = 0; i < scols; i++) {\n            if (Math.abs(this.s[i]) <= e) {\n                Ls[i][i] = 0;\n            } else {\n                Ls[i][i] = 1 / this.s[i];\n            }\n        }\n\n        var U = this.U;\n        var V = this.rightSingularVectors;\n\n        var VL = V.mmul(Ls),\n            vrows = V.rows,\n            urows = U.length,\n            VLU = Matrix.Matrix.zeros(vrows, urows),\n            j, k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < scols; k++) {\n                    sum += VL[i][k] * U[j][k];\n                }\n                VLU[i][j] = sum;\n            }\n        }\n\n        return VLU.mmul(Y);\n    },\n    solveForDiagonal: function (value) {\n        return this.solve(Matrix.Matrix.diag(value));\n    },\n    inverse: function () {\n        var V = this.V;\n        var e = this.threshold,\n            vrows = V.length,\n            vcols = V[0].length,\n            X = new Matrix.Matrix(vrows, this.s.length),\n            i, j;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < vcols; j++) {\n                if (Math.abs(this.s[j]) > e) {\n                    X[i][j] = V[i][j] / this.s[j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n\n        var U = this.U;\n\n        var urows = U.length,\n            ucols = U[0].length,\n            Y = new Matrix.Matrix(vrows, urows),\n            k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < ucols; k++) {\n                    sum += X[i][k] * U[j][k];\n                }\n                Y[i][j] = sum;\n            }\n        }\n\n        return Y;\n    }\n};\n\nmodule.exports = SingularValueDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/dc/svd.js","'use strict';\n\nmodule.exports = abstractMatrix;\n\nvar LuDecomposition = require('./dc/lu');\nvar SvDecomposition = require('./dc/svd');\nvar arrayUtils = require('ml-array-utils');\nvar util = require('./util');\nvar MatrixTransposeView = require('./views/transpose');\nvar MatrixRowView = require('./views/row');\nvar MatrixSubView = require('./views/sub');\nvar MatrixSelectionView = require('./views/selection');\nvar MatrixColumnView = require('./views/column');\nvar MatrixFlipRowView = require('./views/flipRow');\nvar MatrixFlipColumnView = require('./views/flipColumn');\n\nfunction abstractMatrix(superCtor) {\n    if (superCtor === undefined) superCtor = Object;\n\n    /**\n     * Real matrix\n     * @class Matrix\n     * @param {number|Array|Matrix} nRows - Number of rows of the new matrix,\n     * 2D array containing the data or Matrix instance to clone\n     * @param {number} [nColumns] - Number of columns of the new matrix\n     */\n    class Matrix extends superCtor {\n        static get [Symbol.species]() {\n            return this;\n        }\n\n        /**\n         * Constructs a Matrix with the chosen dimensions from a 1D array\n         * @param {number} newRows - Number of rows\n         * @param {number} newColumns - Number of columns\n         * @param {Array} newData - A 1D array containing data for the matrix\n         * @return {Matrix} - The new matrix\n         */\n        static from1DArray(newRows, newColumns, newData) {\n            var length = newRows * newColumns;\n            if (length !== newData.length) {\n                throw new RangeError('Data length does not match given dimensions');\n            }\n            var newMatrix = new this(newRows, newColumns);\n            for (var row = 0; row < newRows; row++) {\n                for (var column = 0; column < newColumns; column++) {\n                    newMatrix.set(row, column, newData[row * newColumns + column]);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Creates a row vector, a matrix with only one row.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n        static rowVector(newData) {\n            var vector = new this(1, newData.length);\n            for (var i = 0; i < newData.length; i++) {\n                vector.set(0, i, newData[i]);\n            }\n            return vector;\n        }\n\n        /**\n         * Creates a column vector, a matrix with only one column.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n        static columnVector(newData) {\n            var vector = new this(newData.length, 1);\n            for (var i = 0; i < newData.length; i++) {\n                vector.set(i, 0, newData[i]);\n            }\n            return vector;\n        }\n\n        /**\n         * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static empty(rows, columns) {\n            return new this(rows, columns);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be set to zero.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static zeros(rows, columns) {\n            return this.empty(rows, columns).fill(0);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be set to one.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static ones(rows, columns) {\n            return this.empty(rows, columns).fill(1);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be randomly set.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n        static rand(rows, columns, rng) {\n            if (rng === undefined) rng = Math.random;\n            var matrix = this.empty(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    matrix.set(i, j, rng());\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be random integers.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {number} [maxValue=1000] - Maximum value\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n        static randInt(rows, columns, maxValue, rng) {\n            if (maxValue === undefined) maxValue = 1000;\n            if (rng === undefined) rng = Math.random;\n            var matrix = this.empty(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    var value = Math.floor(rng() * maxValue);\n                    matrix.set(i, j, value);\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and others will be 0.\n         * @param {number} rows - Number of rows\n         * @param {number} [columns=rows] - Number of columns\n         * @param {number} [value=1] - Value to fill the diagonal with\n         * @return {Matrix} - The new identity matrix\n         */\n        static eye(rows, columns, value) {\n            if (columns === undefined) columns = rows;\n            if (value === undefined) value = 1;\n            var min = Math.min(rows, columns);\n            var matrix = this.zeros(rows, columns);\n            for (var i = 0; i < min; i++) {\n                matrix.set(i, i, value);\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates a diagonal matrix based on the given array.\n         * @param {Array} data - Array containing the data for the diagonal\n         * @param {number} [rows] - Number of rows (Default: data.length)\n         * @param {number} [columns] - Number of columns (Default: rows)\n         * @return {Matrix} - The new diagonal matrix\n         */\n        static diag(data, rows, columns) {\n            var l = data.length;\n            if (rows === undefined) rows = l;\n            if (columns === undefined) columns = rows;\n            var min = Math.min(l, rows, columns);\n            var matrix = this.zeros(rows, columns);\n            for (var i = 0; i < min; i++) {\n                matrix.set(i, i, data[i]);\n            }\n            return matrix;\n        }\n\n        /**\n         * Returns a matrix whose elements are the minimum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n        static min(matrix1, matrix2) {\n            matrix1 = this.checkMatrix(matrix1);\n            matrix2 = this.checkMatrix(matrix2);\n            var rows = matrix1.rows;\n            var columns = matrix1.columns;\n            var result = new this(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Returns a matrix whose elements are the maximum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n        static max(matrix1, matrix2) {\n            matrix1 = this.checkMatrix(matrix1);\n            matrix2 = this.checkMatrix(matrix2);\n            var rows = matrix1.rows;\n            var columns = matrix1.columns;\n            var result = new this(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Check that the provided value is a Matrix and tries to instantiate one if not\n         * @param {*} value - The value to check\n         * @return {Matrix}\n         */\n        static checkMatrix(value) {\n            return Matrix.isMatrix(value) ? value : new this(value);\n        }\n\n        /**\n         * Returns true if the argument is a Matrix, false otherwise\n         * @param {*} value - The value to check\n         * @return {boolean}\n         */\n        static isMatrix(value) {\n            return (value != null) && (value.klass === 'Matrix');\n        }\n\n        /**\n         * @prop {number} size - The number of elements in the matrix.\n         */\n        get size() {\n            return this.rows * this.columns;\n        }\n\n        /**\n         * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n         * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n         * @return {Matrix} this\n         */\n        apply(callback) {\n            if (typeof callback !== 'function') {\n                throw new TypeError('callback must be a function');\n            }\n            var ii = this.rows;\n            var jj = this.columns;\n            for (var i = 0; i < ii; i++) {\n                for (var j = 0; j < jj; j++) {\n                    callback.call(this, i, j);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Returns a new 1D array filled row by row with the matrix values\n         * @return {Array}\n         */\n        to1DArray() {\n            var array = new Array(this.size);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    array[i * this.columns + j] = this.get(i, j);\n                }\n            }\n            return array;\n        }\n\n        /**\n         * Returns a 2D array containing a copy of the data\n         * @return {Array}\n         */\n        to2DArray() {\n            var copy = new Array(this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                copy[i] = new Array(this.columns);\n                for (var j = 0; j < this.columns; j++) {\n                    copy[i][j] = this.get(i, j);\n                }\n            }\n            return copy;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one row\n         */\n        isRowVector() {\n            return this.rows === 1;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one column\n         */\n        isColumnVector() {\n            return this.columns === 1;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one row or one column\n         */\n        isVector() {\n            return (this.rows === 1) || (this.columns === 1);\n        }\n\n        /**\n         * @return {boolean} true if the matrix has the same number of rows and columns\n         */\n        isSquare() {\n            return this.rows === this.columns;\n        }\n\n        /**\n         * @return {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n         */\n        isSymmetric() {\n            if (this.isSquare()) {\n                for (var i = 0; i < this.rows; i++) {\n                    for (var j = 0; j <= i; j++) {\n                        if (this.get(i, j) !== this.get(j, i)) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            }\n            return false;\n        }\n\n        /**\n         * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @param {number} value - The new value for the element\n         * @return {Matrix} this\n         */\n        set(rowIndex, columnIndex, value) { // eslint-disable-line no-unused-vars\n            throw new Error('set method is unimplemented');\n        }\n\n        /**\n         * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @return {number}\n         */\n        get(rowIndex, columnIndex) { // eslint-disable-line no-unused-vars\n            throw new Error('get method is unimplemented');\n        }\n\n        /**\n         * Creates a new matrix that is a repetition of the current matrix. New matrix has rowRep times the number of\n         * rows of the matrix, and colRep times the number of columns of the matrix\n         * @param {number} rowRep - Number of times the rows should be repeated\n         * @param {number} colRep - Number of times the columns should be re\n         * @return {Matrix}\n         * @example\n         * var matrix = new Matrix([[1,2]]);\n         * matrix.repeat(2); // [[1,2],[1,2]]\n         */\n        repeat(rowRep, colRep) {\n            rowRep = rowRep || 1;\n            colRep = colRep || 1;\n            var matrix = new this.constructor[Symbol.species](this.rows * rowRep, this.columns * colRep);\n            for (var i = 0; i < rowRep; i++) {\n                for (var j = 0; j < colRep; j++) {\n                    matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Fills the matrix with a given value. All elements will be set to this value.\n         * @param {number} value - New value\n         * @return {Matrix} this\n         */\n        fill(value) {\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, value);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Negates the matrix. All elements will be multiplied by (-1)\n         * @return {Matrix} this\n         */\n        neg() {\n            return this.mulS(-1);\n        }\n\n        /**\n         * Returns a new array from the given row index\n         * @param {number} index - Row index\n         * @return {Array}\n         */\n        getRow(index) {\n            util.checkRowIndex(this, index);\n            var row = new Array(this.columns);\n            for (var i = 0; i < this.columns; i++) {\n                row[i] = this.get(index, i);\n            }\n            return row;\n        }\n\n        /**\n         * Returns a new row vector from the given row index\n         * @param {number} index - Row index\n         * @return {Matrix}\n         */\n        getRowVector(index) {\n            return this.constructor.rowVector(this.getRow(index));\n        }\n\n        /**\n         * Sets a row at the given index\n         * @param {number} index - Row index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n        setRow(index, array) {\n            util.checkRowIndex(this, index);\n            array = util.checkRowVector(this, array);\n            for (var i = 0; i < this.columns; i++) {\n                this.set(index, i, array[i]);\n            }\n            return this;\n        }\n\n        /**\n         * Swaps two rows\n         * @param {number} row1 - First row index\n         * @param {number} row2 - Second row index\n         * @return {Matrix} this\n         */\n        swapRows(row1, row2) {\n            util.checkRowIndex(this, row1);\n            util.checkRowIndex(this, row2);\n            for (var i = 0; i < this.columns; i++) {\n                var temp = this.get(row1, i);\n                this.set(row1, i, this.get(row2, i));\n                this.set(row2, i, temp);\n            }\n            return this;\n        }\n\n        /**\n         * Returns a new array from the given column index\n         * @param {number} index - Column index\n         * @return {Array}\n         */\n        getColumn(index) {\n            util.checkColumnIndex(this, index);\n            var column = new Array(this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                column[i] = this.get(i, index);\n            }\n            return column;\n        }\n\n        /**\n         * Returns a new column vector from the given column index\n         * @param {number} index - Column index\n         * @return {Matrix}\n         */\n        getColumnVector(index) {\n            return this.constructor.columnVector(this.getColumn(index));\n        }\n\n        /**\n         * Sets a column at the given index\n         * @param {number} index - Column index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n        setColumn(index, array) {\n            util.checkColumnIndex(this, index);\n            array = util.checkColumnVector(this, array);\n            for (var i = 0; i < this.rows; i++) {\n                this.set(i, index, array[i]);\n            }\n            return this;\n        }\n\n        /**\n         * Swaps two columns\n         * @param {number} column1 - First column index\n         * @param {number} column2 - Second column index\n         * @return {Matrix} this\n         */\n        swapColumns(column1, column2) {\n            util.checkColumnIndex(this, column1);\n            util.checkColumnIndex(this, column2);\n            for (var i = 0; i < this.rows; i++) {\n                var temp = this.get(i, column1);\n                this.set(i, column1, this.get(i, column2));\n                this.set(i, column2, temp);\n            }\n            return this;\n        }\n\n        /**\n         * Adds the values of a vector to each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        addRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) + vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Subtracts the values of a vector from each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        subRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) - vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a vector with each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        mulRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) * vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Divides the values of each row by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        divRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) / vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Adds the values of a vector to each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        addColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) + vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Subtracts the values of a vector from each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        subColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) - vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a vector with each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        mulColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) * vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Divides the values of each column by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        divColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) / vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a row with a scalar\n         * @param {number} index - Row index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n        mulRow(index, value) {\n            util.checkRowIndex(this, index);\n            for (var i = 0; i < this.columns; i++) {\n                this.set(index, i, this.get(index, i) * value);\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a column with a scalar\n         * @param {number} index - Column index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n        mulColumn(index, value) {\n            util.checkColumnIndex(this, index);\n            for (var i = 0; i < this.rows; i++) {\n                this.set(i, index, this.get(i, index) * value);\n            }\n            return this;\n        }\n\n        /**\n         * Returns the maximum value of the matrix\n         * @return {number}\n         */\n        max() {\n            var v = this.get(0, 0);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) > v) {\n                        v = this.get(i, j);\n                    }\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value\n         * @return {Array}\n         */\n        maxIndex() {\n            var v = this.get(0, 0);\n            var idx = [0, 0];\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) > v) {\n                        v = this.get(i, j);\n                        idx[0] = i;\n                        idx[1] = j;\n                    }\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of the matrix\n         * @return {number}\n         */\n        min() {\n            var v = this.get(0, 0);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) < v) {\n                        v = this.get(i, j);\n                    }\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the minimum value\n         * @return {Array}\n         */\n        minIndex() {\n            var v = this.get(0, 0);\n            var idx = [0, 0];\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) < v) {\n                        v = this.get(i, j);\n                        idx[0] = i;\n                        idx[1] = j;\n                    }\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the maximum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n        maxRow(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) > v) {\n                    v = this.get(row, i);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n        maxRowIndex(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            var idx = [row, 0];\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) > v) {\n                    v = this.get(row, i);\n                    idx[1] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n        minRow(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) < v) {\n                    v = this.get(row, i);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n        minRowIndex(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            var idx = [row, 0];\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) < v) {\n                    v = this.get(row, i);\n                    idx[1] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the maximum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n        maxColumn(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) > v) {\n                    v = this.get(i, column);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n        maxColumnIndex(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            var idx = [0, column];\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) > v) {\n                    v = this.get(i, column);\n                    idx[0] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n        minColumn(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) < v) {\n                    v = this.get(i, column);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the minimum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n        minColumnIndex(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            var idx = [0, column];\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) < v) {\n                    v = this.get(i, column);\n                    idx[0] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns an array containing the diagonal values of the matrix\n         * @return {Array}\n         */\n        diag() {\n            var min = Math.min(this.rows, this.columns);\n            var diag = new Array(min);\n            for (var i = 0; i < min; i++) {\n                diag[i] = this.get(i, i);\n            }\n            return diag;\n        }\n\n        /**\n         * Returns the sum by the argument given, if no argument given,\n         * it returns the sum of all elements of the matrix.\n         * @param {string} by - sum by 'row' or 'column'.\n         * @return {Matrix|number}\n         */\n        sum(by) {\n            switch (by) {\n                case 'row':\n                    return util.sumByRow(this);\n                case 'column':\n                    return util.sumByColumn(this);\n                default:\n                    return util.sumAll(this);\n            }\n        }\n\n        /**\n         * Returns the mean of all elements of the matrix\n         * @return {number}\n         */\n        mean() {\n            return this.sum() / this.size;\n        }\n\n        /**\n         * Returns the product of all elements of the matrix\n         * @return {number}\n         */\n        prod() {\n            var prod = 1;\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    prod *= this.get(i, j);\n                }\n            }\n            return prod;\n        }\n\n        /**\n         * Computes the cumulative sum of the matrix elements (in place, row by row)\n         * @return {Matrix} this\n         */\n        cumulativeSum() {\n            var sum = 0;\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    sum += this.get(i, j);\n                    this.set(i, j, sum);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Computes the dot (scalar) product between the matrix and another\n         * @param {Matrix} vector2 vector\n         * @return {number}\n         */\n        dot(vector2) {\n            if (Matrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n            var vector1 = this.to1DArray();\n            if (vector1.length !== vector2.length) {\n                throw new RangeError('vectors do not have the same size');\n            }\n            var dot = 0;\n            for (var i = 0; i < vector1.length; i++) {\n                dot += vector1[i] * vector2[i];\n            }\n            return dot;\n        }\n\n        /**\n         * Returns the matrix product between this and other\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n        mmul(other) {\n            other = this.constructor.checkMatrix(other);\n            if (this.columns !== other.rows) {\n                // eslint-disable-next-line no-console\n                console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n            }\n\n            var m = this.rows;\n            var n = this.columns;\n            var p = other.columns;\n\n            var result = new this.constructor[Symbol.species](m, p);\n\n            var Bcolj = new Array(n);\n            for (var j = 0; j < p; j++) {\n                for (var k = 0; k < n; k++) {\n                    Bcolj[k] = other.get(k, j);\n                }\n\n                for (var i = 0; i < m; i++) {\n                    var s = 0;\n                    for (k = 0; k < n; k++) {\n                        s += this.get(i, k) * Bcolj[k];\n                    }\n\n                    result.set(i, j, s);\n                }\n            }\n            return result;\n        }\n\n        strassen2x2(other) {\n            var result = new this.constructor[Symbol.species](2, 2);\n            const a11 = this.get(0, 0);\n            const b11 = other.get(0, 0);\n            const a12 = this.get(0, 1);\n            const b12 = other.get(0, 1);\n            const a21 = this.get(1, 0);\n            const b21 = other.get(1, 0);\n            const a22 = this.get(1, 1);\n            const b22 = other.get(1, 1);\n\n            // Compute intermediate values.\n            const m1 = (a11 + a22) * (b11 + b22);\n            const m2 = (a21 + a22) * b11;\n            const m3 = a11 * (b12 - b22);\n            const m4 = a22 * (b21 - b11);\n            const m5 = (a11 + a12) * b22;\n            const m6 = (a21 - a11) * (b11 + b12);\n            const m7 = (a12 - a22) * (b21 + b22);\n\n            // Combine intermediate values into the output.\n            const c00 = m1 + m4 - m5 + m7;\n            const c01 = m3 + m5;\n            const c10 = m2 + m4;\n            const c11 = m1 - m2 + m3 + m6;\n\n            result.set(0, 0, c00);\n            result.set(0, 1, c01);\n            result.set(1, 0, c10);\n            result.set(1, 1, c11);\n            return result;\n        }\n\n        strassen3x3(other) {\n            var result = new this.constructor[Symbol.species](3, 3);\n\n            const a00 = this.get(0, 0);\n            const a01 = this.get(0, 1);\n            const a02 = this.get(0, 2);\n            const a10 = this.get(1, 0);\n            const a11 = this.get(1, 1);\n            const a12 = this.get(1, 2);\n            const a20 = this.get(2, 0);\n            const a21 = this.get(2, 1);\n            const a22 = this.get(2, 2);\n\n            const b00 = other.get(0, 0);\n            const b01 = other.get(0, 1);\n            const b02 = other.get(0, 2);\n            const b10 = other.get(1, 0);\n            const b11 = other.get(1, 1);\n            const b12 = other.get(1, 2);\n            const b20 = other.get(2, 0);\n            const b21 = other.get(2, 1);\n            const b22 = other.get(2, 2);\n\n            const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n            const m2 = (a00 - a10) * (-b01 + b11);\n            const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n            const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n            const m5 = (a10 + a11) * (-b00 + b01);\n            const m6 = a00 * b00;\n            const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n            const m8 = (-a00 + a20) * (b02 - b12);\n            const m9 = (a20 + a21) * (-b00 + b02);\n            const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n            const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n            const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n            const m13 = (a02 - a22) * (b11 - b21);\n            const m14 = a02 * b20;\n            const m15 = (a21 + a22) * (-b20 + b21);\n            const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n            const m17 = (a02 - a12) * (b12 - b22);\n            const m18 = (a11 + a12) * (-b20 + b22);\n            const m19 = a01 * b10;\n            const m20 = a12 * b21;\n            const m21 = a10 * b02;\n            const m22 = a20 * b01;\n            const m23 = a22 * b22;\n\n            const c00 = m6 + m14 + m19;\n            const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n            const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n            const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n            const c11 = m2 + m4 + m5 + m6 + m20;\n            const c12 = m14 + m16 + m17 + m18 + m21;\n            const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n            const c21 = m12 + m13 + m14 + m15 + m22;\n            const c22 = m6 + m7 + m8 + m9 + m23;\n\n            result.set(0, 0, c00);\n            result.set(0, 1, c01);\n            result.set(0, 2, c02);\n            result.set(1, 0, c10);\n            result.set(1, 1, c11);\n            result.set(1, 2, c12);\n            result.set(2, 0, c20);\n            result.set(2, 1, c21);\n            result.set(2, 2, c22);\n            return result;\n        }\n\n        /**\n         * Returns the matrix product between x and y. More efficient than mmul(other) only when we multiply squared matrix and when the size of the matrix is > 1000.\n         * @param {Matrix} y\n         * @return {Matrix}\n         */\n        mmulStrassen(y) {\n            var x = this.clone();\n            var r1 = x.rows;\n            var c1 = x.columns;\n            var r2 = y.rows;\n            var c2 = y.columns;\n            if (c1 !== r2) {\n                // eslint-disable-next-line no-console\n                console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);\n            }\n\n            // Put a matrix into the top left of a matrix of zeros.\n            // `rows` and `cols` are the dimensions of the output matrix.\n            function embed(mat, rows, cols) {\n                var r = mat.rows;\n                var c = mat.columns;\n                if ((r === rows) && (c === cols)) {\n                    return mat;\n                } else {\n                    var resultat = Matrix.zeros(rows, cols);\n                    resultat = resultat.setSubMatrix(mat, 0, 0);\n                    return resultat;\n                }\n            }\n\n\n            // Make sure both matrices are the same size.\n            // This is exclusively for simplicity:\n            // this algorithm can be implemented with matrices of different sizes.\n\n            var r = Math.max(r1, r2);\n            var c = Math.max(c1, c2);\n            x = embed(x, r, c);\n            y = embed(y, r, c);\n\n            // Our recursive multiplication function.\n            function blockMult(a, b, rows, cols) {\n                // For small matrices, resort to naive multiplication.\n                if (rows <= 512 || cols <= 512) {\n                    return a.mmul(b); // a is equivalent to this\n                }\n\n                // Apply dynamic padding.\n                if ((rows % 2 === 1) && (cols % 2 === 1)) {\n                    a = embed(a, rows + 1, cols + 1);\n                    b = embed(b, rows + 1, cols + 1);\n                } else if (rows % 2 === 1) {\n                    a = embed(a, rows + 1, cols);\n                    b = embed(b, rows + 1, cols);\n                } else if (cols % 2 === 1) {\n                    a = embed(a, rows, cols + 1);\n                    b = embed(b, rows, cols + 1);\n                }\n\n                var halfRows = parseInt(a.rows / 2);\n                var halfCols = parseInt(a.columns / 2);\n                // Subdivide input matrices.\n                var a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n                var b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n                var a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n                var b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n                var a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n                var b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n                var a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n                var b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n                // Compute intermediate values.\n                var m1 = blockMult(Matrix.add(a11, a22), Matrix.add(b11, b22), halfRows, halfCols);\n                var m2 = blockMult(Matrix.add(a21, a22), b11, halfRows, halfCols);\n                var m3 = blockMult(a11, Matrix.sub(b12, b22), halfRows, halfCols);\n                var m4 = blockMult(a22, Matrix.sub(b21, b11), halfRows, halfCols);\n                var m5 = blockMult(Matrix.add(a11, a12), b22, halfRows, halfCols);\n                var m6 = blockMult(Matrix.sub(a21, a11), Matrix.add(b11, b12), halfRows, halfCols);\n                var m7 = blockMult(Matrix.sub(a12, a22), Matrix.add(b21, b22), halfRows, halfCols);\n\n                // Combine intermediate values into the output.\n                var c11 = Matrix.add(m1, m4);\n                c11.sub(m5);\n                c11.add(m7);\n                var c12 = Matrix.add(m3, m5);\n                var c21 = Matrix.add(m2, m4);\n                var c22 = Matrix.sub(m1, m2);\n                c22.add(m3);\n                c22.add(m6);\n\n                //Crop output to the desired size (undo dynamic padding).\n                var resultat = Matrix.zeros(2 * c11.rows, 2 * c11.columns);\n                resultat = resultat.setSubMatrix(c11, 0, 0);\n                resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n                resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n                resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n                return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n            }\n            return blockMult(x, y, r, c);\n        }\n\n        /**\n         * Returns a row-by-row scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The scaled matrix\n         */\n        scaleRows(min, max) {\n            min = min === undefined ? 0 : min;\n            max = max === undefined ? 1 : max;\n            if (min >= max) {\n                throw new RangeError('min should be strictly smaller than max');\n            }\n            var newMatrix = this.constructor.empty(this.rows, this.columns);\n            for (var i = 0; i < this.rows; i++) {\n                var scaled = arrayUtils.scale(this.getRow(i), {min, max});\n                newMatrix.setRow(i, scaled);\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a new column-by-column scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The new scaled matrix\n         * @example\n         * var matrix = new Matrix([[1,2],[-1,0]]);\n         * var scaledMatrix = matrix.scaleColumns(); // [[1,1],[0,0]]\n         */\n        scaleColumns(min, max) {\n            min = min === undefined ? 0 : min;\n            max = max === undefined ? 1 : max;\n            if (min >= max) {\n                throw new RangeError('min should be strictly smaller than max');\n            }\n            var newMatrix = this.constructor.empty(this.rows, this.columns);\n            for (var i = 0; i < this.columns; i++) {\n                var scaled = arrayUtils.scale(this.getColumn(i), {\n                    min: min,\n                    max: max\n                });\n                newMatrix.setColumn(i, scaled);\n            }\n            return newMatrix;\n        }\n\n\n        /**\n         * Returns the Kronecker product (also known as tensor product) between this and other\n         * See https://en.wikipedia.org/wiki/Kronecker_product\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n        kroneckerProduct(other) {\n            other = this.constructor.checkMatrix(other);\n\n            var m = this.rows;\n            var n = this.columns;\n            var p = other.rows;\n            var q = other.columns;\n\n            var result = new this.constructor[Symbol.species](m * p, n * q);\n            for (var i = 0; i < m; i++) {\n                for (var j = 0; j < n; j++) {\n                    for (var k = 0; k < p; k++) {\n                        for (var l = 0; l < q; l++) {\n                            result[p * i + k][q * j + l] = this.get(i, j) * other.get(k, l);\n                        }\n                    }\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Transposes the matrix and returns a new one containing the result\n         * @return {Matrix}\n         */\n        transpose() {\n            var result = new this.constructor[Symbol.species](this.columns, this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    result.set(j, i, this.get(i, j));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Sorts the rows (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n        sortRows(compareFunction) {\n            if (compareFunction === undefined) compareFunction = compareNumbers;\n            for (var i = 0; i < this.rows; i++) {\n                this.setRow(i, this.getRow(i).sort(compareFunction));\n            }\n            return this;\n        }\n\n        /**\n         * Sorts the columns (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n        sortColumns(compareFunction) {\n            if (compareFunction === undefined) compareFunction = compareNumbers;\n            for (var i = 0; i < this.columns; i++) {\n                this.setColumn(i, this.getColumn(i).sort(compareFunction));\n            }\n            return this;\n        }\n\n        /**\n         * Returns a subset of the matrix\n         * @param {number} startRow - First row index\n         * @param {number} endRow - Last row index\n         * @param {number} startColumn - First column index\n         * @param {number} endColumn - Last column index\n         * @return {Matrix}\n         */\n        subMatrix(startRow, endRow, startColumn, endColumn) {\n            util.checkRange(this, startRow, endRow, startColumn, endColumn);\n            var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, endColumn - startColumn + 1);\n            for (var i = startRow; i <= endRow; i++) {\n                for (var j = startColumn; j <= endColumn; j++) {\n                    newMatrix[i - startRow][j - startColumn] = this.get(i, j);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a subset of the matrix based on an array of row indices\n         * @param {Array} indices - Array containing the row indices\n         * @param {number} [startColumn = 0] - First column index\n         * @param {number} [endColumn = this.columns-1] - Last column index\n         * @return {Matrix}\n         */\n        subMatrixRow(indices, startColumn, endColumn) {\n            if (startColumn === undefined) startColumn = 0;\n            if (endColumn === undefined) endColumn = this.columns - 1;\n            if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns)) {\n                throw new RangeError('Argument out of range');\n            }\n\n            var newMatrix = new this.constructor[Symbol.species](indices.length, endColumn - startColumn + 1);\n            for (var i = 0; i < indices.length; i++) {\n                for (var j = startColumn; j <= endColumn; j++) {\n                    if (indices[i] < 0 || indices[i] >= this.rows) {\n                        throw new RangeError('Row index out of range: ' + indices[i]);\n                    }\n                    newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a subset of the matrix based on an array of column indices\n         * @param {Array} indices - Array containing the column indices\n         * @param {number} [startRow = 0] - First row index\n         * @param {number} [endRow = this.rows-1] - Last row index\n         * @return {Matrix}\n         */\n        subMatrixColumn(indices, startRow, endRow) {\n            if (startRow === undefined) startRow = 0;\n            if (endRow === undefined) endRow = this.rows - 1;\n            if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows)) {\n                throw new RangeError('Argument out of range');\n            }\n\n            var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, indices.length);\n            for (var i = 0; i < indices.length; i++) {\n                for (var j = startRow; j <= endRow; j++) {\n                    if (indices[i] < 0 || indices[i] >= this.columns) {\n                        throw new RangeError('Column index out of range: ' + indices[i]);\n                    }\n                    newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Set a part of the matrix to the given sub-matrix\n         * @param {Matrix|Array< Array >} matrix - The source matrix from which to extract values.\n         * @param {number} startRow - The index of the first row to set\n         * @param {number} startColumn - The index of the first column to set\n         * @return {Matrix}\n         */\n        setSubMatrix(matrix, startRow, startColumn) {\n            matrix = this.constructor.checkMatrix(matrix);\n            var endRow = startRow + matrix.rows - 1;\n            var endColumn = startColumn + matrix.columns - 1;\n            util.checkRange(this, startRow, endRow, startColumn, endColumn);\n            for (var i = 0; i < matrix.rows; i++) {\n                for (var j = 0; j < matrix.columns; j++) {\n                    this[startRow + i][startColumn + j] = matrix.get(i, j);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Return a new matrix based on a selection of rows and columns\n         * @param {Array<number>} rowIndices - The row indices to select. Order matters and an index can be more than once.\n         * @param {Array<number>} columnIndices - The column indices to select. Order matters and an index can be use more than once.\n         * @return {Matrix} The new matrix\n         */\n        selection(rowIndices, columnIndices) {\n            var indices = util.checkIndices(this, rowIndices, columnIndices);\n            var newMatrix = new this.constructor[Symbol.species](rowIndices.length, columnIndices.length);\n            for (var i = 0; i < indices.row.length; i++) {\n                var rowIndex = indices.row[i];\n                for (var j = 0; j < indices.column.length; j++) {\n                    var columnIndex = indices.column[j];\n                    newMatrix[i][j] = this.get(rowIndex, columnIndex);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns the trace of the matrix (sum of the diagonal elements)\n         * @return {number}\n         */\n        trace() {\n            var min = Math.min(this.rows, this.columns);\n            var trace = 0;\n            for (var i = 0; i < min; i++) {\n                trace += this.get(i, i);\n            }\n            return trace;\n        }\n\n        /*\n         Matrix views\n         */\n\n        /**\n         * Returns a view of the transposition of the matrix\n         * @return {MatrixTransposeView}\n         */\n        transposeView() {\n            return new MatrixTransposeView(this);\n        }\n\n        /**\n         * Returns a view of the row vector with the given index\n         * @param {number} row - row index of the vector\n         * @return {MatrixRowView}\n         */\n        rowView(row) {\n            util.checkRowIndex(this, row);\n            return new MatrixRowView(this, row);\n        }\n\n        /**\n         * Returns a view of the column vector with the given index\n         * @param {number} column - column index of the vector\n         * @return {MatrixColumnView}\n         */\n        columnView(column) {\n            util.checkColumnIndex(this, column);\n            return new MatrixColumnView(this, column);\n        }\n\n        /**\n         * Returns a view of the matrix flipped in the row axis\n         * @return {MatrixFlipRowView}\n         */\n        flipRowView() {\n            return new MatrixFlipRowView(this);\n        }\n\n        /**\n         * Returns a view of the matrix flipped in the column axis\n         * @return {MatrixFlipColumnView}\n         */\n        flipColumnView() {\n            return new MatrixFlipColumnView(this);\n        }\n\n        /**\n         * Returns a view of a submatrix giving the index boundaries\n         * @param {number} startRow - first row index of the submatrix\n         * @param {number} endRow - last row index of the submatrix\n         * @param {number} startColumn - first column index of the submatrix\n         * @param {number} endColumn - last column index of the submatrix\n         * @return {MatrixSubView}\n         */\n        subMatrixView(startRow, endRow, startColumn, endColumn) {\n            return new MatrixSubView(this, startRow, endRow, startColumn, endColumn);\n        }\n\n        /**\n         * Returns a view of the cross of the row indices and the column indices\n         * @example\n         * // resulting vector is [[2], [2]]\n         * var matrix = new Matrix([[1,2,3], [4,5,6]]).selectionView([0, 0], [1])\n         * @param {Array<number>} rowIndices\n         * @param {Array<number>} columnIndices\n         * @return {MatrixSelectionView}\n         */\n        selectionView(rowIndices, columnIndices) {\n            return new MatrixSelectionView(this, rowIndices, columnIndices);\n        }\n\n\n        /**\n        * Calculates and returns the determinant of a matrix as a Number\n        * @example\n        *   new Matrix([[1,2,3], [4,5,6]]).det()\n        * @return {number}\n        */\n        det() {\n            if (this.isSquare()) {\n                var a, b, c, d;\n                if (this.columns === 2) {\n                    // 2 x 2 matrix\n                    a = this.get(0, 0);\n                    b = this.get(0, 1);\n                    c = this.get(1, 0);\n                    d = this.get(1, 1);\n\n                    return a * d - (b * c);\n                } else if (this.columns === 3) {\n                    // 3 x 3 matrix\n                    var subMatrix0, subMatrix1, subMatrix2;\n                    subMatrix0 = this.selectionView([1, 2], [1, 2]);\n                    subMatrix1 = this.selectionView([1, 2], [0, 2]);\n                    subMatrix2 = this.selectionView([1, 2], [0, 1]);\n                    a = this.get(0, 0);\n                    b = this.get(0, 1);\n                    c = this.get(0, 2);\n\n                    return a * subMatrix0.det() - b * subMatrix1.det() + c * subMatrix2.det();\n                } else {\n                    // general purpose determinant using the LU decomposition\n                    return new LuDecomposition(this).determinant;\n                }\n\n            } else {\n                throw Error('Determinant can only be calculated for a square matrix.');\n            }\n        }\n\n        /**\n         * Returns inverse of a matrix if it exists or the pseudoinverse\n         * @param {number} threshold - threshold for taking inverse of singular values (default = 1e-15)\n         * @return {Matrix} the (pseudo)inverted matrix.\n         */\n        pseudoInverse(threshold) {\n            if (threshold === undefined) threshold = Number.EPSILON;\n            var svdSolution = new SvDecomposition(this, {autoTranspose: true});\n\n            var U = svdSolution.leftSingularVectors;\n            var V = svdSolution.rightSingularVectors;\n            var s = svdSolution.diagonal;\n\n            for (var i = 0; i < s.length; i++) {\n                if (Math.abs(s[i]) > threshold) {\n                    s[i] = 1.0 / s[i];\n                } else {\n                    s[i] = 0.0;\n                }\n            }\n\n            // convert list to diagonal\n            s = this.constructor[Symbol.species].diag(s);\n            return V.mmul(s.mmul(U.transposeView()));\n        }\n    }\n\n    Matrix.prototype.klass = 'Matrix';\n\n    /**\n     * @private\n     * Check that two matrices have the same dimensions\n     * @param {Matrix} matrix\n     * @param {Matrix} otherMatrix\n     */\n    function checkDimensions(matrix, otherMatrix) { // eslint-disable-line no-unused-vars\n        if (matrix.rows !== otherMatrix.rows ||\n            matrix.columns !== otherMatrix.columns) {\n            throw new RangeError('Matrices dimensions must be equal');\n        }\n    }\n\n    function compareNumbers(a, b) {\n        return a - b;\n    }\n\n    /*\n     Synonyms\n     */\n\n    Matrix.random = Matrix.rand;\n    Matrix.diagonal = Matrix.diag;\n    Matrix.prototype.diagonal = Matrix.prototype.diag;\n    Matrix.identity = Matrix.eye;\n    Matrix.prototype.negate = Matrix.prototype.neg;\n    Matrix.prototype.tensorProduct = Matrix.prototype.kroneckerProduct;\n    Matrix.prototype.determinant = Matrix.prototype.det;\n\n    /*\n     Add dynamically instance and static methods for mathematical operations\n     */\n\n    var inplaceOperator = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n    var inplaceOperatorScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% value);\n        }\n    }\n    return this;\n})\n`;\n\n    var inplaceOperatorMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    checkDimensions(this, matrix);\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% matrix.get(i, j));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticOperator = `\n(function %name%(matrix, value) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(value);\n})\n`;\n\n    var inplaceMethod = `\n(function %name%() {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticMethod = `\n(function %name%(matrix) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%();\n})\n`;\n\n    var inplaceMethodWithArgs = `\n(function %name%(%args%) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), %args%));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticMethodWithArgs = `\n(function %name%(matrix, %args%) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(%args%);\n})\n`;\n\n\n    var inplaceMethodWithOneArgScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), value));\n        }\n    }\n    return this;\n})\n`;\n    var inplaceMethodWithOneArgMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    checkDimensions(this, matrix);\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), matrix.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n    var inplaceMethodWithOneArg = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n    var staticMethodWithOneArg = staticMethodWithArgs;\n\n    var operators = [\n        // Arithmetic operators\n        ['+', 'add'],\n        ['-', 'sub', 'subtract'],\n        ['*', 'mul', 'multiply'],\n        ['/', 'div', 'divide'],\n        ['%', 'mod', 'modulus'],\n        // Bitwise operators\n        ['&', 'and'],\n        ['|', 'or'],\n        ['^', 'xor'],\n        ['<<', 'leftShift'],\n        ['>>', 'signPropagatingRightShift'],\n        ['>>>', 'rightShift', 'zeroFillRightShift']\n    ];\n\n    var i;\n\n    for (var operator of operators) {\n        var inplaceOp = eval(fillTemplateFunction(inplaceOperator, {name: operator[1], op: operator[0]}));\n        var inplaceOpS = eval(fillTemplateFunction(inplaceOperatorScalar, {name: operator[1] + 'S', op: operator[0]}));\n        var inplaceOpM = eval(fillTemplateFunction(inplaceOperatorMatrix, {name: operator[1] + 'M', op: operator[0]}));\n        var staticOp = eval(fillTemplateFunction(staticOperator, {name: operator[1]}));\n        for (i = 1; i < operator.length; i++) {\n            Matrix.prototype[operator[i]] = inplaceOp;\n            Matrix.prototype[operator[i] + 'S'] = inplaceOpS;\n            Matrix.prototype[operator[i] + 'M'] = inplaceOpM;\n            Matrix[operator[i]] = staticOp;\n        }\n    }\n\n    var methods = [\n        ['~', 'not']\n    ];\n\n    [\n        'abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cbrt', 'ceil',\n        'clz32', 'cos', 'cosh', 'exp', 'expm1', 'floor', 'fround', 'log', 'log1p',\n        'log10', 'log2', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc'\n    ].forEach(function (mathMethod) {\n        methods.push(['Math.' + mathMethod, mathMethod]);\n    });\n\n    for (var method of methods) {\n        var inplaceMeth = eval(fillTemplateFunction(inplaceMethod, {name: method[1], method: method[0]}));\n        var staticMeth = eval(fillTemplateFunction(staticMethod, {name: method[1]}));\n        for (i = 1; i < method.length; i++) {\n            Matrix.prototype[method[i]] = inplaceMeth;\n            Matrix[method[i]] = staticMeth;\n        }\n    }\n\n    var methodsWithArgs = [\n        ['Math.pow', 1, 'pow']\n    ];\n\n    for (var methodWithArg of methodsWithArgs) {\n        var args = 'arg0';\n        for (i = 1; i < methodWithArg[1]; i++) {\n            args += `, arg${i}`;\n        }\n        if (methodWithArg[1] !== 1) {\n            var inplaceMethWithArgs = eval(fillTemplateFunction(inplaceMethodWithArgs, {\n                name: methodWithArg[2],\n                method: methodWithArg[0],\n                args: args\n            }));\n            var staticMethWithArgs = eval(fillTemplateFunction(staticMethodWithArgs, {name: methodWithArg[2], args: args}));\n            for (i = 2; i < methodWithArg.length; i++) {\n                Matrix.prototype[methodWithArg[i]] = inplaceMethWithArgs;\n                Matrix[methodWithArg[i]] = staticMethWithArgs;\n            }\n        } else {\n            var tmplVar = {\n                name: methodWithArg[2],\n                args: args,\n                method: methodWithArg[0]\n            };\n            var inplaceMethod2 = eval(fillTemplateFunction(inplaceMethodWithOneArg, tmplVar));\n            var inplaceMethodS = eval(fillTemplateFunction(inplaceMethodWithOneArgScalar, tmplVar));\n            var inplaceMethodM = eval(fillTemplateFunction(inplaceMethodWithOneArgMatrix, tmplVar));\n            var staticMethod2 = eval(fillTemplateFunction(staticMethodWithOneArg, tmplVar));\n            for (i = 2; i < methodWithArg.length; i++) {\n                Matrix.prototype[methodWithArg[i]] = inplaceMethod2;\n                Matrix.prototype[methodWithArg[i] + 'M'] = inplaceMethodM;\n                Matrix.prototype[methodWithArg[i] + 'S'] = inplaceMethodS;\n                Matrix[methodWithArg[i]] = staticMethod2;\n            }\n        }\n    }\n\n    function fillTemplateFunction(template, values) {\n        for (var value in values) {\n            template = template.replace(new RegExp('%' + value + '%', 'g'), values[value]);\n        }\n        return template;\n    }\n\n    return Matrix;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/abstractMatrix.js","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\nfunction LuDecomposition(matrix) {\n    if (!(this instanceof LuDecomposition)) {\n        return new LuDecomposition(matrix);\n    }\n\n    matrix = Matrix.Matrix.checkMatrix(matrix);\n\n    var lu = matrix.clone(),\n        rows = lu.rows,\n        columns = lu.columns,\n        pivotVector = new Array(rows),\n        pivotSign = 1,\n        i, j, k, p, s, t, v,\n        LUrowi, LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n        pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n\n        for (i = 0; i < rows; i++) {\n            LUcolj[i] = lu[i][j];\n        }\n\n        for (i = 0; i < rows; i++) {\n            LUrowi = lu[i];\n            kmax = Math.min(i, j);\n            s = 0;\n            for (k = 0; k < kmax; k++) {\n                s += LUrowi[k] * LUcolj[k];\n            }\n            LUrowi[j] = LUcolj[i] -= s;\n        }\n\n        p = j;\n        for (i = j + 1; i < rows; i++) {\n            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n                p = i;\n            }\n        }\n\n        if (p !== j) {\n            for (k = 0; k < columns; k++) {\n                t = lu[p][k];\n                lu[p][k] = lu[j][k];\n                lu[j][k] = t;\n            }\n\n            v = pivotVector[p];\n            pivotVector[p] = pivotVector[j];\n            pivotVector[j] = v;\n\n            pivotSign = -pivotSign;\n        }\n\n        if (j < rows && lu[j][j] !== 0) {\n            for (i = j + 1; i < rows; i++) {\n                lu[i][j] /= lu[j][j];\n            }\n        }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n}\n\nLuDecomposition.prototype = {\n    isSingular: function () {\n        var data = this.LU,\n            col = data.columns;\n        for (var j = 0; j < col; j++) {\n            if (data[j][j] === 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    get determinant() {\n        var data = this.LU;\n        if (!data.isSquare()) {\n            throw new Error('Matrix must be square');\n        }\n        var determinant = this.pivotSign, col = data.columns;\n        for (var j = 0; j < col; j++) {\n            determinant *= data[j][j];\n        }\n        return determinant;\n    },\n    get lowerTriangularMatrix() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix.Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i > j) {\n                    X[i][j] = data[i][j];\n                } else if (i === j) {\n                    X[i][j] = 1;\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get upperTriangularMatrix() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix.Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i <= j) {\n                    X[i][j] = data[i][j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get pivotPermutationVector() {\n        return this.pivotVector.slice();\n    },\n    solve: function (value) {\n        value = Matrix.Matrix.checkMatrix(value);\n\n        var lu = this.LU,\n            rows = lu.rows;\n\n        if (rows !== value.rows) {\n            throw new Error('Invalid matrix dimensions');\n        }\n        if (this.isSingular()) {\n            throw new Error('LU matrix is singular');\n        }\n\n        var count = value.columns;\n        var X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n        var columns = lu.columns;\n        var i, j, k;\n\n        for (k = 0; k < columns; k++) {\n            for (i = k + 1; i < columns; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        for (k = columns - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= lu[k][k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = LuDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/dc/lu.js","'use strict';\n\nvar Matrix = require('../matrix');\nvar util = require('./util');\nvar hypotenuse = util.hypotenuse;\nvar getFilled2DArray = util.getFilled2DArray;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\nfunction SingularValueDecomposition(value, options) {\n    if (!(this instanceof SingularValueDecomposition)) {\n        return new SingularValueDecomposition(value, options);\n    }\n    value = Matrix.Matrix.checkMatrix(value);\n\n    options = options || {};\n\n    var m = value.rows,\n        n = value.columns,\n        nu = Math.min(m, n);\n\n    var wantu = true, wantv = true;\n    if (options.computeLeftSingularVectors === false) wantu = false;\n    if (options.computeRightSingularVectors === false) wantv = false;\n    var autoTranspose = options.autoTranspose === true;\n\n    var swapped = false;\n    var a;\n    if (m < n) {\n        if (!autoTranspose) {\n            a = value.clone();\n            // eslint-disable-next-line no-console\n            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n        } else {\n            a = value.transpose();\n            m = a.rows;\n            n = a.columns;\n            swapped = true;\n            var aux = wantu;\n            wantu = wantv;\n            wantv = aux;\n        }\n    } else {\n        a = value.clone();\n    }\n\n    var s = new Array(Math.min(m + 1, n)),\n        U = getFilled2DArray(m, nu, 0),\n        V = getFilled2DArray(n, n, 0),\n        e = new Array(n),\n        work = new Array(m);\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n\n    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\n    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n        if (k < nct) {\n            s[k] = 0;\n            for (i = k; i < m; i++) {\n                s[k] = hypotenuse(s[k], a[i][k]);\n            }\n            if (s[k] !== 0) {\n                if (a[k][k] < 0) {\n                    s[k] = -s[k];\n                }\n                for (i = k; i < m; i++) {\n                    a[i][k] /= s[k];\n                }\n                a[k][k] += 1;\n            }\n            s[k] = -s[k];\n        }\n\n        for (j = k + 1; j < n; j++) {\n            if ((k < nct) && (s[k] !== 0)) {\n                t = 0;\n                for (i = k; i < m; i++) {\n                    t += a[i][k] * a[i][j];\n                }\n                t = -t / a[k][k];\n                for (i = k; i < m; i++) {\n                    a[i][j] += t * a[i][k];\n                }\n            }\n            e[j] = a[k][j];\n        }\n\n        if (wantu && (k < nct)) {\n            for (i = k; i < m; i++) {\n                U[i][k] = a[i][k];\n            }\n        }\n\n        if (k < nrt) {\n            e[k] = 0;\n            for (i = k + 1; i < n; i++) {\n                e[k] = hypotenuse(e[k], e[i]);\n            }\n            if (e[k] !== 0) {\n                if (e[k + 1] < 0) {\n                    e[k] = 0 - e[k];\n                }\n                for (i = k + 1; i < n; i++) {\n                    e[i] /= e[k];\n                }\n                e[k + 1] += 1;\n            }\n            e[k] = -e[k];\n            if ((k + 1 < m) && (e[k] !== 0)) {\n                for (i = k + 1; i < m; i++) {\n                    work[i] = 0;\n                }\n                for (j = k + 1; j < n; j++) {\n                    for (i = k + 1; i < m; i++) {\n                        work[i] += e[j] * a[i][j];\n                    }\n                }\n                for (j = k + 1; j < n; j++) {\n                    t = -e[j] / e[k + 1];\n                    for (i = k + 1; i < m; i++) {\n                        a[i][j] += t * work[i];\n                    }\n                }\n            }\n            if (wantv) {\n                for (i = k + 1; i < n; i++) {\n                    V[i][k] = e[i];\n                }\n            }\n        }\n    }\n\n    p = Math.min(n, m + 1);\n    if (nct < n) {\n        s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n        s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n        e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n        for (j = nct; j < nu; j++) {\n            for (i = 0; i < m; i++) {\n                U[i][j] = 0;\n            }\n            U[j][j] = 1;\n        }\n        for (k = nct - 1; k >= 0; k--) {\n            if (s[k] !== 0) {\n                for (j = k + 1; j < nu; j++) {\n                    t = 0;\n                    for (i = k; i < m; i++) {\n                        t += U[i][k] * U[i][j];\n                    }\n                    t = -t / U[k][k];\n                    for (i = k; i < m; i++) {\n                        U[i][j] += t * U[i][k];\n                    }\n                }\n                for (i = k; i < m; i++) {\n                    U[i][k] = -U[i][k];\n                }\n                U[k][k] = 1 + U[k][k];\n                for (i = 0; i < k - 1; i++) {\n                    U[i][k] = 0;\n                }\n            } else {\n                for (i = 0; i < m; i++) {\n                    U[i][k] = 0;\n                }\n                U[k][k] = 1;\n            }\n        }\n    }\n\n    if (wantv) {\n        for (k = n - 1; k >= 0; k--) {\n            if ((k < nrt) && (e[k] !== 0)) {\n                for (j = k + 1; j < n; j++) {\n                    t = 0;\n                    for (i = k + 1; i < n; i++) {\n                        t += V[i][k] * V[i][j];\n                    }\n                    t = -t / V[k + 1][k];\n                    for (i = k + 1; i < n; i++) {\n                        V[i][j] += t * V[i][k];\n                    }\n                }\n            }\n            for (i = 0; i < n; i++) {\n                V[i][k] = 0;\n            }\n            V[k][k] = 1;\n        }\n    }\n\n    var pp = p - 1,\n        iter = 0,\n        eps = Math.pow(2, -52);\n    while (p > 0) {\n        for (k = p - 2; k >= -1; k--) {\n            if (k === -1) {\n                break;\n            }\n            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n                e[k] = 0;\n                break;\n            }\n        }\n        if (k === p - 2) {\n            kase = 4;\n        } else {\n            for (ks = p - 1; ks >= k; ks--) {\n                if (ks === k) {\n                    break;\n                }\n                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n                if (Math.abs(s[ks]) <= eps * t) {\n                    s[ks] = 0;\n                    break;\n                }\n            }\n            if (ks === k) {\n                kase = 3;\n            } else if (ks === p - 1) {\n                kase = 1;\n            } else {\n                kase = 2;\n                k = ks;\n            }\n        }\n\n        k++;\n\n        switch (kase) {\n            case 1: {\n                f = e[p - 2];\n                e[p - 2] = 0;\n                for (j = p - 2; j >= k; j--) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    if (j !== k) {\n                        f = -sn * e[j - 1];\n                        e[j - 1] = cs * e[j - 1];\n                    }\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][p - 1];\n                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                            V[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 2 : {\n                f = e[k - 1];\n                e[k - 1] = 0;\n                for (j = k; j < p; j++) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    f = -sn * e[j];\n                    e[j] = cs * e[j];\n                    if (wantu) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][k - 1];\n                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 3 : {\n                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n                sp = s[p - 1] / scale;\n                spm1 = s[p - 2] / scale;\n                epm1 = e[p - 2] / scale;\n                sk = s[k] / scale;\n                ek = e[k] / scale;\n                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n                c = (sp * epm1) * (sp * epm1);\n                shift = 0;\n                if ((b !== 0) || (c !== 0)) {\n                    shift = Math.sqrt(b * b + c);\n                    if (b < 0) {\n                        shift = -shift;\n                    }\n                    shift = c / (b + shift);\n                }\n                f = (sk + sp) * (sk - sp) + shift;\n                g = sk * ek;\n                for (j = k; j < p - 1; j++) {\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    if (j !== k) {\n                        e[j - 1] = t;\n                    }\n                    f = cs * s[j] + sn * e[j];\n                    e[j] = cs * e[j] - sn * s[j];\n                    g = sn * s[j + 1];\n                    s[j + 1] = cs * s[j + 1];\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][j + 1];\n                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                            V[i][j] = t;\n                        }\n                    }\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    s[j] = t;\n                    f = cs * e[j] + sn * s[j + 1];\n                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n                    g = sn * e[j + 1];\n                    e[j + 1] = cs * e[j + 1];\n                    if (wantu && (j < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][j + 1];\n                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                e[p - 2] = f;\n                iter = iter + 1;\n                break;\n            }\n            case 4: {\n                if (s[k] <= 0) {\n                    s[k] = (s[k] < 0 ? -s[k] : 0);\n                    if (wantv) {\n                        for (i = 0; i <= pp; i++) {\n                            V[i][k] = -V[i][k];\n                        }\n                    }\n                }\n                while (k < pp) {\n                    if (s[k] >= s[k + 1]) {\n                        break;\n                    }\n                    t = s[k];\n                    s[k] = s[k + 1];\n                    s[k + 1] = t;\n                    if (wantv && (k < n - 1)) {\n                        for (i = 0; i < n; i++) {\n                            t = V[i][k + 1];\n                            V[i][k + 1] = V[i][k];\n                            V[i][k] = t;\n                        }\n                    }\n                    if (wantu && (k < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = U[i][k + 1];\n                            U[i][k + 1] = U[i][k];\n                            U[i][k] = t;\n                        }\n                    }\n                    k++;\n                }\n                iter = 0;\n                p--;\n                break;\n            }\n            // no default\n        }\n    }\n\n    if (swapped) {\n        var tmp = V;\n        V = U;\n        U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n}\n\nSingularValueDecomposition.prototype = {\n    get condition() {\n        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    get norm2() {\n        return this.s[0];\n    },\n    get rank() {\n        var eps = Math.pow(2, -52),\n            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n            r = 0,\n            s = this.s;\n        for (var i = 0, ii = s.length; i < ii; i++) {\n            if (s[i] > tol) {\n                r++;\n            }\n        }\n        return r;\n    },\n    get diagonal() {\n        return this.s;\n    },\n    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n    get threshold() {\n        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n    },\n    get leftSingularVectors() {\n        if (!Matrix.Matrix.isMatrix(this.U)) {\n            this.U = new Matrix.Matrix(this.U);\n        }\n        return this.U;\n    },\n    get rightSingularVectors() {\n        if (!Matrix.Matrix.isMatrix(this.V)) {\n            this.V = new Matrix.Matrix(this.V);\n        }\n        return this.V;\n    },\n    get diagonalMatrix() {\n        return Matrix.Matrix.diag(this.s);\n    },\n    solve: function (value) {\n\n        var Y = value,\n            e = this.threshold,\n            scols = this.s.length,\n            Ls = Matrix.Matrix.zeros(scols, scols),\n            i;\n\n        for (i = 0; i < scols; i++) {\n            if (Math.abs(this.s[i]) <= e) {\n                Ls[i][i] = 0;\n            } else {\n                Ls[i][i] = 1 / this.s[i];\n            }\n        }\n\n        var U = this.U;\n        var V = this.rightSingularVectors;\n\n        var VL = V.mmul(Ls),\n            vrows = V.rows,\n            urows = U.length,\n            VLU = Matrix.Matrix.zeros(vrows, urows),\n            j, k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < scols; k++) {\n                    sum += VL[i][k] * U[j][k];\n                }\n                VLU[i][j] = sum;\n            }\n        }\n\n        return VLU.mmul(Y);\n    },\n    solveForDiagonal: function (value) {\n        return this.solve(Matrix.Matrix.diag(value));\n    },\n    inverse: function () {\n        var V = this.V;\n        var e = this.threshold,\n            vrows = V.length,\n            vcols = V[0].length,\n            X = new Matrix.Matrix(vrows, this.s.length),\n            i, j;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < vcols; j++) {\n                if (Math.abs(this.s[j]) > e) {\n                    X[i][j] = V[i][j] / this.s[j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n\n        var U = this.U;\n\n        var urows = U.length,\n            ucols = U[0].length,\n            Y = new Matrix.Matrix(vrows, urows),\n            k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < ucols; k++) {\n                    sum += X[i][k] * U[j][k];\n                }\n                Y[i][j] = sum;\n            }\n        }\n\n        return Y;\n    }\n};\n\nmodule.exports = SingularValueDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/dc/svd.js","'use strict';\n\nmodule.exports = abstractMatrix;\n\nvar LuDecomposition = require('./dc/lu');\nvar SvDecomposition = require('./dc/svd');\nvar arrayUtils = require('ml-array-utils');\nvar util = require('./util');\nvar MatrixTransposeView = require('./views/transpose');\nvar MatrixRowView = require('./views/row');\nvar MatrixSubView = require('./views/sub');\nvar MatrixSelectionView = require('./views/selection');\nvar MatrixColumnView = require('./views/column');\nvar MatrixFlipRowView = require('./views/flipRow');\nvar MatrixFlipColumnView = require('./views/flipColumn');\n\nfunction abstractMatrix(superCtor) {\n    if (superCtor === undefined) superCtor = Object;\n\n    /**\n     * Real matrix\n     * @class Matrix\n     * @param {number|Array|Matrix} nRows - Number of rows of the new matrix,\n     * 2D array containing the data or Matrix instance to clone\n     * @param {number} [nColumns] - Number of columns of the new matrix\n     */\n    class Matrix extends superCtor {\n        static get [Symbol.species]() {\n            return this;\n        }\n\n        /**\n         * Constructs a Matrix with the chosen dimensions from a 1D array\n         * @param {number} newRows - Number of rows\n         * @param {number} newColumns - Number of columns\n         * @param {Array} newData - A 1D array containing data for the matrix\n         * @return {Matrix} - The new matrix\n         */\n        static from1DArray(newRows, newColumns, newData) {\n            var length = newRows * newColumns;\n            if (length !== newData.length) {\n                throw new RangeError('Data length does not match given dimensions');\n            }\n            var newMatrix = new this(newRows, newColumns);\n            for (var row = 0; row < newRows; row++) {\n                for (var column = 0; column < newColumns; column++) {\n                    newMatrix.set(row, column, newData[row * newColumns + column]);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Creates a row vector, a matrix with only one row.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n        static rowVector(newData) {\n            var vector = new this(1, newData.length);\n            for (var i = 0; i < newData.length; i++) {\n                vector.set(0, i, newData[i]);\n            }\n            return vector;\n        }\n\n        /**\n         * Creates a column vector, a matrix with only one column.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n        static columnVector(newData) {\n            var vector = new this(newData.length, 1);\n            for (var i = 0; i < newData.length; i++) {\n                vector.set(i, 0, newData[i]);\n            }\n            return vector;\n        }\n\n        /**\n         * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static empty(rows, columns) {\n            return new this(rows, columns);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be set to zero.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static zeros(rows, columns) {\n            return this.empty(rows, columns).fill(0);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be set to one.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static ones(rows, columns) {\n            return this.empty(rows, columns).fill(1);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be randomly set.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n        static rand(rows, columns, rng) {\n            if (rng === undefined) rng = Math.random;\n            var matrix = this.empty(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    matrix.set(i, j, rng());\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be random integers.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {number} [maxValue=1000] - Maximum value\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n        static randInt(rows, columns, maxValue, rng) {\n            if (maxValue === undefined) maxValue = 1000;\n            if (rng === undefined) rng = Math.random;\n            var matrix = this.empty(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    var value = Math.floor(rng() * maxValue);\n                    matrix.set(i, j, value);\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and others will be 0.\n         * @param {number} rows - Number of rows\n         * @param {number} [columns=rows] - Number of columns\n         * @param {number} [value=1] - Value to fill the diagonal with\n         * @return {Matrix} - The new identity matrix\n         */\n        static eye(rows, columns, value) {\n            if (columns === undefined) columns = rows;\n            if (value === undefined) value = 1;\n            var min = Math.min(rows, columns);\n            var matrix = this.zeros(rows, columns);\n            for (var i = 0; i < min; i++) {\n                matrix.set(i, i, value);\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates a diagonal matrix based on the given array.\n         * @param {Array} data - Array containing the data for the diagonal\n         * @param {number} [rows] - Number of rows (Default: data.length)\n         * @param {number} [columns] - Number of columns (Default: rows)\n         * @return {Matrix} - The new diagonal matrix\n         */\n        static diag(data, rows, columns) {\n            var l = data.length;\n            if (rows === undefined) rows = l;\n            if (columns === undefined) columns = rows;\n            var min = Math.min(l, rows, columns);\n            var matrix = this.zeros(rows, columns);\n            for (var i = 0; i < min; i++) {\n                matrix.set(i, i, data[i]);\n            }\n            return matrix;\n        }\n\n        /**\n         * Returns a matrix whose elements are the minimum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n        static min(matrix1, matrix2) {\n            matrix1 = this.checkMatrix(matrix1);\n            matrix2 = this.checkMatrix(matrix2);\n            var rows = matrix1.rows;\n            var columns = matrix1.columns;\n            var result = new this(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Returns a matrix whose elements are the maximum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n        static max(matrix1, matrix2) {\n            matrix1 = this.checkMatrix(matrix1);\n            matrix2 = this.checkMatrix(matrix2);\n            var rows = matrix1.rows;\n            var columns = matrix1.columns;\n            var result = new this(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Check that the provided value is a Matrix and tries to instantiate one if not\n         * @param {*} value - The value to check\n         * @return {Matrix}\n         */\n        static checkMatrix(value) {\n            return Matrix.isMatrix(value) ? value : new this(value);\n        }\n\n        /**\n         * Returns true if the argument is a Matrix, false otherwise\n         * @param {*} value - The value to check\n         * @return {boolean}\n         */\n        static isMatrix(value) {\n            return (value != null) && (value.klass === 'Matrix');\n        }\n\n        /**\n         * @prop {number} size - The number of elements in the matrix.\n         */\n        get size() {\n            return this.rows * this.columns;\n        }\n\n        /**\n         * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n         * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n         * @return {Matrix} this\n         */\n        apply(callback) {\n            if (typeof callback !== 'function') {\n                throw new TypeError('callback must be a function');\n            }\n            var ii = this.rows;\n            var jj = this.columns;\n            for (var i = 0; i < ii; i++) {\n                for (var j = 0; j < jj; j++) {\n                    callback.call(this, i, j);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Returns a new 1D array filled row by row with the matrix values\n         * @return {Array}\n         */\n        to1DArray() {\n            var array = new Array(this.size);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    array[i * this.columns + j] = this.get(i, j);\n                }\n            }\n            return array;\n        }\n\n        /**\n         * Returns a 2D array containing a copy of the data\n         * @return {Array}\n         */\n        to2DArray() {\n            var copy = new Array(this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                copy[i] = new Array(this.columns);\n                for (var j = 0; j < this.columns; j++) {\n                    copy[i][j] = this.get(i, j);\n                }\n            }\n            return copy;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one row\n         */\n        isRowVector() {\n            return this.rows === 1;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one column\n         */\n        isColumnVector() {\n            return this.columns === 1;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one row or one column\n         */\n        isVector() {\n            return (this.rows === 1) || (this.columns === 1);\n        }\n\n        /**\n         * @return {boolean} true if the matrix has the same number of rows and columns\n         */\n        isSquare() {\n            return this.rows === this.columns;\n        }\n\n        /**\n         * @return {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n         */\n        isSymmetric() {\n            if (this.isSquare()) {\n                for (var i = 0; i < this.rows; i++) {\n                    for (var j = 0; j <= i; j++) {\n                        if (this.get(i, j) !== this.get(j, i)) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            }\n            return false;\n        }\n\n        /**\n         * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @param {number} value - The new value for the element\n         * @return {Matrix} this\n         */\n        set(rowIndex, columnIndex, value) { // eslint-disable-line no-unused-vars\n            throw new Error('set method is unimplemented');\n        }\n\n        /**\n         * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @return {number}\n         */\n        get(rowIndex, columnIndex) { // eslint-disable-line no-unused-vars\n            throw new Error('get method is unimplemented');\n        }\n\n        /**\n         * Creates a new matrix that is a repetition of the current matrix. New matrix has rowRep times the number of\n         * rows of the matrix, and colRep times the number of columns of the matrix\n         * @param {number} rowRep - Number of times the rows should be repeated\n         * @param {number} colRep - Number of times the columns should be re\n         * @return {Matrix}\n         * @example\n         * var matrix = new Matrix([[1,2]]);\n         * matrix.repeat(2); // [[1,2],[1,2]]\n         */\n        repeat(rowRep, colRep) {\n            rowRep = rowRep || 1;\n            colRep = colRep || 1;\n            var matrix = new this.constructor[Symbol.species](this.rows * rowRep, this.columns * colRep);\n            for (var i = 0; i < rowRep; i++) {\n                for (var j = 0; j < colRep; j++) {\n                    matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Fills the matrix with a given value. All elements will be set to this value.\n         * @param {number} value - New value\n         * @return {Matrix} this\n         */\n        fill(value) {\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, value);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Negates the matrix. All elements will be multiplied by (-1)\n         * @return {Matrix} this\n         */\n        neg() {\n            return this.mulS(-1);\n        }\n\n        /**\n         * Returns a new array from the given row index\n         * @param {number} index - Row index\n         * @return {Array}\n         */\n        getRow(index) {\n            util.checkRowIndex(this, index);\n            var row = new Array(this.columns);\n            for (var i = 0; i < this.columns; i++) {\n                row[i] = this.get(index, i);\n            }\n            return row;\n        }\n\n        /**\n         * Returns a new row vector from the given row index\n         * @param {number} index - Row index\n         * @return {Matrix}\n         */\n        getRowVector(index) {\n            return this.constructor.rowVector(this.getRow(index));\n        }\n\n        /**\n         * Sets a row at the given index\n         * @param {number} index - Row index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n        setRow(index, array) {\n            util.checkRowIndex(this, index);\n            array = util.checkRowVector(this, array);\n            for (var i = 0; i < this.columns; i++) {\n                this.set(index, i, array[i]);\n            }\n            return this;\n        }\n\n        /**\n         * Swaps two rows\n         * @param {number} row1 - First row index\n         * @param {number} row2 - Second row index\n         * @return {Matrix} this\n         */\n        swapRows(row1, row2) {\n            util.checkRowIndex(this, row1);\n            util.checkRowIndex(this, row2);\n            for (var i = 0; i < this.columns; i++) {\n                var temp = this.get(row1, i);\n                this.set(row1, i, this.get(row2, i));\n                this.set(row2, i, temp);\n            }\n            return this;\n        }\n\n        /**\n         * Returns a new array from the given column index\n         * @param {number} index - Column index\n         * @return {Array}\n         */\n        getColumn(index) {\n            util.checkColumnIndex(this, index);\n            var column = new Array(this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                column[i] = this.get(i, index);\n            }\n            return column;\n        }\n\n        /**\n         * Returns a new column vector from the given column index\n         * @param {number} index - Column index\n         * @return {Matrix}\n         */\n        getColumnVector(index) {\n            return this.constructor.columnVector(this.getColumn(index));\n        }\n\n        /**\n         * Sets a column at the given index\n         * @param {number} index - Column index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n        setColumn(index, array) {\n            util.checkColumnIndex(this, index);\n            array = util.checkColumnVector(this, array);\n            for (var i = 0; i < this.rows; i++) {\n                this.set(i, index, array[i]);\n            }\n            return this;\n        }\n\n        /**\n         * Swaps two columns\n         * @param {number} column1 - First column index\n         * @param {number} column2 - Second column index\n         * @return {Matrix} this\n         */\n        swapColumns(column1, column2) {\n            util.checkColumnIndex(this, column1);\n            util.checkColumnIndex(this, column2);\n            for (var i = 0; i < this.rows; i++) {\n                var temp = this.get(i, column1);\n                this.set(i, column1, this.get(i, column2));\n                this.set(i, column2, temp);\n            }\n            return this;\n        }\n\n        /**\n         * Adds the values of a vector to each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        addRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) + vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Subtracts the values of a vector from each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        subRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) - vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a vector with each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        mulRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) * vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Divides the values of each row by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        divRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) / vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Adds the values of a vector to each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        addColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) + vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Subtracts the values of a vector from each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        subColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) - vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a vector with each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        mulColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) * vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Divides the values of each column by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        divColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) / vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a row with a scalar\n         * @param {number} index - Row index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n        mulRow(index, value) {\n            util.checkRowIndex(this, index);\n            for (var i = 0; i < this.columns; i++) {\n                this.set(index, i, this.get(index, i) * value);\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a column with a scalar\n         * @param {number} index - Column index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n        mulColumn(index, value) {\n            util.checkColumnIndex(this, index);\n            for (var i = 0; i < this.rows; i++) {\n                this.set(i, index, this.get(i, index) * value);\n            }\n            return this;\n        }\n\n        /**\n         * Returns the maximum value of the matrix\n         * @return {number}\n         */\n        max() {\n            var v = this.get(0, 0);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) > v) {\n                        v = this.get(i, j);\n                    }\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value\n         * @return {Array}\n         */\n        maxIndex() {\n            var v = this.get(0, 0);\n            var idx = [0, 0];\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) > v) {\n                        v = this.get(i, j);\n                        idx[0] = i;\n                        idx[1] = j;\n                    }\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of the matrix\n         * @return {number}\n         */\n        min() {\n            var v = this.get(0, 0);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) < v) {\n                        v = this.get(i, j);\n                    }\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the minimum value\n         * @return {Array}\n         */\n        minIndex() {\n            var v = this.get(0, 0);\n            var idx = [0, 0];\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) < v) {\n                        v = this.get(i, j);\n                        idx[0] = i;\n                        idx[1] = j;\n                    }\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the maximum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n        maxRow(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) > v) {\n                    v = this.get(row, i);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n        maxRowIndex(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            var idx = [row, 0];\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) > v) {\n                    v = this.get(row, i);\n                    idx[1] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n        minRow(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) < v) {\n                    v = this.get(row, i);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n        minRowIndex(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            var idx = [row, 0];\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) < v) {\n                    v = this.get(row, i);\n                    idx[1] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the maximum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n        maxColumn(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) > v) {\n                    v = this.get(i, column);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n        maxColumnIndex(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            var idx = [0, column];\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) > v) {\n                    v = this.get(i, column);\n                    idx[0] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n        minColumn(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) < v) {\n                    v = this.get(i, column);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the minimum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n        minColumnIndex(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            var idx = [0, column];\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) < v) {\n                    v = this.get(i, column);\n                    idx[0] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns an array containing the diagonal values of the matrix\n         * @return {Array}\n         */\n        diag() {\n            var min = Math.min(this.rows, this.columns);\n            var diag = new Array(min);\n            for (var i = 0; i < min; i++) {\n                diag[i] = this.get(i, i);\n            }\n            return diag;\n        }\n\n        /**\n         * Returns the sum by the argument given, if no argument given,\n         * it returns the sum of all elements of the matrix.\n         * @param {string} by - sum by 'row' or 'column'.\n         * @return {Matrix|number}\n         */\n        sum(by) {\n            switch (by) {\n                case 'row':\n                    return util.sumByRow(this);\n                case 'column':\n                    return util.sumByColumn(this);\n                default:\n                    return util.sumAll(this);\n            }\n        }\n\n        /**\n         * Returns the mean of all elements of the matrix\n         * @return {number}\n         */\n        mean() {\n            return this.sum() / this.size;\n        }\n\n        /**\n         * Returns the product of all elements of the matrix\n         * @return {number}\n         */\n        prod() {\n            var prod = 1;\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    prod *= this.get(i, j);\n                }\n            }\n            return prod;\n        }\n\n        /**\n         * Computes the cumulative sum of the matrix elements (in place, row by row)\n         * @return {Matrix} this\n         */\n        cumulativeSum() {\n            var sum = 0;\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    sum += this.get(i, j);\n                    this.set(i, j, sum);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Computes the dot (scalar) product between the matrix and another\n         * @param {Matrix} vector2 vector\n         * @return {number}\n         */\n        dot(vector2) {\n            if (Matrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n            var vector1 = this.to1DArray();\n            if (vector1.length !== vector2.length) {\n                throw new RangeError('vectors do not have the same size');\n            }\n            var dot = 0;\n            for (var i = 0; i < vector1.length; i++) {\n                dot += vector1[i] * vector2[i];\n            }\n            return dot;\n        }\n\n        /**\n         * Returns the matrix product between this and other\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n        mmul(other) {\n            other = this.constructor.checkMatrix(other);\n            if (this.columns !== other.rows) {\n                // eslint-disable-next-line no-console\n                console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n            }\n\n            var m = this.rows;\n            var n = this.columns;\n            var p = other.columns;\n\n            var result = new this.constructor[Symbol.species](m, p);\n\n            var Bcolj = new Array(n);\n            for (var j = 0; j < p; j++) {\n                for (var k = 0; k < n; k++) {\n                    Bcolj[k] = other.get(k, j);\n                }\n\n                for (var i = 0; i < m; i++) {\n                    var s = 0;\n                    for (k = 0; k < n; k++) {\n                        s += this.get(i, k) * Bcolj[k];\n                    }\n\n                    result.set(i, j, s);\n                }\n            }\n            return result;\n        }\n\n        strassen2x2(other) {\n            var result = new this.constructor[Symbol.species](2, 2);\n            const a11 = this.get(0, 0);\n            const b11 = other.get(0, 0);\n            const a12 = this.get(0, 1);\n            const b12 = other.get(0, 1);\n            const a21 = this.get(1, 0);\n            const b21 = other.get(1, 0);\n            const a22 = this.get(1, 1);\n            const b22 = other.get(1, 1);\n\n            // Compute intermediate values.\n            const m1 = (a11 + a22) * (b11 + b22);\n            const m2 = (a21 + a22) * b11;\n            const m3 = a11 * (b12 - b22);\n            const m4 = a22 * (b21 - b11);\n            const m5 = (a11 + a12) * b22;\n            const m6 = (a21 - a11) * (b11 + b12);\n            const m7 = (a12 - a22) * (b21 + b22);\n\n            // Combine intermediate values into the output.\n            const c00 = m1 + m4 - m5 + m7;\n            const c01 = m3 + m5;\n            const c10 = m2 + m4;\n            const c11 = m1 - m2 + m3 + m6;\n\n            result.set(0, 0, c00);\n            result.set(0, 1, c01);\n            result.set(1, 0, c10);\n            result.set(1, 1, c11);\n            return result;\n        }\n\n        strassen3x3(other) {\n            var result = new this.constructor[Symbol.species](3, 3);\n\n            const a00 = this.get(0, 0);\n            const a01 = this.get(0, 1);\n            const a02 = this.get(0, 2);\n            const a10 = this.get(1, 0);\n            const a11 = this.get(1, 1);\n            const a12 = this.get(1, 2);\n            const a20 = this.get(2, 0);\n            const a21 = this.get(2, 1);\n            const a22 = this.get(2, 2);\n\n            const b00 = other.get(0, 0);\n            const b01 = other.get(0, 1);\n            const b02 = other.get(0, 2);\n            const b10 = other.get(1, 0);\n            const b11 = other.get(1, 1);\n            const b12 = other.get(1, 2);\n            const b20 = other.get(2, 0);\n            const b21 = other.get(2, 1);\n            const b22 = other.get(2, 2);\n\n            const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n            const m2 = (a00 - a10) * (-b01 + b11);\n            const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n            const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n            const m5 = (a10 + a11) * (-b00 + b01);\n            const m6 = a00 * b00;\n            const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n            const m8 = (-a00 + a20) * (b02 - b12);\n            const m9 = (a20 + a21) * (-b00 + b02);\n            const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n            const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n            const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n            const m13 = (a02 - a22) * (b11 - b21);\n            const m14 = a02 * b20;\n            const m15 = (a21 + a22) * (-b20 + b21);\n            const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n            const m17 = (a02 - a12) * (b12 - b22);\n            const m18 = (a11 + a12) * (-b20 + b22);\n            const m19 = a01 * b10;\n            const m20 = a12 * b21;\n            const m21 = a10 * b02;\n            const m22 = a20 * b01;\n            const m23 = a22 * b22;\n\n            const c00 = m6 + m14 + m19;\n            const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n            const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n            const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n            const c11 = m2 + m4 + m5 + m6 + m20;\n            const c12 = m14 + m16 + m17 + m18 + m21;\n            const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n            const c21 = m12 + m13 + m14 + m15 + m22;\n            const c22 = m6 + m7 + m8 + m9 + m23;\n\n            result.set(0, 0, c00);\n            result.set(0, 1, c01);\n            result.set(0, 2, c02);\n            result.set(1, 0, c10);\n            result.set(1, 1, c11);\n            result.set(1, 2, c12);\n            result.set(2, 0, c20);\n            result.set(2, 1, c21);\n            result.set(2, 2, c22);\n            return result;\n        }\n\n        /**\n         * Returns the matrix product between x and y. More efficient than mmul(other) only when we multiply squared matrix and when the size of the matrix is > 1000.\n         * @param {Matrix} y\n         * @return {Matrix}\n         */\n        mmulStrassen(y) {\n            var x = this.clone();\n            var r1 = x.rows;\n            var c1 = x.columns;\n            var r2 = y.rows;\n            var c2 = y.columns;\n            if (c1 !== r2) {\n                // eslint-disable-next-line no-console\n                console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);\n            }\n\n            // Put a matrix into the top left of a matrix of zeros.\n            // `rows` and `cols` are the dimensions of the output matrix.\n            function embed(mat, rows, cols) {\n                var r = mat.rows;\n                var c = mat.columns;\n                if ((r === rows) && (c === cols)) {\n                    return mat;\n                } else {\n                    var resultat = Matrix.zeros(rows, cols);\n                    resultat = resultat.setSubMatrix(mat, 0, 0);\n                    return resultat;\n                }\n            }\n\n\n            // Make sure both matrices are the same size.\n            // This is exclusively for simplicity:\n            // this algorithm can be implemented with matrices of different sizes.\n\n            var r = Math.max(r1, r2);\n            var c = Math.max(c1, c2);\n            x = embed(x, r, c);\n            y = embed(y, r, c);\n\n            // Our recursive multiplication function.\n            function blockMult(a, b, rows, cols) {\n                // For small matrices, resort to naive multiplication.\n                if (rows <= 512 || cols <= 512) {\n                    return a.mmul(b); // a is equivalent to this\n                }\n\n                // Apply dynamic padding.\n                if ((rows % 2 === 1) && (cols % 2 === 1)) {\n                    a = embed(a, rows + 1, cols + 1);\n                    b = embed(b, rows + 1, cols + 1);\n                } else if (rows % 2 === 1) {\n                    a = embed(a, rows + 1, cols);\n                    b = embed(b, rows + 1, cols);\n                } else if (cols % 2 === 1) {\n                    a = embed(a, rows, cols + 1);\n                    b = embed(b, rows, cols + 1);\n                }\n\n                var halfRows = parseInt(a.rows / 2);\n                var halfCols = parseInt(a.columns / 2);\n                // Subdivide input matrices.\n                var a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n                var b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n                var a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n                var b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n                var a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n                var b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n                var a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n                var b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n                // Compute intermediate values.\n                var m1 = blockMult(Matrix.add(a11, a22), Matrix.add(b11, b22), halfRows, halfCols);\n                var m2 = blockMult(Matrix.add(a21, a22), b11, halfRows, halfCols);\n                var m3 = blockMult(a11, Matrix.sub(b12, b22), halfRows, halfCols);\n                var m4 = blockMult(a22, Matrix.sub(b21, b11), halfRows, halfCols);\n                var m5 = blockMult(Matrix.add(a11, a12), b22, halfRows, halfCols);\n                var m6 = blockMult(Matrix.sub(a21, a11), Matrix.add(b11, b12), halfRows, halfCols);\n                var m7 = blockMult(Matrix.sub(a12, a22), Matrix.add(b21, b22), halfRows, halfCols);\n\n                // Combine intermediate values into the output.\n                var c11 = Matrix.add(m1, m4);\n                c11.sub(m5);\n                c11.add(m7);\n                var c12 = Matrix.add(m3, m5);\n                var c21 = Matrix.add(m2, m4);\n                var c22 = Matrix.sub(m1, m2);\n                c22.add(m3);\n                c22.add(m6);\n\n                //Crop output to the desired size (undo dynamic padding).\n                var resultat = Matrix.zeros(2 * c11.rows, 2 * c11.columns);\n                resultat = resultat.setSubMatrix(c11, 0, 0);\n                resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n                resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n                resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n                return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n            }\n            return blockMult(x, y, r, c);\n        }\n\n        /**\n         * Returns a row-by-row scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The scaled matrix\n         */\n        scaleRows(min, max) {\n            min = min === undefined ? 0 : min;\n            max = max === undefined ? 1 : max;\n            if (min >= max) {\n                throw new RangeError('min should be strictly smaller than max');\n            }\n            var newMatrix = this.constructor.empty(this.rows, this.columns);\n            for (var i = 0; i < this.rows; i++) {\n                var scaled = arrayUtils.scale(this.getRow(i), {min, max});\n                newMatrix.setRow(i, scaled);\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a new column-by-column scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The new scaled matrix\n         * @example\n         * var matrix = new Matrix([[1,2],[-1,0]]);\n         * var scaledMatrix = matrix.scaleColumns(); // [[1,1],[0,0]]\n         */\n        scaleColumns(min, max) {\n            min = min === undefined ? 0 : min;\n            max = max === undefined ? 1 : max;\n            if (min >= max) {\n                throw new RangeError('min should be strictly smaller than max');\n            }\n            var newMatrix = this.constructor.empty(this.rows, this.columns);\n            for (var i = 0; i < this.columns; i++) {\n                var scaled = arrayUtils.scale(this.getColumn(i), {\n                    min: min,\n                    max: max\n                });\n                newMatrix.setColumn(i, scaled);\n            }\n            return newMatrix;\n        }\n\n\n        /**\n         * Returns the Kronecker product (also known as tensor product) between this and other\n         * See https://en.wikipedia.org/wiki/Kronecker_product\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n        kroneckerProduct(other) {\n            other = this.constructor.checkMatrix(other);\n\n            var m = this.rows;\n            var n = this.columns;\n            var p = other.rows;\n            var q = other.columns;\n\n            var result = new this.constructor[Symbol.species](m * p, n * q);\n            for (var i = 0; i < m; i++) {\n                for (var j = 0; j < n; j++) {\n                    for (var k = 0; k < p; k++) {\n                        for (var l = 0; l < q; l++) {\n                            result[p * i + k][q * j + l] = this.get(i, j) * other.get(k, l);\n                        }\n                    }\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Transposes the matrix and returns a new one containing the result\n         * @return {Matrix}\n         */\n        transpose() {\n            var result = new this.constructor[Symbol.species](this.columns, this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    result.set(j, i, this.get(i, j));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Sorts the rows (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n        sortRows(compareFunction) {\n            if (compareFunction === undefined) compareFunction = compareNumbers;\n            for (var i = 0; i < this.rows; i++) {\n                this.setRow(i, this.getRow(i).sort(compareFunction));\n            }\n            return this;\n        }\n\n        /**\n         * Sorts the columns (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n        sortColumns(compareFunction) {\n            if (compareFunction === undefined) compareFunction = compareNumbers;\n            for (var i = 0; i < this.columns; i++) {\n                this.setColumn(i, this.getColumn(i).sort(compareFunction));\n            }\n            return this;\n        }\n\n        /**\n         * Returns a subset of the matrix\n         * @param {number} startRow - First row index\n         * @param {number} endRow - Last row index\n         * @param {number} startColumn - First column index\n         * @param {number} endColumn - Last column index\n         * @return {Matrix}\n         */\n        subMatrix(startRow, endRow, startColumn, endColumn) {\n            util.checkRange(this, startRow, endRow, startColumn, endColumn);\n            var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, endColumn - startColumn + 1);\n            for (var i = startRow; i <= endRow; i++) {\n                for (var j = startColumn; j <= endColumn; j++) {\n                    newMatrix[i - startRow][j - startColumn] = this.get(i, j);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a subset of the matrix based on an array of row indices\n         * @param {Array} indices - Array containing the row indices\n         * @param {number} [startColumn = 0] - First column index\n         * @param {number} [endColumn = this.columns-1] - Last column index\n         * @return {Matrix}\n         */\n        subMatrixRow(indices, startColumn, endColumn) {\n            if (startColumn === undefined) startColumn = 0;\n            if (endColumn === undefined) endColumn = this.columns - 1;\n            if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns)) {\n                throw new RangeError('Argument out of range');\n            }\n\n            var newMatrix = new this.constructor[Symbol.species](indices.length, endColumn - startColumn + 1);\n            for (var i = 0; i < indices.length; i++) {\n                for (var j = startColumn; j <= endColumn; j++) {\n                    if (indices[i] < 0 || indices[i] >= this.rows) {\n                        throw new RangeError('Row index out of range: ' + indices[i]);\n                    }\n                    newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a subset of the matrix based on an array of column indices\n         * @param {Array} indices - Array containing the column indices\n         * @param {number} [startRow = 0] - First row index\n         * @param {number} [endRow = this.rows-1] - Last row index\n         * @return {Matrix}\n         */\n        subMatrixColumn(indices, startRow, endRow) {\n            if (startRow === undefined) startRow = 0;\n            if (endRow === undefined) endRow = this.rows - 1;\n            if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows)) {\n                throw new RangeError('Argument out of range');\n            }\n\n            var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, indices.length);\n            for (var i = 0; i < indices.length; i++) {\n                for (var j = startRow; j <= endRow; j++) {\n                    if (indices[i] < 0 || indices[i] >= this.columns) {\n                        throw new RangeError('Column index out of range: ' + indices[i]);\n                    }\n                    newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Set a part of the matrix to the given sub-matrix\n         * @param {Matrix|Array< Array >} matrix - The source matrix from which to extract values.\n         * @param {number} startRow - The index of the first row to set\n         * @param {number} startColumn - The index of the first column to set\n         * @return {Matrix}\n         */\n        setSubMatrix(matrix, startRow, startColumn) {\n            matrix = this.constructor.checkMatrix(matrix);\n            var endRow = startRow + matrix.rows - 1;\n            var endColumn = startColumn + matrix.columns - 1;\n            util.checkRange(this, startRow, endRow, startColumn, endColumn);\n            for (var i = 0; i < matrix.rows; i++) {\n                for (var j = 0; j < matrix.columns; j++) {\n                    this[startRow + i][startColumn + j] = matrix.get(i, j);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Return a new matrix based on a selection of rows and columns\n         * @param {Array<number>} rowIndices - The row indices to select. Order matters and an index can be more than once.\n         * @param {Array<number>} columnIndices - The column indices to select. Order matters and an index can be use more than once.\n         * @return {Matrix} The new matrix\n         */\n        selection(rowIndices, columnIndices) {\n            var indices = util.checkIndices(this, rowIndices, columnIndices);\n            var newMatrix = new this.constructor[Symbol.species](rowIndices.length, columnIndices.length);\n            for (var i = 0; i < indices.row.length; i++) {\n                var rowIndex = indices.row[i];\n                for (var j = 0; j < indices.column.length; j++) {\n                    var columnIndex = indices.column[j];\n                    newMatrix[i][j] = this.get(rowIndex, columnIndex);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns the trace of the matrix (sum of the diagonal elements)\n         * @return {number}\n         */\n        trace() {\n            var min = Math.min(this.rows, this.columns);\n            var trace = 0;\n            for (var i = 0; i < min; i++) {\n                trace += this.get(i, i);\n            }\n            return trace;\n        }\n\n        /*\n         Matrix views\n         */\n\n        /**\n         * Returns a view of the transposition of the matrix\n         * @return {MatrixTransposeView}\n         */\n        transposeView() {\n            return new MatrixTransposeView(this);\n        }\n\n        /**\n         * Returns a view of the row vector with the given index\n         * @param {number} row - row index of the vector\n         * @return {MatrixRowView}\n         */\n        rowView(row) {\n            util.checkRowIndex(this, row);\n            return new MatrixRowView(this, row);\n        }\n\n        /**\n         * Returns a view of the column vector with the given index\n         * @param {number} column - column index of the vector\n         * @return {MatrixColumnView}\n         */\n        columnView(column) {\n            util.checkColumnIndex(this, column);\n            return new MatrixColumnView(this, column);\n        }\n\n        /**\n         * Returns a view of the matrix flipped in the row axis\n         * @return {MatrixFlipRowView}\n         */\n        flipRowView() {\n            return new MatrixFlipRowView(this);\n        }\n\n        /**\n         * Returns a view of the matrix flipped in the column axis\n         * @return {MatrixFlipColumnView}\n         */\n        flipColumnView() {\n            return new MatrixFlipColumnView(this);\n        }\n\n        /**\n         * Returns a view of a submatrix giving the index boundaries\n         * @param {number} startRow - first row index of the submatrix\n         * @param {number} endRow - last row index of the submatrix\n         * @param {number} startColumn - first column index of the submatrix\n         * @param {number} endColumn - last column index of the submatrix\n         * @return {MatrixSubView}\n         */\n        subMatrixView(startRow, endRow, startColumn, endColumn) {\n            return new MatrixSubView(this, startRow, endRow, startColumn, endColumn);\n        }\n\n        /**\n         * Returns a view of the cross of the row indices and the column indices\n         * @example\n         * // resulting vector is [[2], [2]]\n         * var matrix = new Matrix([[1,2,3], [4,5,6]]).selectionView([0, 0], [1])\n         * @param {Array<number>} rowIndices\n         * @param {Array<number>} columnIndices\n         * @return {MatrixSelectionView}\n         */\n        selectionView(rowIndices, columnIndices) {\n            return new MatrixSelectionView(this, rowIndices, columnIndices);\n        }\n\n\n        /**\n        * Calculates and returns the determinant of a matrix as a Number\n        * @example\n        *   new Matrix([[1,2,3], [4,5,6]]).det()\n        * @return {number}\n        */\n        det() {\n            if (this.isSquare()) {\n                var a, b, c, d;\n                if (this.columns === 2) {\n                    // 2 x 2 matrix\n                    a = this.get(0, 0);\n                    b = this.get(0, 1);\n                    c = this.get(1, 0);\n                    d = this.get(1, 1);\n\n                    return a * d - (b * c);\n                } else if (this.columns === 3) {\n                    // 3 x 3 matrix\n                    var subMatrix0, subMatrix1, subMatrix2;\n                    subMatrix0 = this.selectionView([1, 2], [1, 2]);\n                    subMatrix1 = this.selectionView([1, 2], [0, 2]);\n                    subMatrix2 = this.selectionView([1, 2], [0, 1]);\n                    a = this.get(0, 0);\n                    b = this.get(0, 1);\n                    c = this.get(0, 2);\n\n                    return a * subMatrix0.det() - b * subMatrix1.det() + c * subMatrix2.det();\n                } else {\n                    // general purpose determinant using the LU decomposition\n                    return new LuDecomposition(this).determinant;\n                }\n\n            } else {\n                throw Error('Determinant can only be calculated for a square matrix.');\n            }\n        }\n\n        /**\n         * Returns inverse of a matrix if it exists or the pseudoinverse\n         * @param {number} threshold - threshold for taking inverse of singular values (default = 1e-15)\n         * @return {Matrix} the (pseudo)inverted matrix.\n         */\n        pseudoInverse(threshold) {\n            if (threshold === undefined) threshold = Number.EPSILON;\n            var svdSolution = new SvDecomposition(this, {autoTranspose: true});\n\n            var U = svdSolution.leftSingularVectors;\n            var V = svdSolution.rightSingularVectors;\n            var s = svdSolution.diagonal;\n\n            for (var i = 0; i < s.length; i++) {\n                if (Math.abs(s[i]) > threshold) {\n                    s[i] = 1.0 / s[i];\n                } else {\n                    s[i] = 0.0;\n                }\n            }\n\n            // convert list to diagonal\n            s = this.constructor[Symbol.species].diag(s);\n            return V.mmul(s.mmul(U.transposeView()));\n        }\n    }\n\n    Matrix.prototype.klass = 'Matrix';\n\n    /**\n     * @private\n     * Check that two matrices have the same dimensions\n     * @param {Matrix} matrix\n     * @param {Matrix} otherMatrix\n     */\n    function checkDimensions(matrix, otherMatrix) { // eslint-disable-line no-unused-vars\n        if (matrix.rows !== otherMatrix.rows ||\n            matrix.columns !== otherMatrix.columns) {\n            throw new RangeError('Matrices dimensions must be equal');\n        }\n    }\n\n    function compareNumbers(a, b) {\n        return a - b;\n    }\n\n    /*\n     Synonyms\n     */\n\n    Matrix.random = Matrix.rand;\n    Matrix.diagonal = Matrix.diag;\n    Matrix.prototype.diagonal = Matrix.prototype.diag;\n    Matrix.identity = Matrix.eye;\n    Matrix.prototype.negate = Matrix.prototype.neg;\n    Matrix.prototype.tensorProduct = Matrix.prototype.kroneckerProduct;\n    Matrix.prototype.determinant = Matrix.prototype.det;\n\n    /*\n     Add dynamically instance and static methods for mathematical operations\n     */\n\n    var inplaceOperator = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n    var inplaceOperatorScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% value);\n        }\n    }\n    return this;\n})\n`;\n\n    var inplaceOperatorMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    checkDimensions(this, matrix);\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% matrix.get(i, j));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticOperator = `\n(function %name%(matrix, value) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(value);\n})\n`;\n\n    var inplaceMethod = `\n(function %name%() {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticMethod = `\n(function %name%(matrix) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%();\n})\n`;\n\n    var inplaceMethodWithArgs = `\n(function %name%(%args%) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), %args%));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticMethodWithArgs = `\n(function %name%(matrix, %args%) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(%args%);\n})\n`;\n\n\n    var inplaceMethodWithOneArgScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), value));\n        }\n    }\n    return this;\n})\n`;\n    var inplaceMethodWithOneArgMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    checkDimensions(this, matrix);\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), matrix.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n    var inplaceMethodWithOneArg = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n    var staticMethodWithOneArg = staticMethodWithArgs;\n\n    var operators = [\n        // Arithmetic operators\n        ['+', 'add'],\n        ['-', 'sub', 'subtract'],\n        ['*', 'mul', 'multiply'],\n        ['/', 'div', 'divide'],\n        ['%', 'mod', 'modulus'],\n        // Bitwise operators\n        ['&', 'and'],\n        ['|', 'or'],\n        ['^', 'xor'],\n        ['<<', 'leftShift'],\n        ['>>', 'signPropagatingRightShift'],\n        ['>>>', 'rightShift', 'zeroFillRightShift']\n    ];\n\n    var i;\n\n    for (var operator of operators) {\n        var inplaceOp = eval(fillTemplateFunction(inplaceOperator, {name: operator[1], op: operator[0]}));\n        var inplaceOpS = eval(fillTemplateFunction(inplaceOperatorScalar, {name: operator[1] + 'S', op: operator[0]}));\n        var inplaceOpM = eval(fillTemplateFunction(inplaceOperatorMatrix, {name: operator[1] + 'M', op: operator[0]}));\n        var staticOp = eval(fillTemplateFunction(staticOperator, {name: operator[1]}));\n        for (i = 1; i < operator.length; i++) {\n            Matrix.prototype[operator[i]] = inplaceOp;\n            Matrix.prototype[operator[i] + 'S'] = inplaceOpS;\n            Matrix.prototype[operator[i] + 'M'] = inplaceOpM;\n            Matrix[operator[i]] = staticOp;\n        }\n    }\n\n    var methods = [\n        ['~', 'not']\n    ];\n\n    [\n        'abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cbrt', 'ceil',\n        'clz32', 'cos', 'cosh', 'exp', 'expm1', 'floor', 'fround', 'log', 'log1p',\n        'log10', 'log2', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc'\n    ].forEach(function (mathMethod) {\n        methods.push(['Math.' + mathMethod, mathMethod]);\n    });\n\n    for (var method of methods) {\n        var inplaceMeth = eval(fillTemplateFunction(inplaceMethod, {name: method[1], method: method[0]}));\n        var staticMeth = eval(fillTemplateFunction(staticMethod, {name: method[1]}));\n        for (i = 1; i < method.length; i++) {\n            Matrix.prototype[method[i]] = inplaceMeth;\n            Matrix[method[i]] = staticMeth;\n        }\n    }\n\n    var methodsWithArgs = [\n        ['Math.pow', 1, 'pow']\n    ];\n\n    for (var methodWithArg of methodsWithArgs) {\n        var args = 'arg0';\n        for (i = 1; i < methodWithArg[1]; i++) {\n            args += `, arg${i}`;\n        }\n        if (methodWithArg[1] !== 1) {\n            var inplaceMethWithArgs = eval(fillTemplateFunction(inplaceMethodWithArgs, {\n                name: methodWithArg[2],\n                method: methodWithArg[0],\n                args: args\n            }));\n            var staticMethWithArgs = eval(fillTemplateFunction(staticMethodWithArgs, {name: methodWithArg[2], args: args}));\n            for (i = 2; i < methodWithArg.length; i++) {\n                Matrix.prototype[methodWithArg[i]] = inplaceMethWithArgs;\n                Matrix[methodWithArg[i]] = staticMethWithArgs;\n            }\n        } else {\n            var tmplVar = {\n                name: methodWithArg[2],\n                args: args,\n                method: methodWithArg[0]\n            };\n            var inplaceMethod2 = eval(fillTemplateFunction(inplaceMethodWithOneArg, tmplVar));\n            var inplaceMethodS = eval(fillTemplateFunction(inplaceMethodWithOneArgScalar, tmplVar));\n            var inplaceMethodM = eval(fillTemplateFunction(inplaceMethodWithOneArgMatrix, tmplVar));\n            var staticMethod2 = eval(fillTemplateFunction(staticMethodWithOneArg, tmplVar));\n            for (i = 2; i < methodWithArg.length; i++) {\n                Matrix.prototype[methodWithArg[i]] = inplaceMethod2;\n                Matrix.prototype[methodWithArg[i] + 'M'] = inplaceMethodM;\n                Matrix.prototype[methodWithArg[i] + 'S'] = inplaceMethodS;\n                Matrix[methodWithArg[i]] = staticMethod2;\n            }\n        }\n    }\n\n    function fillTemplateFunction(template, values) {\n        for (var value in values) {\n            template = template.replace(new RegExp('%' + value + '%', 'g'), values[value]);\n        }\n        return template;\n    }\n\n    return Matrix;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/abstractMatrix.js","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\nfunction LuDecomposition(matrix) {\n    if (!(this instanceof LuDecomposition)) {\n        return new LuDecomposition(matrix);\n    }\n\n    matrix = Matrix.Matrix.checkMatrix(matrix);\n\n    var lu = matrix.clone(),\n        rows = lu.rows,\n        columns = lu.columns,\n        pivotVector = new Array(rows),\n        pivotSign = 1,\n        i, j, k, p, s, t, v,\n        LUrowi, LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n        pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n\n        for (i = 0; i < rows; i++) {\n            LUcolj[i] = lu[i][j];\n        }\n\n        for (i = 0; i < rows; i++) {\n            LUrowi = lu[i];\n            kmax = Math.min(i, j);\n            s = 0;\n            for (k = 0; k < kmax; k++) {\n                s += LUrowi[k] * LUcolj[k];\n            }\n            LUrowi[j] = LUcolj[i] -= s;\n        }\n\n        p = j;\n        for (i = j + 1; i < rows; i++) {\n            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n                p = i;\n            }\n        }\n\n        if (p !== j) {\n            for (k = 0; k < columns; k++) {\n                t = lu[p][k];\n                lu[p][k] = lu[j][k];\n                lu[j][k] = t;\n            }\n\n            v = pivotVector[p];\n            pivotVector[p] = pivotVector[j];\n            pivotVector[j] = v;\n\n            pivotSign = -pivotSign;\n        }\n\n        if (j < rows && lu[j][j] !== 0) {\n            for (i = j + 1; i < rows; i++) {\n                lu[i][j] /= lu[j][j];\n            }\n        }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n}\n\nLuDecomposition.prototype = {\n    isSingular: function () {\n        var data = this.LU,\n            col = data.columns;\n        for (var j = 0; j < col; j++) {\n            if (data[j][j] === 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    get determinant() {\n        var data = this.LU;\n        if (!data.isSquare()) {\n            throw new Error('Matrix must be square');\n        }\n        var determinant = this.pivotSign, col = data.columns;\n        for (var j = 0; j < col; j++) {\n            determinant *= data[j][j];\n        }\n        return determinant;\n    },\n    get lowerTriangularMatrix() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix.Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i > j) {\n                    X[i][j] = data[i][j];\n                } else if (i === j) {\n                    X[i][j] = 1;\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get upperTriangularMatrix() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix.Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i <= j) {\n                    X[i][j] = data[i][j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get pivotPermutationVector() {\n        return this.pivotVector.slice();\n    },\n    solve: function (value) {\n        value = Matrix.Matrix.checkMatrix(value);\n\n        var lu = this.LU,\n            rows = lu.rows;\n\n        if (rows !== value.rows) {\n            throw new Error('Invalid matrix dimensions');\n        }\n        if (this.isSingular()) {\n            throw new Error('LU matrix is singular');\n        }\n\n        var count = value.columns;\n        var X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n        var columns = lu.columns;\n        var i, j, k;\n\n        for (k = 0; k < columns; k++) {\n            for (i = k + 1; i < columns; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        for (k = columns - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= lu[k][k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = LuDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/dc/lu.js","'use strict';\n\nvar Matrix = require('../matrix');\nvar util = require('./util');\nvar hypotenuse = util.hypotenuse;\nvar getFilled2DArray = util.getFilled2DArray;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\nfunction SingularValueDecomposition(value, options) {\n    if (!(this instanceof SingularValueDecomposition)) {\n        return new SingularValueDecomposition(value, options);\n    }\n    value = Matrix.Matrix.checkMatrix(value);\n\n    options = options || {};\n\n    var m = value.rows,\n        n = value.columns,\n        nu = Math.min(m, n);\n\n    var wantu = true, wantv = true;\n    if (options.computeLeftSingularVectors === false) wantu = false;\n    if (options.computeRightSingularVectors === false) wantv = false;\n    var autoTranspose = options.autoTranspose === true;\n\n    var swapped = false;\n    var a;\n    if (m < n) {\n        if (!autoTranspose) {\n            a = value.clone();\n            // eslint-disable-next-line no-console\n            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n        } else {\n            a = value.transpose();\n            m = a.rows;\n            n = a.columns;\n            swapped = true;\n            var aux = wantu;\n            wantu = wantv;\n            wantv = aux;\n        }\n    } else {\n        a = value.clone();\n    }\n\n    var s = new Array(Math.min(m + 1, n)),\n        U = getFilled2DArray(m, nu, 0),\n        V = getFilled2DArray(n, n, 0),\n        e = new Array(n),\n        work = new Array(m);\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n\n    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\n    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n        if (k < nct) {\n            s[k] = 0;\n            for (i = k; i < m; i++) {\n                s[k] = hypotenuse(s[k], a[i][k]);\n            }\n            if (s[k] !== 0) {\n                if (a[k][k] < 0) {\n                    s[k] = -s[k];\n                }\n                for (i = k; i < m; i++) {\n                    a[i][k] /= s[k];\n                }\n                a[k][k] += 1;\n            }\n            s[k] = -s[k];\n        }\n\n        for (j = k + 1; j < n; j++) {\n            if ((k < nct) && (s[k] !== 0)) {\n                t = 0;\n                for (i = k; i < m; i++) {\n                    t += a[i][k] * a[i][j];\n                }\n                t = -t / a[k][k];\n                for (i = k; i < m; i++) {\n                    a[i][j] += t * a[i][k];\n                }\n            }\n            e[j] = a[k][j];\n        }\n\n        if (wantu && (k < nct)) {\n            for (i = k; i < m; i++) {\n                U[i][k] = a[i][k];\n            }\n        }\n\n        if (k < nrt) {\n            e[k] = 0;\n            for (i = k + 1; i < n; i++) {\n                e[k] = hypotenuse(e[k], e[i]);\n            }\n            if (e[k] !== 0) {\n                if (e[k + 1] < 0) {\n                    e[k] = 0 - e[k];\n                }\n                for (i = k + 1; i < n; i++) {\n                    e[i] /= e[k];\n                }\n                e[k + 1] += 1;\n            }\n            e[k] = -e[k];\n            if ((k + 1 < m) && (e[k] !== 0)) {\n                for (i = k + 1; i < m; i++) {\n                    work[i] = 0;\n                }\n                for (j = k + 1; j < n; j++) {\n                    for (i = k + 1; i < m; i++) {\n                        work[i] += e[j] * a[i][j];\n                    }\n                }\n                for (j = k + 1; j < n; j++) {\n                    t = -e[j] / e[k + 1];\n                    for (i = k + 1; i < m; i++) {\n                        a[i][j] += t * work[i];\n                    }\n                }\n            }\n            if (wantv) {\n                for (i = k + 1; i < n; i++) {\n                    V[i][k] = e[i];\n                }\n            }\n        }\n    }\n\n    p = Math.min(n, m + 1);\n    if (nct < n) {\n        s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n        s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n        e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n        for (j = nct; j < nu; j++) {\n            for (i = 0; i < m; i++) {\n                U[i][j] = 0;\n            }\n            U[j][j] = 1;\n        }\n        for (k = nct - 1; k >= 0; k--) {\n            if (s[k] !== 0) {\n                for (j = k + 1; j < nu; j++) {\n                    t = 0;\n                    for (i = k; i < m; i++) {\n                        t += U[i][k] * U[i][j];\n                    }\n                    t = -t / U[k][k];\n                    for (i = k; i < m; i++) {\n                        U[i][j] += t * U[i][k];\n                    }\n                }\n                for (i = k; i < m; i++) {\n                    U[i][k] = -U[i][k];\n                }\n                U[k][k] = 1 + U[k][k];\n                for (i = 0; i < k - 1; i++) {\n                    U[i][k] = 0;\n                }\n            } else {\n                for (i = 0; i < m; i++) {\n                    U[i][k] = 0;\n                }\n                U[k][k] = 1;\n            }\n        }\n    }\n\n    if (wantv) {\n        for (k = n - 1; k >= 0; k--) {\n            if ((k < nrt) && (e[k] !== 0)) {\n                for (j = k + 1; j < n; j++) {\n                    t = 0;\n                    for (i = k + 1; i < n; i++) {\n                        t += V[i][k] * V[i][j];\n                    }\n                    t = -t / V[k + 1][k];\n                    for (i = k + 1; i < n; i++) {\n                        V[i][j] += t * V[i][k];\n                    }\n                }\n            }\n            for (i = 0; i < n; i++) {\n                V[i][k] = 0;\n            }\n            V[k][k] = 1;\n        }\n    }\n\n    var pp = p - 1,\n        iter = 0,\n        eps = Math.pow(2, -52);\n    while (p > 0) {\n        for (k = p - 2; k >= -1; k--) {\n            if (k === -1) {\n                break;\n            }\n            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n                e[k] = 0;\n                break;\n            }\n        }\n        if (k === p - 2) {\n            kase = 4;\n        } else {\n            for (ks = p - 1; ks >= k; ks--) {\n                if (ks === k) {\n                    break;\n                }\n                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n                if (Math.abs(s[ks]) <= eps * t) {\n                    s[ks] = 0;\n                    break;\n                }\n            }\n            if (ks === k) {\n                kase = 3;\n            } else if (ks === p - 1) {\n                kase = 1;\n            } else {\n                kase = 2;\n                k = ks;\n            }\n        }\n\n        k++;\n\n        switch (kase) {\n            case 1: {\n                f = e[p - 2];\n                e[p - 2] = 0;\n                for (j = p - 2; j >= k; j--) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    if (j !== k) {\n                        f = -sn * e[j - 1];\n                        e[j - 1] = cs * e[j - 1];\n                    }\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][p - 1];\n                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                            V[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 2 : {\n                f = e[k - 1];\n                e[k - 1] = 0;\n                for (j = k; j < p; j++) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    f = -sn * e[j];\n                    e[j] = cs * e[j];\n                    if (wantu) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][k - 1];\n                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 3 : {\n                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n                sp = s[p - 1] / scale;\n                spm1 = s[p - 2] / scale;\n                epm1 = e[p - 2] / scale;\n                sk = s[k] / scale;\n                ek = e[k] / scale;\n                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n                c = (sp * epm1) * (sp * epm1);\n                shift = 0;\n                if ((b !== 0) || (c !== 0)) {\n                    shift = Math.sqrt(b * b + c);\n                    if (b < 0) {\n                        shift = -shift;\n                    }\n                    shift = c / (b + shift);\n                }\n                f = (sk + sp) * (sk - sp) + shift;\n                g = sk * ek;\n                for (j = k; j < p - 1; j++) {\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    if (j !== k) {\n                        e[j - 1] = t;\n                    }\n                    f = cs * s[j] + sn * e[j];\n                    e[j] = cs * e[j] - sn * s[j];\n                    g = sn * s[j + 1];\n                    s[j + 1] = cs * s[j + 1];\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][j + 1];\n                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                            V[i][j] = t;\n                        }\n                    }\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    s[j] = t;\n                    f = cs * e[j] + sn * s[j + 1];\n                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n                    g = sn * e[j + 1];\n                    e[j + 1] = cs * e[j + 1];\n                    if (wantu && (j < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][j + 1];\n                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                e[p - 2] = f;\n                iter = iter + 1;\n                break;\n            }\n            case 4: {\n                if (s[k] <= 0) {\n                    s[k] = (s[k] < 0 ? -s[k] : 0);\n                    if (wantv) {\n                        for (i = 0; i <= pp; i++) {\n                            V[i][k] = -V[i][k];\n                        }\n                    }\n                }\n                while (k < pp) {\n                    if (s[k] >= s[k + 1]) {\n                        break;\n                    }\n                    t = s[k];\n                    s[k] = s[k + 1];\n                    s[k + 1] = t;\n                    if (wantv && (k < n - 1)) {\n                        for (i = 0; i < n; i++) {\n                            t = V[i][k + 1];\n                            V[i][k + 1] = V[i][k];\n                            V[i][k] = t;\n                        }\n                    }\n                    if (wantu && (k < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = U[i][k + 1];\n                            U[i][k + 1] = U[i][k];\n                            U[i][k] = t;\n                        }\n                    }\n                    k++;\n                }\n                iter = 0;\n                p--;\n                break;\n            }\n            // no default\n        }\n    }\n\n    if (swapped) {\n        var tmp = V;\n        V = U;\n        U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n}\n\nSingularValueDecomposition.prototype = {\n    get condition() {\n        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    get norm2() {\n        return this.s[0];\n    },\n    get rank() {\n        var eps = Math.pow(2, -52),\n            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n            r = 0,\n            s = this.s;\n        for (var i = 0, ii = s.length; i < ii; i++) {\n            if (s[i] > tol) {\n                r++;\n            }\n        }\n        return r;\n    },\n    get diagonal() {\n        return this.s;\n    },\n    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n    get threshold() {\n        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n    },\n    get leftSingularVectors() {\n        if (!Matrix.Matrix.isMatrix(this.U)) {\n            this.U = new Matrix.Matrix(this.U);\n        }\n        return this.U;\n    },\n    get rightSingularVectors() {\n        if (!Matrix.Matrix.isMatrix(this.V)) {\n            this.V = new Matrix.Matrix(this.V);\n        }\n        return this.V;\n    },\n    get diagonalMatrix() {\n        return Matrix.Matrix.diag(this.s);\n    },\n    solve: function (value) {\n\n        var Y = value,\n            e = this.threshold,\n            scols = this.s.length,\n            Ls = Matrix.Matrix.zeros(scols, scols),\n            i;\n\n        for (i = 0; i < scols; i++) {\n            if (Math.abs(this.s[i]) <= e) {\n                Ls[i][i] = 0;\n            } else {\n                Ls[i][i] = 1 / this.s[i];\n            }\n        }\n\n        var U = this.U;\n        var V = this.rightSingularVectors;\n\n        var VL = V.mmul(Ls),\n            vrows = V.rows,\n            urows = U.length,\n            VLU = Matrix.Matrix.zeros(vrows, urows),\n            j, k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < scols; k++) {\n                    sum += VL[i][k] * U[j][k];\n                }\n                VLU[i][j] = sum;\n            }\n        }\n\n        return VLU.mmul(Y);\n    },\n    solveForDiagonal: function (value) {\n        return this.solve(Matrix.Matrix.diag(value));\n    },\n    inverse: function () {\n        var V = this.V;\n        var e = this.threshold,\n            vrows = V.length,\n            vcols = V[0].length,\n            X = new Matrix.Matrix(vrows, this.s.length),\n            i, j;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < vcols; j++) {\n                if (Math.abs(this.s[j]) > e) {\n                    X[i][j] = V[i][j] / this.s[j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n\n        var U = this.U;\n\n        var urows = U.length,\n            ucols = U[0].length,\n            Y = new Matrix.Matrix(vrows, urows),\n            k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < ucols; k++) {\n                    sum += X[i][k] * U[j][k];\n                }\n                Y[i][j] = sum;\n            }\n        }\n\n        return Y;\n    }\n};\n\nmodule.exports = SingularValueDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/dc/svd.js","/**\n *  Constructs a confusion matrix\n * @class ConfusionMatrix\n * @example\n * const CM = new ConfusionMatrix([[13, 2], [10, 5]], ['cat', 'dog'])\n * @param {Array<Array<number>>} matrix - The confusion matrix, a 2D Array. Rows represent the actual label and columns\n *     the predicted label.\n * @param {Array<any>} labels - Labels of the confusion matrix, a 1D Array\n */\nclass ConfusionMatrix {\n    constructor(matrix, labels) {\n        if (matrix.length !== matrix[0].length) {\n            throw new Error('Confusion matrix must be square');\n        }\n        if (labels.length !== matrix.length) {\n            throw new Error('Confusion matrix and labels should have the same length');\n        }\n        this.labels = labels;\n        this.matrix = matrix;\n    }\n\n\n    /**\n     * Construct confusion matrix from the predicted and actual labels (classes). Be sure to provide the arguments in\n     * the correct order!\n     * @param {Array<any>} actual  - The predicted labels of the classification\n     * @param {Array<any>} predicted     - The actual labels of the classification. Has to be of same length as\n     *     predicted.\n     * @param {object} [options] - Additional options\n     * @param {Array<any>} [options.labels] - The list of labels that should be used. If not provided the distinct set\n     *     of labels present in predicted and actual is used. Labels are compared using the strict equality operator\n     *     '==='\n     * @return {ConfusionMatrix} - Confusion matrix\n     */\n    static fromLabels(actual, predicted, options = {}) {\n        if (predicted.length !== actual.length) {\n            throw new Error('predicted and actual must have the same length');\n        }\n        let distinctLabels;\n        if (options.labels) {\n            distinctLabels = new Set(options.labels);\n        } else {\n            distinctLabels = new Set([...actual, ...predicted]);\n        }\n        distinctLabels = Array.from(distinctLabels);\n        if (options.sort) {\n            distinctLabels.sort(options.sort);\n        }\n\n        // Create confusion matrix and fill with 0's\n        const matrix = Array.from({length: distinctLabels.length});\n        for (let i = 0; i < matrix.length; i++) {\n            matrix[i] = new Array(matrix.length);\n            matrix[i].fill(0);\n        }\n\n        for (let i = 0; i < predicted.length; i++) {\n            const actualIdx = distinctLabels.indexOf(actual[i]);\n            const predictedIdx = distinctLabels.indexOf(predicted[i]);\n            if (actualIdx >= 0 && predictedIdx >= 0) {\n                matrix[actualIdx][predictedIdx]++;\n            }\n        }\n\n        return new ConfusionMatrix(matrix, distinctLabels);\n    }\n\n    /**\n     * Get the confusion matrix\n     * @return {Array<Array<number> >}\n     */\n    getMatrix() {\n        return this.matrix;\n    }\n\n    getLabels() {\n        return this.labels;\n    }\n\n    /**\n     * Get the total number of samples\n     * @return {number}\n     */\n    getTotalCount() {\n        let predicted = 0;\n        for (var i = 0; i < this.matrix.length; i++) {\n            for (var j = 0; j < this.matrix.length; j++) {\n                predicted += this.matrix[i][j];\n            }\n        }\n        return predicted;\n    }\n\n    /**\n     * Get the total number of true predictions\n     * @return {number}\n     */\n    getTrueCount() {\n        var count = 0;\n        for (var i = 0; i < this.matrix.length; i++) {\n            count += this.matrix[i][i];\n        }\n        return count;\n    }\n\n    /**\n     * Get the total number of false predictions.\n     * @return {number}\n     */\n    getFalseCount() {\n        return this.getTotalCount() - this.getTrueCount();\n    }\n\n    /**\n     * Get the number of true positive predictions.\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getTruePositiveCount(label) {\n        const index = this.getIndex(label);\n        return this.matrix[index][index];\n    }\n\n    /**\n     * Get the number of true negative predictions\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getTrueNegativeCount(label) {\n        const index = this.getIndex(label);\n        var count = 0;\n        for (var i = 0; i < this.matrix.length; i++) {\n            for (var j = 0; j < this.matrix.length; j++) {\n                if (i !== index && j !== index) {\n                    count += this.matrix[i][j];\n                }\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Get the number of false positive predictions.\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getFalsePositiveCount(label) {\n        const index = this.getIndex(label);\n        var count = 0;\n        for (var i = 0; i < this.matrix.length; i++) {\n            if (i !== index) {\n                count += this.matrix[i][index];\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Get the number of false negative predictions.\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getFalseNegativeCount(label) {\n        const index = this.getIndex(label);\n        var count = 0;\n        for (var i = 0; i < this.matrix.length; i++) {\n            if (i !== index) {\n                count += this.matrix[index][i];\n            }\n        }\n        return count;\n    }\n\n    /**\n     * Get the number of real positive samples.\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getPositiveCount(label) {\n        return this.getTruePositiveCount(label) + this.getFalseNegativeCount(label);\n    }\n\n    /**\n     * Get the number of real negative samples.\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getNegativeCount(label) {\n        return this.getTrueNegativeCount(label) + this.getFalsePositiveCount(label);\n    }\n\n    /**\n     * Get the index in the confusion matrix that corresponds to the given label\n     * @param {any} label - The label to search for\n     * @throws if the label is not found\n     * @return {number}\n     */\n    getIndex(label) {\n        const index = this.labels.indexOf(label);\n        if (index === -1) throw new Error('The label does not exist');\n        return index;\n    }\n\n    /**\n     * Get the true positive rate a.k.a. sensitivity. Computes the ratio between the number of true positive predictions and the total number of positive samples.\n     * {@link https://en.wikipedia.org/wiki/Sensitivity_and_specificity}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number} - The true positive rate [0-1]\n     */\n    getTruePositiveRate(label) {\n        return this.getTruePositiveCount(label) / this.getPositiveCount(label);\n    }\n\n    /**\n     * Get the true negative rate a.k.a. specificity. Computes the ration between the number of true negative predictions and the total number of negative samples.\n     * {@link https://en.wikipedia.org/wiki/Sensitivity_and_specificity}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getTrueNegativeRate(label) {\n        return this.getTrueNegativeCount(label) / this.getNegativeCount(label);\n    }\n\n    /**\n     * Get the positive predictive value a.k.a. precision. Computes TP / (TP + FP)\n     * {@link https://en.wikipedia.org/wiki/Positive_and_negative_predictive_values}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getPositivePredictiveValue(label) {\n        const TP = this.getTruePositiveCount(label);\n        return TP / (TP + this.getFalsePositiveCount(label));\n    }\n\n    /**\n     * Negative predictive value\n     * {@link https://en.wikipedia.org/wiki/Positive_and_negative_predictive_values}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getNegativePredictiveValue(label) {\n        const TN = this.getTrueNegativeCount(label);\n        return TN / (TN + this.getFalseNegativeCount(label));\n    }\n\n    /**\n     * False negative rate a.k.a. miss rate.\n     * {@link https://en.wikipedia.org/wiki/Type_I_and_type_II_errors#False_positive_and_false_negative_rates}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getFalseNegativeRate(label) {\n        return 1 - this.getTruePositiveRate(label);\n    }\n\n    /**\n     * False positive rate a.k.a. fall-out rate.\n     * {@link https://en.wikipedia.org/wiki/Type_I_and_type_II_errors#False_positive_and_false_negative_rates}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getFalsePositiveRate(label) {\n        return 1 - this.getTrueNegativeRate(label);\n    }\n\n    /**\n     * False discovery rate (FDR)\n     * {@link https://en.wikipedia.org/wiki/False_discovery_rate}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getFalseDiscoveryRate(label) {\n        const FP = this.getFalsePositiveCount(label);\n        return FP / (FP + this.getTruePositiveCount(label));\n    }\n\n    /**\n     * False omission rate (FOR)\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getFalseOmissionRate(label) {\n        const FN = this.getFalseNegativeCount(label);\n        return FN / (FN + this.getTruePositiveCount(label));\n    }\n\n    /**\n     * F1 score\n     * {@link https://en.wikipedia.org/wiki/F1_score}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getF1Score(label) {\n        const TP = this.getTruePositiveCount(label);\n        return 2 * TP / (2 * TP + this.getFalsePositiveCount(label) + this.getFalseNegativeCount(label));\n    }\n\n    /**\n     * Matthews correlation coefficient (MCC)\n     * {@link https://en.wikipedia.org/wiki/Matthews_correlation_coefficient}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getMatthewsCorrelationCoefficient(label) {\n        const TP = this.getTruePositiveCount(label);\n        const TN = this.getTrueNegativeCount(label);\n        const FP = this.getFalsePositiveCount(label);\n        const FN = this.getFalseNegativeCount(label);\n        return (TP * TN - FP * FN) / Math.sqrt((TP + FP) * (TP + FN) * (TN + FP) * (TN + FN));\n    }\n\n    /**\n     * Informedness\n     * {@link https://en.wikipedia.org/wiki/Youden%27s_J_statistic}\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getInformedness(label) {\n        return this.getTruePositiveRate(label) + this.getTrueNegativeRate(label) - 1;\n    }\n\n    /**\n     * Markedness\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {number}\n     */\n    getMarkedness(label) {\n        return this.getPositivePredictiveValue(label) + this.getNegativePredictiveValue(label) - 1;\n    }\n\n    /**\n     * Get the confusion table.\n     * @param {any} label - The label that should be considered \"positive\"\n     * @return {Array<Array<number> >} - The 2x2 confusion table. [[TP, FN], [FP, TN]]\n     */\n    getConfusionTable(label) {\n        return [\n            [\n                this.getTruePositiveCount(label),\n                this.getFalseNegativeCount(label)\n            ],\n            [\n                this.getFalsePositiveCount(label),\n                this.getTrueNegativeCount(label)\n            ]\n        ];\n    }\n\n    /**\n     * Get total accuracy.\n     * @return {number} - The ratio between the number of true predictions and total number of classifications ([0-1])\n     */\n    getAccuracy() {\n        let correct = 0;\n        let incorrect = 0;\n        for (var i = 0; i < this.matrix.length; i++) {\n            for (var j = 0; j < this.matrix.length; j++) {\n                if (i === j) correct += this.matrix[i][j];\n                else incorrect += this.matrix[i][j];\n            }\n        }\n        return correct / (correct + incorrect);\n    }\n\n\n    /**\n     * Returns the element in the confusion matrix that corresponds to the given actual and predicted labels.\n     * @param {any} actual - The true label\n     * @param {any} predicted - The predicted label\n     * @return {number} - The element in the confusion matrix\n     */\n    getCount(actual, predicted) {\n        const actualIndex = this.getIndex(actual);\n        const predictedIndex = this.getIndex(predicted);\n        return this.matrix[actualIndex][predictedIndex];\n    }\n\n    /**\n     * Compute the general prediction accuracy\n     * @deprecated Use getAccuracy\n     * @return {number} - The prediction accuracy ([0-1]\n     */\n    get accuracy() {\n        return this.getAccuracy();\n    }\n\n    /**\n     * Compute the number of predicted observations\n     * @deprecated Use getTotalCount\n     * @return {number}\n     */\n    get total() {\n        return this.getTotalCount();\n    }\n}\n\nmodule.exports = ConfusionMatrix;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-confusion-matrix/src/index.js","'use strict';\n\nvar Matrix = require('ml-matrix');\nvar Stat = require('ml-stat');\n\nmodule.exports.NaiveBayes = NaiveBayes;\nmodule.exports.separateClasses = separateClasses;\n\n/**\n * Constructor for the Naive Bayes classifier, the parameters here is just for loading purposes.\n *\n * @param reload\n * @param model\n * @constructor\n */\nfunction NaiveBayes(reload, model) {\n    if(reload) {\n        this.means = model.means;\n        this.calculateProbabilities = model.calculateProbabilities;\n    }\n}\n\n/**\n * Function that trains the classifier with a matrix that represents the training set and an array that\n * represents the label of each row in the training set. the labels must be numbers between 0 to n-1 where\n * n represents the number of classes.\n *\n * WARNING: in the case that one class, all the cases in one or more features have the same value, the\n * Naive Bayes classifier will not work well.\n * @param trainingSet\n * @param trainingLabels\n */\nNaiveBayes.prototype.train = function (trainingSet, trainingLabels) {\n    var C1 = Math.sqrt(2*Math.PI); // constant to precalculate the squared root\n    if(!Matrix.isMatrix(trainingSet)) trainingSet = new Matrix(trainingSet);\n    else trainingSet = trainingSet.clone();\n\n    if(trainingSet.rows !== trainingLabels.length)\n        throw new RangeError(\"the size of the training set and the training labels must be the same.\");\n\n    var separatedClasses = separateClasses(trainingSet, trainingLabels);\n    var calculateProbabilities = new Array(separatedClasses.length);\n    this.means = new Array(separatedClasses.length);\n    for(var i = 0; i < separatedClasses.length; ++i) {\n        var means = Stat.matrix.mean(separatedClasses[i]);\n        var std = Stat.matrix.standardDeviation(separatedClasses[i], means);\n\n        var logPriorProbability = Math.log(separatedClasses[i].rows / trainingSet.rows);\n        calculateProbabilities[i] = new Array(means.length + 1);\n\n        calculateProbabilities[i][0] = logPriorProbability;\n        for(var j = 1; j < means.length + 1; ++j) {\n            var currentStd = std[j - 1];\n            calculateProbabilities[i][j] = [(1 / (C1 * currentStd)), -2*currentStd*currentStd];\n        }\n\n        this.means[i] = means;\n    }\n\n    this.calculateProbabilities = calculateProbabilities;\n};\n\n/**\n * function that predicts each row of the dataset (must be a matrix).\n *\n * @param dataset\n * @returns {Array}\n */\nNaiveBayes.prototype.predict = function (dataset) {\n    if(dataset[0].length === this.calculateProbabilities[0].length)\n        throw new RangeError('the dataset must have the same features as the training set');\n\n    var predictions = new Array(dataset.length);\n\n    for(var i = 0; i < predictions.length; ++i) {\n        predictions[i] = getCurrentClass(dataset[i], this.means, this.calculateProbabilities);\n    }\n\n    return predictions;\n};\n\n/**\n * Function the retrieves a prediction with one case.\n *\n * @param currentCase\n * @param mean - Precalculated means of each class trained\n * @param classes - Precalculated value of each class (Prior probability and probability function of each feature)\n * @returns {number}\n */\nfunction getCurrentClass(currentCase, mean, classes) {\n    var maxProbability = 0;\n    var predictedClass = -1;\n\n    // going through all precalculated values for the classes\n    for(var i = 0; i < classes.length; ++i) {\n        var currentProbability = classes[i][0]; // initialize with the prior probability\n        for(var j = 1; j < classes[0][1].length + 1; ++j) {\n            currentProbability += calculateLogProbability(currentCase[j - 1], mean[i][j - 1], classes[i][j][0], classes[i][j][1]);\n        }\n\n        currentProbability = Math.exp(currentProbability);\n        if(currentProbability > maxProbability) {\n            maxProbability = currentProbability;\n            predictedClass = i;\n        }\n    }\n\n    return predictedClass;\n}\n\n/**\n * Function that export the NaiveBayes model.\n * @returns {{modelName: string, means: *, calculateProbabilities: *}}\n */\nNaiveBayes.prototype.export = function () {\n    return {\n        modelName: \"NaiveBayes\",\n        means: this.means,\n        calculateProbabilities: this.calculateProbabilities\n    };\n};\n\n/**\n * Function that create a Naive Bayes classifier with the given model.\n * @param model\n * @returns {NaiveBayes}\n */\nNaiveBayes.load = function (model) {\n    if(model.modelName !== 'NaiveBayes')\n        throw new RangeError(\"The given model is invalid!\");\n\n    return new NaiveBayes(true, model);\n};\n\n/**\n * function that retrieves the probability of the feature given the class.\n * @param value - value of the feature.\n * @param mean - mean of the feature for the given class.\n * @param C1 - precalculated value of (1 / (sqrt(2*pi) * std)).\n * @param C2 - precalculated value of (2 * std^2) for the denominator of the exponential.\n * @returns {number}\n */\nfunction calculateLogProbability(value, mean, C1, C2) {\n    var value = value - mean;\n    return Math.log(C1 * Math.exp((value * value) / C2))\n}\n\n/**\n * Function that retuns an array of matrices of the cases that belong to each class.\n * @param X - dataset\n * @param y - predictions\n * @returns {Array}\n */\nfunction separateClasses(X, y) {\n    var features = X.columns;\n\n    var classes = 0;\n    var totalPerClasses = new Array(100); // max upperbound of classes\n    for (var i = 0; i < y.length; i++) {\n        if(totalPerClasses[y[i]] === undefined) {\n            totalPerClasses[y[i]] = 0;\n            classes++;\n        }\n        totalPerClasses[y[i]]++;\n    }\n    var separatedClasses = new Array(classes);\n    var currentIndex = new Array(classes);\n    for(i = 0; i < classes; ++i) {\n        separatedClasses[i] = new Matrix(totalPerClasses[i], features);\n        currentIndex[i] = 0;\n    }\n    for(i = 0; i < X.rows; ++i) {\n        separatedClasses[y[i]].setRow(currentIndex[y[i]], X.getRow(i));\n        currentIndex[y[i]]++;\n    }\n    return separatedClasses;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-naivebayes/src/naiveBayes.js","'use strict';\n\nmodule.exports = abstractMatrix;\n\nvar LuDecomposition = require('./dc/lu');\nvar SvDecomposition = require('./dc/svd');\nvar arrayUtils = require('ml-array-utils');\nvar util = require('./util');\nvar MatrixTransposeView = require('./views/transpose');\nvar MatrixRowView = require('./views/row');\nvar MatrixSubView = require('./views/sub');\nvar MatrixSelectionView = require('./views/selection');\nvar MatrixColumnView = require('./views/column');\nvar MatrixFlipRowView = require('./views/flipRow');\nvar MatrixFlipColumnView = require('./views/flipColumn');\n\nfunction abstractMatrix(superCtor) {\n    if (superCtor === undefined) superCtor = Object;\n\n    /**\n     * Real matrix\n     * @class Matrix\n     * @param {number|Array|Matrix} nRows - Number of rows of the new matrix,\n     * 2D array containing the data or Matrix instance to clone\n     * @param {number} [nColumns] - Number of columns of the new matrix\n     */\n    class Matrix extends superCtor {\n        static get [Symbol.species]() {\n            return this;\n        }\n\n        /**\n         * Constructs a Matrix with the chosen dimensions from a 1D array\n         * @param {number} newRows - Number of rows\n         * @param {number} newColumns - Number of columns\n         * @param {Array} newData - A 1D array containing data for the matrix\n         * @return {Matrix} - The new matrix\n         */\n        static from1DArray(newRows, newColumns, newData) {\n            var length = newRows * newColumns;\n            if (length !== newData.length) {\n                throw new RangeError('Data length does not match given dimensions');\n            }\n            var newMatrix = new this(newRows, newColumns);\n            for (var row = 0; row < newRows; row++) {\n                for (var column = 0; column < newColumns; column++) {\n                    newMatrix.set(row, column, newData[row * newColumns + column]);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Creates a row vector, a matrix with only one row.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n        static rowVector(newData) {\n            var vector = new this(1, newData.length);\n            for (var i = 0; i < newData.length; i++) {\n                vector.set(0, i, newData[i]);\n            }\n            return vector;\n        }\n\n        /**\n         * Creates a column vector, a matrix with only one column.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n        static columnVector(newData) {\n            var vector = new this(newData.length, 1);\n            for (var i = 0; i < newData.length; i++) {\n                vector.set(i, 0, newData[i]);\n            }\n            return vector;\n        }\n\n        /**\n         * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static empty(rows, columns) {\n            return new this(rows, columns);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be set to zero.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static zeros(rows, columns) {\n            return this.empty(rows, columns).fill(0);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be set to one.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static ones(rows, columns) {\n            return this.empty(rows, columns).fill(1);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be randomly set.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n        static rand(rows, columns, rng) {\n            if (rng === undefined) rng = Math.random;\n            var matrix = this.empty(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    matrix.set(i, j, rng());\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be random integers.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {number} [maxValue=1000] - Maximum value\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n        static randInt(rows, columns, maxValue, rng) {\n            if (maxValue === undefined) maxValue = 1000;\n            if (rng === undefined) rng = Math.random;\n            var matrix = this.empty(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    var value = Math.floor(rng() * maxValue);\n                    matrix.set(i, j, value);\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and others will be 0.\n         * @param {number} rows - Number of rows\n         * @param {number} [columns=rows] - Number of columns\n         * @param {number} [value=1] - Value to fill the diagonal with\n         * @return {Matrix} - The new identity matrix\n         */\n        static eye(rows, columns, value) {\n            if (columns === undefined) columns = rows;\n            if (value === undefined) value = 1;\n            var min = Math.min(rows, columns);\n            var matrix = this.zeros(rows, columns);\n            for (var i = 0; i < min; i++) {\n                matrix.set(i, i, value);\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates a diagonal matrix based on the given array.\n         * @param {Array} data - Array containing the data for the diagonal\n         * @param {number} [rows] - Number of rows (Default: data.length)\n         * @param {number} [columns] - Number of columns (Default: rows)\n         * @return {Matrix} - The new diagonal matrix\n         */\n        static diag(data, rows, columns) {\n            var l = data.length;\n            if (rows === undefined) rows = l;\n            if (columns === undefined) columns = rows;\n            var min = Math.min(l, rows, columns);\n            var matrix = this.zeros(rows, columns);\n            for (var i = 0; i < min; i++) {\n                matrix.set(i, i, data[i]);\n            }\n            return matrix;\n        }\n\n        /**\n         * Returns a matrix whose elements are the minimum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n        static min(matrix1, matrix2) {\n            matrix1 = this.checkMatrix(matrix1);\n            matrix2 = this.checkMatrix(matrix2);\n            var rows = matrix1.rows;\n            var columns = matrix1.columns;\n            var result = new this(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Returns a matrix whose elements are the maximum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n        static max(matrix1, matrix2) {\n            matrix1 = this.checkMatrix(matrix1);\n            matrix2 = this.checkMatrix(matrix2);\n            var rows = matrix1.rows;\n            var columns = matrix1.columns;\n            var result = new this(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Check that the provided value is a Matrix and tries to instantiate one if not\n         * @param {*} value - The value to check\n         * @return {Matrix}\n         */\n        static checkMatrix(value) {\n            return Matrix.isMatrix(value) ? value : new this(value);\n        }\n\n        /**\n         * Returns true if the argument is a Matrix, false otherwise\n         * @param {*} value - The value to check\n         * @return {boolean}\n         */\n        static isMatrix(value) {\n            return (value != null) && (value.klass === 'Matrix');\n        }\n\n        /**\n         * @prop {number} size - The number of elements in the matrix.\n         */\n        get size() {\n            return this.rows * this.columns;\n        }\n\n        /**\n         * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n         * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n         * @return {Matrix} this\n         */\n        apply(callback) {\n            if (typeof callback !== 'function') {\n                throw new TypeError('callback must be a function');\n            }\n            var ii = this.rows;\n            var jj = this.columns;\n            for (var i = 0; i < ii; i++) {\n                for (var j = 0; j < jj; j++) {\n                    callback.call(this, i, j);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Returns a new 1D array filled row by row with the matrix values\n         * @return {Array}\n         */\n        to1DArray() {\n            var array = new Array(this.size);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    array[i * this.columns + j] = this.get(i, j);\n                }\n            }\n            return array;\n        }\n\n        /**\n         * Returns a 2D array containing a copy of the data\n         * @return {Array}\n         */\n        to2DArray() {\n            var copy = new Array(this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                copy[i] = new Array(this.columns);\n                for (var j = 0; j < this.columns; j++) {\n                    copy[i][j] = this.get(i, j);\n                }\n            }\n            return copy;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one row\n         */\n        isRowVector() {\n            return this.rows === 1;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one column\n         */\n        isColumnVector() {\n            return this.columns === 1;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one row or one column\n         */\n        isVector() {\n            return (this.rows === 1) || (this.columns === 1);\n        }\n\n        /**\n         * @return {boolean} true if the matrix has the same number of rows and columns\n         */\n        isSquare() {\n            return this.rows === this.columns;\n        }\n\n        /**\n         * @return {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n         */\n        isSymmetric() {\n            if (this.isSquare()) {\n                for (var i = 0; i < this.rows; i++) {\n                    for (var j = 0; j <= i; j++) {\n                        if (this.get(i, j) !== this.get(j, i)) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            }\n            return false;\n        }\n\n        /**\n         * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @param {number} value - The new value for the element\n         * @return {Matrix} this\n         */\n        set(rowIndex, columnIndex, value) { // eslint-disable-line no-unused-vars\n            throw new Error('set method is unimplemented');\n        }\n\n        /**\n         * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @return {number}\n         */\n        get(rowIndex, columnIndex) { // eslint-disable-line no-unused-vars\n            throw new Error('get method is unimplemented');\n        }\n\n        /**\n         * Creates a new matrix that is a repetition of the current matrix. New matrix has rowRep times the number of\n         * rows of the matrix, and colRep times the number of columns of the matrix\n         * @param {number} rowRep - Number of times the rows should be repeated\n         * @param {number} colRep - Number of times the columns should be re\n         * @return {Matrix}\n         * @example\n         * var matrix = new Matrix([[1,2]]);\n         * matrix.repeat(2); // [[1,2],[1,2]]\n         */\n        repeat(rowRep, colRep) {\n            rowRep = rowRep || 1;\n            colRep = colRep || 1;\n            var matrix = new this.constructor[Symbol.species](this.rows * rowRep, this.columns * colRep);\n            for (var i = 0; i < rowRep; i++) {\n                for (var j = 0; j < colRep; j++) {\n                    matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Fills the matrix with a given value. All elements will be set to this value.\n         * @param {number} value - New value\n         * @return {Matrix} this\n         */\n        fill(value) {\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, value);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Negates the matrix. All elements will be multiplied by (-1)\n         * @return {Matrix} this\n         */\n        neg() {\n            return this.mulS(-1);\n        }\n\n        /**\n         * Returns a new array from the given row index\n         * @param {number} index - Row index\n         * @return {Array}\n         */\n        getRow(index) {\n            util.checkRowIndex(this, index);\n            var row = new Array(this.columns);\n            for (var i = 0; i < this.columns; i++) {\n                row[i] = this.get(index, i);\n            }\n            return row;\n        }\n\n        /**\n         * Returns a new row vector from the given row index\n         * @param {number} index - Row index\n         * @return {Matrix}\n         */\n        getRowVector(index) {\n            return this.constructor.rowVector(this.getRow(index));\n        }\n\n        /**\n         * Sets a row at the given index\n         * @param {number} index - Row index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n        setRow(index, array) {\n            util.checkRowIndex(this, index);\n            array = util.checkRowVector(this, array);\n            for (var i = 0; i < this.columns; i++) {\n                this.set(index, i, array[i]);\n            }\n            return this;\n        }\n\n        /**\n         * Swaps two rows\n         * @param {number} row1 - First row index\n         * @param {number} row2 - Second row index\n         * @return {Matrix} this\n         */\n        swapRows(row1, row2) {\n            util.checkRowIndex(this, row1);\n            util.checkRowIndex(this, row2);\n            for (var i = 0; i < this.columns; i++) {\n                var temp = this.get(row1, i);\n                this.set(row1, i, this.get(row2, i));\n                this.set(row2, i, temp);\n            }\n            return this;\n        }\n\n        /**\n         * Returns a new array from the given column index\n         * @param {number} index - Column index\n         * @return {Array}\n         */\n        getColumn(index) {\n            util.checkColumnIndex(this, index);\n            var column = new Array(this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                column[i] = this.get(i, index);\n            }\n            return column;\n        }\n\n        /**\n         * Returns a new column vector from the given column index\n         * @param {number} index - Column index\n         * @return {Matrix}\n         */\n        getColumnVector(index) {\n            return this.constructor.columnVector(this.getColumn(index));\n        }\n\n        /**\n         * Sets a column at the given index\n         * @param {number} index - Column index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n        setColumn(index, array) {\n            util.checkColumnIndex(this, index);\n            array = util.checkColumnVector(this, array);\n            for (var i = 0; i < this.rows; i++) {\n                this.set(i, index, array[i]);\n            }\n            return this;\n        }\n\n        /**\n         * Swaps two columns\n         * @param {number} column1 - First column index\n         * @param {number} column2 - Second column index\n         * @return {Matrix} this\n         */\n        swapColumns(column1, column2) {\n            util.checkColumnIndex(this, column1);\n            util.checkColumnIndex(this, column2);\n            for (var i = 0; i < this.rows; i++) {\n                var temp = this.get(i, column1);\n                this.set(i, column1, this.get(i, column2));\n                this.set(i, column2, temp);\n            }\n            return this;\n        }\n\n        /**\n         * Adds the values of a vector to each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        addRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) + vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Subtracts the values of a vector from each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        subRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) - vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a vector with each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        mulRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) * vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Divides the values of each row by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        divRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) / vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Adds the values of a vector to each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        addColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) + vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Subtracts the values of a vector from each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        subColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) - vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a vector with each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        mulColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) * vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Divides the values of each column by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        divColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) / vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a row with a scalar\n         * @param {number} index - Row index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n        mulRow(index, value) {\n            util.checkRowIndex(this, index);\n            for (var i = 0; i < this.columns; i++) {\n                this.set(index, i, this.get(index, i) * value);\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a column with a scalar\n         * @param {number} index - Column index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n        mulColumn(index, value) {\n            util.checkColumnIndex(this, index);\n            for (var i = 0; i < this.rows; i++) {\n                this.set(i, index, this.get(i, index) * value);\n            }\n            return this;\n        }\n\n        /**\n         * Returns the maximum value of the matrix\n         * @return {number}\n         */\n        max() {\n            var v = this.get(0, 0);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) > v) {\n                        v = this.get(i, j);\n                    }\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value\n         * @return {Array}\n         */\n        maxIndex() {\n            var v = this.get(0, 0);\n            var idx = [0, 0];\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) > v) {\n                        v = this.get(i, j);\n                        idx[0] = i;\n                        idx[1] = j;\n                    }\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of the matrix\n         * @return {number}\n         */\n        min() {\n            var v = this.get(0, 0);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) < v) {\n                        v = this.get(i, j);\n                    }\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the minimum value\n         * @return {Array}\n         */\n        minIndex() {\n            var v = this.get(0, 0);\n            var idx = [0, 0];\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) < v) {\n                        v = this.get(i, j);\n                        idx[0] = i;\n                        idx[1] = j;\n                    }\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the maximum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n        maxRow(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) > v) {\n                    v = this.get(row, i);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n        maxRowIndex(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            var idx = [row, 0];\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) > v) {\n                    v = this.get(row, i);\n                    idx[1] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n        minRow(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) < v) {\n                    v = this.get(row, i);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n        minRowIndex(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            var idx = [row, 0];\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) < v) {\n                    v = this.get(row, i);\n                    idx[1] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the maximum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n        maxColumn(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) > v) {\n                    v = this.get(i, column);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n        maxColumnIndex(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            var idx = [0, column];\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) > v) {\n                    v = this.get(i, column);\n                    idx[0] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n        minColumn(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) < v) {\n                    v = this.get(i, column);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the minimum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n        minColumnIndex(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            var idx = [0, column];\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) < v) {\n                    v = this.get(i, column);\n                    idx[0] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns an array containing the diagonal values of the matrix\n         * @return {Array}\n         */\n        diag() {\n            var min = Math.min(this.rows, this.columns);\n            var diag = new Array(min);\n            for (var i = 0; i < min; i++) {\n                diag[i] = this.get(i, i);\n            }\n            return diag;\n        }\n\n        /**\n         * Returns the sum by the argument given, if no argument given,\n         * it returns the sum of all elements of the matrix.\n         * @param {string} by - sum by 'row' or 'column'.\n         * @return {Matrix|number}\n         */\n        sum(by) {\n            switch (by) {\n                case 'row':\n                    return util.sumByRow(this);\n                case 'column':\n                    return util.sumByColumn(this);\n                default:\n                    return util.sumAll(this);\n            }\n        }\n\n        /**\n         * Returns the mean of all elements of the matrix\n         * @return {number}\n         */\n        mean() {\n            return this.sum() / this.size;\n        }\n\n        /**\n         * Returns the product of all elements of the matrix\n         * @return {number}\n         */\n        prod() {\n            var prod = 1;\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    prod *= this.get(i, j);\n                }\n            }\n            return prod;\n        }\n\n        /**\n         * Computes the cumulative sum of the matrix elements (in place, row by row)\n         * @return {Matrix} this\n         */\n        cumulativeSum() {\n            var sum = 0;\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    sum += this.get(i, j);\n                    this.set(i, j, sum);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Computes the dot (scalar) product between the matrix and another\n         * @param {Matrix} vector2 vector\n         * @return {number}\n         */\n        dot(vector2) {\n            if (Matrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n            var vector1 = this.to1DArray();\n            if (vector1.length !== vector2.length) {\n                throw new RangeError('vectors do not have the same size');\n            }\n            var dot = 0;\n            for (var i = 0; i < vector1.length; i++) {\n                dot += vector1[i] * vector2[i];\n            }\n            return dot;\n        }\n\n        /**\n         * Returns the matrix product between this and other\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n        mmul(other) {\n            other = this.constructor.checkMatrix(other);\n            if (this.columns !== other.rows) {\n                // eslint-disable-next-line no-console\n                console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n            }\n\n            var m = this.rows;\n            var n = this.columns;\n            var p = other.columns;\n\n            var result = new this.constructor[Symbol.species](m, p);\n\n            var Bcolj = new Array(n);\n            for (var j = 0; j < p; j++) {\n                for (var k = 0; k < n; k++) {\n                    Bcolj[k] = other.get(k, j);\n                }\n\n                for (var i = 0; i < m; i++) {\n                    var s = 0;\n                    for (k = 0; k < n; k++) {\n                        s += this.get(i, k) * Bcolj[k];\n                    }\n\n                    result.set(i, j, s);\n                }\n            }\n            return result;\n        }\n\n        strassen2x2(other) {\n            var result = new this.constructor[Symbol.species](2, 2);\n            const a11 = this.get(0, 0);\n            const b11 = other.get(0, 0);\n            const a12 = this.get(0, 1);\n            const b12 = other.get(0, 1);\n            const a21 = this.get(1, 0);\n            const b21 = other.get(1, 0);\n            const a22 = this.get(1, 1);\n            const b22 = other.get(1, 1);\n\n            // Compute intermediate values.\n            const m1 = (a11 + a22) * (b11 + b22);\n            const m2 = (a21 + a22) * b11;\n            const m3 = a11 * (b12 - b22);\n            const m4 = a22 * (b21 - b11);\n            const m5 = (a11 + a12) * b22;\n            const m6 = (a21 - a11) * (b11 + b12);\n            const m7 = (a12 - a22) * (b21 + b22);\n\n            // Combine intermediate values into the output.\n            const c00 = m1 + m4 - m5 + m7;\n            const c01 = m3 + m5;\n            const c10 = m2 + m4;\n            const c11 = m1 - m2 + m3 + m6;\n\n            result.set(0, 0, c00);\n            result.set(0, 1, c01);\n            result.set(1, 0, c10);\n            result.set(1, 1, c11);\n            return result;\n        }\n\n        strassen3x3(other) {\n            var result = new this.constructor[Symbol.species](3, 3);\n\n            const a00 = this.get(0, 0);\n            const a01 = this.get(0, 1);\n            const a02 = this.get(0, 2);\n            const a10 = this.get(1, 0);\n            const a11 = this.get(1, 1);\n            const a12 = this.get(1, 2);\n            const a20 = this.get(2, 0);\n            const a21 = this.get(2, 1);\n            const a22 = this.get(2, 2);\n\n            const b00 = other.get(0, 0);\n            const b01 = other.get(0, 1);\n            const b02 = other.get(0, 2);\n            const b10 = other.get(1, 0);\n            const b11 = other.get(1, 1);\n            const b12 = other.get(1, 2);\n            const b20 = other.get(2, 0);\n            const b21 = other.get(2, 1);\n            const b22 = other.get(2, 2);\n\n            const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n            const m2 = (a00 - a10) * (-b01 + b11);\n            const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n            const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n            const m5 = (a10 + a11) * (-b00 + b01);\n            const m6 = a00 * b00;\n            const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n            const m8 = (-a00 + a20) * (b02 - b12);\n            const m9 = (a20 + a21) * (-b00 + b02);\n            const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n            const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n            const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n            const m13 = (a02 - a22) * (b11 - b21);\n            const m14 = a02 * b20;\n            const m15 = (a21 + a22) * (-b20 + b21);\n            const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n            const m17 = (a02 - a12) * (b12 - b22);\n            const m18 = (a11 + a12) * (-b20 + b22);\n            const m19 = a01 * b10;\n            const m20 = a12 * b21;\n            const m21 = a10 * b02;\n            const m22 = a20 * b01;\n            const m23 = a22 * b22;\n\n            const c00 = m6 + m14 + m19;\n            const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n            const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n            const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n            const c11 = m2 + m4 + m5 + m6 + m20;\n            const c12 = m14 + m16 + m17 + m18 + m21;\n            const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n            const c21 = m12 + m13 + m14 + m15 + m22;\n            const c22 = m6 + m7 + m8 + m9 + m23;\n\n            result.set(0, 0, c00);\n            result.set(0, 1, c01);\n            result.set(0, 2, c02);\n            result.set(1, 0, c10);\n            result.set(1, 1, c11);\n            result.set(1, 2, c12);\n            result.set(2, 0, c20);\n            result.set(2, 1, c21);\n            result.set(2, 2, c22);\n            return result;\n        }\n\n        /**\n         * Returns the matrix product between x and y. More efficient than mmul(other) only when we multiply squared matrix and when the size of the matrix is > 1000.\n         * @param {Matrix} y\n         * @return {Matrix}\n         */\n        mmulStrassen(y) {\n            var x = this.clone();\n            var r1 = x.rows;\n            var c1 = x.columns;\n            var r2 = y.rows;\n            var c2 = y.columns;\n            if (c1 !== r2) {\n                // eslint-disable-next-line no-console\n                console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);\n            }\n\n            // Put a matrix into the top left of a matrix of zeros.\n            // `rows` and `cols` are the dimensions of the output matrix.\n            function embed(mat, rows, cols) {\n                var r = mat.rows;\n                var c = mat.columns;\n                if ((r === rows) && (c === cols)) {\n                    return mat;\n                } else {\n                    var resultat = Matrix.zeros(rows, cols);\n                    resultat = resultat.setSubMatrix(mat, 0, 0);\n                    return resultat;\n                }\n            }\n\n\n            // Make sure both matrices are the same size.\n            // This is exclusively for simplicity:\n            // this algorithm can be implemented with matrices of different sizes.\n\n            var r = Math.max(r1, r2);\n            var c = Math.max(c1, c2);\n            x = embed(x, r, c);\n            y = embed(y, r, c);\n\n            // Our recursive multiplication function.\n            function blockMult(a, b, rows, cols) {\n                // For small matrices, resort to naive multiplication.\n                if (rows <= 512 || cols <= 512) {\n                    return a.mmul(b); // a is equivalent to this\n                }\n\n                // Apply dynamic padding.\n                if ((rows % 2 === 1) && (cols % 2 === 1)) {\n                    a = embed(a, rows + 1, cols + 1);\n                    b = embed(b, rows + 1, cols + 1);\n                } else if (rows % 2 === 1) {\n                    a = embed(a, rows + 1, cols);\n                    b = embed(b, rows + 1, cols);\n                } else if (cols % 2 === 1) {\n                    a = embed(a, rows, cols + 1);\n                    b = embed(b, rows, cols + 1);\n                }\n\n                var halfRows = parseInt(a.rows / 2);\n                var halfCols = parseInt(a.columns / 2);\n                // Subdivide input matrices.\n                var a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n                var b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n                var a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n                var b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n                var a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n                var b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n                var a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n                var b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n                // Compute intermediate values.\n                var m1 = blockMult(Matrix.add(a11, a22), Matrix.add(b11, b22), halfRows, halfCols);\n                var m2 = blockMult(Matrix.add(a21, a22), b11, halfRows, halfCols);\n                var m3 = blockMult(a11, Matrix.sub(b12, b22), halfRows, halfCols);\n                var m4 = blockMult(a22, Matrix.sub(b21, b11), halfRows, halfCols);\n                var m5 = blockMult(Matrix.add(a11, a12), b22, halfRows, halfCols);\n                var m6 = blockMult(Matrix.sub(a21, a11), Matrix.add(b11, b12), halfRows, halfCols);\n                var m7 = blockMult(Matrix.sub(a12, a22), Matrix.add(b21, b22), halfRows, halfCols);\n\n                // Combine intermediate values into the output.\n                var c11 = Matrix.add(m1, m4);\n                c11.sub(m5);\n                c11.add(m7);\n                var c12 = Matrix.add(m3, m5);\n                var c21 = Matrix.add(m2, m4);\n                var c22 = Matrix.sub(m1, m2);\n                c22.add(m3);\n                c22.add(m6);\n\n                //Crop output to the desired size (undo dynamic padding).\n                var resultat = Matrix.zeros(2 * c11.rows, 2 * c11.columns);\n                resultat = resultat.setSubMatrix(c11, 0, 0);\n                resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n                resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n                resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n                return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n            }\n            return blockMult(x, y, r, c);\n        }\n\n        /**\n         * Returns a row-by-row scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The scaled matrix\n         */\n        scaleRows(min, max) {\n            min = min === undefined ? 0 : min;\n            max = max === undefined ? 1 : max;\n            if (min >= max) {\n                throw new RangeError('min should be strictly smaller than max');\n            }\n            var newMatrix = this.constructor.empty(this.rows, this.columns);\n            for (var i = 0; i < this.rows; i++) {\n                var scaled = arrayUtils.scale(this.getRow(i), {min, max});\n                newMatrix.setRow(i, scaled);\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a new column-by-column scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The new scaled matrix\n         * @example\n         * var matrix = new Matrix([[1,2],[-1,0]]);\n         * var scaledMatrix = matrix.scaleColumns(); // [[1,1],[0,0]]\n         */\n        scaleColumns(min, max) {\n            min = min === undefined ? 0 : min;\n            max = max === undefined ? 1 : max;\n            if (min >= max) {\n                throw new RangeError('min should be strictly smaller than max');\n            }\n            var newMatrix = this.constructor.empty(this.rows, this.columns);\n            for (var i = 0; i < this.columns; i++) {\n                var scaled = arrayUtils.scale(this.getColumn(i), {\n                    min: min,\n                    max: max\n                });\n                newMatrix.setColumn(i, scaled);\n            }\n            return newMatrix;\n        }\n\n\n        /**\n         * Returns the Kronecker product (also known as tensor product) between this and other\n         * See https://en.wikipedia.org/wiki/Kronecker_product\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n        kroneckerProduct(other) {\n            other = this.constructor.checkMatrix(other);\n\n            var m = this.rows;\n            var n = this.columns;\n            var p = other.rows;\n            var q = other.columns;\n\n            var result = new this.constructor[Symbol.species](m * p, n * q);\n            for (var i = 0; i < m; i++) {\n                for (var j = 0; j < n; j++) {\n                    for (var k = 0; k < p; k++) {\n                        for (var l = 0; l < q; l++) {\n                            result[p * i + k][q * j + l] = this.get(i, j) * other.get(k, l);\n                        }\n                    }\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Transposes the matrix and returns a new one containing the result\n         * @return {Matrix}\n         */\n        transpose() {\n            var result = new this.constructor[Symbol.species](this.columns, this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    result.set(j, i, this.get(i, j));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Sorts the rows (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n        sortRows(compareFunction) {\n            if (compareFunction === undefined) compareFunction = compareNumbers;\n            for (var i = 0; i < this.rows; i++) {\n                this.setRow(i, this.getRow(i).sort(compareFunction));\n            }\n            return this;\n        }\n\n        /**\n         * Sorts the columns (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n        sortColumns(compareFunction) {\n            if (compareFunction === undefined) compareFunction = compareNumbers;\n            for (var i = 0; i < this.columns; i++) {\n                this.setColumn(i, this.getColumn(i).sort(compareFunction));\n            }\n            return this;\n        }\n\n        /**\n         * Returns a subset of the matrix\n         * @param {number} startRow - First row index\n         * @param {number} endRow - Last row index\n         * @param {number} startColumn - First column index\n         * @param {number} endColumn - Last column index\n         * @return {Matrix}\n         */\n        subMatrix(startRow, endRow, startColumn, endColumn) {\n            util.checkRange(this, startRow, endRow, startColumn, endColumn);\n            var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, endColumn - startColumn + 1);\n            for (var i = startRow; i <= endRow; i++) {\n                for (var j = startColumn; j <= endColumn; j++) {\n                    newMatrix[i - startRow][j - startColumn] = this.get(i, j);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a subset of the matrix based on an array of row indices\n         * @param {Array} indices - Array containing the row indices\n         * @param {number} [startColumn = 0] - First column index\n         * @param {number} [endColumn = this.columns-1] - Last column index\n         * @return {Matrix}\n         */\n        subMatrixRow(indices, startColumn, endColumn) {\n            if (startColumn === undefined) startColumn = 0;\n            if (endColumn === undefined) endColumn = this.columns - 1;\n            if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns)) {\n                throw new RangeError('Argument out of range');\n            }\n\n            var newMatrix = new this.constructor[Symbol.species](indices.length, endColumn - startColumn + 1);\n            for (var i = 0; i < indices.length; i++) {\n                for (var j = startColumn; j <= endColumn; j++) {\n                    if (indices[i] < 0 || indices[i] >= this.rows) {\n                        throw new RangeError('Row index out of range: ' + indices[i]);\n                    }\n                    newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a subset of the matrix based on an array of column indices\n         * @param {Array} indices - Array containing the column indices\n         * @param {number} [startRow = 0] - First row index\n         * @param {number} [endRow = this.rows-1] - Last row index\n         * @return {Matrix}\n         */\n        subMatrixColumn(indices, startRow, endRow) {\n            if (startRow === undefined) startRow = 0;\n            if (endRow === undefined) endRow = this.rows - 1;\n            if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows)) {\n                throw new RangeError('Argument out of range');\n            }\n\n            var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, indices.length);\n            for (var i = 0; i < indices.length; i++) {\n                for (var j = startRow; j <= endRow; j++) {\n                    if (indices[i] < 0 || indices[i] >= this.columns) {\n                        throw new RangeError('Column index out of range: ' + indices[i]);\n                    }\n                    newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Set a part of the matrix to the given sub-matrix\n         * @param {Matrix|Array< Array >} matrix - The source matrix from which to extract values.\n         * @param {number} startRow - The index of the first row to set\n         * @param {number} startColumn - The index of the first column to set\n         * @return {Matrix}\n         */\n        setSubMatrix(matrix, startRow, startColumn) {\n            matrix = this.constructor.checkMatrix(matrix);\n            var endRow = startRow + matrix.rows - 1;\n            var endColumn = startColumn + matrix.columns - 1;\n            util.checkRange(this, startRow, endRow, startColumn, endColumn);\n            for (var i = 0; i < matrix.rows; i++) {\n                for (var j = 0; j < matrix.columns; j++) {\n                    this[startRow + i][startColumn + j] = matrix.get(i, j);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Return a new matrix based on a selection of rows and columns\n         * @param {Array<number>} rowIndices - The row indices to select. Order matters and an index can be more than once.\n         * @param {Array<number>} columnIndices - The column indices to select. Order matters and an index can be use more than once.\n         * @return {Matrix} The new matrix\n         */\n        selection(rowIndices, columnIndices) {\n            var indices = util.checkIndices(this, rowIndices, columnIndices);\n            var newMatrix = new this.constructor[Symbol.species](rowIndices.length, columnIndices.length);\n            for (var i = 0; i < indices.row.length; i++) {\n                var rowIndex = indices.row[i];\n                for (var j = 0; j < indices.column.length; j++) {\n                    var columnIndex = indices.column[j];\n                    newMatrix[i][j] = this.get(rowIndex, columnIndex);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns the trace of the matrix (sum of the diagonal elements)\n         * @return {number}\n         */\n        trace() {\n            var min = Math.min(this.rows, this.columns);\n            var trace = 0;\n            for (var i = 0; i < min; i++) {\n                trace += this.get(i, i);\n            }\n            return trace;\n        }\n\n        /*\n         Matrix views\n         */\n\n        /**\n         * Returns a view of the transposition of the matrix\n         * @return {MatrixTransposeView}\n         */\n        transposeView() {\n            return new MatrixTransposeView(this);\n        }\n\n        /**\n         * Returns a view of the row vector with the given index\n         * @param {number} row - row index of the vector\n         * @return {MatrixRowView}\n         */\n        rowView(row) {\n            util.checkRowIndex(this, row);\n            return new MatrixRowView(this, row);\n        }\n\n        /**\n         * Returns a view of the column vector with the given index\n         * @param {number} column - column index of the vector\n         * @return {MatrixColumnView}\n         */\n        columnView(column) {\n            util.checkColumnIndex(this, column);\n            return new MatrixColumnView(this, column);\n        }\n\n        /**\n         * Returns a view of the matrix flipped in the row axis\n         * @return {MatrixFlipRowView}\n         */\n        flipRowView() {\n            return new MatrixFlipRowView(this);\n        }\n\n        /**\n         * Returns a view of the matrix flipped in the column axis\n         * @return {MatrixFlipColumnView}\n         */\n        flipColumnView() {\n            return new MatrixFlipColumnView(this);\n        }\n\n        /**\n         * Returns a view of a submatrix giving the index boundaries\n         * @param {number} startRow - first row index of the submatrix\n         * @param {number} endRow - last row index of the submatrix\n         * @param {number} startColumn - first column index of the submatrix\n         * @param {number} endColumn - last column index of the submatrix\n         * @return {MatrixSubView}\n         */\n        subMatrixView(startRow, endRow, startColumn, endColumn) {\n            return new MatrixSubView(this, startRow, endRow, startColumn, endColumn);\n        }\n\n        /**\n         * Returns a view of the cross of the row indices and the column indices\n         * @example\n         * // resulting vector is [[2], [2]]\n         * var matrix = new Matrix([[1,2,3], [4,5,6]]).selectionView([0, 0], [1])\n         * @param {Array<number>} rowIndices\n         * @param {Array<number>} columnIndices\n         * @return {MatrixSelectionView}\n         */\n        selectionView(rowIndices, columnIndices) {\n            return new MatrixSelectionView(this, rowIndices, columnIndices);\n        }\n\n\n        /**\n        * Calculates and returns the determinant of a matrix as a Number\n        * @example\n        *   new Matrix([[1,2,3], [4,5,6]]).det()\n        * @return {number}\n        */\n        det() {\n            if (this.isSquare()) {\n                var a, b, c, d;\n                if (this.columns === 2) {\n                    // 2 x 2 matrix\n                    a = this.get(0, 0);\n                    b = this.get(0, 1);\n                    c = this.get(1, 0);\n                    d = this.get(1, 1);\n\n                    return a * d - (b * c);\n                } else if (this.columns === 3) {\n                    // 3 x 3 matrix\n                    var subMatrix0, subMatrix1, subMatrix2;\n                    subMatrix0 = this.selectionView([1, 2], [1, 2]);\n                    subMatrix1 = this.selectionView([1, 2], [0, 2]);\n                    subMatrix2 = this.selectionView([1, 2], [0, 1]);\n                    a = this.get(0, 0);\n                    b = this.get(0, 1);\n                    c = this.get(0, 2);\n\n                    return a * subMatrix0.det() - b * subMatrix1.det() + c * subMatrix2.det();\n                } else {\n                    // general purpose determinant using the LU decomposition\n                    return new LuDecomposition(this).determinant;\n                }\n\n            } else {\n                throw Error('Determinant can only be calculated for a square matrix.');\n            }\n        }\n\n        /**\n         * Returns inverse of a matrix if it exists or the pseudoinverse\n         * @param {number} threshold - threshold for taking inverse of singular values (default = 1e-15)\n         * @return {Matrix} the (pseudo)inverted matrix.\n         */\n        pseudoInverse(threshold) {\n            if (threshold === undefined) threshold = Number.EPSILON;\n            var svdSolution = new SvDecomposition(this, {autoTranspose: true});\n\n            var U = svdSolution.leftSingularVectors;\n            var V = svdSolution.rightSingularVectors;\n            var s = svdSolution.diagonal;\n\n            for (var i = 0; i < s.length; i++) {\n                if (Math.abs(s[i]) > threshold) {\n                    s[i] = 1.0 / s[i];\n                } else {\n                    s[i] = 0.0;\n                }\n            }\n\n            // convert list to diagonal\n            s = this.constructor[Symbol.species].diag(s);\n            return V.mmul(s.mmul(U.transposeView()));\n        }\n    }\n\n    Matrix.prototype.klass = 'Matrix';\n\n    /**\n     * @private\n     * Check that two matrices have the same dimensions\n     * @param {Matrix} matrix\n     * @param {Matrix} otherMatrix\n     */\n    function checkDimensions(matrix, otherMatrix) { // eslint-disable-line no-unused-vars\n        if (matrix.rows !== otherMatrix.rows ||\n            matrix.columns !== otherMatrix.columns) {\n            throw new RangeError('Matrices dimensions must be equal');\n        }\n    }\n\n    function compareNumbers(a, b) {\n        return a - b;\n    }\n\n    /*\n     Synonyms\n     */\n\n    Matrix.random = Matrix.rand;\n    Matrix.diagonal = Matrix.diag;\n    Matrix.prototype.diagonal = Matrix.prototype.diag;\n    Matrix.identity = Matrix.eye;\n    Matrix.prototype.negate = Matrix.prototype.neg;\n    Matrix.prototype.tensorProduct = Matrix.prototype.kroneckerProduct;\n    Matrix.prototype.determinant = Matrix.prototype.det;\n\n    /*\n     Add dynamically instance and static methods for mathematical operations\n     */\n\n    var inplaceOperator = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n    var inplaceOperatorScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% value);\n        }\n    }\n    return this;\n})\n`;\n\n    var inplaceOperatorMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    checkDimensions(this, matrix);\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% matrix.get(i, j));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticOperator = `\n(function %name%(matrix, value) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(value);\n})\n`;\n\n    var inplaceMethod = `\n(function %name%() {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticMethod = `\n(function %name%(matrix) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%();\n})\n`;\n\n    var inplaceMethodWithArgs = `\n(function %name%(%args%) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), %args%));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticMethodWithArgs = `\n(function %name%(matrix, %args%) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(%args%);\n})\n`;\n\n\n    var inplaceMethodWithOneArgScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), value));\n        }\n    }\n    return this;\n})\n`;\n    var inplaceMethodWithOneArgMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    checkDimensions(this, matrix);\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), matrix.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n    var inplaceMethodWithOneArg = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n    var staticMethodWithOneArg = staticMethodWithArgs;\n\n    var operators = [\n        // Arithmetic operators\n        ['+', 'add'],\n        ['-', 'sub', 'subtract'],\n        ['*', 'mul', 'multiply'],\n        ['/', 'div', 'divide'],\n        ['%', 'mod', 'modulus'],\n        // Bitwise operators\n        ['&', 'and'],\n        ['|', 'or'],\n        ['^', 'xor'],\n        ['<<', 'leftShift'],\n        ['>>', 'signPropagatingRightShift'],\n        ['>>>', 'rightShift', 'zeroFillRightShift']\n    ];\n\n    var i;\n\n    for (var operator of operators) {\n        var inplaceOp = eval(fillTemplateFunction(inplaceOperator, {name: operator[1], op: operator[0]}));\n        var inplaceOpS = eval(fillTemplateFunction(inplaceOperatorScalar, {name: operator[1] + 'S', op: operator[0]}));\n        var inplaceOpM = eval(fillTemplateFunction(inplaceOperatorMatrix, {name: operator[1] + 'M', op: operator[0]}));\n        var staticOp = eval(fillTemplateFunction(staticOperator, {name: operator[1]}));\n        for (i = 1; i < operator.length; i++) {\n            Matrix.prototype[operator[i]] = inplaceOp;\n            Matrix.prototype[operator[i] + 'S'] = inplaceOpS;\n            Matrix.prototype[operator[i] + 'M'] = inplaceOpM;\n            Matrix[operator[i]] = staticOp;\n        }\n    }\n\n    var methods = [\n        ['~', 'not']\n    ];\n\n    [\n        'abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cbrt', 'ceil',\n        'clz32', 'cos', 'cosh', 'exp', 'expm1', 'floor', 'fround', 'log', 'log1p',\n        'log10', 'log2', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc'\n    ].forEach(function (mathMethod) {\n        methods.push(['Math.' + mathMethod, mathMethod]);\n    });\n\n    for (var method of methods) {\n        var inplaceMeth = eval(fillTemplateFunction(inplaceMethod, {name: method[1], method: method[0]}));\n        var staticMeth = eval(fillTemplateFunction(staticMethod, {name: method[1]}));\n        for (i = 1; i < method.length; i++) {\n            Matrix.prototype[method[i]] = inplaceMeth;\n            Matrix[method[i]] = staticMeth;\n        }\n    }\n\n    var methodsWithArgs = [\n        ['Math.pow', 1, 'pow']\n    ];\n\n    for (var methodWithArg of methodsWithArgs) {\n        var args = 'arg0';\n        for (i = 1; i < methodWithArg[1]; i++) {\n            args += `, arg${i}`;\n        }\n        if (methodWithArg[1] !== 1) {\n            var inplaceMethWithArgs = eval(fillTemplateFunction(inplaceMethodWithArgs, {\n                name: methodWithArg[2],\n                method: methodWithArg[0],\n                args: args\n            }));\n            var staticMethWithArgs = eval(fillTemplateFunction(staticMethodWithArgs, {name: methodWithArg[2], args: args}));\n            for (i = 2; i < methodWithArg.length; i++) {\n                Matrix.prototype[methodWithArg[i]] = inplaceMethWithArgs;\n                Matrix[methodWithArg[i]] = staticMethWithArgs;\n            }\n        } else {\n            var tmplVar = {\n                name: methodWithArg[2],\n                args: args,\n                method: methodWithArg[0]\n            };\n            var inplaceMethod2 = eval(fillTemplateFunction(inplaceMethodWithOneArg, tmplVar));\n            var inplaceMethodS = eval(fillTemplateFunction(inplaceMethodWithOneArgScalar, tmplVar));\n            var inplaceMethodM = eval(fillTemplateFunction(inplaceMethodWithOneArgMatrix, tmplVar));\n            var staticMethod2 = eval(fillTemplateFunction(staticMethodWithOneArg, tmplVar));\n            for (i = 2; i < methodWithArg.length; i++) {\n                Matrix.prototype[methodWithArg[i]] = inplaceMethod2;\n                Matrix.prototype[methodWithArg[i] + 'M'] = inplaceMethodM;\n                Matrix.prototype[methodWithArg[i] + 'S'] = inplaceMethodS;\n                Matrix[methodWithArg[i]] = staticMethod2;\n            }\n        }\n    }\n\n    function fillTemplateFunction(template, values) {\n        for (var value in values) {\n            template = template.replace(new RegExp('%' + value + '%', 'g'), values[value]);\n        }\n        return template;\n    }\n\n    return Matrix;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-naivebayes/node_modules/ml-matrix/src/abstractMatrix.js","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\nfunction LuDecomposition(matrix) {\n    if (!(this instanceof LuDecomposition)) {\n        return new LuDecomposition(matrix);\n    }\n\n    matrix = Matrix.Matrix.checkMatrix(matrix);\n\n    var lu = matrix.clone(),\n        rows = lu.rows,\n        columns = lu.columns,\n        pivotVector = new Array(rows),\n        pivotSign = 1,\n        i, j, k, p, s, t, v,\n        LUrowi, LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n        pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n\n        for (i = 0; i < rows; i++) {\n            LUcolj[i] = lu[i][j];\n        }\n\n        for (i = 0; i < rows; i++) {\n            LUrowi = lu[i];\n            kmax = Math.min(i, j);\n            s = 0;\n            for (k = 0; k < kmax; k++) {\n                s += LUrowi[k] * LUcolj[k];\n            }\n            LUrowi[j] = LUcolj[i] -= s;\n        }\n\n        p = j;\n        for (i = j + 1; i < rows; i++) {\n            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n                p = i;\n            }\n        }\n\n        if (p !== j) {\n            for (k = 0; k < columns; k++) {\n                t = lu[p][k];\n                lu[p][k] = lu[j][k];\n                lu[j][k] = t;\n            }\n\n            v = pivotVector[p];\n            pivotVector[p] = pivotVector[j];\n            pivotVector[j] = v;\n\n            pivotSign = -pivotSign;\n        }\n\n        if (j < rows && lu[j][j] !== 0) {\n            for (i = j + 1; i < rows; i++) {\n                lu[i][j] /= lu[j][j];\n            }\n        }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n}\n\nLuDecomposition.prototype = {\n    isSingular: function () {\n        var data = this.LU,\n            col = data.columns;\n        for (var j = 0; j < col; j++) {\n            if (data[j][j] === 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    get determinant() {\n        var data = this.LU;\n        if (!data.isSquare()) {\n            throw new Error('Matrix must be square');\n        }\n        var determinant = this.pivotSign, col = data.columns;\n        for (var j = 0; j < col; j++) {\n            determinant *= data[j][j];\n        }\n        return determinant;\n    },\n    get lowerTriangularMatrix() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix.Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i > j) {\n                    X[i][j] = data[i][j];\n                } else if (i === j) {\n                    X[i][j] = 1;\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get upperTriangularMatrix() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix.Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i <= j) {\n                    X[i][j] = data[i][j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get pivotPermutationVector() {\n        return this.pivotVector.slice();\n    },\n    solve: function (value) {\n        value = Matrix.Matrix.checkMatrix(value);\n\n        var lu = this.LU,\n            rows = lu.rows;\n\n        if (rows !== value.rows) {\n            throw new Error('Invalid matrix dimensions');\n        }\n        if (this.isSingular()) {\n            throw new Error('LU matrix is singular');\n        }\n\n        var count = value.columns;\n        var X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n        var columns = lu.columns;\n        var i, j, k;\n\n        for (k = 0; k < columns; k++) {\n            for (i = k + 1; i < columns; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        for (k = columns - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= lu[k][k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = LuDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-naivebayes/node_modules/ml-matrix/src/dc/lu.js","'use strict';\n\nvar Matrix = require('../matrix');\nvar util = require('./util');\nvar hypotenuse = util.hypotenuse;\nvar getFilled2DArray = util.getFilled2DArray;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\nfunction SingularValueDecomposition(value, options) {\n    if (!(this instanceof SingularValueDecomposition)) {\n        return new SingularValueDecomposition(value, options);\n    }\n    value = Matrix.Matrix.checkMatrix(value);\n\n    options = options || {};\n\n    var m = value.rows,\n        n = value.columns,\n        nu = Math.min(m, n);\n\n    var wantu = true, wantv = true;\n    if (options.computeLeftSingularVectors === false) wantu = false;\n    if (options.computeRightSingularVectors === false) wantv = false;\n    var autoTranspose = options.autoTranspose === true;\n\n    var swapped = false;\n    var a;\n    if (m < n) {\n        if (!autoTranspose) {\n            a = value.clone();\n            // eslint-disable-next-line no-console\n            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n        } else {\n            a = value.transpose();\n            m = a.rows;\n            n = a.columns;\n            swapped = true;\n            var aux = wantu;\n            wantu = wantv;\n            wantv = aux;\n        }\n    } else {\n        a = value.clone();\n    }\n\n    var s = new Array(Math.min(m + 1, n)),\n        U = getFilled2DArray(m, nu, 0),\n        V = getFilled2DArray(n, n, 0),\n        e = new Array(n),\n        work = new Array(m);\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n\n    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\n    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n        if (k < nct) {\n            s[k] = 0;\n            for (i = k; i < m; i++) {\n                s[k] = hypotenuse(s[k], a[i][k]);\n            }\n            if (s[k] !== 0) {\n                if (a[k][k] < 0) {\n                    s[k] = -s[k];\n                }\n                for (i = k; i < m; i++) {\n                    a[i][k] /= s[k];\n                }\n                a[k][k] += 1;\n            }\n            s[k] = -s[k];\n        }\n\n        for (j = k + 1; j < n; j++) {\n            if ((k < nct) && (s[k] !== 0)) {\n                t = 0;\n                for (i = k; i < m; i++) {\n                    t += a[i][k] * a[i][j];\n                }\n                t = -t / a[k][k];\n                for (i = k; i < m; i++) {\n                    a[i][j] += t * a[i][k];\n                }\n            }\n            e[j] = a[k][j];\n        }\n\n        if (wantu && (k < nct)) {\n            for (i = k; i < m; i++) {\n                U[i][k] = a[i][k];\n            }\n        }\n\n        if (k < nrt) {\n            e[k] = 0;\n            for (i = k + 1; i < n; i++) {\n                e[k] = hypotenuse(e[k], e[i]);\n            }\n            if (e[k] !== 0) {\n                if (e[k + 1] < 0) {\n                    e[k] = 0 - e[k];\n                }\n                for (i = k + 1; i < n; i++) {\n                    e[i] /= e[k];\n                }\n                e[k + 1] += 1;\n            }\n            e[k] = -e[k];\n            if ((k + 1 < m) && (e[k] !== 0)) {\n                for (i = k + 1; i < m; i++) {\n                    work[i] = 0;\n                }\n                for (j = k + 1; j < n; j++) {\n                    for (i = k + 1; i < m; i++) {\n                        work[i] += e[j] * a[i][j];\n                    }\n                }\n                for (j = k + 1; j < n; j++) {\n                    t = -e[j] / e[k + 1];\n                    for (i = k + 1; i < m; i++) {\n                        a[i][j] += t * work[i];\n                    }\n                }\n            }\n            if (wantv) {\n                for (i = k + 1; i < n; i++) {\n                    V[i][k] = e[i];\n                }\n            }\n        }\n    }\n\n    p = Math.min(n, m + 1);\n    if (nct < n) {\n        s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n        s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n        e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n        for (j = nct; j < nu; j++) {\n            for (i = 0; i < m; i++) {\n                U[i][j] = 0;\n            }\n            U[j][j] = 1;\n        }\n        for (k = nct - 1; k >= 0; k--) {\n            if (s[k] !== 0) {\n                for (j = k + 1; j < nu; j++) {\n                    t = 0;\n                    for (i = k; i < m; i++) {\n                        t += U[i][k] * U[i][j];\n                    }\n                    t = -t / U[k][k];\n                    for (i = k; i < m; i++) {\n                        U[i][j] += t * U[i][k];\n                    }\n                }\n                for (i = k; i < m; i++) {\n                    U[i][k] = -U[i][k];\n                }\n                U[k][k] = 1 + U[k][k];\n                for (i = 0; i < k - 1; i++) {\n                    U[i][k] = 0;\n                }\n            } else {\n                for (i = 0; i < m; i++) {\n                    U[i][k] = 0;\n                }\n                U[k][k] = 1;\n            }\n        }\n    }\n\n    if (wantv) {\n        for (k = n - 1; k >= 0; k--) {\n            if ((k < nrt) && (e[k] !== 0)) {\n                for (j = k + 1; j < n; j++) {\n                    t = 0;\n                    for (i = k + 1; i < n; i++) {\n                        t += V[i][k] * V[i][j];\n                    }\n                    t = -t / V[k + 1][k];\n                    for (i = k + 1; i < n; i++) {\n                        V[i][j] += t * V[i][k];\n                    }\n                }\n            }\n            for (i = 0; i < n; i++) {\n                V[i][k] = 0;\n            }\n            V[k][k] = 1;\n        }\n    }\n\n    var pp = p - 1,\n        iter = 0,\n        eps = Math.pow(2, -52);\n    while (p > 0) {\n        for (k = p - 2; k >= -1; k--) {\n            if (k === -1) {\n                break;\n            }\n            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n                e[k] = 0;\n                break;\n            }\n        }\n        if (k === p - 2) {\n            kase = 4;\n        } else {\n            for (ks = p - 1; ks >= k; ks--) {\n                if (ks === k) {\n                    break;\n                }\n                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n                if (Math.abs(s[ks]) <= eps * t) {\n                    s[ks] = 0;\n                    break;\n                }\n            }\n            if (ks === k) {\n                kase = 3;\n            } else if (ks === p - 1) {\n                kase = 1;\n            } else {\n                kase = 2;\n                k = ks;\n            }\n        }\n\n        k++;\n\n        switch (kase) {\n            case 1: {\n                f = e[p - 2];\n                e[p - 2] = 0;\n                for (j = p - 2; j >= k; j--) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    if (j !== k) {\n                        f = -sn * e[j - 1];\n                        e[j - 1] = cs * e[j - 1];\n                    }\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][p - 1];\n                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                            V[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 2 : {\n                f = e[k - 1];\n                e[k - 1] = 0;\n                for (j = k; j < p; j++) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    f = -sn * e[j];\n                    e[j] = cs * e[j];\n                    if (wantu) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][k - 1];\n                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 3 : {\n                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n                sp = s[p - 1] / scale;\n                spm1 = s[p - 2] / scale;\n                epm1 = e[p - 2] / scale;\n                sk = s[k] / scale;\n                ek = e[k] / scale;\n                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n                c = (sp * epm1) * (sp * epm1);\n                shift = 0;\n                if ((b !== 0) || (c !== 0)) {\n                    shift = Math.sqrt(b * b + c);\n                    if (b < 0) {\n                        shift = -shift;\n                    }\n                    shift = c / (b + shift);\n                }\n                f = (sk + sp) * (sk - sp) + shift;\n                g = sk * ek;\n                for (j = k; j < p - 1; j++) {\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    if (j !== k) {\n                        e[j - 1] = t;\n                    }\n                    f = cs * s[j] + sn * e[j];\n                    e[j] = cs * e[j] - sn * s[j];\n                    g = sn * s[j + 1];\n                    s[j + 1] = cs * s[j + 1];\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][j + 1];\n                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                            V[i][j] = t;\n                        }\n                    }\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    s[j] = t;\n                    f = cs * e[j] + sn * s[j + 1];\n                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n                    g = sn * e[j + 1];\n                    e[j + 1] = cs * e[j + 1];\n                    if (wantu && (j < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][j + 1];\n                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                e[p - 2] = f;\n                iter = iter + 1;\n                break;\n            }\n            case 4: {\n                if (s[k] <= 0) {\n                    s[k] = (s[k] < 0 ? -s[k] : 0);\n                    if (wantv) {\n                        for (i = 0; i <= pp; i++) {\n                            V[i][k] = -V[i][k];\n                        }\n                    }\n                }\n                while (k < pp) {\n                    if (s[k] >= s[k + 1]) {\n                        break;\n                    }\n                    t = s[k];\n                    s[k] = s[k + 1];\n                    s[k + 1] = t;\n                    if (wantv && (k < n - 1)) {\n                        for (i = 0; i < n; i++) {\n                            t = V[i][k + 1];\n                            V[i][k + 1] = V[i][k];\n                            V[i][k] = t;\n                        }\n                    }\n                    if (wantu && (k < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = U[i][k + 1];\n                            U[i][k + 1] = U[i][k];\n                            U[i][k] = t;\n                        }\n                    }\n                    k++;\n                }\n                iter = 0;\n                p--;\n                break;\n            }\n            // no default\n        }\n    }\n\n    if (swapped) {\n        var tmp = V;\n        V = U;\n        U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n}\n\nSingularValueDecomposition.prototype = {\n    get condition() {\n        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    get norm2() {\n        return this.s[0];\n    },\n    get rank() {\n        var eps = Math.pow(2, -52),\n            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n            r = 0,\n            s = this.s;\n        for (var i = 0, ii = s.length; i < ii; i++) {\n            if (s[i] > tol) {\n                r++;\n            }\n        }\n        return r;\n    },\n    get diagonal() {\n        return this.s;\n    },\n    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n    get threshold() {\n        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n    },\n    get leftSingularVectors() {\n        if (!Matrix.Matrix.isMatrix(this.U)) {\n            this.U = new Matrix.Matrix(this.U);\n        }\n        return this.U;\n    },\n    get rightSingularVectors() {\n        if (!Matrix.Matrix.isMatrix(this.V)) {\n            this.V = new Matrix.Matrix(this.V);\n        }\n        return this.V;\n    },\n    get diagonalMatrix() {\n        return Matrix.Matrix.diag(this.s);\n    },\n    solve: function (value) {\n\n        var Y = value,\n            e = this.threshold,\n            scols = this.s.length,\n            Ls = Matrix.Matrix.zeros(scols, scols),\n            i;\n\n        for (i = 0; i < scols; i++) {\n            if (Math.abs(this.s[i]) <= e) {\n                Ls[i][i] = 0;\n            } else {\n                Ls[i][i] = 1 / this.s[i];\n            }\n        }\n\n        var U = this.U;\n        var V = this.rightSingularVectors;\n\n        var VL = V.mmul(Ls),\n            vrows = V.rows,\n            urows = U.length,\n            VLU = Matrix.Matrix.zeros(vrows, urows),\n            j, k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < scols; k++) {\n                    sum += VL[i][k] * U[j][k];\n                }\n                VLU[i][j] = sum;\n            }\n        }\n\n        return VLU.mmul(Y);\n    },\n    solveForDiagonal: function (value) {\n        return this.solve(Matrix.Matrix.diag(value));\n    },\n    inverse: function () {\n        var V = this.V;\n        var e = this.threshold,\n            vrows = V.length,\n            vcols = V[0].length,\n            X = new Matrix.Matrix(vrows, this.s.length),\n            i, j;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < vcols; j++) {\n                if (Math.abs(this.s[j]) > e) {\n                    X[i][j] = V[i][j] / this.s[j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n\n        var U = this.U;\n\n        var urows = U.length,\n            ucols = U[0].length,\n            Y = new Matrix.Matrix(vrows, urows),\n            k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < ucols; k++) {\n                    sum += X[i][k] * U[j][k];\n                }\n                Y[i][j] = sum;\n            }\n        }\n\n        return Y;\n    }\n};\n\nmodule.exports = SingularValueDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-naivebayes/node_modules/ml-matrix/src/dc/svd.js","'use strict';\n\nmodule.exports = abstractMatrix;\n\nvar LuDecomposition = require('./dc/lu');\nvar SvDecomposition = require('./dc/svd');\nvar arrayUtils = require('ml-array-utils');\nvar util = require('./util');\nvar MatrixTransposeView = require('./views/transpose');\nvar MatrixRowView = require('./views/row');\nvar MatrixSubView = require('./views/sub');\nvar MatrixSelectionView = require('./views/selection');\nvar MatrixColumnView = require('./views/column');\nvar MatrixFlipRowView = require('./views/flipRow');\nvar MatrixFlipColumnView = require('./views/flipColumn');\n\nfunction abstractMatrix(superCtor) {\n    if (superCtor === undefined) superCtor = Object;\n\n    /**\n     * Real matrix\n     * @class Matrix\n     * @param {number|Array|Matrix} nRows - Number of rows of the new matrix,\n     * 2D array containing the data or Matrix instance to clone\n     * @param {number} [nColumns] - Number of columns of the new matrix\n     */\n    class Matrix extends superCtor {\n        static get [Symbol.species]() {\n            return this;\n        }\n\n        /**\n         * Constructs a Matrix with the chosen dimensions from a 1D array\n         * @param {number} newRows - Number of rows\n         * @param {number} newColumns - Number of columns\n         * @param {Array} newData - A 1D array containing data for the matrix\n         * @return {Matrix} - The new matrix\n         */\n        static from1DArray(newRows, newColumns, newData) {\n            var length = newRows * newColumns;\n            if (length !== newData.length) {\n                throw new RangeError('Data length does not match given dimensions');\n            }\n            var newMatrix = new this(newRows, newColumns);\n            for (var row = 0; row < newRows; row++) {\n                for (var column = 0; column < newColumns; column++) {\n                    newMatrix.set(row, column, newData[row * newColumns + column]);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Creates a row vector, a matrix with only one row.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n        static rowVector(newData) {\n            var vector = new this(1, newData.length);\n            for (var i = 0; i < newData.length; i++) {\n                vector.set(0, i, newData[i]);\n            }\n            return vector;\n        }\n\n        /**\n         * Creates a column vector, a matrix with only one column.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n        static columnVector(newData) {\n            var vector = new this(newData.length, 1);\n            for (var i = 0; i < newData.length; i++) {\n                vector.set(i, 0, newData[i]);\n            }\n            return vector;\n        }\n\n        /**\n         * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static empty(rows, columns) {\n            return new this(rows, columns);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be set to zero.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static zeros(rows, columns) {\n            return this.empty(rows, columns).fill(0);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be set to one.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static ones(rows, columns) {\n            return this.empty(rows, columns).fill(1);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be randomly set.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n        static rand(rows, columns, rng) {\n            if (rng === undefined) rng = Math.random;\n            var matrix = this.empty(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    matrix.set(i, j, rng());\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be random integers.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {number} [maxValue=1000] - Maximum value\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n        static randInt(rows, columns, maxValue, rng) {\n            if (maxValue === undefined) maxValue = 1000;\n            if (rng === undefined) rng = Math.random;\n            var matrix = this.empty(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    var value = Math.floor(rng() * maxValue);\n                    matrix.set(i, j, value);\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and others will be 0.\n         * @param {number} rows - Number of rows\n         * @param {number} [columns=rows] - Number of columns\n         * @param {number} [value=1] - Value to fill the diagonal with\n         * @return {Matrix} - The new identity matrix\n         */\n        static eye(rows, columns, value) {\n            if (columns === undefined) columns = rows;\n            if (value === undefined) value = 1;\n            var min = Math.min(rows, columns);\n            var matrix = this.zeros(rows, columns);\n            for (var i = 0; i < min; i++) {\n                matrix.set(i, i, value);\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates a diagonal matrix based on the given array.\n         * @param {Array} data - Array containing the data for the diagonal\n         * @param {number} [rows] - Number of rows (Default: data.length)\n         * @param {number} [columns] - Number of columns (Default: rows)\n         * @return {Matrix} - The new diagonal matrix\n         */\n        static diag(data, rows, columns) {\n            var l = data.length;\n            if (rows === undefined) rows = l;\n            if (columns === undefined) columns = rows;\n            var min = Math.min(l, rows, columns);\n            var matrix = this.zeros(rows, columns);\n            for (var i = 0; i < min; i++) {\n                matrix.set(i, i, data[i]);\n            }\n            return matrix;\n        }\n\n        /**\n         * Returns a matrix whose elements are the minimum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n        static min(matrix1, matrix2) {\n            matrix1 = this.checkMatrix(matrix1);\n            matrix2 = this.checkMatrix(matrix2);\n            var rows = matrix1.rows;\n            var columns = matrix1.columns;\n            var result = new this(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Returns a matrix whose elements are the maximum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n        static max(matrix1, matrix2) {\n            matrix1 = this.checkMatrix(matrix1);\n            matrix2 = this.checkMatrix(matrix2);\n            var rows = matrix1.rows;\n            var columns = matrix1.columns;\n            var result = new this(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Check that the provided value is a Matrix and tries to instantiate one if not\n         * @param {*} value - The value to check\n         * @return {Matrix}\n         */\n        static checkMatrix(value) {\n            return Matrix.isMatrix(value) ? value : new this(value);\n        }\n\n        /**\n         * Returns true if the argument is a Matrix, false otherwise\n         * @param {*} value - The value to check\n         * @return {boolean}\n         */\n        static isMatrix(value) {\n            return (value != null) && (value.klass === 'Matrix');\n        }\n\n        /**\n         * @prop {number} size - The number of elements in the matrix.\n         */\n        get size() {\n            return this.rows * this.columns;\n        }\n\n        /**\n         * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n         * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n         * @return {Matrix} this\n         */\n        apply(callback) {\n            if (typeof callback !== 'function') {\n                throw new TypeError('callback must be a function');\n            }\n            var ii = this.rows;\n            var jj = this.columns;\n            for (var i = 0; i < ii; i++) {\n                for (var j = 0; j < jj; j++) {\n                    callback.call(this, i, j);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Returns a new 1D array filled row by row with the matrix values\n         * @return {Array}\n         */\n        to1DArray() {\n            var array = new Array(this.size);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    array[i * this.columns + j] = this.get(i, j);\n                }\n            }\n            return array;\n        }\n\n        /**\n         * Returns a 2D array containing a copy of the data\n         * @return {Array}\n         */\n        to2DArray() {\n            var copy = new Array(this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                copy[i] = new Array(this.columns);\n                for (var j = 0; j < this.columns; j++) {\n                    copy[i][j] = this.get(i, j);\n                }\n            }\n            return copy;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one row\n         */\n        isRowVector() {\n            return this.rows === 1;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one column\n         */\n        isColumnVector() {\n            return this.columns === 1;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one row or one column\n         */\n        isVector() {\n            return (this.rows === 1) || (this.columns === 1);\n        }\n\n        /**\n         * @return {boolean} true if the matrix has the same number of rows and columns\n         */\n        isSquare() {\n            return this.rows === this.columns;\n        }\n\n        /**\n         * @return {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n         */\n        isSymmetric() {\n            if (this.isSquare()) {\n                for (var i = 0; i < this.rows; i++) {\n                    for (var j = 0; j <= i; j++) {\n                        if (this.get(i, j) !== this.get(j, i)) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            }\n            return false;\n        }\n\n        /**\n         * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @param {number} value - The new value for the element\n         * @return {Matrix} this\n         */\n        set(rowIndex, columnIndex, value) { // eslint-disable-line no-unused-vars\n            throw new Error('set method is unimplemented');\n        }\n\n        /**\n         * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @return {number}\n         */\n        get(rowIndex, columnIndex) { // eslint-disable-line no-unused-vars\n            throw new Error('get method is unimplemented');\n        }\n\n        /**\n         * Creates a new matrix that is a repetition of the current matrix. New matrix has rowRep times the number of\n         * rows of the matrix, and colRep times the number of columns of the matrix\n         * @param {number} rowRep - Number of times the rows should be repeated\n         * @param {number} colRep - Number of times the columns should be re\n         * @return {Matrix}\n         * @example\n         * var matrix = new Matrix([[1,2]]);\n         * matrix.repeat(2); // [[1,2],[1,2]]\n         */\n        repeat(rowRep, colRep) {\n            rowRep = rowRep || 1;\n            colRep = colRep || 1;\n            var matrix = new this.constructor[Symbol.species](this.rows * rowRep, this.columns * colRep);\n            for (var i = 0; i < rowRep; i++) {\n                for (var j = 0; j < colRep; j++) {\n                    matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Fills the matrix with a given value. All elements will be set to this value.\n         * @param {number} value - New value\n         * @return {Matrix} this\n         */\n        fill(value) {\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, value);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Negates the matrix. All elements will be multiplied by (-1)\n         * @return {Matrix} this\n         */\n        neg() {\n            return this.mulS(-1);\n        }\n\n        /**\n         * Returns a new array from the given row index\n         * @param {number} index - Row index\n         * @return {Array}\n         */\n        getRow(index) {\n            util.checkRowIndex(this, index);\n            var row = new Array(this.columns);\n            for (var i = 0; i < this.columns; i++) {\n                row[i] = this.get(index, i);\n            }\n            return row;\n        }\n\n        /**\n         * Returns a new row vector from the given row index\n         * @param {number} index - Row index\n         * @return {Matrix}\n         */\n        getRowVector(index) {\n            return this.constructor.rowVector(this.getRow(index));\n        }\n\n        /**\n         * Sets a row at the given index\n         * @param {number} index - Row index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n        setRow(index, array) {\n            util.checkRowIndex(this, index);\n            array = util.checkRowVector(this, array);\n            for (var i = 0; i < this.columns; i++) {\n                this.set(index, i, array[i]);\n            }\n            return this;\n        }\n\n        /**\n         * Swaps two rows\n         * @param {number} row1 - First row index\n         * @param {number} row2 - Second row index\n         * @return {Matrix} this\n         */\n        swapRows(row1, row2) {\n            util.checkRowIndex(this, row1);\n            util.checkRowIndex(this, row2);\n            for (var i = 0; i < this.columns; i++) {\n                var temp = this.get(row1, i);\n                this.set(row1, i, this.get(row2, i));\n                this.set(row2, i, temp);\n            }\n            return this;\n        }\n\n        /**\n         * Returns a new array from the given column index\n         * @param {number} index - Column index\n         * @return {Array}\n         */\n        getColumn(index) {\n            util.checkColumnIndex(this, index);\n            var column = new Array(this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                column[i] = this.get(i, index);\n            }\n            return column;\n        }\n\n        /**\n         * Returns a new column vector from the given column index\n         * @param {number} index - Column index\n         * @return {Matrix}\n         */\n        getColumnVector(index) {\n            return this.constructor.columnVector(this.getColumn(index));\n        }\n\n        /**\n         * Sets a column at the given index\n         * @param {number} index - Column index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n        setColumn(index, array) {\n            util.checkColumnIndex(this, index);\n            array = util.checkColumnVector(this, array);\n            for (var i = 0; i < this.rows; i++) {\n                this.set(i, index, array[i]);\n            }\n            return this;\n        }\n\n        /**\n         * Swaps two columns\n         * @param {number} column1 - First column index\n         * @param {number} column2 - Second column index\n         * @return {Matrix} this\n         */\n        swapColumns(column1, column2) {\n            util.checkColumnIndex(this, column1);\n            util.checkColumnIndex(this, column2);\n            for (var i = 0; i < this.rows; i++) {\n                var temp = this.get(i, column1);\n                this.set(i, column1, this.get(i, column2));\n                this.set(i, column2, temp);\n            }\n            return this;\n        }\n\n        /**\n         * Adds the values of a vector to each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        addRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) + vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Subtracts the values of a vector from each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        subRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) - vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a vector with each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        mulRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) * vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Divides the values of each row by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        divRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) / vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Adds the values of a vector to each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        addColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) + vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Subtracts the values of a vector from each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        subColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) - vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a vector with each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        mulColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) * vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Divides the values of each column by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        divColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) / vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a row with a scalar\n         * @param {number} index - Row index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n        mulRow(index, value) {\n            util.checkRowIndex(this, index);\n            for (var i = 0; i < this.columns; i++) {\n                this.set(index, i, this.get(index, i) * value);\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a column with a scalar\n         * @param {number} index - Column index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n        mulColumn(index, value) {\n            util.checkColumnIndex(this, index);\n            for (var i = 0; i < this.rows; i++) {\n                this.set(i, index, this.get(i, index) * value);\n            }\n            return this;\n        }\n\n        /**\n         * Returns the maximum value of the matrix\n         * @return {number}\n         */\n        max() {\n            var v = this.get(0, 0);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) > v) {\n                        v = this.get(i, j);\n                    }\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value\n         * @return {Array}\n         */\n        maxIndex() {\n            var v = this.get(0, 0);\n            var idx = [0, 0];\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) > v) {\n                        v = this.get(i, j);\n                        idx[0] = i;\n                        idx[1] = j;\n                    }\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of the matrix\n         * @return {number}\n         */\n        min() {\n            var v = this.get(0, 0);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) < v) {\n                        v = this.get(i, j);\n                    }\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the minimum value\n         * @return {Array}\n         */\n        minIndex() {\n            var v = this.get(0, 0);\n            var idx = [0, 0];\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) < v) {\n                        v = this.get(i, j);\n                        idx[0] = i;\n                        idx[1] = j;\n                    }\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the maximum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n        maxRow(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) > v) {\n                    v = this.get(row, i);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n        maxRowIndex(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            var idx = [row, 0];\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) > v) {\n                    v = this.get(row, i);\n                    idx[1] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n        minRow(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) < v) {\n                    v = this.get(row, i);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n        minRowIndex(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            var idx = [row, 0];\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) < v) {\n                    v = this.get(row, i);\n                    idx[1] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the maximum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n        maxColumn(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) > v) {\n                    v = this.get(i, column);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n        maxColumnIndex(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            var idx = [0, column];\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) > v) {\n                    v = this.get(i, column);\n                    idx[0] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n        minColumn(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) < v) {\n                    v = this.get(i, column);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the minimum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n        minColumnIndex(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            var idx = [0, column];\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) < v) {\n                    v = this.get(i, column);\n                    idx[0] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns an array containing the diagonal values of the matrix\n         * @return {Array}\n         */\n        diag() {\n            var min = Math.min(this.rows, this.columns);\n            var diag = new Array(min);\n            for (var i = 0; i < min; i++) {\n                diag[i] = this.get(i, i);\n            }\n            return diag;\n        }\n\n        /**\n         * Returns the sum by the argument given, if no argument given,\n         * it returns the sum of all elements of the matrix.\n         * @param {string} by - sum by 'row' or 'column'.\n         * @return {Matrix|number}\n         */\n        sum(by) {\n            switch (by) {\n                case 'row':\n                    return util.sumByRow(this);\n                case 'column':\n                    return util.sumByColumn(this);\n                default:\n                    return util.sumAll(this);\n            }\n        }\n\n        /**\n         * Returns the mean of all elements of the matrix\n         * @return {number}\n         */\n        mean() {\n            return this.sum() / this.size;\n        }\n\n        /**\n         * Returns the product of all elements of the matrix\n         * @return {number}\n         */\n        prod() {\n            var prod = 1;\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    prod *= this.get(i, j);\n                }\n            }\n            return prod;\n        }\n\n        /**\n         * Computes the cumulative sum of the matrix elements (in place, row by row)\n         * @return {Matrix} this\n         */\n        cumulativeSum() {\n            var sum = 0;\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    sum += this.get(i, j);\n                    this.set(i, j, sum);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Computes the dot (scalar) product between the matrix and another\n         * @param {Matrix} vector2 vector\n         * @return {number}\n         */\n        dot(vector2) {\n            if (Matrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n            var vector1 = this.to1DArray();\n            if (vector1.length !== vector2.length) {\n                throw new RangeError('vectors do not have the same size');\n            }\n            var dot = 0;\n            for (var i = 0; i < vector1.length; i++) {\n                dot += vector1[i] * vector2[i];\n            }\n            return dot;\n        }\n\n        /**\n         * Returns the matrix product between this and other\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n        mmul(other) {\n            other = this.constructor.checkMatrix(other);\n            if (this.columns !== other.rows) {\n                // eslint-disable-next-line no-console\n                console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n            }\n\n            var m = this.rows;\n            var n = this.columns;\n            var p = other.columns;\n\n            var result = new this.constructor[Symbol.species](m, p);\n\n            var Bcolj = new Array(n);\n            for (var j = 0; j < p; j++) {\n                for (var k = 0; k < n; k++) {\n                    Bcolj[k] = other.get(k, j);\n                }\n\n                for (var i = 0; i < m; i++) {\n                    var s = 0;\n                    for (k = 0; k < n; k++) {\n                        s += this.get(i, k) * Bcolj[k];\n                    }\n\n                    result.set(i, j, s);\n                }\n            }\n            return result;\n        }\n\n        strassen2x2(other) {\n            var result = new this.constructor[Symbol.species](2, 2);\n            const a11 = this.get(0, 0);\n            const b11 = other.get(0, 0);\n            const a12 = this.get(0, 1);\n            const b12 = other.get(0, 1);\n            const a21 = this.get(1, 0);\n            const b21 = other.get(1, 0);\n            const a22 = this.get(1, 1);\n            const b22 = other.get(1, 1);\n\n            // Compute intermediate values.\n            const m1 = (a11 + a22) * (b11 + b22);\n            const m2 = (a21 + a22) * b11;\n            const m3 = a11 * (b12 - b22);\n            const m4 = a22 * (b21 - b11);\n            const m5 = (a11 + a12) * b22;\n            const m6 = (a21 - a11) * (b11 + b12);\n            const m7 = (a12 - a22) * (b21 + b22);\n\n            // Combine intermediate values into the output.\n            const c00 = m1 + m4 - m5 + m7;\n            const c01 = m3 + m5;\n            const c10 = m2 + m4;\n            const c11 = m1 - m2 + m3 + m6;\n\n            result.set(0, 0, c00);\n            result.set(0, 1, c01);\n            result.set(1, 0, c10);\n            result.set(1, 1, c11);\n            return result;\n        }\n\n        strassen3x3(other) {\n            var result = new this.constructor[Symbol.species](3, 3);\n\n            const a00 = this.get(0, 0);\n            const a01 = this.get(0, 1);\n            const a02 = this.get(0, 2);\n            const a10 = this.get(1, 0);\n            const a11 = this.get(1, 1);\n            const a12 = this.get(1, 2);\n            const a20 = this.get(2, 0);\n            const a21 = this.get(2, 1);\n            const a22 = this.get(2, 2);\n\n            const b00 = other.get(0, 0);\n            const b01 = other.get(0, 1);\n            const b02 = other.get(0, 2);\n            const b10 = other.get(1, 0);\n            const b11 = other.get(1, 1);\n            const b12 = other.get(1, 2);\n            const b20 = other.get(2, 0);\n            const b21 = other.get(2, 1);\n            const b22 = other.get(2, 2);\n\n            const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n            const m2 = (a00 - a10) * (-b01 + b11);\n            const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n            const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n            const m5 = (a10 + a11) * (-b00 + b01);\n            const m6 = a00 * b00;\n            const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n            const m8 = (-a00 + a20) * (b02 - b12);\n            const m9 = (a20 + a21) * (-b00 + b02);\n            const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n            const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n            const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n            const m13 = (a02 - a22) * (b11 - b21);\n            const m14 = a02 * b20;\n            const m15 = (a21 + a22) * (-b20 + b21);\n            const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n            const m17 = (a02 - a12) * (b12 - b22);\n            const m18 = (a11 + a12) * (-b20 + b22);\n            const m19 = a01 * b10;\n            const m20 = a12 * b21;\n            const m21 = a10 * b02;\n            const m22 = a20 * b01;\n            const m23 = a22 * b22;\n\n            const c00 = m6 + m14 + m19;\n            const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n            const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n            const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n            const c11 = m2 + m4 + m5 + m6 + m20;\n            const c12 = m14 + m16 + m17 + m18 + m21;\n            const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n            const c21 = m12 + m13 + m14 + m15 + m22;\n            const c22 = m6 + m7 + m8 + m9 + m23;\n\n            result.set(0, 0, c00);\n            result.set(0, 1, c01);\n            result.set(0, 2, c02);\n            result.set(1, 0, c10);\n            result.set(1, 1, c11);\n            result.set(1, 2, c12);\n            result.set(2, 0, c20);\n            result.set(2, 1, c21);\n            result.set(2, 2, c22);\n            return result;\n        }\n\n        /**\n         * Returns the matrix product between x and y. More efficient than mmul(other) only when we multiply squared matrix and when the size of the matrix is > 1000.\n         * @param {Matrix} y\n         * @return {Matrix}\n         */\n        mmulStrassen(y) {\n            var x = this.clone();\n            var r1 = x.rows;\n            var c1 = x.columns;\n            var r2 = y.rows;\n            var c2 = y.columns;\n            if (c1 !== r2) {\n                // eslint-disable-next-line no-console\n                console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);\n            }\n\n            // Put a matrix into the top left of a matrix of zeros.\n            // `rows` and `cols` are the dimensions of the output matrix.\n            function embed(mat, rows, cols) {\n                var r = mat.rows;\n                var c = mat.columns;\n                if ((r === rows) && (c === cols)) {\n                    return mat;\n                } else {\n                    var resultat = Matrix.zeros(rows, cols);\n                    resultat = resultat.setSubMatrix(mat, 0, 0);\n                    return resultat;\n                }\n            }\n\n\n            // Make sure both matrices are the same size.\n            // This is exclusively for simplicity:\n            // this algorithm can be implemented with matrices of different sizes.\n\n            var r = Math.max(r1, r2);\n            var c = Math.max(c1, c2);\n            x = embed(x, r, c);\n            y = embed(y, r, c);\n\n            // Our recursive multiplication function.\n            function blockMult(a, b, rows, cols) {\n                // For small matrices, resort to naive multiplication.\n                if (rows <= 512 || cols <= 512) {\n                    return a.mmul(b); // a is equivalent to this\n                }\n\n                // Apply dynamic padding.\n                if ((rows % 2 === 1) && (cols % 2 === 1)) {\n                    a = embed(a, rows + 1, cols + 1);\n                    b = embed(b, rows + 1, cols + 1);\n                } else if (rows % 2 === 1) {\n                    a = embed(a, rows + 1, cols);\n                    b = embed(b, rows + 1, cols);\n                } else if (cols % 2 === 1) {\n                    a = embed(a, rows, cols + 1);\n                    b = embed(b, rows, cols + 1);\n                }\n\n                var halfRows = parseInt(a.rows / 2);\n                var halfCols = parseInt(a.columns / 2);\n                // Subdivide input matrices.\n                var a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n                var b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n                var a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n                var b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n                var a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n                var b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n                var a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n                var b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n                // Compute intermediate values.\n                var m1 = blockMult(Matrix.add(a11, a22), Matrix.add(b11, b22), halfRows, halfCols);\n                var m2 = blockMult(Matrix.add(a21, a22), b11, halfRows, halfCols);\n                var m3 = blockMult(a11, Matrix.sub(b12, b22), halfRows, halfCols);\n                var m4 = blockMult(a22, Matrix.sub(b21, b11), halfRows, halfCols);\n                var m5 = blockMult(Matrix.add(a11, a12), b22, halfRows, halfCols);\n                var m6 = blockMult(Matrix.sub(a21, a11), Matrix.add(b11, b12), halfRows, halfCols);\n                var m7 = blockMult(Matrix.sub(a12, a22), Matrix.add(b21, b22), halfRows, halfCols);\n\n                // Combine intermediate values into the output.\n                var c11 = Matrix.add(m1, m4);\n                c11.sub(m5);\n                c11.add(m7);\n                var c12 = Matrix.add(m3, m5);\n                var c21 = Matrix.add(m2, m4);\n                var c22 = Matrix.sub(m1, m2);\n                c22.add(m3);\n                c22.add(m6);\n\n                //Crop output to the desired size (undo dynamic padding).\n                var resultat = Matrix.zeros(2 * c11.rows, 2 * c11.columns);\n                resultat = resultat.setSubMatrix(c11, 0, 0);\n                resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n                resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n                resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n                return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n            }\n            return blockMult(x, y, r, c);\n        }\n\n        /**\n         * Returns a row-by-row scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The scaled matrix\n         */\n        scaleRows(min, max) {\n            min = min === undefined ? 0 : min;\n            max = max === undefined ? 1 : max;\n            if (min >= max) {\n                throw new RangeError('min should be strictly smaller than max');\n            }\n            var newMatrix = this.constructor.empty(this.rows, this.columns);\n            for (var i = 0; i < this.rows; i++) {\n                var scaled = arrayUtils.scale(this.getRow(i), {min, max});\n                newMatrix.setRow(i, scaled);\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a new column-by-column scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The new scaled matrix\n         * @example\n         * var matrix = new Matrix([[1,2],[-1,0]]);\n         * var scaledMatrix = matrix.scaleColumns(); // [[1,1],[0,0]]\n         */\n        scaleColumns(min, max) {\n            min = min === undefined ? 0 : min;\n            max = max === undefined ? 1 : max;\n            if (min >= max) {\n                throw new RangeError('min should be strictly smaller than max');\n            }\n            var newMatrix = this.constructor.empty(this.rows, this.columns);\n            for (var i = 0; i < this.columns; i++) {\n                var scaled = arrayUtils.scale(this.getColumn(i), {\n                    min: min,\n                    max: max\n                });\n                newMatrix.setColumn(i, scaled);\n            }\n            return newMatrix;\n        }\n\n\n        /**\n         * Returns the Kronecker product (also known as tensor product) between this and other\n         * See https://en.wikipedia.org/wiki/Kronecker_product\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n        kroneckerProduct(other) {\n            other = this.constructor.checkMatrix(other);\n\n            var m = this.rows;\n            var n = this.columns;\n            var p = other.rows;\n            var q = other.columns;\n\n            var result = new this.constructor[Symbol.species](m * p, n * q);\n            for (var i = 0; i < m; i++) {\n                for (var j = 0; j < n; j++) {\n                    for (var k = 0; k < p; k++) {\n                        for (var l = 0; l < q; l++) {\n                            result[p * i + k][q * j + l] = this.get(i, j) * other.get(k, l);\n                        }\n                    }\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Transposes the matrix and returns a new one containing the result\n         * @return {Matrix}\n         */\n        transpose() {\n            var result = new this.constructor[Symbol.species](this.columns, this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    result.set(j, i, this.get(i, j));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Sorts the rows (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n        sortRows(compareFunction) {\n            if (compareFunction === undefined) compareFunction = compareNumbers;\n            for (var i = 0; i < this.rows; i++) {\n                this.setRow(i, this.getRow(i).sort(compareFunction));\n            }\n            return this;\n        }\n\n        /**\n         * Sorts the columns (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n        sortColumns(compareFunction) {\n            if (compareFunction === undefined) compareFunction = compareNumbers;\n            for (var i = 0; i < this.columns; i++) {\n                this.setColumn(i, this.getColumn(i).sort(compareFunction));\n            }\n            return this;\n        }\n\n        /**\n         * Returns a subset of the matrix\n         * @param {number} startRow - First row index\n         * @param {number} endRow - Last row index\n         * @param {number} startColumn - First column index\n         * @param {number} endColumn - Last column index\n         * @return {Matrix}\n         */\n        subMatrix(startRow, endRow, startColumn, endColumn) {\n            util.checkRange(this, startRow, endRow, startColumn, endColumn);\n            var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, endColumn - startColumn + 1);\n            for (var i = startRow; i <= endRow; i++) {\n                for (var j = startColumn; j <= endColumn; j++) {\n                    newMatrix[i - startRow][j - startColumn] = this.get(i, j);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a subset of the matrix based on an array of row indices\n         * @param {Array} indices - Array containing the row indices\n         * @param {number} [startColumn = 0] - First column index\n         * @param {number} [endColumn = this.columns-1] - Last column index\n         * @return {Matrix}\n         */\n        subMatrixRow(indices, startColumn, endColumn) {\n            if (startColumn === undefined) startColumn = 0;\n            if (endColumn === undefined) endColumn = this.columns - 1;\n            if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns)) {\n                throw new RangeError('Argument out of range');\n            }\n\n            var newMatrix = new this.constructor[Symbol.species](indices.length, endColumn - startColumn + 1);\n            for (var i = 0; i < indices.length; i++) {\n                for (var j = startColumn; j <= endColumn; j++) {\n                    if (indices[i] < 0 || indices[i] >= this.rows) {\n                        throw new RangeError('Row index out of range: ' + indices[i]);\n                    }\n                    newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a subset of the matrix based on an array of column indices\n         * @param {Array} indices - Array containing the column indices\n         * @param {number} [startRow = 0] - First row index\n         * @param {number} [endRow = this.rows-1] - Last row index\n         * @return {Matrix}\n         */\n        subMatrixColumn(indices, startRow, endRow) {\n            if (startRow === undefined) startRow = 0;\n            if (endRow === undefined) endRow = this.rows - 1;\n            if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows)) {\n                throw new RangeError('Argument out of range');\n            }\n\n            var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, indices.length);\n            for (var i = 0; i < indices.length; i++) {\n                for (var j = startRow; j <= endRow; j++) {\n                    if (indices[i] < 0 || indices[i] >= this.columns) {\n                        throw new RangeError('Column index out of range: ' + indices[i]);\n                    }\n                    newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Set a part of the matrix to the given sub-matrix\n         * @param {Matrix|Array< Array >} matrix - The source matrix from which to extract values.\n         * @param {number} startRow - The index of the first row to set\n         * @param {number} startColumn - The index of the first column to set\n         * @return {Matrix}\n         */\n        setSubMatrix(matrix, startRow, startColumn) {\n            matrix = this.constructor.checkMatrix(matrix);\n            var endRow = startRow + matrix.rows - 1;\n            var endColumn = startColumn + matrix.columns - 1;\n            util.checkRange(this, startRow, endRow, startColumn, endColumn);\n            for (var i = 0; i < matrix.rows; i++) {\n                for (var j = 0; j < matrix.columns; j++) {\n                    this[startRow + i][startColumn + j] = matrix.get(i, j);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Return a new matrix based on a selection of rows and columns\n         * @param {Array<number>} rowIndices - The row indices to select. Order matters and an index can be more than once.\n         * @param {Array<number>} columnIndices - The column indices to select. Order matters and an index can be use more than once.\n         * @return {Matrix} The new matrix\n         */\n        selection(rowIndices, columnIndices) {\n            var indices = util.checkIndices(this, rowIndices, columnIndices);\n            var newMatrix = new this.constructor[Symbol.species](rowIndices.length, columnIndices.length);\n            for (var i = 0; i < indices.row.length; i++) {\n                var rowIndex = indices.row[i];\n                for (var j = 0; j < indices.column.length; j++) {\n                    var columnIndex = indices.column[j];\n                    newMatrix[i][j] = this.get(rowIndex, columnIndex);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns the trace of the matrix (sum of the diagonal elements)\n         * @return {number}\n         */\n        trace() {\n            var min = Math.min(this.rows, this.columns);\n            var trace = 0;\n            for (var i = 0; i < min; i++) {\n                trace += this.get(i, i);\n            }\n            return trace;\n        }\n\n        /*\n         Matrix views\n         */\n\n        /**\n         * Returns a view of the transposition of the matrix\n         * @return {MatrixTransposeView}\n         */\n        transposeView() {\n            return new MatrixTransposeView(this);\n        }\n\n        /**\n         * Returns a view of the row vector with the given index\n         * @param {number} row - row index of the vector\n         * @return {MatrixRowView}\n         */\n        rowView(row) {\n            util.checkRowIndex(this, row);\n            return new MatrixRowView(this, row);\n        }\n\n        /**\n         * Returns a view of the column vector with the given index\n         * @param {number} column - column index of the vector\n         * @return {MatrixColumnView}\n         */\n        columnView(column) {\n            util.checkColumnIndex(this, column);\n            return new MatrixColumnView(this, column);\n        }\n\n        /**\n         * Returns a view of the matrix flipped in the row axis\n         * @return {MatrixFlipRowView}\n         */\n        flipRowView() {\n            return new MatrixFlipRowView(this);\n        }\n\n        /**\n         * Returns a view of the matrix flipped in the column axis\n         * @return {MatrixFlipColumnView}\n         */\n        flipColumnView() {\n            return new MatrixFlipColumnView(this);\n        }\n\n        /**\n         * Returns a view of a submatrix giving the index boundaries\n         * @param {number} startRow - first row index of the submatrix\n         * @param {number} endRow - last row index of the submatrix\n         * @param {number} startColumn - first column index of the submatrix\n         * @param {number} endColumn - last column index of the submatrix\n         * @return {MatrixSubView}\n         */\n        subMatrixView(startRow, endRow, startColumn, endColumn) {\n            return new MatrixSubView(this, startRow, endRow, startColumn, endColumn);\n        }\n\n        /**\n         * Returns a view of the cross of the row indices and the column indices\n         * @example\n         * // resulting vector is [[2], [2]]\n         * var matrix = new Matrix([[1,2,3], [4,5,6]]).selectionView([0, 0], [1])\n         * @param {Array<number>} rowIndices\n         * @param {Array<number>} columnIndices\n         * @return {MatrixSelectionView}\n         */\n        selectionView(rowIndices, columnIndices) {\n            return new MatrixSelectionView(this, rowIndices, columnIndices);\n        }\n\n\n        /**\n        * Calculates and returns the determinant of a matrix as a Number\n        * @example\n        *   new Matrix([[1,2,3], [4,5,6]]).det()\n        * @return {number}\n        */\n        det() {\n            if (this.isSquare()) {\n                var a, b, c, d;\n                if (this.columns === 2) {\n                    // 2 x 2 matrix\n                    a = this.get(0, 0);\n                    b = this.get(0, 1);\n                    c = this.get(1, 0);\n                    d = this.get(1, 1);\n\n                    return a * d - (b * c);\n                } else if (this.columns === 3) {\n                    // 3 x 3 matrix\n                    var subMatrix0, subMatrix1, subMatrix2;\n                    subMatrix0 = this.selectionView([1, 2], [1, 2]);\n                    subMatrix1 = this.selectionView([1, 2], [0, 2]);\n                    subMatrix2 = this.selectionView([1, 2], [0, 1]);\n                    a = this.get(0, 0);\n                    b = this.get(0, 1);\n                    c = this.get(0, 2);\n\n                    return a * subMatrix0.det() - b * subMatrix1.det() + c * subMatrix2.det();\n                } else {\n                    // general purpose determinant using the LU decomposition\n                    return new LuDecomposition(this).determinant;\n                }\n\n            } else {\n                throw Error('Determinant can only be calculated for a square matrix.');\n            }\n        }\n\n        /**\n         * Returns inverse of a matrix if it exists or the pseudoinverse\n         * @param {number} threshold - threshold for taking inverse of singular values (default = 1e-15)\n         * @return {Matrix} the (pseudo)inverted matrix.\n         */\n        pseudoInverse(threshold) {\n            if (threshold === undefined) threshold = Number.EPSILON;\n            var svdSolution = new SvDecomposition(this, {autoTranspose: true});\n\n            var U = svdSolution.leftSingularVectors;\n            var V = svdSolution.rightSingularVectors;\n            var s = svdSolution.diagonal;\n\n            for (var i = 0; i < s.length; i++) {\n                if (Math.abs(s[i]) > threshold) {\n                    s[i] = 1.0 / s[i];\n                } else {\n                    s[i] = 0.0;\n                }\n            }\n\n            // convert list to diagonal\n            s = this.constructor[Symbol.species].diag(s);\n            return V.mmul(s.mmul(U.transposeView()));\n        }\n    }\n\n    Matrix.prototype.klass = 'Matrix';\n\n    /**\n     * @private\n     * Check that two matrices have the same dimensions\n     * @param {Matrix} matrix\n     * @param {Matrix} otherMatrix\n     */\n    function checkDimensions(matrix, otherMatrix) { // eslint-disable-line no-unused-vars\n        if (matrix.rows !== otherMatrix.rows ||\n            matrix.columns !== otherMatrix.columns) {\n            throw new RangeError('Matrices dimensions must be equal');\n        }\n    }\n\n    function compareNumbers(a, b) {\n        return a - b;\n    }\n\n    /*\n     Synonyms\n     */\n\n    Matrix.random = Matrix.rand;\n    Matrix.diagonal = Matrix.diag;\n    Matrix.prototype.diagonal = Matrix.prototype.diag;\n    Matrix.identity = Matrix.eye;\n    Matrix.prototype.negate = Matrix.prototype.neg;\n    Matrix.prototype.tensorProduct = Matrix.prototype.kroneckerProduct;\n    Matrix.prototype.determinant = Matrix.prototype.det;\n\n    /*\n     Add dynamically instance and static methods for mathematical operations\n     */\n\n    var inplaceOperator = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n    var inplaceOperatorScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% value);\n        }\n    }\n    return this;\n})\n`;\n\n    var inplaceOperatorMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    checkDimensions(this, matrix);\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% matrix.get(i, j));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticOperator = `\n(function %name%(matrix, value) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(value);\n})\n`;\n\n    var inplaceMethod = `\n(function %name%() {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticMethod = `\n(function %name%(matrix) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%();\n})\n`;\n\n    var inplaceMethodWithArgs = `\n(function %name%(%args%) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), %args%));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticMethodWithArgs = `\n(function %name%(matrix, %args%) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(%args%);\n})\n`;\n\n\n    var inplaceMethodWithOneArgScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), value));\n        }\n    }\n    return this;\n})\n`;\n    var inplaceMethodWithOneArgMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    checkDimensions(this, matrix);\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), matrix.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n    var inplaceMethodWithOneArg = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n    var staticMethodWithOneArg = staticMethodWithArgs;\n\n    var operators = [\n        // Arithmetic operators\n        ['+', 'add'],\n        ['-', 'sub', 'subtract'],\n        ['*', 'mul', 'multiply'],\n        ['/', 'div', 'divide'],\n        ['%', 'mod', 'modulus'],\n        // Bitwise operators\n        ['&', 'and'],\n        ['|', 'or'],\n        ['^', 'xor'],\n        ['<<', 'leftShift'],\n        ['>>', 'signPropagatingRightShift'],\n        ['>>>', 'rightShift', 'zeroFillRightShift']\n    ];\n\n    var i;\n\n    for (var operator of operators) {\n        var inplaceOp = eval(fillTemplateFunction(inplaceOperator, {name: operator[1], op: operator[0]}));\n        var inplaceOpS = eval(fillTemplateFunction(inplaceOperatorScalar, {name: operator[1] + 'S', op: operator[0]}));\n        var inplaceOpM = eval(fillTemplateFunction(inplaceOperatorMatrix, {name: operator[1] + 'M', op: operator[0]}));\n        var staticOp = eval(fillTemplateFunction(staticOperator, {name: operator[1]}));\n        for (i = 1; i < operator.length; i++) {\n            Matrix.prototype[operator[i]] = inplaceOp;\n            Matrix.prototype[operator[i] + 'S'] = inplaceOpS;\n            Matrix.prototype[operator[i] + 'M'] = inplaceOpM;\n            Matrix[operator[i]] = staticOp;\n        }\n    }\n\n    var methods = [\n        ['~', 'not']\n    ];\n\n    [\n        'abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cbrt', 'ceil',\n        'clz32', 'cos', 'cosh', 'exp', 'expm1', 'floor', 'fround', 'log', 'log1p',\n        'log10', 'log2', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc'\n    ].forEach(function (mathMethod) {\n        methods.push(['Math.' + mathMethod, mathMethod]);\n    });\n\n    for (var method of methods) {\n        var inplaceMeth = eval(fillTemplateFunction(inplaceMethod, {name: method[1], method: method[0]}));\n        var staticMeth = eval(fillTemplateFunction(staticMethod, {name: method[1]}));\n        for (i = 1; i < method.length; i++) {\n            Matrix.prototype[method[i]] = inplaceMeth;\n            Matrix[method[i]] = staticMeth;\n        }\n    }\n\n    var methodsWithArgs = [\n        ['Math.pow', 1, 'pow']\n    ];\n\n    for (var methodWithArg of methodsWithArgs) {\n        var args = 'arg0';\n        for (i = 1; i < methodWithArg[1]; i++) {\n            args += `, arg${i}`;\n        }\n        if (methodWithArg[1] !== 1) {\n            var inplaceMethWithArgs = eval(fillTemplateFunction(inplaceMethodWithArgs, {\n                name: methodWithArg[2],\n                method: methodWithArg[0],\n                args: args\n            }));\n            var staticMethWithArgs = eval(fillTemplateFunction(staticMethodWithArgs, {name: methodWithArg[2], args: args}));\n            for (i = 2; i < methodWithArg.length; i++) {\n                Matrix.prototype[methodWithArg[i]] = inplaceMethWithArgs;\n                Matrix[methodWithArg[i]] = staticMethWithArgs;\n            }\n        } else {\n            var tmplVar = {\n                name: methodWithArg[2],\n                args: args,\n                method: methodWithArg[0]\n            };\n            var inplaceMethod2 = eval(fillTemplateFunction(inplaceMethodWithOneArg, tmplVar));\n            var inplaceMethodS = eval(fillTemplateFunction(inplaceMethodWithOneArgScalar, tmplVar));\n            var inplaceMethodM = eval(fillTemplateFunction(inplaceMethodWithOneArgMatrix, tmplVar));\n            var staticMethod2 = eval(fillTemplateFunction(staticMethodWithOneArg, tmplVar));\n            for (i = 2; i < methodWithArg.length; i++) {\n                Matrix.prototype[methodWithArg[i]] = inplaceMethod2;\n                Matrix.prototype[methodWithArg[i] + 'M'] = inplaceMethodM;\n                Matrix.prototype[methodWithArg[i] + 'S'] = inplaceMethodS;\n                Matrix[methodWithArg[i]] = staticMethod2;\n            }\n        }\n    }\n\n    function fillTemplateFunction(template, values) {\n        for (var value in values) {\n            template = template.replace(new RegExp('%' + value + '%', 'g'), values[value]);\n        }\n        return template;\n    }\n\n    return Matrix;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pls/node_modules/ml-matrix/src/abstractMatrix.js","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\nfunction LuDecomposition(matrix) {\n    if (!(this instanceof LuDecomposition)) {\n        return new LuDecomposition(matrix);\n    }\n\n    matrix = Matrix.Matrix.checkMatrix(matrix);\n\n    var lu = matrix.clone(),\n        rows = lu.rows,\n        columns = lu.columns,\n        pivotVector = new Array(rows),\n        pivotSign = 1,\n        i, j, k, p, s, t, v,\n        LUrowi, LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n        pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n\n        for (i = 0; i < rows; i++) {\n            LUcolj[i] = lu[i][j];\n        }\n\n        for (i = 0; i < rows; i++) {\n            LUrowi = lu[i];\n            kmax = Math.min(i, j);\n            s = 0;\n            for (k = 0; k < kmax; k++) {\n                s += LUrowi[k] * LUcolj[k];\n            }\n            LUrowi[j] = LUcolj[i] -= s;\n        }\n\n        p = j;\n        for (i = j + 1; i < rows; i++) {\n            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n                p = i;\n            }\n        }\n\n        if (p !== j) {\n            for (k = 0; k < columns; k++) {\n                t = lu[p][k];\n                lu[p][k] = lu[j][k];\n                lu[j][k] = t;\n            }\n\n            v = pivotVector[p];\n            pivotVector[p] = pivotVector[j];\n            pivotVector[j] = v;\n\n            pivotSign = -pivotSign;\n        }\n\n        if (j < rows && lu[j][j] !== 0) {\n            for (i = j + 1; i < rows; i++) {\n                lu[i][j] /= lu[j][j];\n            }\n        }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n}\n\nLuDecomposition.prototype = {\n    isSingular: function () {\n        var data = this.LU,\n            col = data.columns;\n        for (var j = 0; j < col; j++) {\n            if (data[j][j] === 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    get determinant() {\n        var data = this.LU;\n        if (!data.isSquare()) {\n            throw new Error('Matrix must be square');\n        }\n        var determinant = this.pivotSign, col = data.columns;\n        for (var j = 0; j < col; j++) {\n            determinant *= data[j][j];\n        }\n        return determinant;\n    },\n    get lowerTriangularMatrix() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix.Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i > j) {\n                    X[i][j] = data[i][j];\n                } else if (i === j) {\n                    X[i][j] = 1;\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get upperTriangularMatrix() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix.Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i <= j) {\n                    X[i][j] = data[i][j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get pivotPermutationVector() {\n        return this.pivotVector.slice();\n    },\n    solve: function (value) {\n        value = Matrix.Matrix.checkMatrix(value);\n\n        var lu = this.LU,\n            rows = lu.rows;\n\n        if (rows !== value.rows) {\n            throw new Error('Invalid matrix dimensions');\n        }\n        if (this.isSingular()) {\n            throw new Error('LU matrix is singular');\n        }\n\n        var count = value.columns;\n        var X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n        var columns = lu.columns;\n        var i, j, k;\n\n        for (k = 0; k < columns; k++) {\n            for (i = k + 1; i < columns; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        for (k = columns - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= lu[k][k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = LuDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pls/node_modules/ml-matrix/src/dc/lu.js","'use strict';\n\nvar Matrix = require('../matrix');\nvar util = require('./util');\nvar hypotenuse = util.hypotenuse;\nvar getFilled2DArray = util.getFilled2DArray;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\nfunction SingularValueDecomposition(value, options) {\n    if (!(this instanceof SingularValueDecomposition)) {\n        return new SingularValueDecomposition(value, options);\n    }\n    value = Matrix.Matrix.checkMatrix(value);\n\n    options = options || {};\n\n    var m = value.rows,\n        n = value.columns,\n        nu = Math.min(m, n);\n\n    var wantu = true, wantv = true;\n    if (options.computeLeftSingularVectors === false) wantu = false;\n    if (options.computeRightSingularVectors === false) wantv = false;\n    var autoTranspose = options.autoTranspose === true;\n\n    var swapped = false;\n    var a;\n    if (m < n) {\n        if (!autoTranspose) {\n            a = value.clone();\n            // eslint-disable-next-line no-console\n            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n        } else {\n            a = value.transpose();\n            m = a.rows;\n            n = a.columns;\n            swapped = true;\n            var aux = wantu;\n            wantu = wantv;\n            wantv = aux;\n        }\n    } else {\n        a = value.clone();\n    }\n\n    var s = new Array(Math.min(m + 1, n)),\n        U = getFilled2DArray(m, nu, 0),\n        V = getFilled2DArray(n, n, 0),\n        e = new Array(n),\n        work = new Array(m);\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n\n    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\n    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n        if (k < nct) {\n            s[k] = 0;\n            for (i = k; i < m; i++) {\n                s[k] = hypotenuse(s[k], a[i][k]);\n            }\n            if (s[k] !== 0) {\n                if (a[k][k] < 0) {\n                    s[k] = -s[k];\n                }\n                for (i = k; i < m; i++) {\n                    a[i][k] /= s[k];\n                }\n                a[k][k] += 1;\n            }\n            s[k] = -s[k];\n        }\n\n        for (j = k + 1; j < n; j++) {\n            if ((k < nct) && (s[k] !== 0)) {\n                t = 0;\n                for (i = k; i < m; i++) {\n                    t += a[i][k] * a[i][j];\n                }\n                t = -t / a[k][k];\n                for (i = k; i < m; i++) {\n                    a[i][j] += t * a[i][k];\n                }\n            }\n            e[j] = a[k][j];\n        }\n\n        if (wantu && (k < nct)) {\n            for (i = k; i < m; i++) {\n                U[i][k] = a[i][k];\n            }\n        }\n\n        if (k < nrt) {\n            e[k] = 0;\n            for (i = k + 1; i < n; i++) {\n                e[k] = hypotenuse(e[k], e[i]);\n            }\n            if (e[k] !== 0) {\n                if (e[k + 1] < 0) {\n                    e[k] = 0 - e[k];\n                }\n                for (i = k + 1; i < n; i++) {\n                    e[i] /= e[k];\n                }\n                e[k + 1] += 1;\n            }\n            e[k] = -e[k];\n            if ((k + 1 < m) && (e[k] !== 0)) {\n                for (i = k + 1; i < m; i++) {\n                    work[i] = 0;\n                }\n                for (j = k + 1; j < n; j++) {\n                    for (i = k + 1; i < m; i++) {\n                        work[i] += e[j] * a[i][j];\n                    }\n                }\n                for (j = k + 1; j < n; j++) {\n                    t = -e[j] / e[k + 1];\n                    for (i = k + 1; i < m; i++) {\n                        a[i][j] += t * work[i];\n                    }\n                }\n            }\n            if (wantv) {\n                for (i = k + 1; i < n; i++) {\n                    V[i][k] = e[i];\n                }\n            }\n        }\n    }\n\n    p = Math.min(n, m + 1);\n    if (nct < n) {\n        s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n        s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n        e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n        for (j = nct; j < nu; j++) {\n            for (i = 0; i < m; i++) {\n                U[i][j] = 0;\n            }\n            U[j][j] = 1;\n        }\n        for (k = nct - 1; k >= 0; k--) {\n            if (s[k] !== 0) {\n                for (j = k + 1; j < nu; j++) {\n                    t = 0;\n                    for (i = k; i < m; i++) {\n                        t += U[i][k] * U[i][j];\n                    }\n                    t = -t / U[k][k];\n                    for (i = k; i < m; i++) {\n                        U[i][j] += t * U[i][k];\n                    }\n                }\n                for (i = k; i < m; i++) {\n                    U[i][k] = -U[i][k];\n                }\n                U[k][k] = 1 + U[k][k];\n                for (i = 0; i < k - 1; i++) {\n                    U[i][k] = 0;\n                }\n            } else {\n                for (i = 0; i < m; i++) {\n                    U[i][k] = 0;\n                }\n                U[k][k] = 1;\n            }\n        }\n    }\n\n    if (wantv) {\n        for (k = n - 1; k >= 0; k--) {\n            if ((k < nrt) && (e[k] !== 0)) {\n                for (j = k + 1; j < n; j++) {\n                    t = 0;\n                    for (i = k + 1; i < n; i++) {\n                        t += V[i][k] * V[i][j];\n                    }\n                    t = -t / V[k + 1][k];\n                    for (i = k + 1; i < n; i++) {\n                        V[i][j] += t * V[i][k];\n                    }\n                }\n            }\n            for (i = 0; i < n; i++) {\n                V[i][k] = 0;\n            }\n            V[k][k] = 1;\n        }\n    }\n\n    var pp = p - 1,\n        iter = 0,\n        eps = Math.pow(2, -52);\n    while (p > 0) {\n        for (k = p - 2; k >= -1; k--) {\n            if (k === -1) {\n                break;\n            }\n            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n                e[k] = 0;\n                break;\n            }\n        }\n        if (k === p - 2) {\n            kase = 4;\n        } else {\n            for (ks = p - 1; ks >= k; ks--) {\n                if (ks === k) {\n                    break;\n                }\n                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n                if (Math.abs(s[ks]) <= eps * t) {\n                    s[ks] = 0;\n                    break;\n                }\n            }\n            if (ks === k) {\n                kase = 3;\n            } else if (ks === p - 1) {\n                kase = 1;\n            } else {\n                kase = 2;\n                k = ks;\n            }\n        }\n\n        k++;\n\n        switch (kase) {\n            case 1: {\n                f = e[p - 2];\n                e[p - 2] = 0;\n                for (j = p - 2; j >= k; j--) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    if (j !== k) {\n                        f = -sn * e[j - 1];\n                        e[j - 1] = cs * e[j - 1];\n                    }\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][p - 1];\n                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                            V[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 2 : {\n                f = e[k - 1];\n                e[k - 1] = 0;\n                for (j = k; j < p; j++) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    f = -sn * e[j];\n                    e[j] = cs * e[j];\n                    if (wantu) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][k - 1];\n                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 3 : {\n                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n                sp = s[p - 1] / scale;\n                spm1 = s[p - 2] / scale;\n                epm1 = e[p - 2] / scale;\n                sk = s[k] / scale;\n                ek = e[k] / scale;\n                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n                c = (sp * epm1) * (sp * epm1);\n                shift = 0;\n                if ((b !== 0) || (c !== 0)) {\n                    shift = Math.sqrt(b * b + c);\n                    if (b < 0) {\n                        shift = -shift;\n                    }\n                    shift = c / (b + shift);\n                }\n                f = (sk + sp) * (sk - sp) + shift;\n                g = sk * ek;\n                for (j = k; j < p - 1; j++) {\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    if (j !== k) {\n                        e[j - 1] = t;\n                    }\n                    f = cs * s[j] + sn * e[j];\n                    e[j] = cs * e[j] - sn * s[j];\n                    g = sn * s[j + 1];\n                    s[j + 1] = cs * s[j + 1];\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][j + 1];\n                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                            V[i][j] = t;\n                        }\n                    }\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    s[j] = t;\n                    f = cs * e[j] + sn * s[j + 1];\n                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n                    g = sn * e[j + 1];\n                    e[j + 1] = cs * e[j + 1];\n                    if (wantu && (j < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][j + 1];\n                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                e[p - 2] = f;\n                iter = iter + 1;\n                break;\n            }\n            case 4: {\n                if (s[k] <= 0) {\n                    s[k] = (s[k] < 0 ? -s[k] : 0);\n                    if (wantv) {\n                        for (i = 0; i <= pp; i++) {\n                            V[i][k] = -V[i][k];\n                        }\n                    }\n                }\n                while (k < pp) {\n                    if (s[k] >= s[k + 1]) {\n                        break;\n                    }\n                    t = s[k];\n                    s[k] = s[k + 1];\n                    s[k + 1] = t;\n                    if (wantv && (k < n - 1)) {\n                        for (i = 0; i < n; i++) {\n                            t = V[i][k + 1];\n                            V[i][k + 1] = V[i][k];\n                            V[i][k] = t;\n                        }\n                    }\n                    if (wantu && (k < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = U[i][k + 1];\n                            U[i][k + 1] = U[i][k];\n                            U[i][k] = t;\n                        }\n                    }\n                    k++;\n                }\n                iter = 0;\n                p--;\n                break;\n            }\n            // no default\n        }\n    }\n\n    if (swapped) {\n        var tmp = V;\n        V = U;\n        U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n}\n\nSingularValueDecomposition.prototype = {\n    get condition() {\n        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    get norm2() {\n        return this.s[0];\n    },\n    get rank() {\n        var eps = Math.pow(2, -52),\n            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n            r = 0,\n            s = this.s;\n        for (var i = 0, ii = s.length; i < ii; i++) {\n            if (s[i] > tol) {\n                r++;\n            }\n        }\n        return r;\n    },\n    get diagonal() {\n        return this.s;\n    },\n    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n    get threshold() {\n        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n    },\n    get leftSingularVectors() {\n        if (!Matrix.Matrix.isMatrix(this.U)) {\n            this.U = new Matrix.Matrix(this.U);\n        }\n        return this.U;\n    },\n    get rightSingularVectors() {\n        if (!Matrix.Matrix.isMatrix(this.V)) {\n            this.V = new Matrix.Matrix(this.V);\n        }\n        return this.V;\n    },\n    get diagonalMatrix() {\n        return Matrix.Matrix.diag(this.s);\n    },\n    solve: function (value) {\n\n        var Y = value,\n            e = this.threshold,\n            scols = this.s.length,\n            Ls = Matrix.Matrix.zeros(scols, scols),\n            i;\n\n        for (i = 0; i < scols; i++) {\n            if (Math.abs(this.s[i]) <= e) {\n                Ls[i][i] = 0;\n            } else {\n                Ls[i][i] = 1 / this.s[i];\n            }\n        }\n\n        var U = this.U;\n        var V = this.rightSingularVectors;\n\n        var VL = V.mmul(Ls),\n            vrows = V.rows,\n            urows = U.length,\n            VLU = Matrix.Matrix.zeros(vrows, urows),\n            j, k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < scols; k++) {\n                    sum += VL[i][k] * U[j][k];\n                }\n                VLU[i][j] = sum;\n            }\n        }\n\n        return VLU.mmul(Y);\n    },\n    solveForDiagonal: function (value) {\n        return this.solve(Matrix.Matrix.diag(value));\n    },\n    inverse: function () {\n        var V = this.V;\n        var e = this.threshold,\n            vrows = V.length,\n            vcols = V[0].length,\n            X = new Matrix.Matrix(vrows, this.s.length),\n            i, j;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < vcols; j++) {\n                if (Math.abs(this.s[j]) > e) {\n                    X[i][j] = V[i][j] / this.s[j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n\n        var U = this.U;\n\n        var urows = U.length,\n            ucols = U[0].length,\n            Y = new Matrix.Matrix(vrows, urows),\n            k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < ucols; k++) {\n                    sum += X[i][k] * U[j][k];\n                }\n                Y[i][j] = sum;\n            }\n        }\n\n        return Y;\n    }\n};\n\nmodule.exports = SingularValueDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pls/node_modules/ml-matrix/src/dc/svd.js","'use strict';\n\nconst nearestVector = require('ml-nearest-vector');\n\n/**\n * Calculates the distance matrix for a given array of points\n * @ignore\n * @param {Array<Array<Number>>} data - the [x,y,z,...] points to cluster\n * @param {Function} distance - Distance function to use between the points\n * @return {Array<Array<Number>>} - matrix with the distance values\n */\nfunction calculateDistanceMatrix(data, distance) {\n    var distanceMatrix = new Array(data.length);\n    for (var i = 0; i < data.length; ++i) {\n        for (var j = i; j < data.length; ++j) {\n            if (!distanceMatrix[i]) {\n                distanceMatrix[i] = new Array(data.length);\n            }\n            if (!distanceMatrix[j]) {\n                distanceMatrix[j] = new Array(data.length);\n            }\n            const dist = distance(data[i], data[j]);\n            distanceMatrix[i][j] = dist;\n            distanceMatrix[j][i] = dist;\n        }\n    }\n    return distanceMatrix;\n}\n\n/**\n * Updates the cluster identifier based in the new data\n * @ignore\n * @param {Array<Array<Number>>} data - the [x,y,z,...] points to cluster\n * @param {Array<Array<Number>>} centers - the K centers in format [x,y,z,...]\n * @param {Array <Number>} clusterID - the cluster identifier for each data dot\n * @param {Function} distance - Distance function to use between the points\n * @returns {Array} the cluster identifier for each data dot\n */\nfunction updateClusterID(data, centers, clusterID, distance) {\n    for (var i = 0; i < data.length; i++) {\n        clusterID[i] = nearestVector(centers, data[i], {distanceFunction: distance});\n    }\n    return clusterID;\n}\n\n/**\n * Update the center values based in the new configurations of the clusters\n * @ignore\n * @param {Array <Array <Number>>} data - the [x,y,z,...] points to cluster\n * @param {Array <Number>} clusterID - the cluster identifier for each data dot\n * @param {Number} K - Number of clusters\n * @returns {Array} he K centers in format [x,y,z,...]\n */\nfunction updateCenters(data, clusterID, K) {\n    const nDim = data[0].length;\n\n    // creates empty centers with 0 size\n    var centers = new Array(K);\n    var centersLen = new Array(K);\n    for (var i = 0; i < K; i++) {\n        centers[i] = new Array(nDim);\n        centersLen[i] = 0;\n        for (var j = 0; j < nDim; j++) {\n            centers[i][j] = 0;\n        }\n    }\n\n    // add the value for all dimensions of the point\n    for (var l = 0; l < data.length; l++) {\n        centersLen[clusterID[l]]++;\n        for (var dim = 0; dim < nDim; dim++) {\n            centers[clusterID[l]][dim] += data[l][dim];\n        }\n    }\n\n    // divides by length\n    for (var id = 0; id < K; id++) {\n        for (var d = 0; d < nDim; d++) {\n            centers[id][d] /= centersLen[id];\n        }\n    }\n    return centers;\n}\n\n/**\n * The centers have moved more than the tolerance value?\n * @ignore\n * @param {Array<Array<Number>>} centers - the K centers in format [x,y,z,...]\n * @param {Array<Array<Number>>} oldCenters - the K old centers in format [x,y,z,...]\n * @param {Function} distanceFunction - Distance function to use between the points\n * @param {Number} tolerance - Allowed distance for the centroids to move\n * @return {boolean}\n */\nfunction converged(centers, oldCenters, distanceFunction, tolerance) {\n    for (var i = 0; i < centers.length; i++) {\n        if (distanceFunction(centers[i], oldCenters[i]) > tolerance) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexports.updateClusterID = updateClusterID;\nexports.updateCenters = updateCenters;\nexports.calculateDistanceMatrix = calculateDistanceMatrix;\nexports.converged = converged;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-kmeans/src/utils.js","'use strict';\n\nconst Cluster = require('./Cluster');\nconst util = require('util');\n\nfunction ClusterLeaf(index) {\n    Cluster.call(this);\n    this.index = index;\n    this.distance = 0;\n    this.children = [];\n}\n\nutil.inherits(ClusterLeaf, Cluster);\n\nmodule.exports = ClusterLeaf;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-hclust/src/ClusterLeaf.js","function NodeSquare(x, y, weights, som) {\n    this.x = x;\n    this.y = y;\n    this.weights = weights;\n    this.som = som;\n    this.neighbors = {};\n}\n\nNodeSquare.prototype.adjustWeights = function adjustWeights(target, learningRate, influence) {\n    for (var i = 0, ii = this.weights.length; i < ii; i++) {\n        this.weights[i] += learningRate * influence * (target[i] - this.weights[i]);\n    }\n};\n\nNodeSquare.prototype.getDistance = function getDistance(otherNode) {\n    return Math.max(Math.abs(this.x - otherNode.x), Math.abs(this.y - otherNode.y));\n};\n\nNodeSquare.prototype.getDistanceTorus = function getDistanceTorus(otherNode) {\n    var distX = Math.abs(this.x - otherNode.x),\n        distY = Math.abs(this.y - otherNode.y);\n    return Math.max(Math.min(distX, this.som.gridDim.x - distX), Math.min(distY, this.som.gridDim.y - distY));\n};\n\nNodeSquare.prototype.getNeighbors = function getNeighbors(xy) {\n    if (!this.neighbors[xy]) {\n        this.neighbors[xy] = new Array(2);\n\n        // left or bottom neighbor\n        var v;\n        if (this[xy] > 0) {\n            v = this[xy] - 1;\n        } else if (this.som.torus) {\n            v = this.som.gridDim[xy] - 1\n        }\n        if (typeof v !== 'undefined') {\n            var x, y;\n            if (xy === 'x') {\n                x = v;\n                y = this.y;\n            } else {\n                x = this.x;\n                y = v;\n            }\n            this.neighbors[xy][0] = this.som.nodes[x][y];\n        }\n\n        // top or right neighbor\n        var w;\n        if (this[xy] < (this.som.gridDim[xy] - 1)) {\n            w = this[xy] + 1;\n        } else if (this.som.torus) {\n            w = 0;\n        }\n        if (typeof w !== 'undefined') {\n            if (xy === 'x') {\n                x = w;\n                y = this.y;\n            } else {\n                x = this.x;\n                y = w;\n            }\n            this.neighbors[xy][1] = this.som.nodes[x][y];\n        }\n    }\n    return this.neighbors[xy];\n};\n\nNodeSquare.prototype.getPos = function getPos(xy, element) {\n    var neighbors = this.getNeighbors(xy),\n        distance = this.som.distance,\n        bestNeighbor,\n        direction;\n    if(neighbors[0]) {\n        if (neighbors[1]) {\n            var dist1 = distance(element, neighbors[0].weights),\n                dist2 = distance(element, neighbors[1].weights);\n            if(dist1 < dist2) {\n                bestNeighbor = neighbors[0];\n                direction = -1;\n            } else {\n                bestNeighbor = neighbors[1];\n                direction = 1;\n            }\n        } else {\n            bestNeighbor = neighbors[0];\n            direction = -1;\n        }\n    } else {\n        bestNeighbor = neighbors[1];\n        direction = 1;\n    }\n    var simA = 1 - distance(element, this.weights),\n        simB = 1 - distance(element, bestNeighbor.weights);\n    var factor = ((simA - simB) / (2 - simA - simB));\n    return 0.5 + 0.5 * factor * direction;\n};\n\nNodeSquare.prototype.getPosition = function getPosition(element) {\n    return [\n        this.getPos('x', element),\n        this.getPos('y', element)\n    ];\n};\n\nmodule.exports = NodeSquare;\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-som/src/node-square.js","'use strict';\n\nmodule.exports = abstractMatrix;\n\nvar LuDecomposition = require('./dc/lu');\nvar SvDecomposition = require('./dc/svd');\nvar arrayUtils = require('ml-array-utils');\nvar util = require('./util');\nvar MatrixTransposeView = require('./views/transpose');\nvar MatrixRowView = require('./views/row');\nvar MatrixSubView = require('./views/sub');\nvar MatrixSelectionView = require('./views/selection');\nvar MatrixColumnView = require('./views/column');\nvar MatrixFlipRowView = require('./views/flipRow');\nvar MatrixFlipColumnView = require('./views/flipColumn');\n\nfunction abstractMatrix(superCtor) {\n    if (superCtor === undefined) superCtor = Object;\n\n    /**\n     * Real matrix\n     * @class Matrix\n     * @param {number|Array|Matrix} nRows - Number of rows of the new matrix,\n     * 2D array containing the data or Matrix instance to clone\n     * @param {number} [nColumns] - Number of columns of the new matrix\n     */\n    class Matrix extends superCtor {\n        static get [Symbol.species]() {\n            return this;\n        }\n\n        /**\n         * Constructs a Matrix with the chosen dimensions from a 1D array\n         * @param {number} newRows - Number of rows\n         * @param {number} newColumns - Number of columns\n         * @param {Array} newData - A 1D array containing data for the matrix\n         * @return {Matrix} - The new matrix\n         */\n        static from1DArray(newRows, newColumns, newData) {\n            var length = newRows * newColumns;\n            if (length !== newData.length) {\n                throw new RangeError('Data length does not match given dimensions');\n            }\n            var newMatrix = new this(newRows, newColumns);\n            for (var row = 0; row < newRows; row++) {\n                for (var column = 0; column < newColumns; column++) {\n                    newMatrix.set(row, column, newData[row * newColumns + column]);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Creates a row vector, a matrix with only one row.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n        static rowVector(newData) {\n            var vector = new this(1, newData.length);\n            for (var i = 0; i < newData.length; i++) {\n                vector.set(0, i, newData[i]);\n            }\n            return vector;\n        }\n\n        /**\n         * Creates a column vector, a matrix with only one column.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n        static columnVector(newData) {\n            var vector = new this(newData.length, 1);\n            for (var i = 0; i < newData.length; i++) {\n                vector.set(i, 0, newData[i]);\n            }\n            return vector;\n        }\n\n        /**\n         * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static empty(rows, columns) {\n            return new this(rows, columns);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be set to zero.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static zeros(rows, columns) {\n            return this.empty(rows, columns).fill(0);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be set to one.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static ones(rows, columns) {\n            return this.empty(rows, columns).fill(1);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be randomly set.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n        static rand(rows, columns, rng) {\n            if (rng === undefined) rng = Math.random;\n            var matrix = this.empty(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    matrix.set(i, j, rng());\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be random integers.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {number} [maxValue=1000] - Maximum value\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n        static randInt(rows, columns, maxValue, rng) {\n            if (maxValue === undefined) maxValue = 1000;\n            if (rng === undefined) rng = Math.random;\n            var matrix = this.empty(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    var value = Math.floor(rng() * maxValue);\n                    matrix.set(i, j, value);\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and others will be 0.\n         * @param {number} rows - Number of rows\n         * @param {number} [columns=rows] - Number of columns\n         * @param {number} [value=1] - Value to fill the diagonal with\n         * @return {Matrix} - The new identity matrix\n         */\n        static eye(rows, columns, value) {\n            if (columns === undefined) columns = rows;\n            if (value === undefined) value = 1;\n            var min = Math.min(rows, columns);\n            var matrix = this.zeros(rows, columns);\n            for (var i = 0; i < min; i++) {\n                matrix.set(i, i, value);\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates a diagonal matrix based on the given array.\n         * @param {Array} data - Array containing the data for the diagonal\n         * @param {number} [rows] - Number of rows (Default: data.length)\n         * @param {number} [columns] - Number of columns (Default: rows)\n         * @return {Matrix} - The new diagonal matrix\n         */\n        static diag(data, rows, columns) {\n            var l = data.length;\n            if (rows === undefined) rows = l;\n            if (columns === undefined) columns = rows;\n            var min = Math.min(l, rows, columns);\n            var matrix = this.zeros(rows, columns);\n            for (var i = 0; i < min; i++) {\n                matrix.set(i, i, data[i]);\n            }\n            return matrix;\n        }\n\n        /**\n         * Returns a matrix whose elements are the minimum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n        static min(matrix1, matrix2) {\n            matrix1 = this.checkMatrix(matrix1);\n            matrix2 = this.checkMatrix(matrix2);\n            var rows = matrix1.rows;\n            var columns = matrix1.columns;\n            var result = new this(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Returns a matrix whose elements are the maximum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n        static max(matrix1, matrix2) {\n            matrix1 = this.checkMatrix(matrix1);\n            matrix2 = this.checkMatrix(matrix2);\n            var rows = matrix1.rows;\n            var columns = matrix1.columns;\n            var result = new this(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Check that the provided value is a Matrix and tries to instantiate one if not\n         * @param {*} value - The value to check\n         * @return {Matrix}\n         */\n        static checkMatrix(value) {\n            return Matrix.isMatrix(value) ? value : new this(value);\n        }\n\n        /**\n         * Returns true if the argument is a Matrix, false otherwise\n         * @param {*} value - The value to check\n         * @return {boolean}\n         */\n        static isMatrix(value) {\n            return (value != null) && (value.klass === 'Matrix');\n        }\n\n        /**\n         * @prop {number} size - The number of elements in the matrix.\n         */\n        get size() {\n            return this.rows * this.columns;\n        }\n\n        /**\n         * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n         * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n         * @return {Matrix} this\n         */\n        apply(callback) {\n            if (typeof callback !== 'function') {\n                throw new TypeError('callback must be a function');\n            }\n            var ii = this.rows;\n            var jj = this.columns;\n            for (var i = 0; i < ii; i++) {\n                for (var j = 0; j < jj; j++) {\n                    callback.call(this, i, j);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Returns a new 1D array filled row by row with the matrix values\n         * @return {Array}\n         */\n        to1DArray() {\n            var array = new Array(this.size);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    array[i * this.columns + j] = this.get(i, j);\n                }\n            }\n            return array;\n        }\n\n        /**\n         * Returns a 2D array containing a copy of the data\n         * @return {Array}\n         */\n        to2DArray() {\n            var copy = new Array(this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                copy[i] = new Array(this.columns);\n                for (var j = 0; j < this.columns; j++) {\n                    copy[i][j] = this.get(i, j);\n                }\n            }\n            return copy;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one row\n         */\n        isRowVector() {\n            return this.rows === 1;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one column\n         */\n        isColumnVector() {\n            return this.columns === 1;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one row or one column\n         */\n        isVector() {\n            return (this.rows === 1) || (this.columns === 1);\n        }\n\n        /**\n         * @return {boolean} true if the matrix has the same number of rows and columns\n         */\n        isSquare() {\n            return this.rows === this.columns;\n        }\n\n        /**\n         * @return {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n         */\n        isSymmetric() {\n            if (this.isSquare()) {\n                for (var i = 0; i < this.rows; i++) {\n                    for (var j = 0; j <= i; j++) {\n                        if (this.get(i, j) !== this.get(j, i)) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            }\n            return false;\n        }\n\n        /**\n         * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @param {number} value - The new value for the element\n         * @return {Matrix} this\n         */\n        set(rowIndex, columnIndex, value) { // eslint-disable-line no-unused-vars\n            throw new Error('set method is unimplemented');\n        }\n\n        /**\n         * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @return {number}\n         */\n        get(rowIndex, columnIndex) { // eslint-disable-line no-unused-vars\n            throw new Error('get method is unimplemented');\n        }\n\n        /**\n         * Creates a new matrix that is a repetition of the current matrix. New matrix has rowRep times the number of\n         * rows of the matrix, and colRep times the number of columns of the matrix\n         * @param {number} rowRep - Number of times the rows should be repeated\n         * @param {number} colRep - Number of times the columns should be re\n         * @return {Matrix}\n         * @example\n         * var matrix = new Matrix([[1,2]]);\n         * matrix.repeat(2); // [[1,2],[1,2]]\n         */\n        repeat(rowRep, colRep) {\n            rowRep = rowRep || 1;\n            colRep = colRep || 1;\n            var matrix = new this.constructor[Symbol.species](this.rows * rowRep, this.columns * colRep);\n            for (var i = 0; i < rowRep; i++) {\n                for (var j = 0; j < colRep; j++) {\n                    matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Fills the matrix with a given value. All elements will be set to this value.\n         * @param {number} value - New value\n         * @return {Matrix} this\n         */\n        fill(value) {\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, value);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Negates the matrix. All elements will be multiplied by (-1)\n         * @return {Matrix} this\n         */\n        neg() {\n            return this.mulS(-1);\n        }\n\n        /**\n         * Returns a new array from the given row index\n         * @param {number} index - Row index\n         * @return {Array}\n         */\n        getRow(index) {\n            util.checkRowIndex(this, index);\n            var row = new Array(this.columns);\n            for (var i = 0; i < this.columns; i++) {\n                row[i] = this.get(index, i);\n            }\n            return row;\n        }\n\n        /**\n         * Returns a new row vector from the given row index\n         * @param {number} index - Row index\n         * @return {Matrix}\n         */\n        getRowVector(index) {\n            return this.constructor.rowVector(this.getRow(index));\n        }\n\n        /**\n         * Sets a row at the given index\n         * @param {number} index - Row index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n        setRow(index, array) {\n            util.checkRowIndex(this, index);\n            array = util.checkRowVector(this, array);\n            for (var i = 0; i < this.columns; i++) {\n                this.set(index, i, array[i]);\n            }\n            return this;\n        }\n\n        /**\n         * Swaps two rows\n         * @param {number} row1 - First row index\n         * @param {number} row2 - Second row index\n         * @return {Matrix} this\n         */\n        swapRows(row1, row2) {\n            util.checkRowIndex(this, row1);\n            util.checkRowIndex(this, row2);\n            for (var i = 0; i < this.columns; i++) {\n                var temp = this.get(row1, i);\n                this.set(row1, i, this.get(row2, i));\n                this.set(row2, i, temp);\n            }\n            return this;\n        }\n\n        /**\n         * Returns a new array from the given column index\n         * @param {number} index - Column index\n         * @return {Array}\n         */\n        getColumn(index) {\n            util.checkColumnIndex(this, index);\n            var column = new Array(this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                column[i] = this.get(i, index);\n            }\n            return column;\n        }\n\n        /**\n         * Returns a new column vector from the given column index\n         * @param {number} index - Column index\n         * @return {Matrix}\n         */\n        getColumnVector(index) {\n            return this.constructor.columnVector(this.getColumn(index));\n        }\n\n        /**\n         * Sets a column at the given index\n         * @param {number} index - Column index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n        setColumn(index, array) {\n            util.checkColumnIndex(this, index);\n            array = util.checkColumnVector(this, array);\n            for (var i = 0; i < this.rows; i++) {\n                this.set(i, index, array[i]);\n            }\n            return this;\n        }\n\n        /**\n         * Swaps two columns\n         * @param {number} column1 - First column index\n         * @param {number} column2 - Second column index\n         * @return {Matrix} this\n         */\n        swapColumns(column1, column2) {\n            util.checkColumnIndex(this, column1);\n            util.checkColumnIndex(this, column2);\n            for (var i = 0; i < this.rows; i++) {\n                var temp = this.get(i, column1);\n                this.set(i, column1, this.get(i, column2));\n                this.set(i, column2, temp);\n            }\n            return this;\n        }\n\n        /**\n         * Adds the values of a vector to each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        addRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) + vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Subtracts the values of a vector from each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        subRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) - vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a vector with each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        mulRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) * vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Divides the values of each row by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        divRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) / vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Adds the values of a vector to each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        addColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) + vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Subtracts the values of a vector from each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        subColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) - vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a vector with each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        mulColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) * vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Divides the values of each column by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        divColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) / vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a row with a scalar\n         * @param {number} index - Row index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n        mulRow(index, value) {\n            util.checkRowIndex(this, index);\n            for (var i = 0; i < this.columns; i++) {\n                this.set(index, i, this.get(index, i) * value);\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a column with a scalar\n         * @param {number} index - Column index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n        mulColumn(index, value) {\n            util.checkColumnIndex(this, index);\n            for (var i = 0; i < this.rows; i++) {\n                this.set(i, index, this.get(i, index) * value);\n            }\n            return this;\n        }\n\n        /**\n         * Returns the maximum value of the matrix\n         * @return {number}\n         */\n        max() {\n            var v = this.get(0, 0);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) > v) {\n                        v = this.get(i, j);\n                    }\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value\n         * @return {Array}\n         */\n        maxIndex() {\n            var v = this.get(0, 0);\n            var idx = [0, 0];\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) > v) {\n                        v = this.get(i, j);\n                        idx[0] = i;\n                        idx[1] = j;\n                    }\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of the matrix\n         * @return {number}\n         */\n        min() {\n            var v = this.get(0, 0);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) < v) {\n                        v = this.get(i, j);\n                    }\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the minimum value\n         * @return {Array}\n         */\n        minIndex() {\n            var v = this.get(0, 0);\n            var idx = [0, 0];\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) < v) {\n                        v = this.get(i, j);\n                        idx[0] = i;\n                        idx[1] = j;\n                    }\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the maximum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n        maxRow(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) > v) {\n                    v = this.get(row, i);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n        maxRowIndex(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            var idx = [row, 0];\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) > v) {\n                    v = this.get(row, i);\n                    idx[1] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n        minRow(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) < v) {\n                    v = this.get(row, i);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n        minRowIndex(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            var idx = [row, 0];\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) < v) {\n                    v = this.get(row, i);\n                    idx[1] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the maximum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n        maxColumn(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) > v) {\n                    v = this.get(i, column);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n        maxColumnIndex(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            var idx = [0, column];\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) > v) {\n                    v = this.get(i, column);\n                    idx[0] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n        minColumn(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) < v) {\n                    v = this.get(i, column);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the minimum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n        minColumnIndex(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            var idx = [0, column];\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) < v) {\n                    v = this.get(i, column);\n                    idx[0] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns an array containing the diagonal values of the matrix\n         * @return {Array}\n         */\n        diag() {\n            var min = Math.min(this.rows, this.columns);\n            var diag = new Array(min);\n            for (var i = 0; i < min; i++) {\n                diag[i] = this.get(i, i);\n            }\n            return diag;\n        }\n\n        /**\n         * Returns the sum by the argument given, if no argument given,\n         * it returns the sum of all elements of the matrix.\n         * @param {string} by - sum by 'row' or 'column'.\n         * @return {Matrix|number}\n         */\n        sum(by) {\n            switch (by) {\n                case 'row':\n                    return util.sumByRow(this);\n                case 'column':\n                    return util.sumByColumn(this);\n                default:\n                    return util.sumAll(this);\n            }\n        }\n\n        /**\n         * Returns the mean of all elements of the matrix\n         * @return {number}\n         */\n        mean() {\n            return this.sum() / this.size;\n        }\n\n        /**\n         * Returns the product of all elements of the matrix\n         * @return {number}\n         */\n        prod() {\n            var prod = 1;\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    prod *= this.get(i, j);\n                }\n            }\n            return prod;\n        }\n\n        /**\n         * Computes the cumulative sum of the matrix elements (in place, row by row)\n         * @return {Matrix} this\n         */\n        cumulativeSum() {\n            var sum = 0;\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    sum += this.get(i, j);\n                    this.set(i, j, sum);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Computes the dot (scalar) product between the matrix and another\n         * @param {Matrix} vector2 vector\n         * @return {number}\n         */\n        dot(vector2) {\n            if (Matrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n            var vector1 = this.to1DArray();\n            if (vector1.length !== vector2.length) {\n                throw new RangeError('vectors do not have the same size');\n            }\n            var dot = 0;\n            for (var i = 0; i < vector1.length; i++) {\n                dot += vector1[i] * vector2[i];\n            }\n            return dot;\n        }\n\n        /**\n         * Returns the matrix product between this and other\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n        mmul(other) {\n            other = this.constructor.checkMatrix(other);\n            if (this.columns !== other.rows) {\n                // eslint-disable-next-line no-console\n                console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n            }\n\n            var m = this.rows;\n            var n = this.columns;\n            var p = other.columns;\n\n            var result = new this.constructor[Symbol.species](m, p);\n\n            var Bcolj = new Array(n);\n            for (var j = 0; j < p; j++) {\n                for (var k = 0; k < n; k++) {\n                    Bcolj[k] = other.get(k, j);\n                }\n\n                for (var i = 0; i < m; i++) {\n                    var s = 0;\n                    for (k = 0; k < n; k++) {\n                        s += this.get(i, k) * Bcolj[k];\n                    }\n\n                    result.set(i, j, s);\n                }\n            }\n            return result;\n        }\n\n        strassen2x2(other) {\n            var result = new this.constructor[Symbol.species](2, 2);\n            const a11 = this.get(0, 0);\n            const b11 = other.get(0, 0);\n            const a12 = this.get(0, 1);\n            const b12 = other.get(0, 1);\n            const a21 = this.get(1, 0);\n            const b21 = other.get(1, 0);\n            const a22 = this.get(1, 1);\n            const b22 = other.get(1, 1);\n\n            // Compute intermediate values.\n            const m1 = (a11 + a22) * (b11 + b22);\n            const m2 = (a21 + a22) * b11;\n            const m3 = a11 * (b12 - b22);\n            const m4 = a22 * (b21 - b11);\n            const m5 = (a11 + a12) * b22;\n            const m6 = (a21 - a11) * (b11 + b12);\n            const m7 = (a12 - a22) * (b21 + b22);\n\n            // Combine intermediate values into the output.\n            const c00 = m1 + m4 - m5 + m7;\n            const c01 = m3 + m5;\n            const c10 = m2 + m4;\n            const c11 = m1 - m2 + m3 + m6;\n\n            result.set(0, 0, c00);\n            result.set(0, 1, c01);\n            result.set(1, 0, c10);\n            result.set(1, 1, c11);\n            return result;\n        }\n\n        strassen3x3(other) {\n            var result = new this.constructor[Symbol.species](3, 3);\n\n            const a00 = this.get(0, 0);\n            const a01 = this.get(0, 1);\n            const a02 = this.get(0, 2);\n            const a10 = this.get(1, 0);\n            const a11 = this.get(1, 1);\n            const a12 = this.get(1, 2);\n            const a20 = this.get(2, 0);\n            const a21 = this.get(2, 1);\n            const a22 = this.get(2, 2);\n\n            const b00 = other.get(0, 0);\n            const b01 = other.get(0, 1);\n            const b02 = other.get(0, 2);\n            const b10 = other.get(1, 0);\n            const b11 = other.get(1, 1);\n            const b12 = other.get(1, 2);\n            const b20 = other.get(2, 0);\n            const b21 = other.get(2, 1);\n            const b22 = other.get(2, 2);\n\n            const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n            const m2 = (a00 - a10) * (-b01 + b11);\n            const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n            const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n            const m5 = (a10 + a11) * (-b00 + b01);\n            const m6 = a00 * b00;\n            const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n            const m8 = (-a00 + a20) * (b02 - b12);\n            const m9 = (a20 + a21) * (-b00 + b02);\n            const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n            const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n            const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n            const m13 = (a02 - a22) * (b11 - b21);\n            const m14 = a02 * b20;\n            const m15 = (a21 + a22) * (-b20 + b21);\n            const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n            const m17 = (a02 - a12) * (b12 - b22);\n            const m18 = (a11 + a12) * (-b20 + b22);\n            const m19 = a01 * b10;\n            const m20 = a12 * b21;\n            const m21 = a10 * b02;\n            const m22 = a20 * b01;\n            const m23 = a22 * b22;\n\n            const c00 = m6 + m14 + m19;\n            const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n            const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n            const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n            const c11 = m2 + m4 + m5 + m6 + m20;\n            const c12 = m14 + m16 + m17 + m18 + m21;\n            const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n            const c21 = m12 + m13 + m14 + m15 + m22;\n            const c22 = m6 + m7 + m8 + m9 + m23;\n\n            result.set(0, 0, c00);\n            result.set(0, 1, c01);\n            result.set(0, 2, c02);\n            result.set(1, 0, c10);\n            result.set(1, 1, c11);\n            result.set(1, 2, c12);\n            result.set(2, 0, c20);\n            result.set(2, 1, c21);\n            result.set(2, 2, c22);\n            return result;\n        }\n\n        /**\n         * Returns the matrix product between x and y. More efficient than mmul(other) only when we multiply squared matrix and when the size of the matrix is > 1000.\n         * @param {Matrix} y\n         * @return {Matrix}\n         */\n        mmulStrassen(y) {\n            var x = this.clone();\n            var r1 = x.rows;\n            var c1 = x.columns;\n            var r2 = y.rows;\n            var c2 = y.columns;\n            if (c1 !== r2) {\n                // eslint-disable-next-line no-console\n                console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);\n            }\n\n            // Put a matrix into the top left of a matrix of zeros.\n            // `rows` and `cols` are the dimensions of the output matrix.\n            function embed(mat, rows, cols) {\n                var r = mat.rows;\n                var c = mat.columns;\n                if ((r === rows) && (c === cols)) {\n                    return mat;\n                } else {\n                    var resultat = Matrix.zeros(rows, cols);\n                    resultat = resultat.setSubMatrix(mat, 0, 0);\n                    return resultat;\n                }\n            }\n\n\n            // Make sure both matrices are the same size.\n            // This is exclusively for simplicity:\n            // this algorithm can be implemented with matrices of different sizes.\n\n            var r = Math.max(r1, r2);\n            var c = Math.max(c1, c2);\n            x = embed(x, r, c);\n            y = embed(y, r, c);\n\n            // Our recursive multiplication function.\n            function blockMult(a, b, rows, cols) {\n                // For small matrices, resort to naive multiplication.\n                if (rows <= 512 || cols <= 512) {\n                    return a.mmul(b); // a is equivalent to this\n                }\n\n                // Apply dynamic padding.\n                if ((rows % 2 === 1) && (cols % 2 === 1)) {\n                    a = embed(a, rows + 1, cols + 1);\n                    b = embed(b, rows + 1, cols + 1);\n                } else if (rows % 2 === 1) {\n                    a = embed(a, rows + 1, cols);\n                    b = embed(b, rows + 1, cols);\n                } else if (cols % 2 === 1) {\n                    a = embed(a, rows, cols + 1);\n                    b = embed(b, rows, cols + 1);\n                }\n\n                var halfRows = parseInt(a.rows / 2);\n                var halfCols = parseInt(a.columns / 2);\n                // Subdivide input matrices.\n                var a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n                var b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n                var a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n                var b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n                var a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n                var b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n                var a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n                var b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n                // Compute intermediate values.\n                var m1 = blockMult(Matrix.add(a11, a22), Matrix.add(b11, b22), halfRows, halfCols);\n                var m2 = blockMult(Matrix.add(a21, a22), b11, halfRows, halfCols);\n                var m3 = blockMult(a11, Matrix.sub(b12, b22), halfRows, halfCols);\n                var m4 = blockMult(a22, Matrix.sub(b21, b11), halfRows, halfCols);\n                var m5 = blockMult(Matrix.add(a11, a12), b22, halfRows, halfCols);\n                var m6 = blockMult(Matrix.sub(a21, a11), Matrix.add(b11, b12), halfRows, halfCols);\n                var m7 = blockMult(Matrix.sub(a12, a22), Matrix.add(b21, b22), halfRows, halfCols);\n\n                // Combine intermediate values into the output.\n                var c11 = Matrix.add(m1, m4);\n                c11.sub(m5);\n                c11.add(m7);\n                var c12 = Matrix.add(m3, m5);\n                var c21 = Matrix.add(m2, m4);\n                var c22 = Matrix.sub(m1, m2);\n                c22.add(m3);\n                c22.add(m6);\n\n                //Crop output to the desired size (undo dynamic padding).\n                var resultat = Matrix.zeros(2 * c11.rows, 2 * c11.columns);\n                resultat = resultat.setSubMatrix(c11, 0, 0);\n                resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n                resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n                resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n                return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n            }\n            return blockMult(x, y, r, c);\n        }\n\n        /**\n         * Returns a row-by-row scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The scaled matrix\n         */\n        scaleRows(min, max) {\n            min = min === undefined ? 0 : min;\n            max = max === undefined ? 1 : max;\n            if (min >= max) {\n                throw new RangeError('min should be strictly smaller than max');\n            }\n            var newMatrix = this.constructor.empty(this.rows, this.columns);\n            for (var i = 0; i < this.rows; i++) {\n                var scaled = arrayUtils.scale(this.getRow(i), {min, max});\n                newMatrix.setRow(i, scaled);\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a new column-by-column scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The new scaled matrix\n         * @example\n         * var matrix = new Matrix([[1,2],[-1,0]]);\n         * var scaledMatrix = matrix.scaleColumns(); // [[1,1],[0,0]]\n         */\n        scaleColumns(min, max) {\n            min = min === undefined ? 0 : min;\n            max = max === undefined ? 1 : max;\n            if (min >= max) {\n                throw new RangeError('min should be strictly smaller than max');\n            }\n            var newMatrix = this.constructor.empty(this.rows, this.columns);\n            for (var i = 0; i < this.columns; i++) {\n                var scaled = arrayUtils.scale(this.getColumn(i), {\n                    min: min,\n                    max: max\n                });\n                newMatrix.setColumn(i, scaled);\n            }\n            return newMatrix;\n        }\n\n\n        /**\n         * Returns the Kronecker product (also known as tensor product) between this and other\n         * See https://en.wikipedia.org/wiki/Kronecker_product\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n        kroneckerProduct(other) {\n            other = this.constructor.checkMatrix(other);\n\n            var m = this.rows;\n            var n = this.columns;\n            var p = other.rows;\n            var q = other.columns;\n\n            var result = new this.constructor[Symbol.species](m * p, n * q);\n            for (var i = 0; i < m; i++) {\n                for (var j = 0; j < n; j++) {\n                    for (var k = 0; k < p; k++) {\n                        for (var l = 0; l < q; l++) {\n                            result[p * i + k][q * j + l] = this.get(i, j) * other.get(k, l);\n                        }\n                    }\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Transposes the matrix and returns a new one containing the result\n         * @return {Matrix}\n         */\n        transpose() {\n            var result = new this.constructor[Symbol.species](this.columns, this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    result.set(j, i, this.get(i, j));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Sorts the rows (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n        sortRows(compareFunction) {\n            if (compareFunction === undefined) compareFunction = compareNumbers;\n            for (var i = 0; i < this.rows; i++) {\n                this.setRow(i, this.getRow(i).sort(compareFunction));\n            }\n            return this;\n        }\n\n        /**\n         * Sorts the columns (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n        sortColumns(compareFunction) {\n            if (compareFunction === undefined) compareFunction = compareNumbers;\n            for (var i = 0; i < this.columns; i++) {\n                this.setColumn(i, this.getColumn(i).sort(compareFunction));\n            }\n            return this;\n        }\n\n        /**\n         * Returns a subset of the matrix\n         * @param {number} startRow - First row index\n         * @param {number} endRow - Last row index\n         * @param {number} startColumn - First column index\n         * @param {number} endColumn - Last column index\n         * @return {Matrix}\n         */\n        subMatrix(startRow, endRow, startColumn, endColumn) {\n            util.checkRange(this, startRow, endRow, startColumn, endColumn);\n            var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, endColumn - startColumn + 1);\n            for (var i = startRow; i <= endRow; i++) {\n                for (var j = startColumn; j <= endColumn; j++) {\n                    newMatrix[i - startRow][j - startColumn] = this.get(i, j);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a subset of the matrix based on an array of row indices\n         * @param {Array} indices - Array containing the row indices\n         * @param {number} [startColumn = 0] - First column index\n         * @param {number} [endColumn = this.columns-1] - Last column index\n         * @return {Matrix}\n         */\n        subMatrixRow(indices, startColumn, endColumn) {\n            if (startColumn === undefined) startColumn = 0;\n            if (endColumn === undefined) endColumn = this.columns - 1;\n            if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns)) {\n                throw new RangeError('Argument out of range');\n            }\n\n            var newMatrix = new this.constructor[Symbol.species](indices.length, endColumn - startColumn + 1);\n            for (var i = 0; i < indices.length; i++) {\n                for (var j = startColumn; j <= endColumn; j++) {\n                    if (indices[i] < 0 || indices[i] >= this.rows) {\n                        throw new RangeError('Row index out of range: ' + indices[i]);\n                    }\n                    newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a subset of the matrix based on an array of column indices\n         * @param {Array} indices - Array containing the column indices\n         * @param {number} [startRow = 0] - First row index\n         * @param {number} [endRow = this.rows-1] - Last row index\n         * @return {Matrix}\n         */\n        subMatrixColumn(indices, startRow, endRow) {\n            if (startRow === undefined) startRow = 0;\n            if (endRow === undefined) endRow = this.rows - 1;\n            if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows)) {\n                throw new RangeError('Argument out of range');\n            }\n\n            var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, indices.length);\n            for (var i = 0; i < indices.length; i++) {\n                for (var j = startRow; j <= endRow; j++) {\n                    if (indices[i] < 0 || indices[i] >= this.columns) {\n                        throw new RangeError('Column index out of range: ' + indices[i]);\n                    }\n                    newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Set a part of the matrix to the given sub-matrix\n         * @param {Matrix|Array< Array >} matrix - The source matrix from which to extract values.\n         * @param {number} startRow - The index of the first row to set\n         * @param {number} startColumn - The index of the first column to set\n         * @return {Matrix}\n         */\n        setSubMatrix(matrix, startRow, startColumn) {\n            matrix = this.constructor.checkMatrix(matrix);\n            var endRow = startRow + matrix.rows - 1;\n            var endColumn = startColumn + matrix.columns - 1;\n            util.checkRange(this, startRow, endRow, startColumn, endColumn);\n            for (var i = 0; i < matrix.rows; i++) {\n                for (var j = 0; j < matrix.columns; j++) {\n                    this[startRow + i][startColumn + j] = matrix.get(i, j);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Return a new matrix based on a selection of rows and columns\n         * @param {Array<number>} rowIndices - The row indices to select. Order matters and an index can be more than once.\n         * @param {Array<number>} columnIndices - The column indices to select. Order matters and an index can be use more than once.\n         * @return {Matrix} The new matrix\n         */\n        selection(rowIndices, columnIndices) {\n            var indices = util.checkIndices(this, rowIndices, columnIndices);\n            var newMatrix = new this.constructor[Symbol.species](rowIndices.length, columnIndices.length);\n            for (var i = 0; i < indices.row.length; i++) {\n                var rowIndex = indices.row[i];\n                for (var j = 0; j < indices.column.length; j++) {\n                    var columnIndex = indices.column[j];\n                    newMatrix[i][j] = this.get(rowIndex, columnIndex);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns the trace of the matrix (sum of the diagonal elements)\n         * @return {number}\n         */\n        trace() {\n            var min = Math.min(this.rows, this.columns);\n            var trace = 0;\n            for (var i = 0; i < min; i++) {\n                trace += this.get(i, i);\n            }\n            return trace;\n        }\n\n        /*\n         Matrix views\n         */\n\n        /**\n         * Returns a view of the transposition of the matrix\n         * @return {MatrixTransposeView}\n         */\n        transposeView() {\n            return new MatrixTransposeView(this);\n        }\n\n        /**\n         * Returns a view of the row vector with the given index\n         * @param {number} row - row index of the vector\n         * @return {MatrixRowView}\n         */\n        rowView(row) {\n            util.checkRowIndex(this, row);\n            return new MatrixRowView(this, row);\n        }\n\n        /**\n         * Returns a view of the column vector with the given index\n         * @param {number} column - column index of the vector\n         * @return {MatrixColumnView}\n         */\n        columnView(column) {\n            util.checkColumnIndex(this, column);\n            return new MatrixColumnView(this, column);\n        }\n\n        /**\n         * Returns a view of the matrix flipped in the row axis\n         * @return {MatrixFlipRowView}\n         */\n        flipRowView() {\n            return new MatrixFlipRowView(this);\n        }\n\n        /**\n         * Returns a view of the matrix flipped in the column axis\n         * @return {MatrixFlipColumnView}\n         */\n        flipColumnView() {\n            return new MatrixFlipColumnView(this);\n        }\n\n        /**\n         * Returns a view of a submatrix giving the index boundaries\n         * @param {number} startRow - first row index of the submatrix\n         * @param {number} endRow - last row index of the submatrix\n         * @param {number} startColumn - first column index of the submatrix\n         * @param {number} endColumn - last column index of the submatrix\n         * @return {MatrixSubView}\n         */\n        subMatrixView(startRow, endRow, startColumn, endColumn) {\n            return new MatrixSubView(this, startRow, endRow, startColumn, endColumn);\n        }\n\n        /**\n         * Returns a view of the cross of the row indices and the column indices\n         * @example\n         * // resulting vector is [[2], [2]]\n         * var matrix = new Matrix([[1,2,3], [4,5,6]]).selectionView([0, 0], [1])\n         * @param {Array<number>} rowIndices\n         * @param {Array<number>} columnIndices\n         * @return {MatrixSelectionView}\n         */\n        selectionView(rowIndices, columnIndices) {\n            return new MatrixSelectionView(this, rowIndices, columnIndices);\n        }\n\n\n        /**\n        * Calculates and returns the determinant of a matrix as a Number\n        * @example\n        *   new Matrix([[1,2,3], [4,5,6]]).det()\n        * @return {number}\n        */\n        det() {\n            if (this.isSquare()) {\n                var a, b, c, d;\n                if (this.columns === 2) {\n                    // 2 x 2 matrix\n                    a = this.get(0, 0);\n                    b = this.get(0, 1);\n                    c = this.get(1, 0);\n                    d = this.get(1, 1);\n\n                    return a * d - (b * c);\n                } else if (this.columns === 3) {\n                    // 3 x 3 matrix\n                    var subMatrix0, subMatrix1, subMatrix2;\n                    subMatrix0 = this.selectionView([1, 2], [1, 2]);\n                    subMatrix1 = this.selectionView([1, 2], [0, 2]);\n                    subMatrix2 = this.selectionView([1, 2], [0, 1]);\n                    a = this.get(0, 0);\n                    b = this.get(0, 1);\n                    c = this.get(0, 2);\n\n                    return a * subMatrix0.det() - b * subMatrix1.det() + c * subMatrix2.det();\n                } else {\n                    // general purpose determinant using the LU decomposition\n                    return new LuDecomposition(this).determinant;\n                }\n\n            } else {\n                throw Error('Determinant can only be calculated for a square matrix.');\n            }\n        }\n\n        /**\n         * Returns inverse of a matrix if it exists or the pseudoinverse\n         * @param {number} threshold - threshold for taking inverse of singular values (default = 1e-15)\n         * @return {Matrix} the (pseudo)inverted matrix.\n         */\n        pseudoInverse(threshold) {\n            if (threshold === undefined) threshold = Number.EPSILON;\n            var svdSolution = new SvDecomposition(this, {autoTranspose: true});\n\n            var U = svdSolution.leftSingularVectors;\n            var V = svdSolution.rightSingularVectors;\n            var s = svdSolution.diagonal;\n\n            for (var i = 0; i < s.length; i++) {\n                if (Math.abs(s[i]) > threshold) {\n                    s[i] = 1.0 / s[i];\n                } else {\n                    s[i] = 0.0;\n                }\n            }\n\n            // convert list to diagonal\n            s = this.constructor[Symbol.species].diag(s);\n            return V.mmul(s.mmul(U.transposeView()));\n        }\n    }\n\n    Matrix.prototype.klass = 'Matrix';\n\n    /**\n     * @private\n     * Check that two matrices have the same dimensions\n     * @param {Matrix} matrix\n     * @param {Matrix} otherMatrix\n     */\n    function checkDimensions(matrix, otherMatrix) { // eslint-disable-line no-unused-vars\n        if (matrix.rows !== otherMatrix.rows ||\n            matrix.columns !== otherMatrix.columns) {\n            throw new RangeError('Matrices dimensions must be equal');\n        }\n    }\n\n    function compareNumbers(a, b) {\n        return a - b;\n    }\n\n    /*\n     Synonyms\n     */\n\n    Matrix.random = Matrix.rand;\n    Matrix.diagonal = Matrix.diag;\n    Matrix.prototype.diagonal = Matrix.prototype.diag;\n    Matrix.identity = Matrix.eye;\n    Matrix.prototype.negate = Matrix.prototype.neg;\n    Matrix.prototype.tensorProduct = Matrix.prototype.kroneckerProduct;\n    Matrix.prototype.determinant = Matrix.prototype.det;\n\n    /*\n     Add dynamically instance and static methods for mathematical operations\n     */\n\n    var inplaceOperator = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n    var inplaceOperatorScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% value);\n        }\n    }\n    return this;\n})\n`;\n\n    var inplaceOperatorMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    checkDimensions(this, matrix);\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% matrix.get(i, j));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticOperator = `\n(function %name%(matrix, value) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(value);\n})\n`;\n\n    var inplaceMethod = `\n(function %name%() {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticMethod = `\n(function %name%(matrix) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%();\n})\n`;\n\n    var inplaceMethodWithArgs = `\n(function %name%(%args%) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), %args%));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticMethodWithArgs = `\n(function %name%(matrix, %args%) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(%args%);\n})\n`;\n\n\n    var inplaceMethodWithOneArgScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), value));\n        }\n    }\n    return this;\n})\n`;\n    var inplaceMethodWithOneArgMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    checkDimensions(this, matrix);\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), matrix.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n    var inplaceMethodWithOneArg = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n    var staticMethodWithOneArg = staticMethodWithArgs;\n\n    var operators = [\n        // Arithmetic operators\n        ['+', 'add'],\n        ['-', 'sub', 'subtract'],\n        ['*', 'mul', 'multiply'],\n        ['/', 'div', 'divide'],\n        ['%', 'mod', 'modulus'],\n        // Bitwise operators\n        ['&', 'and'],\n        ['|', 'or'],\n        ['^', 'xor'],\n        ['<<', 'leftShift'],\n        ['>>', 'signPropagatingRightShift'],\n        ['>>>', 'rightShift', 'zeroFillRightShift']\n    ];\n\n    var i;\n\n    for (var operator of operators) {\n        var inplaceOp = eval(fillTemplateFunction(inplaceOperator, {name: operator[1], op: operator[0]}));\n        var inplaceOpS = eval(fillTemplateFunction(inplaceOperatorScalar, {name: operator[1] + 'S', op: operator[0]}));\n        var inplaceOpM = eval(fillTemplateFunction(inplaceOperatorMatrix, {name: operator[1] + 'M', op: operator[0]}));\n        var staticOp = eval(fillTemplateFunction(staticOperator, {name: operator[1]}));\n        for (i = 1; i < operator.length; i++) {\n            Matrix.prototype[operator[i]] = inplaceOp;\n            Matrix.prototype[operator[i] + 'S'] = inplaceOpS;\n            Matrix.prototype[operator[i] + 'M'] = inplaceOpM;\n            Matrix[operator[i]] = staticOp;\n        }\n    }\n\n    var methods = [\n        ['~', 'not']\n    ];\n\n    [\n        'abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cbrt', 'ceil',\n        'clz32', 'cos', 'cosh', 'exp', 'expm1', 'floor', 'fround', 'log', 'log1p',\n        'log10', 'log2', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc'\n    ].forEach(function (mathMethod) {\n        methods.push(['Math.' + mathMethod, mathMethod]);\n    });\n\n    for (var method of methods) {\n        var inplaceMeth = eval(fillTemplateFunction(inplaceMethod, {name: method[1], method: method[0]}));\n        var staticMeth = eval(fillTemplateFunction(staticMethod, {name: method[1]}));\n        for (i = 1; i < method.length; i++) {\n            Matrix.prototype[method[i]] = inplaceMeth;\n            Matrix[method[i]] = staticMeth;\n        }\n    }\n\n    var methodsWithArgs = [\n        ['Math.pow', 1, 'pow']\n    ];\n\n    for (var methodWithArg of methodsWithArgs) {\n        var args = 'arg0';\n        for (i = 1; i < methodWithArg[1]; i++) {\n            args += `, arg${i}`;\n        }\n        if (methodWithArg[1] !== 1) {\n            var inplaceMethWithArgs = eval(fillTemplateFunction(inplaceMethodWithArgs, {\n                name: methodWithArg[2],\n                method: methodWithArg[0],\n                args: args\n            }));\n            var staticMethWithArgs = eval(fillTemplateFunction(staticMethodWithArgs, {name: methodWithArg[2], args: args}));\n            for (i = 2; i < methodWithArg.length; i++) {\n                Matrix.prototype[methodWithArg[i]] = inplaceMethWithArgs;\n                Matrix[methodWithArg[i]] = staticMethWithArgs;\n            }\n        } else {\n            var tmplVar = {\n                name: methodWithArg[2],\n                args: args,\n                method: methodWithArg[0]\n            };\n            var inplaceMethod2 = eval(fillTemplateFunction(inplaceMethodWithOneArg, tmplVar));\n            var inplaceMethodS = eval(fillTemplateFunction(inplaceMethodWithOneArgScalar, tmplVar));\n            var inplaceMethodM = eval(fillTemplateFunction(inplaceMethodWithOneArgMatrix, tmplVar));\n            var staticMethod2 = eval(fillTemplateFunction(staticMethodWithOneArg, tmplVar));\n            for (i = 2; i < methodWithArg.length; i++) {\n                Matrix.prototype[methodWithArg[i]] = inplaceMethod2;\n                Matrix.prototype[methodWithArg[i] + 'M'] = inplaceMethodM;\n                Matrix.prototype[methodWithArg[i] + 'S'] = inplaceMethodS;\n                Matrix[methodWithArg[i]] = staticMethod2;\n            }\n        }\n    }\n\n    function fillTemplateFunction(template, values) {\n        for (var value in values) {\n            template = template.replace(new RegExp('%' + value + '%', 'g'), values[value]);\n        }\n        return template;\n    }\n\n    return Matrix;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-fnn/node_modules/ml-matrix/src/abstractMatrix.js","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\nfunction LuDecomposition(matrix) {\n    if (!(this instanceof LuDecomposition)) {\n        return new LuDecomposition(matrix);\n    }\n\n    matrix = Matrix.Matrix.checkMatrix(matrix);\n\n    var lu = matrix.clone(),\n        rows = lu.rows,\n        columns = lu.columns,\n        pivotVector = new Array(rows),\n        pivotSign = 1,\n        i, j, k, p, s, t, v,\n        LUrowi, LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n        pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n\n        for (i = 0; i < rows; i++) {\n            LUcolj[i] = lu[i][j];\n        }\n\n        for (i = 0; i < rows; i++) {\n            LUrowi = lu[i];\n            kmax = Math.min(i, j);\n            s = 0;\n            for (k = 0; k < kmax; k++) {\n                s += LUrowi[k] * LUcolj[k];\n            }\n            LUrowi[j] = LUcolj[i] -= s;\n        }\n\n        p = j;\n        for (i = j + 1; i < rows; i++) {\n            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n                p = i;\n            }\n        }\n\n        if (p !== j) {\n            for (k = 0; k < columns; k++) {\n                t = lu[p][k];\n                lu[p][k] = lu[j][k];\n                lu[j][k] = t;\n            }\n\n            v = pivotVector[p];\n            pivotVector[p] = pivotVector[j];\n            pivotVector[j] = v;\n\n            pivotSign = -pivotSign;\n        }\n\n        if (j < rows && lu[j][j] !== 0) {\n            for (i = j + 1; i < rows; i++) {\n                lu[i][j] /= lu[j][j];\n            }\n        }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n}\n\nLuDecomposition.prototype = {\n    isSingular: function () {\n        var data = this.LU,\n            col = data.columns;\n        for (var j = 0; j < col; j++) {\n            if (data[j][j] === 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    get determinant() {\n        var data = this.LU;\n        if (!data.isSquare()) {\n            throw new Error('Matrix must be square');\n        }\n        var determinant = this.pivotSign, col = data.columns;\n        for (var j = 0; j < col; j++) {\n            determinant *= data[j][j];\n        }\n        return determinant;\n    },\n    get lowerTriangularMatrix() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix.Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i > j) {\n                    X[i][j] = data[i][j];\n                } else if (i === j) {\n                    X[i][j] = 1;\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get upperTriangularMatrix() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix.Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i <= j) {\n                    X[i][j] = data[i][j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get pivotPermutationVector() {\n        return this.pivotVector.slice();\n    },\n    solve: function (value) {\n        value = Matrix.Matrix.checkMatrix(value);\n\n        var lu = this.LU,\n            rows = lu.rows;\n\n        if (rows !== value.rows) {\n            throw new Error('Invalid matrix dimensions');\n        }\n        if (this.isSingular()) {\n            throw new Error('LU matrix is singular');\n        }\n\n        var count = value.columns;\n        var X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n        var columns = lu.columns;\n        var i, j, k;\n\n        for (k = 0; k < columns; k++) {\n            for (i = k + 1; i < columns; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        for (k = columns - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= lu[k][k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = LuDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-fnn/node_modules/ml-matrix/src/dc/lu.js","'use strict';\n\nvar Matrix = require('../matrix');\nvar util = require('./util');\nvar hypotenuse = util.hypotenuse;\nvar getFilled2DArray = util.getFilled2DArray;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\nfunction SingularValueDecomposition(value, options) {\n    if (!(this instanceof SingularValueDecomposition)) {\n        return new SingularValueDecomposition(value, options);\n    }\n    value = Matrix.Matrix.checkMatrix(value);\n\n    options = options || {};\n\n    var m = value.rows,\n        n = value.columns,\n        nu = Math.min(m, n);\n\n    var wantu = true, wantv = true;\n    if (options.computeLeftSingularVectors === false) wantu = false;\n    if (options.computeRightSingularVectors === false) wantv = false;\n    var autoTranspose = options.autoTranspose === true;\n\n    var swapped = false;\n    var a;\n    if (m < n) {\n        if (!autoTranspose) {\n            a = value.clone();\n            // eslint-disable-next-line no-console\n            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n        } else {\n            a = value.transpose();\n            m = a.rows;\n            n = a.columns;\n            swapped = true;\n            var aux = wantu;\n            wantu = wantv;\n            wantv = aux;\n        }\n    } else {\n        a = value.clone();\n    }\n\n    var s = new Array(Math.min(m + 1, n)),\n        U = getFilled2DArray(m, nu, 0),\n        V = getFilled2DArray(n, n, 0),\n        e = new Array(n),\n        work = new Array(m);\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n\n    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\n    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n        if (k < nct) {\n            s[k] = 0;\n            for (i = k; i < m; i++) {\n                s[k] = hypotenuse(s[k], a[i][k]);\n            }\n            if (s[k] !== 0) {\n                if (a[k][k] < 0) {\n                    s[k] = -s[k];\n                }\n                for (i = k; i < m; i++) {\n                    a[i][k] /= s[k];\n                }\n                a[k][k] += 1;\n            }\n            s[k] = -s[k];\n        }\n\n        for (j = k + 1; j < n; j++) {\n            if ((k < nct) && (s[k] !== 0)) {\n                t = 0;\n                for (i = k; i < m; i++) {\n                    t += a[i][k] * a[i][j];\n                }\n                t = -t / a[k][k];\n                for (i = k; i < m; i++) {\n                    a[i][j] += t * a[i][k];\n                }\n            }\n            e[j] = a[k][j];\n        }\n\n        if (wantu && (k < nct)) {\n            for (i = k; i < m; i++) {\n                U[i][k] = a[i][k];\n            }\n        }\n\n        if (k < nrt) {\n            e[k] = 0;\n            for (i = k + 1; i < n; i++) {\n                e[k] = hypotenuse(e[k], e[i]);\n            }\n            if (e[k] !== 0) {\n                if (e[k + 1] < 0) {\n                    e[k] = 0 - e[k];\n                }\n                for (i = k + 1; i < n; i++) {\n                    e[i] /= e[k];\n                }\n                e[k + 1] += 1;\n            }\n            e[k] = -e[k];\n            if ((k + 1 < m) && (e[k] !== 0)) {\n                for (i = k + 1; i < m; i++) {\n                    work[i] = 0;\n                }\n                for (j = k + 1; j < n; j++) {\n                    for (i = k + 1; i < m; i++) {\n                        work[i] += e[j] * a[i][j];\n                    }\n                }\n                for (j = k + 1; j < n; j++) {\n                    t = -e[j] / e[k + 1];\n                    for (i = k + 1; i < m; i++) {\n                        a[i][j] += t * work[i];\n                    }\n                }\n            }\n            if (wantv) {\n                for (i = k + 1; i < n; i++) {\n                    V[i][k] = e[i];\n                }\n            }\n        }\n    }\n\n    p = Math.min(n, m + 1);\n    if (nct < n) {\n        s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n        s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n        e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n        for (j = nct; j < nu; j++) {\n            for (i = 0; i < m; i++) {\n                U[i][j] = 0;\n            }\n            U[j][j] = 1;\n        }\n        for (k = nct - 1; k >= 0; k--) {\n            if (s[k] !== 0) {\n                for (j = k + 1; j < nu; j++) {\n                    t = 0;\n                    for (i = k; i < m; i++) {\n                        t += U[i][k] * U[i][j];\n                    }\n                    t = -t / U[k][k];\n                    for (i = k; i < m; i++) {\n                        U[i][j] += t * U[i][k];\n                    }\n                }\n                for (i = k; i < m; i++) {\n                    U[i][k] = -U[i][k];\n                }\n                U[k][k] = 1 + U[k][k];\n                for (i = 0; i < k - 1; i++) {\n                    U[i][k] = 0;\n                }\n            } else {\n                for (i = 0; i < m; i++) {\n                    U[i][k] = 0;\n                }\n                U[k][k] = 1;\n            }\n        }\n    }\n\n    if (wantv) {\n        for (k = n - 1; k >= 0; k--) {\n            if ((k < nrt) && (e[k] !== 0)) {\n                for (j = k + 1; j < n; j++) {\n                    t = 0;\n                    for (i = k + 1; i < n; i++) {\n                        t += V[i][k] * V[i][j];\n                    }\n                    t = -t / V[k + 1][k];\n                    for (i = k + 1; i < n; i++) {\n                        V[i][j] += t * V[i][k];\n                    }\n                }\n            }\n            for (i = 0; i < n; i++) {\n                V[i][k] = 0;\n            }\n            V[k][k] = 1;\n        }\n    }\n\n    var pp = p - 1,\n        iter = 0,\n        eps = Math.pow(2, -52);\n    while (p > 0) {\n        for (k = p - 2; k >= -1; k--) {\n            if (k === -1) {\n                break;\n            }\n            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n                e[k] = 0;\n                break;\n            }\n        }\n        if (k === p - 2) {\n            kase = 4;\n        } else {\n            for (ks = p - 1; ks >= k; ks--) {\n                if (ks === k) {\n                    break;\n                }\n                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n                if (Math.abs(s[ks]) <= eps * t) {\n                    s[ks] = 0;\n                    break;\n                }\n            }\n            if (ks === k) {\n                kase = 3;\n            } else if (ks === p - 1) {\n                kase = 1;\n            } else {\n                kase = 2;\n                k = ks;\n            }\n        }\n\n        k++;\n\n        switch (kase) {\n            case 1: {\n                f = e[p - 2];\n                e[p - 2] = 0;\n                for (j = p - 2; j >= k; j--) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    if (j !== k) {\n                        f = -sn * e[j - 1];\n                        e[j - 1] = cs * e[j - 1];\n                    }\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][p - 1];\n                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                            V[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 2 : {\n                f = e[k - 1];\n                e[k - 1] = 0;\n                for (j = k; j < p; j++) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    f = -sn * e[j];\n                    e[j] = cs * e[j];\n                    if (wantu) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][k - 1];\n                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 3 : {\n                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n                sp = s[p - 1] / scale;\n                spm1 = s[p - 2] / scale;\n                epm1 = e[p - 2] / scale;\n                sk = s[k] / scale;\n                ek = e[k] / scale;\n                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n                c = (sp * epm1) * (sp * epm1);\n                shift = 0;\n                if ((b !== 0) || (c !== 0)) {\n                    shift = Math.sqrt(b * b + c);\n                    if (b < 0) {\n                        shift = -shift;\n                    }\n                    shift = c / (b + shift);\n                }\n                f = (sk + sp) * (sk - sp) + shift;\n                g = sk * ek;\n                for (j = k; j < p - 1; j++) {\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    if (j !== k) {\n                        e[j - 1] = t;\n                    }\n                    f = cs * s[j] + sn * e[j];\n                    e[j] = cs * e[j] - sn * s[j];\n                    g = sn * s[j + 1];\n                    s[j + 1] = cs * s[j + 1];\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][j + 1];\n                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                            V[i][j] = t;\n                        }\n                    }\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    s[j] = t;\n                    f = cs * e[j] + sn * s[j + 1];\n                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n                    g = sn * e[j + 1];\n                    e[j + 1] = cs * e[j + 1];\n                    if (wantu && (j < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][j + 1];\n                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                e[p - 2] = f;\n                iter = iter + 1;\n                break;\n            }\n            case 4: {\n                if (s[k] <= 0) {\n                    s[k] = (s[k] < 0 ? -s[k] : 0);\n                    if (wantv) {\n                        for (i = 0; i <= pp; i++) {\n                            V[i][k] = -V[i][k];\n                        }\n                    }\n                }\n                while (k < pp) {\n                    if (s[k] >= s[k + 1]) {\n                        break;\n                    }\n                    t = s[k];\n                    s[k] = s[k + 1];\n                    s[k + 1] = t;\n                    if (wantv && (k < n - 1)) {\n                        for (i = 0; i < n; i++) {\n                            t = V[i][k + 1];\n                            V[i][k + 1] = V[i][k];\n                            V[i][k] = t;\n                        }\n                    }\n                    if (wantu && (k < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = U[i][k + 1];\n                            U[i][k + 1] = U[i][k];\n                            U[i][k] = t;\n                        }\n                    }\n                    k++;\n                }\n                iter = 0;\n                p--;\n                break;\n            }\n            // no default\n        }\n    }\n\n    if (swapped) {\n        var tmp = V;\n        V = U;\n        U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n}\n\nSingularValueDecomposition.prototype = {\n    get condition() {\n        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    get norm2() {\n        return this.s[0];\n    },\n    get rank() {\n        var eps = Math.pow(2, -52),\n            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n            r = 0,\n            s = this.s;\n        for (var i = 0, ii = s.length; i < ii; i++) {\n            if (s[i] > tol) {\n                r++;\n            }\n        }\n        return r;\n    },\n    get diagonal() {\n        return this.s;\n    },\n    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n    get threshold() {\n        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n    },\n    get leftSingularVectors() {\n        if (!Matrix.Matrix.isMatrix(this.U)) {\n            this.U = new Matrix.Matrix(this.U);\n        }\n        return this.U;\n    },\n    get rightSingularVectors() {\n        if (!Matrix.Matrix.isMatrix(this.V)) {\n            this.V = new Matrix.Matrix(this.V);\n        }\n        return this.V;\n    },\n    get diagonalMatrix() {\n        return Matrix.Matrix.diag(this.s);\n    },\n    solve: function (value) {\n\n        var Y = value,\n            e = this.threshold,\n            scols = this.s.length,\n            Ls = Matrix.Matrix.zeros(scols, scols),\n            i;\n\n        for (i = 0; i < scols; i++) {\n            if (Math.abs(this.s[i]) <= e) {\n                Ls[i][i] = 0;\n            } else {\n                Ls[i][i] = 1 / this.s[i];\n            }\n        }\n\n        var U = this.U;\n        var V = this.rightSingularVectors;\n\n        var VL = V.mmul(Ls),\n            vrows = V.rows,\n            urows = U.length,\n            VLU = Matrix.Matrix.zeros(vrows, urows),\n            j, k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < scols; k++) {\n                    sum += VL[i][k] * U[j][k];\n                }\n                VLU[i][j] = sum;\n            }\n        }\n\n        return VLU.mmul(Y);\n    },\n    solveForDiagonal: function (value) {\n        return this.solve(Matrix.Matrix.diag(value));\n    },\n    inverse: function () {\n        var V = this.V;\n        var e = this.threshold,\n            vrows = V.length,\n            vcols = V[0].length,\n            X = new Matrix.Matrix(vrows, this.s.length),\n            i, j;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < vcols; j++) {\n                if (Math.abs(this.s[j]) > e) {\n                    X[i][j] = V[i][j] / this.s[j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n\n        var U = this.U;\n\n        var urows = U.length,\n            ucols = U[0].length,\n            Y = new Matrix.Matrix(vrows, urows),\n            k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < ucols; k++) {\n                    sum += X[i][k] * U[j][k];\n                }\n                Y[i][j] = sum;\n            }\n        }\n\n        return Y;\n    }\n};\n\nmodule.exports = SingularValueDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-fnn/node_modules/ml-matrix/src/dc/svd.js","'use strict';\n\nvar Matrix = require('ml-matrix');\n\nvar Utils = require('./utils');\nconst ACTIVATION_FUNCTIONS = require('./activationFunctions');\n\nclass Layer {\n    /**\n     * Create a new layer with the given options\n     * @param {object} options\n     * @param {number} [options.inputSize] - Number of conections that enter the neurons.\n     * @param {number} [options.outputSize] - Number of conections that leave the neurons.\n     * @param {number} [options.regularization] - Regularization parameter.\n     * @param {number} [options.epsilon] - Learning rate parameter.\n     * @param {string} [options.activation] - Activation function parameter from the FeedForwardNeuralNetwork class.\n     * @param {number} [options.activationParam] - Activation parameter if needed.\n     */\n    constructor(options) {\n        this.inputSize = options.inputSize;\n        this.outputSize = options.outputSize;\n        this.regularization = options.regularization;\n        this.epsilon = options.epsilon;\n        this.activation = options.activation;\n        this.activationParam = options.activationParam;\n\n        var selectedFunction = ACTIVATION_FUNCTIONS[options.activation];\n        var params = selectedFunction.activation.length;\n\n        var actFunction = params > 1 ? val => selectedFunction.activation(val, options.activationParam) : selectedFunction.activation;\n        var derFunction = params > 1 ? val => selectedFunction.derivate(val, options.activationParam) : selectedFunction.derivate;\n\n        this.activationFunction = function (i, j) {\n            this[i][j] = actFunction(this[i][j]);\n        };\n        this.derivate = function (i, j) {\n            this[i][j] = derFunction(this[i][j]);\n        };\n\n        if (options.model) {\n            // load model\n            this.W = Matrix.checkMatrix(options.W);\n            this.b = Matrix.checkMatrix(options.b);\n\n        } else {\n            // default constructor\n\n            this.W = Matrix.rand(this.inputSize, this.outputSize);\n            this.b = Matrix.zeros(1, this.outputSize);\n\n            this.W.apply(function (i, j) {\n                this[i][j] /= Math.sqrt(options.inputSize);\n            });\n        }\n    }\n\n    /**\n     * propagate the given input through the current layer.\n     * @param {Matrix} X - input.\n     * @return {Matrix} output at the current layer.\n     */\n    forward(X) {\n        var z = X.mmul(this.W).addRowVector(this.b);\n        z.apply(this.activationFunction);\n        this.a = z.clone();\n        return z;\n    }\n\n    /**\n     * apply backpropagation algorithm at the current layer\n     * @param {Matrix} delta - delta values estimated at the following layer.\n     * @param {Matrix} a - 'a' values from the following layer.\n     * @return {Matrix} the new delta values for the next layer.\n     */\n    backpropagation(delta, a) {\n        this.dW = a.transposeView().mmul(delta);\n        this.db = Utils.sumCol(delta);\n\n        var aCopy = a.clone();\n        return delta.mmul(this.W.transposeView()).mul(aCopy.apply(this.derivate));\n    }\n\n    /**\n     * Function that updates the weights at the current layer with the derivatives.\n     */\n    update() {\n        this.dW.add(this.W.clone().mul(this.regularization));\n        this.W.add(this.dW.mul(-this.epsilon));\n        this.b.add(this.db.mul(-this.epsilon));\n    }\n\n    /**\n     * Export the current layer to JSON.\n     * @return {object} model\n     */\n    toJSON() {\n        return {\n            model: 'Layer',\n            inputSize: this.inputSize,\n            outputSize: this.outputSize,\n            regularization: this.regularization,\n            epsilon: this.epsilon,\n            activation: this.activation,\n            W: this.W,\n            b: this.b\n        };\n    }\n\n    /**\n     * Creates a new Layer with the given model.\n     * @param {object} model\n     * @return {Layer}\n     */\n    static load(model) {\n        if (model.model !== 'Layer') {\n            throw new RangeError('the current model is not a Layer model');\n        }\n        return new Layer(model);\n    }\n\n}\n\nmodule.exports = Layer;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-fnn/src/Layer.js","'use strict';\n\nvar Matrix = require('ml-matrix');\n\n/**\n * Retrieves the sum at each row of the given matrix.\n * @param {Matrix} matrix\n * @return {Matrix}\n */\nfunction sumRow(matrix) {\n    var sum = Matrix.zeros(matrix.rows, 1);\n    for (var i = 0; i < matrix.rows; ++i) {\n        for (var j = 0; j < matrix.columns; ++j) {\n            sum[i][0] += matrix[i][j];\n        }\n    }\n    return sum;\n}\n\n/**\n * Retrieves the sum at each column of the given matrix.\n * @param {Matrix} matrix\n * @return {Matrix}\n */\nfunction sumCol(matrix) {\n    var sum = Matrix.zeros(1, matrix.columns);\n    for (var i = 0; i < matrix.rows; ++i) {\n        for (var j = 0; j < matrix.columns; ++j) {\n            sum[0][j] += matrix[i][j];\n        }\n    }\n    return sum;\n}\n\n/**\n * Method that given an array of labels(predictions), returns two dictionaries, one to transform from labels to\n * numbers and other in the reverse way\n * @param {Array} array\n * @return {object}\n */\nfunction dictOutputs(array) {\n    var inputs = {}, outputs = {}, l = array.length, index = 0;\n    for (var i = 0; i < l; i += 1) {\n        if (inputs[array[i]] === undefined) {\n            inputs[array[i]] = index;\n            outputs[index] = array[i];\n            index++;\n        }\n    }\n\n    return {\n        inputs: inputs,\n        outputs: outputs\n    };\n}\n\nmodule.exports = {\n    dictOutputs: dictOutputs,\n    sumCol: sumCol,\n    sumRow: sumRow\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-fnn/src/utils.js","'use strict';\n\nconst Matrix = require('ml-matrix');\n\n// Root packages\nexports.ArrayUtils = exports.AU = require('ml-array-utils');\nexports.BitArray = require('ml-bit-array');\nexports.HashTable = require('ml-hash-table');\nexports.Matrix = Matrix.default;\nexports.PadArray = require('ml-pad-array');\nexports.Regression = require('ml-regression');\nexports.binarySearch = require('binary-search');\nexports.numSort = require('num-sort');\n\n\n// Math packages\nvar Math = exports.Math = {};\n\nvar distance = require('ml-distance');\nMath.Distance = distance.distance;\nMath.Similarity = distance.similarity;\nMath.DistanceMatrix = require('ml-distance-matrix');\nMath.SG = require('ml-savitzky-golay');\nMath.SGG = require('ml-savitzky-golay-generalized');\nMath.Matrix = Matrix;\nMath.SparseMatrix = require('ml-sparse-matrix');\nMath.Kernel = require('ml-kernel');\n\n\n// Statistics packages\nvar Stat = exports.Stat = {};\n\nStat.array = require('ml-stat').array;\nStat.matrix = require('ml-stat').matrix;\nStat.PCA = require('ml-pca');\nStat.Performance = require('ml-performance');\n\n// Math packages\nvar Optimization = exports.Optimization = {};\n\nOptimization.BellOptimizer = require('ml-optimize-lorentzian');\nOptimization.LevenbergMarquardt = require('ml-levenberg-marquardt');\n\n// Random number generation\nvar RNG = exports.RNG = {};\nRNG.XSadd = require('ml-xsadd');\n\n\n// Supervised learning\nvar SL = exports.SL = {};\n\nSL.CV = require('ml-cross-validation');\nSL.CrossValidation = SL.CV; // Alias\nSL.CM = require('ml-confusion-matrix');\nSL.ConfusionMatrix = SL.CM; // Alias\nSL.SVM = require('ml-svm');\nSL.KNN = require('ml-knn');\nSL.NaiveBayes = require('ml-naivebayes');\nSL.PLS = require('ml-pls');\n\n\n// Clustering\nvar Clust = exports.Clust = {};\n\nClust.kmeans = require('ml-kmeans');\nClust.hclust = require('ml-hclust');\n\n\n// Neural networks\nvar NN = exports.NN = exports.nn = {};\n\nNN.SOM = require('ml-som');\nNN.FNN = require('ml-fnn');\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","if (!Symbol.species) {\n    Symbol.species = Symbol.for('@@species');\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-matrix/src/symbol-species.js","'use strict';\n\nconst Stat = require('ml-stat').array;\n/**\n * Function that returns an array of points given 1D array as follows:\n *\n * [x1, y1, .. , x2, y2, ..]\n *\n * And receive the number of dimensions of each point.\n * @param array\n * @param dimensions\n * @returns {Array} - Array of points.\n */\nfunction coordArrayToPoints(array, dimensions) {\n    if(array.length % dimensions !== 0) {\n        throw new RangeError('Dimensions number must be accordance with the size of the array.');\n    }\n\n    var length = array.length / dimensions;\n    var pointsArr = new Array(length);\n\n    var k = 0;\n    for(var i = 0; i < array.length; i += dimensions) {\n        var point = new Array(dimensions);\n        for(var j = 0; j < dimensions; ++j) {\n            point[j] = array[i + j];\n        }\n\n        pointsArr[k] = point;\n        k++;\n    }\n\n    return pointsArr;\n}\n\n\n/**\n * Function that given an array as follows:\n * [x1, y1, .. , x2, y2, ..]\n *\n * Returns an array as follows:\n * [[x1, x2, ..], [y1, y2, ..], [ .. ]]\n *\n * And receives the number of dimensions of each coordinate.\n * @param array\n * @param dimensions\n * @returns {Array} - Matrix of coordinates\n */\nfunction coordArrayToCoordMatrix(array, dimensions) {\n    if(array.length % dimensions !== 0) {\n        throw new RangeError('Dimensions number must be accordance with the size of the array.');\n    }\n\n    var coordinatesArray = new Array(dimensions);\n    var points = array.length / dimensions;\n    for (var i = 0; i < coordinatesArray.length; i++) {\n        coordinatesArray[i] = new Array(points);\n    }\n\n    for(i = 0; i < array.length; i += dimensions) {\n        for(var j = 0; j < dimensions; ++j) {\n            var currentPoint = Math.floor(i / dimensions);\n            coordinatesArray[j][currentPoint] = array[i + j];\n        }\n    }\n\n    return coordinatesArray;\n}\n\n/**\n * Function that receives a coordinate matrix as follows:\n * [[x1, x2, ..], [y1, y2, ..], [ .. ]]\n *\n * Returns an array of coordinates as follows:\n * [x1, y1, .. , x2, y2, ..]\n *\n * @param coordMatrix\n * @returns {Array}\n */\nfunction coordMatrixToCoordArray(coordMatrix) {\n    var coodinatesArray = new Array(coordMatrix.length * coordMatrix[0].length);\n    var k = 0;\n    for(var i = 0; i < coordMatrix[0].length; ++i) {\n        for(var j = 0; j < coordMatrix.length; ++j) {\n            coodinatesArray[k] = coordMatrix[j][i];\n            ++k;\n        }\n    }\n\n    return coodinatesArray;\n}\n\n/**\n * Tranpose a matrix, this method is for coordMatrixToPoints and\n * pointsToCoordMatrix, that because only transposing the matrix\n * you can change your representation.\n *\n * @param matrix\n * @returns {Array}\n */\nfunction transpose(matrix) {\n    var resultMatrix = new Array(matrix[0].length);\n    for(var i = 0; i < resultMatrix.length; ++i) {\n        resultMatrix[i] = new Array(matrix.length);\n    }\n\n    for (i = 0; i < matrix.length; ++i) {\n        for(var j = 0; j < matrix[0].length; ++j) {\n            resultMatrix[j][i] = matrix[i][j];\n        }\n    }\n\n    return resultMatrix;\n}\n\n/**\n * Function that transform an array of points into a coordinates array\n * as follows:\n * [x1, y1, .. , x2, y2, ..]\n *\n * @param points\n * @returns {Array}\n */\nfunction pointsToCoordArray(points) {\n    var coodinatesArray = new Array(points.length * points[0].length);\n    var k = 0;\n    for(var i = 0; i < points.length; ++i) {\n        for(var j = 0; j < points[0].length; ++j) {\n            coodinatesArray[k] = points[i][j];\n            ++k;\n        }\n    }\n\n    return coodinatesArray;\n}\n\n/**\n * Apply the dot product between the smaller vector and a subsets of the\n * largest one.\n *\n * @param firstVector\n * @param secondVector\n * @returns {Array} each dot product of size of the difference between the\n *                  larger and the smallest one.\n */\nfunction applyDotProduct(firstVector, secondVector) {\n    var largestVector, smallestVector;\n    if(firstVector.length <= secondVector.length) {\n        smallestVector = firstVector;\n        largestVector = secondVector;\n    } else {\n        smallestVector = secondVector;\n        largestVector = firstVector;\n    }\n\n    var difference = largestVector.length - smallestVector.length + 1;\n    var dotProductApplied = new Array(difference);\n\n    for (var i = 0; i < difference; ++i) {\n        var sum = 0;\n        for (var j = 0; j < smallestVector.length; ++j) {\n            sum += smallestVector[j] * largestVector[i + j];\n        }\n        dotProductApplied[i] = sum;\n    }\n\n    return dotProductApplied;\n}\n/**\n * To scale the input array between the specified min and max values. The operation is performed inplace\n * if the options.inplace is specified. If only one of the min or max parameters is specified, then the scaling\n * will multiply the input array by min/min(input) or max/max(input)\n * @param input\n * @param options\n * @returns {*}\n */\nfunction scale(input, options){\n    var y;\n    if(options.inPlace){\n        y = input;\n    }\n    else{\n        y = new Array(input.length);\n    }\n    const max = options.max;\n    const min = options.min;\n    if(typeof max === \"number\"){\n        if(typeof min === \"number\"){\n            var minMax = Stat.minMax(input);\n            var factor = (max - min)/(minMax.max-minMax.min);\n            for(var i=0;i< y.length;i++){\n                y[i]=(input[i]-minMax.min)*factor+min;\n            }\n        }\n        else{\n            var currentMin = Stat.max(input);\n            var factor = max/currentMin;\n            for(var i=0;i< y.length;i++){\n                y[i] = input[i]*factor;\n            }\n        }\n    }\n    else{\n        if(typeof min === \"number\"){\n            var currentMin = Stat.min(input);\n            var factor = min/currentMin;\n            for(var i=0;i< y.length;i++){\n                y[i] = input[i]*factor;\n            }\n        }\n    }\n    return y;\n}\n\nmodule.exports = {\n    coordArrayToPoints: coordArrayToPoints,\n    coordArrayToCoordMatrix: coordArrayToCoordMatrix,\n    coordMatrixToCoordArray: coordMatrixToCoordArray,\n    coordMatrixToPoints: transpose,\n    pointsToCoordArray: pointsToCoordArray,\n    pointsToCoordMatrix: transpose,\n    applyDotProduct: applyDotProduct,\n    scale:scale\n};\n\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-array-utils/src/ArrayUtils.js","'use strict';\n\nvar arrayStat = require('./array');\n\nfunction compareNumbers(a, b) {\n    return a - b;\n}\n\nexports.max = function max(matrix) {\n    var max = -Infinity;\n    for (var i = 0; i < matrix.length; i++) {\n        for (var j = 0; j < matrix[i].length; j++) {\n            if (matrix[i][j] > max) max = matrix[i][j];\n        }\n    }\n    return max;\n};\n\nexports.min = function min(matrix) {\n    var min = Infinity;\n    for (var i = 0; i < matrix.length; i++) {\n        for (var j = 0; j < matrix[i].length; j++) {\n            if (matrix[i][j] < min) min = matrix[i][j];\n        }\n    }\n    return min;\n};\n\nexports.minMax = function minMax(matrix) {\n    var min = Infinity;\n    var max = -Infinity;\n    for (var i = 0; i < matrix.length; i++) {\n        for (var j = 0; j < matrix[i].length; j++) {\n            if (matrix[i][j] < min) min = matrix[i][j];\n            if (matrix[i][j] > max) max = matrix[i][j];\n        }\n    }\n    return {\n        min:min,\n        max:max\n    };\n};\n\nexports.entropy = function entropy(matrix, eps) {\n    if (typeof (eps) === 'undefined') {\n        eps = 0;\n    }\n    var sum = 0,\n        l1 = matrix.length,\n        l2 = matrix[0].length;\n    for (var i = 0; i < l1; i++) {\n        for (var j = 0; j < l2; j++) {\n            sum += matrix[i][j] * Math.log(matrix[i][j] + eps);\n        }\n    }\n    return -sum;\n};\n\nexports.mean = function mean(matrix, dimension) {\n    if (typeof (dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        theMean, N, i, j;\n\n    if (dimension === -1) {\n        theMean = [0];\n        N = rows * cols;\n        for (i = 0; i < rows; i++) {\n            for (j = 0; j < cols; j++) {\n                theMean[0] += matrix[i][j];\n            }\n        }\n        theMean[0] /= N;\n    } else if (dimension === 0) {\n        theMean = new Array(cols);\n        N = rows;\n        for (j = 0; j < cols; j++) {\n            theMean[j] = 0;\n            for (i = 0; i < rows; i++) {\n                theMean[j] += matrix[i][j];\n            }\n            theMean[j] /= N;\n        }\n    } else if (dimension === 1) {\n        theMean = new Array(rows);\n        N = cols;\n        for (j = 0; j < rows; j++) {\n            theMean[j] = 0;\n            for (i = 0; i < cols; i++) {\n                theMean[j] += matrix[j][i];\n            }\n            theMean[j] /= N;\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n    return theMean;\n};\n\nexports.sum = function sum(matrix, dimension) {\n    if (typeof (dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        theSum, i, j;\n\n    if (dimension === -1) {\n        theSum = [0];\n        for (i = 0; i < rows; i++) {\n            for (j = 0; j < cols; j++) {\n                theSum[0] += matrix[i][j];\n            }\n        }\n    } else if (dimension === 0) {\n        theSum = new Array(cols);\n        for (j = 0; j < cols; j++) {\n            theSum[j] = 0;\n            for (i = 0; i < rows; i++) {\n                theSum[j] += matrix[i][j];\n            }\n        }\n    } else if (dimension === 1) {\n        theSum = new Array(rows);\n        for (j = 0; j < rows; j++) {\n            theSum[j] = 0;\n            for (i = 0; i < cols; i++) {\n                theSum[j] += matrix[j][i];\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n    return theSum;\n};\n\nexports.product = function product(matrix, dimension) {\n    if (typeof (dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        theProduct, i, j;\n\n    if (dimension === -1) {\n        theProduct = [1];\n        for (i = 0; i < rows; i++) {\n            for (j = 0; j < cols; j++) {\n                theProduct[0] *= matrix[i][j];\n            }\n        }\n    } else if (dimension === 0) {\n        theProduct = new Array(cols);\n        for (j = 0; j < cols; j++) {\n            theProduct[j] = 1;\n            for (i = 0; i < rows; i++) {\n                theProduct[j] *= matrix[i][j];\n            }\n        }\n    } else if (dimension === 1) {\n        theProduct = new Array(rows);\n        for (j = 0; j < rows; j++) {\n            theProduct[j] = 1;\n            for (i = 0; i < cols; i++) {\n                theProduct[j] *= matrix[j][i];\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n    return theProduct;\n};\n\nexports.standardDeviation = function standardDeviation(matrix, means, unbiased) {\n    var vari = exports.variance(matrix, means, unbiased), l = vari.length;\n    for (var i = 0; i < l; i++) {\n        vari[i] = Math.sqrt(vari[i]);\n    }\n    return vari;\n};\n\nexports.variance = function variance(matrix, means, unbiased) {\n    if (typeof (unbiased) === 'undefined') {\n        unbiased = true;\n    }\n    means = means || exports.mean(matrix);\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length;\n    var vari = new Array(cols);\n\n    for (var j = 0; j < cols; j++) {\n        var sum1 = 0, sum2 = 0, x = 0;\n        for (var i = 0; i < rows; i++) {\n            x = matrix[i][j] - means[j];\n            sum1 += x;\n            sum2 += x * x;\n        }\n        if (unbiased) {\n            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / (rows - 1);\n        } else {\n            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / rows;\n        }\n    }\n    return vari;\n};\n\nexports.median = function median(matrix) {\n    var rows = matrix.length, cols = matrix[0].length;\n    var medians = new Array(cols);\n\n    for (var i = 0; i < cols; i++) {\n        var data = new Array(rows);\n        for (var j = 0; j < rows; j++) {\n            data[j] = matrix[j][i];\n        }\n        data.sort(compareNumbers);\n        var N = data.length;\n        if (N % 2 === 0) {\n            medians[i] = (data[N / 2] + data[(N / 2) - 1]) * 0.5;\n        } else {\n            medians[i] = data[Math.floor(N / 2)];\n        }\n    }\n    return medians;\n};\n\nexports.mode = function mode(matrix) {\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        modes = new Array(cols),\n        i, j;\n    for (i = 0; i < cols; i++) {\n        var itemCount = new Array(rows);\n        for (var k = 0; k < rows; k++) {\n            itemCount[k] = 0;\n        }\n        var itemArray = new Array(rows);\n        var count = 0;\n\n        for (j = 0; j < rows; j++) {\n            var index = itemArray.indexOf(matrix[j][i]);\n            if (index >= 0) {\n                itemCount[index]++;\n            } else {\n                itemArray[count] = matrix[j][i];\n                itemCount[count] = 1;\n                count++;\n            }\n        }\n\n        var maxValue = 0, maxIndex = 0;\n        for (j = 0; j < count; j++) {\n            if (itemCount[j] > maxValue) {\n                maxValue = itemCount[j];\n                maxIndex = j;\n            }\n        }\n\n        modes[i] = itemArray[maxIndex];\n    }\n    return modes;\n};\n\nexports.skewness = function skewness(matrix, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var means = exports.mean(matrix);\n    var n = matrix.length, l = means.length;\n    var skew = new Array(l);\n\n    for (var j = 0; j < l; j++) {\n        var s2 = 0, s3 = 0;\n        for (var i = 0; i < n; i++) {\n            var dev = matrix[i][j] - means[j];\n            s2 += dev * dev;\n            s3 += dev * dev * dev;\n        }\n\n        var m2 = s2 / n;\n        var m3 = s3 / n;\n        var g = m3 / Math.pow(m2, 3 / 2);\n\n        if (unbiased) {\n            var a = Math.sqrt(n * (n - 1));\n            var b = n - 2;\n            skew[j] = (a / b) * g;\n        } else {\n            skew[j] = g;\n        }\n    }\n    return skew;\n};\n\nexports.kurtosis = function kurtosis(matrix, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var means = exports.mean(matrix);\n    var n = matrix.length, m = matrix[0].length;\n    var kurt = new Array(m);\n\n    for (var j = 0; j < m; j++) {\n        var s2 = 0, s4 = 0;\n        for (var i = 0; i < n; i++) {\n            var dev = matrix[i][j] - means[j];\n            s2 += dev * dev;\n            s4 += dev * dev * dev * dev;\n        }\n        var m2 = s2 / n;\n        var m4 = s4 / n;\n\n        if (unbiased) {\n            var v = s2 / (n - 1);\n            var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n            var b = s4 / (v * v);\n            var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n            kurt[j] = a * b - 3 * c;\n        } else {\n            kurt[j] = m4 / (m2 * m2) - 3;\n        }\n    }\n    return kurt;\n};\n\nexports.standardError = function standardError(matrix) {\n    var samples = matrix.length;\n    var standardDeviations = exports.standardDeviation(matrix);\n    var l = standardDeviations.length;\n    var standardErrors = new Array(l);\n    var sqrtN = Math.sqrt(samples);\n\n    for (var i = 0; i < l; i++) {\n        standardErrors[i] = standardDeviations[i] / sqrtN;\n    }\n    return standardErrors;\n};\n\nexports.covariance = function covariance(matrix, dimension) {\n    return exports.scatter(matrix, undefined, dimension);\n};\n\nexports.scatter = function scatter(matrix, divisor, dimension) {\n    if (typeof (dimension) === 'undefined') {\n        dimension = 0;\n    }\n    if (typeof (divisor) === 'undefined') {\n        if (dimension === 0) {\n            divisor = matrix.length - 1;\n        } else if (dimension === 1) {\n            divisor = matrix[0].length - 1;\n        }\n    }\n    var means = exports.mean(matrix, dimension);\n    var rows = matrix.length;\n    if (rows === 0) {\n        return [[]];\n    }\n    var cols = matrix[0].length,\n        cov, i, j, s, k;\n\n    if (dimension === 0) {\n        cov = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            cov[i] = new Array(cols);\n        }\n        for (i = 0; i < cols; i++) {\n            for (j = i; j < cols; j++) {\n                s = 0;\n                for (k = 0; k < rows; k++) {\n                    s += (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n                }\n                s /= divisor;\n                cov[i][j] = s;\n                cov[j][i] = s;\n            }\n        }\n    } else if (dimension === 1) {\n        cov = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            cov[i] = new Array(rows);\n        }\n        for (i = 0; i < rows; i++) {\n            for (j = i; j < rows; j++) {\n                s = 0;\n                for (k = 0; k < cols; k++) {\n                    s += (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n                }\n                s /= divisor;\n                cov[i][j] = s;\n                cov[j][i] = s;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    return cov;\n};\n\nexports.correlation = function correlation(matrix) {\n    var means = exports.mean(matrix),\n        standardDeviations = exports.standardDeviation(matrix, true, means),\n        scores = exports.zScores(matrix, means, standardDeviations),\n        rows = matrix.length,\n        cols = matrix[0].length,\n        i, j;\n\n    var cor = new Array(cols);\n    for (i = 0; i < cols; i++) {\n        cor[i] = new Array(cols);\n    }\n    for (i = 0; i < cols; i++) {\n        for (j = i; j < cols; j++) {\n            var c = 0;\n            for (var k = 0, l = scores.length; k < l; k++) {\n                c += scores[k][j] * scores[k][i];\n            }\n            c /= rows - 1;\n            cor[i][j] = c;\n            cor[j][i] = c;\n        }\n    }\n    return cor;\n};\n\nexports.zScores = function zScores(matrix, means, standardDeviations) {\n    means = means || exports.mean(matrix);\n    if (typeof (standardDeviations) === 'undefined') standardDeviations = exports.standardDeviation(matrix, true, means);\n    return exports.standardize(exports.center(matrix, means, false), standardDeviations, true);\n};\n\nexports.center = function center(matrix, means, inPlace) {\n    means = means || exports.mean(matrix);\n    var result = matrix,\n        l = matrix.length,\n        i, j, jj;\n\n    if (!inPlace) {\n        result = new Array(l);\n        for (i = 0; i < l; i++) {\n            result[i] = new Array(matrix[i].length);\n        }\n    }\n\n    for (i = 0; i < l; i++) {\n        var row = result[i];\n        for (j = 0, jj = row.length; j < jj; j++) {\n            row[j] = matrix[i][j] - means[j];\n        }\n    }\n    return result;\n};\n\nexports.standardize = function standardize(matrix, standardDeviations, inPlace) {\n    if (typeof (standardDeviations) === 'undefined') standardDeviations = exports.standardDeviation(matrix);\n    var result = matrix,\n        l = matrix.length,\n        i, j, jj;\n\n    if (!inPlace) {\n        result = new Array(l);\n        for (i = 0; i < l; i++) {\n            result[i] = new Array(matrix[i].length);\n        }\n    }\n\n    for (i = 0; i < l; i++) {\n        var resultRow = result[i];\n        var sourceRow = matrix[i];\n        for (j = 0, jj = resultRow.length; j < jj; j++) {\n            if (standardDeviations[j] !== 0 && !isNaN(standardDeviations[j])) {\n                resultRow[j] = sourceRow[j] / standardDeviations[j];\n            }\n        }\n    }\n    return result;\n};\n\nexports.weightedVariance = function weightedVariance(matrix, weights) {\n    var means = exports.mean(matrix);\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length;\n    var vari = new Array(cols);\n\n    for (var j = 0; j < cols; j++) {\n        var sum = 0;\n        var a = 0, b = 0;\n\n        for (var i = 0; i < rows; i++) {\n            var z = matrix[i][j] - means[j];\n            var w = weights[i];\n\n            sum += w * (z * z);\n            b += w;\n            a += w * w;\n        }\n\n        vari[j] = sum * (b / (b * b - a));\n    }\n\n    return vari;\n};\n\nexports.weightedMean = function weightedMean(matrix, weights, dimension) {\n    if (typeof (dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length,\n        means, i, ii, j, w, row;\n\n    if (dimension === 0) {\n        means = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            means[i] = 0;\n        }\n        for (i = 0; i < rows; i++) {\n            row = matrix[i];\n            w = weights[i];\n            for (j = 0; j < cols; j++) {\n                means[j] += row[j] * w;\n            }\n        }\n    } else if (dimension === 1) {\n        means = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            means[i] = 0;\n        }\n        for (j = 0; j < rows; j++) {\n            row = matrix[j];\n            w = weights[j];\n            for (i = 0; i < cols; i++) {\n                means[j] += row[i] * w;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    var weightSum = arrayStat.sum(weights);\n    if (weightSum !== 0) {\n        for (i = 0, ii = means.length; i < ii; i++) {\n            means[i] /= weightSum;\n        }\n    }\n    return means;\n};\n\nexports.weightedCovariance = function weightedCovariance(matrix, weights, means, dimension) {\n    dimension = dimension || 0;\n    means = means || exports.weightedMean(matrix, weights, dimension);\n    var s1 = 0, s2 = 0;\n    for (var i = 0, ii = weights.length; i < ii; i++) {\n        s1 += weights[i];\n        s2 += weights[i] * weights[i];\n    }\n    var factor = s1 / (s1 * s1 - s2);\n    return exports.weightedScatter(matrix, weights, means, factor, dimension);\n};\n\nexports.weightedScatter = function weightedScatter(matrix, weights, means, factor, dimension) {\n    dimension = dimension || 0;\n    means = means || exports.weightedMean(matrix, weights, dimension);\n    if (typeof (factor) === 'undefined') {\n        factor = 1;\n    }\n    var rows = matrix.length;\n    if (rows === 0) {\n        return [[]];\n    }\n    var cols = matrix[0].length,\n        cov, i, j, k, s;\n\n    if (dimension === 0) {\n        cov = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            cov[i] = new Array(cols);\n        }\n        for (i = 0; i < cols; i++) {\n            for (j = i; j < cols; j++) {\n                s = 0;\n                for (k = 0; k < rows; k++) {\n                    s += weights[k] * (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n                }\n                cov[i][j] = s * factor;\n                cov[j][i] = s * factor;\n            }\n        }\n    } else if (dimension === 1) {\n        cov = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            cov[i] = new Array(rows);\n        }\n        for (i = 0; i < rows; i++) {\n            for (j = i; j < rows; j++) {\n                s = 0;\n                for (k = 0; k < cols; k++) {\n                    s += weights[k] * (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n                }\n                cov[i][j] = s * factor;\n                cov[j][i] = s * factor;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    return cov;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-stat/matrix.js","'use strict';\n\nexports.SNV = SNV;\nvar Stat = require('ml-stat').array;\n\n/**\n * Function that applies the standard normal variate (SNV) to an array of values.\n *\n * @param data - Array of values.\n * @returns {Array} - applied the SNV.\n */\nfunction SNV(data) {\n    var mean = Stat.mean(data);\n    var std = Stat.standardDeviation(data);\n    var result = data.slice();\n    for (var i = 0; i < data.length; i++) {\n        result[i] = (result[i] - mean) / std;\n    }\n    return result;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-array-utils/src/snv.js","import BaseView from './base';\n\nexport default class MatrixTransposeView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.columns, matrix.rows);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(columnIndex, rowIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(columnIndex, rowIndex);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-matrix/src/views/transpose.js","import BaseView from './base';\n\nexport default class MatrixRowView extends BaseView {\n    constructor(matrix, row) {\n        super(matrix, 1, matrix.columns);\n        this.row = row;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.row, columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.row, columnIndex);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-matrix/src/views/row.js","import BaseView from './base';\nimport {checkRange} from '../util';\n\nexport default class MatrixSubView extends BaseView {\n    constructor(matrix, startRow, endRow, startColumn, endColumn) {\n        checkRange(matrix, startRow, endRow, startColumn, endColumn);\n        super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n        this.startRow = startRow;\n        this.startColumn = startColumn;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.startRow + rowIndex, this.startColumn + columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.startRow + rowIndex, this.startColumn + columnIndex);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-matrix/src/views/sub.js","import BaseView from './base';\nimport {checkIndices} from '../util';\n\nexport default class MatrixSelectionView extends BaseView {\n    constructor(matrix, rowIndices, columnIndices) {\n        var indices = checkIndices(matrix, rowIndices, columnIndices);\n        super(matrix, indices.row.length, indices.column.length);\n        this.rowIndices = indices.row;\n        this.columnIndices = indices.column;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.rowIndices[rowIndex], this.columnIndices[columnIndex], value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.rowIndices[rowIndex], this.columnIndices[columnIndex]);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-matrix/src/views/selection.js","import BaseView from './base';\n\nexport default class MatrixColumnView extends BaseView {\n    constructor(matrix, column) {\n        super(matrix, matrix.rows, 1);\n        this.column = column;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(rowIndex, this.column, value);\n        return this;\n    }\n\n    get(rowIndex) {\n        return this.matrix.get(rowIndex, this.column);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-matrix/src/views/column.js","import BaseView from './base';\n\nexport default class MatrixFlipRowView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.rows, matrix.columns);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-matrix/src/views/flipRow.js","import BaseView from './base';\n\nexport default class MatrixFlipColumnView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.rows, matrix.columns);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-matrix/src/views/flipColumn.js","import Matrix from './matrix';\n\nimport LuDecomposition from './dc/lu';\nimport QrDecomposition from './dc/qr';\n\nexport function inverse(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    return solve(matrix, Matrix.eye(matrix.rows));\n}\n\nexport function solve(leftHandSide, rightHandSide) {\n    leftHandSide = Matrix.checkMatrix(leftHandSide);\n    rightHandSide = Matrix.checkMatrix(rightHandSide);\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-matrix/src/decompositions.js","import Matrix from '../matrix';\nimport {hypotenuse, getFilled2DArray} from './util';\n\nconst defaultOptions = {\n    assumeSymmetric: false\n};\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\nfunction EigenvalueDecomposition(matrix, options) {\n    options = Object.assign({}, defaultOptions, options);\n    if (!(this instanceof EigenvalueDecomposition)) {\n        return new EigenvalueDecomposition(matrix, options);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n        throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns,\n        V = getFilled2DArray(n, n, 0),\n        d = new Array(n),\n        e = new Array(n),\n        value = matrix,\n        i, j;\n\n    var isSymmetric = false;\n    if (options.assumeSymmetric) {\n        isSymmetric = true;\n    } else {\n        isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                V[i][j] = value.get(i, j);\n            }\n        }\n        tred2(n, e, d, V);\n        tql2(n, e, d, V);\n    } else {\n        var H = getFilled2DArray(n, n, 0),\n            ort = new Array(n);\n        for (j = 0; j < n; j++) {\n            for (i = 0; i < n; i++) {\n                H[i][j] = value.get(i, j);\n            }\n        }\n        orthes(n, H, ort, V);\n        hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n}\n\nEigenvalueDecomposition.prototype = {\n    get realEigenvalues() {\n        return this.d;\n    },\n    get imaginaryEigenvalues() {\n        return this.e;\n    },\n    get eigenvectorMatrix() {\n        if (!Matrix.isMatrix(this.V)) {\n            this.V = new Matrix(this.V);\n        }\n        return this.V;\n    },\n    get diagonalMatrix() {\n        var n = this.n,\n            e = this.e,\n            d = this.d,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                X[i][j] = 0;\n            }\n            X[i][i] = d[i];\n            if (e[i] > 0) {\n                X[i][i + 1] = e[i];\n            } else if (e[i] < 0) {\n                X[i][i - 1] = e[i];\n            }\n        }\n        return X;\n    }\n};\n\nfunction tred2(n, e, d, V) {\n\n    var f, g, h, i, j, k,\n        hh, scale;\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n    }\n\n    for (i = n - 1; i > 0; i--) {\n        scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n            scale = scale + Math.abs(d[k]);\n        }\n\n        if (scale === 0) {\n            e[i] = d[i - 1];\n            for (j = 0; j < i; j++) {\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n                V[j][i] = 0;\n            }\n        } else {\n            for (k = 0; k < i; k++) {\n                d[k] /= scale;\n                h += d[k] * d[k];\n            }\n\n            f = d[i - 1];\n            g = Math.sqrt(h);\n            if (f > 0) {\n                g = -g;\n            }\n\n            e[i] = scale * g;\n            h = h - f * g;\n            d[i - 1] = f - g;\n            for (j = 0; j < i; j++) {\n                e[j] = 0;\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                V[j][i] = f;\n                g = e[j] + V[j][j] * f;\n                for (k = j + 1; k <= i - 1; k++) {\n                    g += V[k][j] * d[k];\n                    e[k] += V[k][j] * f;\n                }\n                e[j] = g;\n            }\n\n            f = 0;\n            for (j = 0; j < i; j++) {\n                e[j] /= h;\n                f += e[j] * d[j];\n            }\n\n            hh = f / (h + h);\n            for (j = 0; j < i; j++) {\n                e[j] -= hh * d[j];\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                g = e[j];\n                for (k = j; k <= i - 1; k++) {\n                    V[k][j] -= (f * e[k] + g * d[k]);\n                }\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n            }\n        }\n        d[i] = h;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        V[n - 1][i] = V[i][i];\n        V[i][i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n            for (k = 0; k <= i; k++) {\n                d[k] = V[k][i + 1] / h;\n            }\n\n            for (j = 0; j <= i; j++) {\n                g = 0;\n                for (k = 0; k <= i; k++) {\n                    g += V[k][i + 1] * V[k][j];\n                }\n                for (k = 0; k <= i; k++) {\n                    V[k][j] -= g * d[k];\n                }\n            }\n        }\n\n        for (k = 0; k <= i; k++) {\n            V[k][i + 1] = 0;\n        }\n    }\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n        V[n - 1][j] = 0;\n    }\n\n    V[n - 1][n - 1] = 1;\n    e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n\n    var g, h, i, j, k, l, m, p, r,\n        dl1, c, c2, c3, el1, s, s2,\n        iter;\n\n    for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n    }\n\n    e[n - 1] = 0;\n\n    var f = 0,\n        tst1 = 0,\n        eps = Math.pow(2, -52);\n\n    for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        m = l;\n        while (m < n) {\n            if (Math.abs(e[m]) <= eps * tst1) {\n                break;\n            }\n            m++;\n        }\n\n        if (m > l) {\n            iter = 0;\n            do {\n                iter = iter + 1;\n\n                g = d[l];\n                p = (d[l + 1] - g) / (2 * e[l]);\n                r = hypotenuse(p, 1);\n                if (p < 0) {\n                    r = -r;\n                }\n\n                d[l] = e[l] / (p + r);\n                d[l + 1] = e[l] * (p + r);\n                dl1 = d[l + 1];\n                h = g - d[l];\n                for (i = l + 2; i < n; i++) {\n                    d[i] -= h;\n                }\n\n                f = f + h;\n\n                p = d[m];\n                c = 1;\n                c2 = c;\n                c3 = c;\n                el1 = e[l + 1];\n                s = 0;\n                s2 = 0;\n                for (i = m - 1; i >= l; i--) {\n                    c3 = c2;\n                    c2 = c;\n                    s2 = s;\n                    g = c * e[i];\n                    h = c * p;\n                    r = hypotenuse(p, e[i]);\n                    e[i + 1] = s * r;\n                    s = e[i] / r;\n                    c = p / r;\n                    p = c * d[i] - s * g;\n                    d[i + 1] = h + s * (c * g + s * d[i]);\n\n                    for (k = 0; k < n; k++) {\n                        h = V[k][i + 1];\n                        V[k][i + 1] = s * V[k][i] + c * h;\n                        V[k][i] = c * V[k][i] - s * h;\n                    }\n                }\n\n                p = -s * s2 * c3 * el1 * e[l] / dl1;\n                e[l] = s * p;\n                d[l] = c * p;\n\n            }\n            while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n            if (d[j] < p) {\n                k = j;\n                p = d[j];\n            }\n        }\n\n        if (k !== i) {\n            d[k] = d[i];\n            d[i] = p;\n            for (j = 0; j < n; j++) {\n                p = V[j][i];\n                V[j][i] = V[j][k];\n                V[j][k] = p;\n            }\n        }\n    }\n}\n\nfunction orthes(n, H, ort, V) {\n\n    var low = 0,\n        high = n - 1,\n        f, g, h, i, j, m,\n        scale;\n\n    for (m = low + 1; m <= high - 1; m++) {\n        scale = 0;\n        for (i = m; i <= high; i++) {\n            scale = scale + Math.abs(H[i][m - 1]);\n        }\n\n        if (scale !== 0) {\n            h = 0;\n            for (i = high; i >= m; i--) {\n                ort[i] = H[i][m - 1] / scale;\n                h += ort[i] * ort[i];\n            }\n\n            g = Math.sqrt(h);\n            if (ort[m] > 0) {\n                g = -g;\n            }\n\n            h = h - ort[m] * g;\n            ort[m] = ort[m] - g;\n\n            for (j = m; j < n; j++) {\n                f = 0;\n                for (i = high; i >= m; i--) {\n                    f += ort[i] * H[i][j];\n                }\n\n                f = f / h;\n                for (i = m; i <= high; i++) {\n                    H[i][j] -= f * ort[i];\n                }\n            }\n\n            for (i = 0; i <= high; i++) {\n                f = 0;\n                for (j = high; j >= m; j--) {\n                    f += ort[j] * H[i][j];\n                }\n\n                f = f / h;\n                for (j = m; j <= high; j++) {\n                    H[i][j] -= f * ort[j];\n                }\n            }\n\n            ort[m] = scale * ort[m];\n            H[m][m - 1] = scale * g;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            V[i][j] = (i === j ? 1 : 0);\n        }\n    }\n\n    for (m = high - 1; m >= low + 1; m--) {\n        if (H[m][m - 1] !== 0) {\n            for (i = m + 1; i <= high; i++) {\n                ort[i] = H[i][m - 1];\n            }\n\n            for (j = m; j <= high; j++) {\n                g = 0;\n                for (i = m; i <= high; i++) {\n                    g += ort[i] * V[i][j];\n                }\n\n                g = (g / ort[m]) / H[m][m - 1];\n                for (i = m; i <= high; i++) {\n                    V[i][j] += g * ort[i];\n                }\n            }\n        }\n    }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n    var n = nn - 1,\n        low = 0,\n        high = nn - 1,\n        eps = Math.pow(2, -52),\n        exshift = 0,\n        norm = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n        s = 0,\n        z = 0,\n        iter = 0,\n        i, j, k, l, m, t, w, x, y,\n        ra, sa, vr, vi,\n        notlast, cdivres;\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            d[i] = H[i][i];\n            e[i] = 0;\n        }\n\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n            norm = norm + Math.abs(H[i][j]);\n        }\n    }\n\n    while (n >= low) {\n        l = n;\n        while (l > low) {\n            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n            if (s === 0) {\n                s = norm;\n            }\n            if (Math.abs(H[l][l - 1]) < eps * s) {\n                break;\n            }\n            l--;\n        }\n\n        if (l === n) {\n            H[n][n] = H[n][n] + exshift;\n            d[n] = H[n][n];\n            e[n] = 0;\n            n--;\n            iter = 0;\n        } else if (l === n - 1) {\n            w = H[n][n - 1] * H[n - 1][n];\n            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n            q = p * p + w;\n            z = Math.sqrt(Math.abs(q));\n            H[n][n] = H[n][n] + exshift;\n            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n            x = H[n][n];\n\n            if (q >= 0) {\n                z = (p >= 0) ? (p + z) : (p - z);\n                d[n - 1] = x + z;\n                d[n] = d[n - 1];\n                if (z !== 0) {\n                    d[n] = x - w / z;\n                }\n                e[n - 1] = 0;\n                e[n] = 0;\n                x = H[n][n - 1];\n                s = Math.abs(x) + Math.abs(z);\n                p = x / s;\n                q = z / s;\n                r = Math.sqrt(p * p + q * q);\n                p = p / r;\n                q = q / r;\n\n                for (j = n - 1; j < nn; j++) {\n                    z = H[n - 1][j];\n                    H[n - 1][j] = q * z + p * H[n][j];\n                    H[n][j] = q * H[n][j] - p * z;\n                }\n\n                for (i = 0; i <= n; i++) {\n                    z = H[i][n - 1];\n                    H[i][n - 1] = q * z + p * H[i][n];\n                    H[i][n] = q * H[i][n] - p * z;\n                }\n\n                for (i = low; i <= high; i++) {\n                    z = V[i][n - 1];\n                    V[i][n - 1] = q * z + p * V[i][n];\n                    V[i][n] = q * V[i][n] - p * z;\n                }\n            } else {\n                d[n - 1] = x + p;\n                d[n] = x + p;\n                e[n - 1] = z;\n                e[n] = -z;\n            }\n\n            n = n - 2;\n            iter = 0;\n        } else {\n            x = H[n][n];\n            y = 0;\n            w = 0;\n            if (l < n) {\n                y = H[n - 1][n - 1];\n                w = H[n][n - 1] * H[n - 1][n];\n            }\n\n            if (iter === 10) {\n                exshift += x;\n                for (i = low; i <= n; i++) {\n                    H[i][i] -= x;\n                }\n                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n                x = y = 0.75 * s;\n                w = -0.4375 * s * s;\n            }\n\n            if (iter === 30) {\n                s = (y - x) / 2;\n                s = s * s + w;\n                if (s > 0) {\n                    s = Math.sqrt(s);\n                    if (y < x) {\n                        s = -s;\n                    }\n                    s = x - w / ((y - x) / 2 + s);\n                    for (i = low; i <= n; i++) {\n                        H[i][i] -= s;\n                    }\n                    exshift += s;\n                    x = y = w = 0.964;\n                }\n            }\n\n            iter = iter + 1;\n\n            m = n - 2;\n            while (m >= l) {\n                z = H[m][m];\n                r = x - z;\n                s = y - z;\n                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n                q = H[m + 1][m + 1] - z - r - s;\n                r = H[m + 2][m + 1];\n                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                p = p / s;\n                q = q / s;\n                r = r / s;\n                if (m === l) {\n                    break;\n                }\n                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n                    break;\n                }\n                m--;\n            }\n\n            for (i = m + 2; i <= n; i++) {\n                H[i][i - 2] = 0;\n                if (i > m + 2) {\n                    H[i][i - 3] = 0;\n                }\n            }\n\n            for (k = m; k <= n - 1; k++) {\n                notlast = (k !== n - 1);\n                if (k !== m) {\n                    p = H[k][k - 1];\n                    q = H[k + 1][k - 1];\n                    r = (notlast ? H[k + 2][k - 1] : 0);\n                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                    if (x !== 0) {\n                        p = p / x;\n                        q = q / x;\n                        r = r / x;\n                    }\n                }\n\n                if (x === 0) {\n                    break;\n                }\n\n                s = Math.sqrt(p * p + q * q + r * r);\n                if (p < 0) {\n                    s = -s;\n                }\n\n                if (s !== 0) {\n                    if (k !== m) {\n                        H[k][k - 1] = -s * x;\n                    } else if (l !== m) {\n                        H[k][k - 1] = -H[k][k - 1];\n                    }\n\n                    p = p + s;\n                    x = p / s;\n                    y = q / s;\n                    z = r / s;\n                    q = q / p;\n                    r = r / p;\n\n                    for (j = k; j < nn; j++) {\n                        p = H[k][j] + q * H[k + 1][j];\n                        if (notlast) {\n                            p = p + r * H[k + 2][j];\n                            H[k + 2][j] = H[k + 2][j] - p * z;\n                        }\n\n                        H[k][j] = H[k][j] - p * x;\n                        H[k + 1][j] = H[k + 1][j] - p * y;\n                    }\n\n                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n                        p = x * H[i][k] + y * H[i][k + 1];\n                        if (notlast) {\n                            p = p + z * H[i][k + 2];\n                            H[i][k + 2] = H[i][k + 2] - p * r;\n                        }\n\n                        H[i][k] = H[i][k] - p;\n                        H[i][k + 1] = H[i][k + 1] - p * q;\n                    }\n\n                    for (i = low; i <= high; i++) {\n                        p = x * V[i][k] + y * V[i][k + 1];\n                        if (notlast) {\n                            p = p + z * V[i][k + 2];\n                            V[i][k + 2] = V[i][k + 2] - p * r;\n                        }\n\n                        V[i][k] = V[i][k] - p;\n                        V[i][k + 1] = V[i][k + 1] - p * q;\n                    }\n                }\n            }\n        }\n    }\n\n    if (norm === 0) {\n        return;\n    }\n\n    for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n\n        if (q === 0) {\n            l = n;\n            H[n][n] = 1;\n            for (i = n - 1; i >= 0; i--) {\n                w = H[i][i] - p;\n                r = 0;\n                for (j = l; j <= n; j++) {\n                    r = r + H[i][j] * H[j][n];\n                }\n\n                if (e[i] < 0) {\n                    z = w;\n                    s = r;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                        t = (x * s - z * r) / q;\n                        H[i][n] = t;\n                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n                    }\n\n                    t = Math.abs(H[i][n]);\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        } else if (q < 0) {\n            l = n - 1;\n\n            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n                H[n - 1][n - 1] = q / H[n][n - 1];\n                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n            } else {\n                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n                H[n - 1][n - 1] = cdivres[0];\n                H[n - 1][n] = cdivres[1];\n            }\n\n            H[n][n - 1] = 0;\n            H[n][n] = 1;\n            for (i = n - 2; i >= 0; i--) {\n                ra = 0;\n                sa = 0;\n                for (j = l; j <= n; j++) {\n                    ra = ra + H[i][j] * H[j][n - 1];\n                    sa = sa + H[i][j] * H[j][n];\n                }\n\n                w = H[i][i] - p;\n\n                if (e[i] < 0) {\n                    z = w;\n                    r = ra;\n                    s = sa;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        cdivres = cdiv(-ra, -sa, w, q);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                        vi = (d[i] - p) * 2 * q;\n                        if (vr === 0 && vi === 0) {\n                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                        }\n                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n                        } else {\n                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n                            H[i + 1][n - 1] = cdivres[0];\n                            H[i + 1][n] = cdivres[1];\n                        }\n                    }\n\n                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n - 1] = H[j][n - 1] / t;\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            for (j = i; j < nn; j++) {\n                V[i][j] = H[i][j];\n            }\n        }\n    }\n\n    for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n            z = 0;\n            for (k = low; k <= Math.min(j, high); k++) {\n                z = z + V[i][k] * H[k][j];\n            }\n            V[i][j] = z;\n        }\n    }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n    var r, d;\n    if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        return [(xr + r * xi) / d, (xi - r * xr) / d];\n    } else {\n        r = yr / yi;\n        d = yi + r * yr;\n        return [(r * xr + xi) / d, (r * xi - xr) / d];\n    }\n}\n\nexport default EigenvalueDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-matrix/src/dc/evd.js","import Matrix from '../matrix';\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\nfunction CholeskyDecomposition(value) {\n    if (!(this instanceof CholeskyDecomposition)) {\n        return new CholeskyDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n    if (!value.isSymmetric()) {\n        throw new Error('Matrix is not symmetric');\n    }\n\n    var a = value,\n        dimension = a.rows,\n        l = new Matrix(dimension, dimension),\n        positiveDefinite = true,\n        i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n        var Lrowj = l[j];\n        var d = 0;\n        for (k = 0; k < j; k++) {\n            var Lrowk = l[k];\n            var s = 0;\n            for (i = 0; i < k; i++) {\n                s += Lrowk[i] * Lrowj[i];\n            }\n            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n            d = d + s * s;\n        }\n\n        d = a[j][j] - d;\n\n        positiveDefinite &= (d > 0);\n        l[j][j] = Math.sqrt(Math.max(d, 0));\n        for (k = j + 1; k < dimension; k++) {\n            l[j][k] = 0;\n        }\n    }\n\n    if (!positiveDefinite) {\n        throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n}\n\nCholeskyDecomposition.prototype = {\n    get lowerTriangularMatrix() {\n        return this.L;\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var l = this.L,\n            dimension = l.rows;\n\n        if (value.rows !== dimension) {\n            throw new Error('Matrix dimensions do not match');\n        }\n\n        var count = value.columns,\n            B = value.clone(),\n            i, j, k;\n\n        for (k = 0; k < dimension; k++) {\n            for (j = 0; j < count; j++) {\n                for (i = 0; i < k; i++) {\n                    B[k][j] -= B[i][j] * l[k][i];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        for (k = dimension - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                for (i = k + 1; i < dimension; i++) {\n                    B[k][j] -= B[i][j] * l[i][k];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        return B;\n    }\n};\n\nexport default CholeskyDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-matrix/src/dc/cholesky.js","'use strict';\n\nvar eightBits = require('./creator');\n\n/**\n * Count the number of true values in an array\n * @param {Array} arr\n * @return {number}\n */\nfunction count(arr) {\n    var c = 0;\n    for (var i = 0; i < arr.length; i++) {\n        c += eightBits[arr[i] & 0xff] + eightBits[(arr[i] >> 8) & 0xff] + eightBits[(arr[i] >> 16) & 0xff] + eightBits[(arr[i] >> 24) & 0xff];\n    }\n    return c;\n}\n\n/**\n * Logical AND operation\n * @param {Array} arr1\n * @param {Array} arr2\n * @return {Array}\n */\nfunction and(arr1, arr2) {\n    var ans = new Array(arr1.length);\n    for (var i = 0; i < arr1.length; i++)\n        ans[i] = arr1[i] & arr2[i];\n    return ans;\n}\n\n/**\n * Logical OR operation\n * @param {Array} arr1\n * @param {Array} arr2\n * @return {Array}\n */\nfunction or(arr1, arr2) {\n    var ans = new Array(arr1.length);\n    for (var i = 0; i < arr1.length; i++)\n        ans[i] = arr1[i] | arr2[i];\n    return ans;\n}\n\n/**\n * Logical XOR operation\n * @param {Array} arr1\n * @param {Array} arr2\n * @return {Array}\n */\nfunction xor(arr1, arr2) {\n    var ans = new Array(arr1.length);\n    for (var i = 0; i < arr1.length; i++)\n        ans[i] = arr1[i] ^ arr2[i];\n    return ans;\n}\n\n/**\n * Logical NOT operation\n * @param {Array} arr\n * @return {Array}\n */\nfunction not(arr) {\n    var ans = new Array(arr.length);\n    for (var i = 0; i < ans.length; i++)\n        ans[i] = ~arr[i];\n    return ans;\n}\n\n/**\n * Gets the n value of array arr\n * @param {Array} arr\n * @param {number} n\n * @return {boolean}\n */\nfunction getBit(arr, n) {\n    var index = n >> 5; // Same as Math.floor(n/32)\n    var mask = 1 << (31 - n % 32);\n    return Boolean(arr[index] & mask);\n}\n\n/**\n * Sets the n value of array arr to the value val\n * @param {Array} arr\n * @param {number} n\n * @param {boolean} val\n * @return {Array}\n */\nfunction setBit(arr, n, val) {\n    var index = n >> 5; // Same as Math.floor(n/32)\n    var mask = 1 << (31 - n % 32);\n    if (val)\n        arr[index] = mask | arr[index];\n    else\n        arr[index] = ~mask & arr[index];\n    return arr;\n}\n\n/**\n * Translates an array of numbers to a string of bits\n * @param {Array} arr\n * @returns {string}\n */\nfunction toBinaryString(arr) {\n    var str = '';\n    for (var i = 0; i < arr.length; i++) {\n        var obj = (arr[i] >>> 0).toString(2);\n        str += '00000000000000000000000000000000'.substr(obj.length) + obj;\n    }\n    return str;\n}\n\n/**\n * Creates an array of numbers based on a string of bits\n * @param {string} str\n * @returns {Array}\n */\nfunction parseBinaryString(str) {\n    var len = str.length / 32;\n    var ans = new Array(len);\n    for (var i = 0; i < len; i++) {\n        ans[i] = parseInt(str.substr(i*32, 32), 2) | 0;\n    }\n    return ans;\n}\n\n/**\n * Translates an array of numbers to a hex string\n * @param {Array} arr\n * @returns {string}\n */\nfunction toHexString(arr) {\n    var str = '';\n    for (var i = 0; i < arr.length; i++) {\n        var obj = (arr[i] >>> 0).toString(16);\n        str += '00000000'.substr(obj.length) + obj;\n    }\n    return str;\n}\n\n/**\n * Creates an array of numbers based on a hex string\n * @param {string} str\n * @returns {Array}\n */\nfunction parseHexString(str) {\n    var len = str.length / 8;\n    var ans = new Array(len);\n    for (var i = 0; i < len; i++) {\n        ans[i] = parseInt(str.substr(i*8, 8), 16) | 0;\n    }\n    return ans;\n}\n\n/**\n * Creates a human readable string of the array\n * @param {Array} arr\n * @returns {string}\n */\nfunction toDebug(arr) {\n    var binary = toBinaryString(arr);\n    var str = '';\n    for (var i = 0; i < arr.length; i++) {\n        str += '0000'.substr((i * 32).toString(16).length) + (i * 32).toString(16) + ':';\n        for (var j = 0; j < 32; j += 4) {\n            str += ' ' + binary.substr(i * 32 + j, 4);\n        }\n        if (i < arr.length - 1) str += '\\n';\n    }\n    return str\n}\n\nmodule.exports = {\n    count: count,\n    and: and,\n    or: or,\n    xor: xor,\n    not: not,\n    getBit: getBit,\n    setBit: setBit,\n    toBinaryString: toBinaryString,\n    parseBinaryString: parseBinaryString,\n    toHexString: toHexString,\n    parseHexString: parseHexString,\n    toDebug: toDebug\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-bit-array/src/index.js","// auxiliary file to create the 256 look at table elements\n\nvar ans = new Array(256);\nfor (var i = 0; i < 256; i++) {\n    var num = i;\n    var c = 0;\n    while (num) {\n        num = num & (num - 1);\n        c++;\n    }\n    ans[i] = c;\n}\n\nmodule.exports = ans;\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-bit-array/src/creator.js","module.exports = newArray\n\nfunction newArray (n, value) {\n  n = n || 0\n  var array = new Array(n)\n  for (var i = 0; i < n; i++) {\n    array[i] = value\n  }\n  return array\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/new-array/index.js","const binarySearch = require('binary-search');\nconst sortAsc = require('num-sort').asc;\n\nconst largestPrime = 0x7fffffff;\n\nconst primeNumbers = [\n    //chunk #0\n    largestPrime, // 2^31-1\n\n    //chunk #1\n    5, 11, 23, 47, 97, 197, 397, 797, 1597, 3203, 6421, 12853, 25717, 51437, 102877, 205759,\n    411527, 823117, 1646237, 3292489, 6584983, 13169977, 26339969, 52679969, 105359939,\n    210719881, 421439783, 842879579, 1685759167,\n\n    //chunk #2\n    433, 877, 1759, 3527, 7057, 14143, 28289, 56591, 113189, 226379, 452759, 905551, 1811107,\n    3622219, 7244441, 14488931, 28977863, 57955739, 115911563, 231823147, 463646329, 927292699,\n    1854585413,\n\n    //chunk #3\n    953, 1907, 3821, 7643, 15287, 30577, 61169, 122347, 244703, 489407, 978821, 1957651, 3915341,\n    7830701, 15661423, 31322867, 62645741, 125291483, 250582987, 501165979, 1002331963,\n    2004663929,\n\n    //chunk #4\n    1039, 2081, 4177, 8363, 16729, 33461, 66923, 133853, 267713, 535481, 1070981, 2141977, 4283963,\n    8567929, 17135863, 34271747, 68543509, 137087021, 274174111, 548348231, 1096696463,\n\n    //chunk #5\n    31, 67, 137, 277, 557, 1117, 2237, 4481, 8963, 17929, 35863, 71741, 143483, 286973, 573953,\n    1147921, 2295859, 4591721, 9183457, 18366923, 36733847, 73467739, 146935499, 293871013,\n    587742049, 1175484103,\n\n    //chunk #6\n    599, 1201, 2411, 4831, 9677, 19373, 38747, 77509, 155027, 310081, 620171, 1240361, 2480729,\n    4961459, 9922933, 19845871, 39691759, 79383533, 158767069, 317534141, 635068283, 1270136683,\n\n    //chunk #7\n    311, 631, 1277, 2557, 5119, 10243, 20507, 41017, 82037, 164089, 328213, 656429, 1312867,\n    2625761, 5251529, 10503061, 21006137, 42012281, 84024581, 168049163, 336098327, 672196673,\n    1344393353,\n\n    //chunk #8\n    3, 7, 17, 37, 79, 163, 331, 673, 1361, 2729, 5471, 10949, 21911, 43853, 87719, 175447, 350899,\n    701819, 1403641, 2807303, 5614657, 11229331, 22458671, 44917381, 89834777, 179669557,\n    359339171, 718678369, 1437356741,\n\n    //chunk #9\n    43, 89, 179, 359, 719, 1439, 2879, 5779, 11579, 23159, 46327, 92657, 185323, 370661, 741337,\n    1482707, 2965421, 5930887, 11861791, 23723597, 47447201, 94894427, 189788857, 379577741,\n    759155483, 1518310967,\n\n    //chunk #10\n    379, 761, 1523, 3049, 6101, 12203, 24407, 48817, 97649, 195311, 390647, 781301, 1562611,\n    3125257, 6250537, 12501169, 25002389, 50004791, 100009607, 200019221, 400038451, 800076929,\n    1600153859,\n\n    //chunk #11\n    13, 29, 59, 127, 257, 521, 1049, 2099, 4201, 8419, 16843, 33703, 67409, 134837, 269683,\n    539389, 1078787, 2157587, 4315183, 8630387, 17260781, 34521589, 69043189, 138086407,\n    276172823, 552345671, 1104691373,\n\n    //chunk #12\n    19, 41, 83, 167, 337, 677,\n    1361, 2729, 5471, 10949, 21911, 43853, 87719, 175447, 350899,\n    701819, 1403641, 2807303, 5614657, 11229331, 22458671, 44917381, 89834777, 179669557,\n    359339171, 718678369, 1437356741,\n\n    //chunk #13\n    53, 107, 223, 449, 907, 1823, 3659, 7321, 14653, 29311, 58631, 117269,\n    234539, 469099, 938207, 1876417, 3752839, 7505681, 15011389, 30022781,\n    60045577, 120091177, 240182359, 480364727, 960729461, 1921458943\n];\n\nprimeNumbers.sort(sortAsc);\n\nfunction nextPrime(value) {\n    let index = binarySearch(primeNumbers, value, sortAsc);\n    if (index < 0) {\n        index = ~index;\n    }\n    return primeNumbers[index];\n}\n\nexports.nextPrime = nextPrime;\nexports.largestPrime = largestPrime;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-hash-table/src/primeFinder.js","'use strict';\nmodule.exports = Number.isNaN || function (x) {\n\treturn x !== x;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/number-is-nan/index.js","export {default as SimpleLinearRegression, default as SLR} from 'ml-regression-simple-linear';\nexport {default as PolynomialRegression} from 'ml-regression-polynomial';\nexport {default as ExponentialRegression} from 'ml-regression-exponential';\nexport {default as PowerRegression} from 'ml-regression-power';\nexport {default as MultivariateLinearRegression} from 'ml-regression-multivariate-linear';\n\nimport PotentialRegression from './regression/potential-regression';\nconst NLR = {\n    PotentialRegression\n};\nexport {NLR, NLR as NonLinearRegression};\n\nexport {default as KernelRidgeRegression, default as KRR} from './regression/kernel-ridge-regression';\nexport {default as PolinomialFitting2D} from './regression/poly-fit-regression2d';\n\n// robust regressions\nexport {default as TheilSenRegression} from 'ml-regression-theil-sen';\nexport {default as RobustPolynomialRegression} from 'ml-regression-robust-polynomial';\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-regression/src/index.js","export default function maybeToPrecision(value, digits) {\n    if (value < 0) {\n        value = 0 - value;\n        if (typeof digits === 'number') {\n            return '- ' + value.toPrecision(digits);\n        } else {\n            return '- ' + value.toString();\n        }\n    } else {\n        if (typeof digits === 'number') {\n            return value.toPrecision(digits);\n        } else {\n            return value.toString();\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-regression-base/src/maybeToPrecision.js","export default function checkArraySize(x, y) {\n    if (!Array.isArray(x) || !Array.isArray(y)) {\n        throw new TypeError('x and y must be arrays');\n    }\n    if (x.length !== y.length) {\n        throw new RangeError('x and y arrays must have the same length');\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-regression-base/src/checkArrayLength.js","import BaseRegression, {checkArrayLength, maybeToPrecision} from 'ml-regression-base';\nimport SimpleLinearRegression from 'ml-regression-simple-linear';\n\nexport default class ExponentialRegression extends BaseRegression {\n    constructor(x, y) {\n        super();\n        if (x === true) {\n            this.A = y.A;\n            this.B = y.B;\n        } else {\n            checkArrayLength(x, y);\n            regress(this, x, y);\n        }\n    }\n\n    _predict(input) {\n        return this.B * Math.exp(input * this.A);\n    }\n\n    toJSON() {\n        return {\n            name: 'exponentialRegression',\n            A: this.A,\n            B: this.B\n        };\n    }\n\n    toString(precision) {\n        return 'f(x) = ' + maybeToPrecision(this.B, precision) + ' * e^(' + maybeToPrecision(this.A, precision) + ' * x)';\n    }\n\n    toLaTeX(precision) {\n        if (this.A >= 0) {\n            return 'f(x) = ' + maybeToPrecision(this.B, precision) + 'e^{' + maybeToPrecision(this.A, precision) + 'x}';\n        } else {\n            return 'f(x) = \\\\frac{' + maybeToPrecision(this.B, precision) + '}{e^{' + maybeToPrecision(-this.A, precision) + 'x}}';\n        }\n\n    }\n\n    static load(json) {\n        if (json.name !== 'exponentialRegression') {\n            throw new TypeError('not a exponential regression model');\n        }\n        return new ExponentialRegression(true, json);\n    }\n}\n\nfunction regress(er, x, y) {\n    const n = x.length;\n    const yl = new Array(n);\n    for (let i = 0; i < n; i++) {\n        yl[i] = Math.log(y[i]);\n    }\n\n    const linear = new SimpleLinearRegression(x, yl);\n    er.A = linear.slope;\n    er.B = Math.exp(linear.intercept);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-regression-exponential/src/index.js","import BaseRegression, {checkArrayLength, maybeToPrecision} from 'ml-regression-base';\nimport SimpleLinearRegression from 'ml-regression-simple-linear';\n\nexport default class PowerRegression extends BaseRegression {\n    constructor(x, y) {\n        super();\n        if (x === true) { // reloading model\n            this.A = y.A;\n            this.B = y.B;\n        } else {\n            checkArrayLength(x, y);\n            regress(this, x, y);\n        }\n    }\n\n    _predict(newInputs) {\n        return this.A * Math.pow(newInputs, this.B);\n    }\n\n    toJSON() {\n        return {\n            name: 'powerRegression',\n            A: this.A,\n            B: this.B\n        };\n    }\n\n    toString(precision) {\n        return 'f(x) = ' + maybeToPrecision(this.A, precision) + ' * x^' + maybeToPrecision(this.B, precision);\n    }\n\n    toLaTeX(precision) {\n        if (this.B >= 0) {\n            return 'f(x) = ' + maybeToPrecision(this.A, precision) + 'x^{' + maybeToPrecision(this.B, precision) + '}';\n        } else {\n            return 'f(x) = \\\\frac{' + maybeToPrecision(this.A, precision) + '}{x^{' + maybeToPrecision(-this.B, precision) + '}}';\n        }\n    }\n\n    static load(json) {\n        if (json.name !== 'powerRegression') {\n            throw new TypeError('not a power regression model');\n        }\n        return new PowerRegression(true, json);\n    }\n}\n\nfunction regress(pr, x, y) {\n    const n = x.length;\n    const xl = new Array(n);\n    const yl = new Array(n);\n    for (let i = 0; i < n; i++) {\n        xl[i] = Math.log(x[i]);\n        yl[i] = Math.log(y[i]);\n    }\n\n    const linear = new SimpleLinearRegression(xl, yl);\n    pr.A = Math.exp(linear.intercept);\n    pr.B = linear.slope;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-regression-power/src/index.js","import Matrix, {SVD} from 'ml-matrix';\nimport BaseRegression from 'ml-regression-base';\n\nexport default class MultivariateLinearRegression extends BaseRegression {\n    constructor(x, y, options = {}) {\n        const {\n            intercept = true\n        } = options;\n        super();\n        if (x === true) {\n            this.weights = y.weights;\n            this.inputs = y.inputs;\n            this.outputs = y.outputs;\n            this.intercept = y.intercept;\n        } else {\n            if (intercept) {\n                x = new Matrix(x);\n                x.addColumn(new Array(x.length).fill(1));\n            }\n            this.weights = new SVD(x, {autoTranspose: true}).solve(y).to2DArray();\n            this.inputs = x[0].length;\n            this.outputs = y[0].length;\n            if (intercept) this.inputs--;\n            this.intercept = intercept;\n        }\n    }\n\n    predict(x) {\n        if (Array.isArray(x)) {\n            if (typeof x[0] === 'number') {\n                return this._predict(x);\n            } else if (Array.isArray(x[0])) {\n                const y = new Array(x.length);\n                for (let i = 0; i < x.length; i++) {\n                    y[i] = this._predict(x[i]);\n                }\n                return y;\n            }\n        }\n        throw new TypeError('x must be a matrix or array of numbers');\n    }\n\n    _predict(x) {\n        const result = new Array(this.outputs);\n        if (this.intercept) {\n            for (let i = 0; i < this.outputs; i++) {\n                result[i] = this.weights[this.inputs][i];\n            }\n        } else {\n            result.fill(0);\n        }\n        for (let i = 0; i < this.inputs; i++) {\n            for (let j = 0; j < this.outputs; j++) {\n                result[j] += this.weights[i][j] * x[i];\n            }\n        }\n        return result;\n    }\n\n    score() {\n        throw new Error('score method is not implemented yet');\n    }\n\n    toJSON() {\n        return {\n            name: 'multivariateLinearRegression',\n            weights: this.weights,\n            inputs: this.inputs,\n            outputs: this.outputs,\n            intercept: this.intercept\n        };\n    }\n\n    static load(model) {\n        if (model.name !== 'multivariateLinearRegression') {\n            throw new Error('not a MLR model');\n        }\n        return new MultivariateLinearRegression(true, model);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-regression-multivariate-linear/src/index.js","import {Matrix, solve} from 'ml-matrix';\nimport Kernel from 'ml-kernel';\n\nimport BaseRegression from 'ml-regression-base';\n\nconst defaultOptions = {\n    lambda: 0.1,\n    kernelType: 'gaussian',\n    kernelOptions: {},\n    computeCoefficient: false\n};\n\n// Implements the Kernel ridge regression algorithm.\n// http://www.ics.uci.edu/~welling/classnotes/papers_class/Kernel-Ridge.pdf\nexport default class KernelRidgeRegression extends BaseRegression {\n    constructor(inputs, outputs, options) {\n        super();\n        if (inputs === true) { // reloading model\n            this.alpha = outputs.alpha;\n            this.inputs = outputs.inputs;\n            this.kernelType = outputs.kernelType;\n            this.kernelOptions = outputs.kernelOptions;\n            this.kernel = new Kernel(outputs.kernelType, outputs.kernelOptions);\n        } else {\n            options = Object.assign({}, defaultOptions, options);\n\n            const kernelFunction = new Kernel(options.kernelType, options.kernelOptions);\n            const K = kernelFunction.compute(inputs);\n            const n = inputs.length;\n            K.add(Matrix.eye(n, n).mul(options.lambda));\n\n            this.alpha = solve(K, outputs);\n            this.inputs = inputs;\n            this.kernelType = options.kernelType;\n            this.kernelOptions = options.kernelOptions;\n            this.kernel = kernelFunction;\n        }\n    }\n\n    _predict(newInputs) {\n        return this.kernel.compute([newInputs], this.inputs).mmul(this.alpha)[0];\n    }\n\n    toJSON() {\n        return {\n            name: 'kernelRidgeRegression',\n            alpha: this.alpha,\n            inputs: this.inputs,\n            kernelType: this.kernelType,\n            kernelOptions: this.kernelOptions\n        };\n    }\n\n    static load(json) {\n        if (json.name !== 'kernelRidgeRegression') {\n            throw new TypeError('not a KRR model');\n        }\n        return new KernelRidgeRegression(true, json);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-regression/src/regression/kernel-ridge-regression.js","'use strict';\n\nconst squaredEuclidean = require('ml-distance-euclidean').squared;\n\nconst defaultOptions = {\n    sigma: 1\n};\n\nclass GaussianKernel {\n    constructor(options) {\n        options = Object.assign({}, defaultOptions, options);\n        this.sigma = options.sigma;\n        this.divisor = 2 * options.sigma * options.sigma;\n    }\n\n    compute(x, y) {\n        const distance = squaredEuclidean(x, y);\n        return Math.exp(-distance / this.divisor);\n    }\n}\n\nmodule.exports = GaussianKernel;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-kernel-gaussian/gaussian-kernel.js","'use strict';\n\nconst defaultOptions = {\n    degree: 1,\n    constant: 1,\n    scale: 1\n};\n\nclass PolynomialKernel {\n    constructor(options) {\n        options = Object.assign({}, defaultOptions, options);\n\n        this.degree = options.degree;\n        this.constant = options.constant;\n        this.scale = options.scale;\n    }\n\n    compute(x, y) {\n        var sum = 0;\n        for (var i = 0; i < x.length; i++) {\n            sum += x[i] * y[i];\n        }\n        return Math.pow(this.scale * sum + this.constant, this.degree);\n    }\n}\n\nmodule.exports = PolynomialKernel;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-kernel-polynomial/polynomial-kernel.js","'use strict';\n\nconst defaultOptions = {\n    sigma: 1,\n    degree: 1\n};\n\nclass ANOVAKernel {\n    constructor(options) {\n        options = Object.assign({}, defaultOptions, options);\n        this.sigma = options.sigma;\n        this.degree = options.degree;\n    }\n\n    compute(x, y) {\n        var sum = 0;\n        var len = Math.min(x.length, y.length);\n        for (var i = 1; i <= len; ++i) {\n            sum += Math.pow(Math.exp(-this.sigma * Math.pow(Math.pow(x[i - 1], i) -\n                    Math.pow(y[i - 1], i), 2)), this.degree);\n        }\n        return sum;\n    }\n}\n\nmodule.exports = ANOVAKernel;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-kernel/src/kernels/anova-kernel.js","'use strict';\n\nconst squaredEuclidean = require('ml-distance-euclidean').squared;\n\nconst defaultOptions = {\n    sigma: 1\n};\n\nclass CauchyKernel {\n    constructor(options) {\n        options = Object.assign({}, defaultOptions, options);\n        this.sigma = options.sigma;\n    }\n\n    compute(x, y) {\n        return 1 / (1 + squaredEuclidean(x, y) / (this.sigma * this.sigma));\n    }\n}\n\nmodule.exports = CauchyKernel;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-kernel/src/kernels/cauchy-kernel.js","'use strict';\n\nconst euclidean = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n    sigma: 1\n};\n\nclass ExponentialKernel {\n    constructor(options) {\n        options = Object.assign({}, defaultOptions, options);\n        this.sigma = options.sigma;\n        this.divisor = 2 * options.sigma * options.sigma;\n    }\n\n    compute(x, y) {\n        const distance = euclidean(x, y);\n        return Math.exp(-distance / this.divisor);\n    }\n}\n\nmodule.exports = ExponentialKernel;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-kernel/src/kernels/exponential-kernel.js","'use strict';\n\nclass HistogramIntersectionKernel {\n    compute(x, y) {\n        var min = Math.min(x.length, y.length);\n        var sum = 0;\n        for (var i = 0; i < min; ++i) {\n            sum += Math.min(x[i], y[i]);\n        }\n\n        return sum;\n    }\n}\n\nmodule.exports = HistogramIntersectionKernel;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-kernel/src/kernels/histogram-intersection-kernel.js","'use strict';\n\nconst euclidean = require('ml-distance-euclidean');\n\nconst defaultOptions = {\n    sigma: 1\n};\n\nclass LaplacianKernel {\n    constructor(options) {\n        options = Object.assign({}, defaultOptions, options);\n        this.sigma = options.sigma;\n    }\n\n    compute(x, y) {\n        const distance = euclidean(x, y);\n        return Math.exp(-distance / this.sigma);\n    }\n}\n\nmodule.exports = LaplacianKernel;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-kernel/src/kernels/laplacian-kernel.js","'use strict';\n\nconst squaredEuclidean = require('ml-distance-euclidean').squared;\n\nconst defaultOptions = {\n    constant: 1\n};\n\nclass MultiquadraticKernel {\n    constructor(options) {\n        options = Object.assign({}, defaultOptions, options);\n        this.constant = options.constant;\n    }\n\n    compute(x, y) {\n        return Math.sqrt(squaredEuclidean(x, y) + this.constant * this.constant);\n    }\n}\n\nmodule.exports = MultiquadraticKernel;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-kernel/src/kernels/multiquadratic-kernel.js","'use strict';\n\nconst squaredEuclidean = require('ml-distance-euclidean').squared;\n\nconst defaultOptions = {\n    constant: 1\n};\n\nclass RationalQuadraticKernel {\n    constructor(options) {\n        options = Object.assign({}, defaultOptions, options);\n        this.constant = options.constant;\n    }\n\n    compute(x, y) {\n        const distance = squaredEuclidean(x, y);\n        return 1 - (distance / (distance + this.constant));\n    }\n}\n\nmodule.exports = RationalQuadraticKernel;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-kernel/src/kernels/rational-quadratic-kernel.js","'use strict';\n\nconst defaultOptions = {\n    alpha: 0.01,\n    constant: -Math.E\n};\n\nclass SigmoidKernel {\n    constructor(options) {\n        options = Object.assign({}, defaultOptions, options);\n        this.alpha = options.alpha;\n        this.constant = options.constant;\n    }\n\n    compute(x, y) {\n        var sum = 0;\n        for (var i = 0; i < x.length; i++) {\n            sum += x[i] * y[i];\n        }\n        return Math.tanh(this.alpha * sum + this.constant);\n    }\n}\n\nmodule.exports = SigmoidKernel;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-kernel-sigmoid/sigmoid-kernel.js","import {Matrix, SVD} from 'ml-matrix';\nimport BaseRegression from 'ml-regression-base';\n\nconst defaultOptions = {\n    order: 2\n};\n// Implements the Kernel ridge regression algorithm.\n// http://www.ics.uci.edu/~welling/classnotes/papers_class/Kernel-Ridge.pdf\nexport default class PolynomialFitRegression2D extends BaseRegression {\n    /**\n     * Constructor for the 2D polynomial fitting\n     *\n     * @param inputs\n     * @param outputs\n     * @param options\n     * @constructor\n     */\n    constructor(inputs, outputs, options) {\n        super();\n        if (inputs === true) { // reloading model\n            this.coefficients = Matrix.columnVector(outputs.coefficients);\n            this.order = outputs.order;\n            if (outputs.r) {\n                this.r = outputs.r;\n                this.r2 = outputs.r2;\n            }\n            if (outputs.chi2) {\n                this.chi2 = outputs.chi2;\n            }\n        } else {\n            options = Object.assign({}, defaultOptions, options);\n            this.order = options.order;\n            this.coefficients = [];\n            this.X = inputs;\n            this.y = outputs;\n\n            this.train(this.X, this.y, options);\n        }\n    }\n\n    /**\n     * Function that fits the model given the data(X) and predictions(y).\n     * The third argument is an object with the following options:\n     * * order: order of the polynomial to fit.\n     *\n     * @param {Matrix} X - A matrix with n rows and 2 columns.\n     * @param {Matrix} y - A vector of the prediction values.\n     */\n    train(X, y) {\n        if (!Matrix.isMatrix(X)) X = new Matrix(X);\n        if (!Matrix.isMatrix(y)) y = Matrix.columnVector(y);\n\n        if (y.rows !== X.rows) {\n            y = y.transpose();\n        }\n\n        if (X.columns !== 2) {\n            throw new RangeError('You give X with ' + X.columns + ' columns and it must be 2');\n        }\n        if (X.rows !== y.rows) {\n            throw new RangeError('X and y must have the same rows');\n        }\n\n        var examples = X.rows;\n        var coefficients = ((this.order + 2) * (this.order + 1)) / 2;\n        this.coefficients = new Array(coefficients);\n\n        var x1 = X.getColumnVector(0);\n        var x2 = X.getColumnVector(1);\n\n        var scaleX1 = 1.0 / x1.clone().apply(abs).max();\n        var scaleX2 = 1.0 / x2.clone().apply(abs).max();\n        var scaleY = 1.0 / y.clone().apply(abs).max();\n\n        x1.mulColumn(0, scaleX1);\n        x2.mulColumn(0, scaleX2);\n        y.mulColumn(0, scaleY);\n\n        var A = new Matrix(examples, coefficients);\n        var col = 0;\n\n        for (var i = 0; i <= this.order; ++i) {\n            var limit = this.order - i;\n            for (var j = 0; j <= limit; ++j) {\n                var result = powColVector(x1, i).mulColumnVector(powColVector(x2, j));\n                A.setColumn(col, result);\n                col++;\n            }\n        }\n\n        var svd = new SVD(A.transpose(), {\n            computeLeftSingularVectors: true,\n            computeRightSingularVectors: true,\n            autoTranspose: false\n        });\n\n        var qqs = Matrix.rowVector(svd.diagonal);\n        qqs = qqs.apply(function (i, j) {\n            if (this[i][j] >= 1e-15) this[i][j] = 1 / this[i][j];\n            else this[i][j] = 0;\n        });\n\n        var qqs1 = Matrix.zeros(examples, coefficients);\n        for (i = 0; i < coefficients; ++i) {\n            qqs1[i][i] = qqs[0][i];\n        }\n\n        qqs = qqs1;\n\n        var U = svd.rightSingularVectors;\n        var V = svd.leftSingularVectors;\n\n        this.coefficients = V.mmul(qqs.transpose()).mmul(U.transpose()).mmul(y);\n\n        col = 0;\n\n        for (i = 0; i <= coefficients; ++i) {\n            limit = this.order - i;\n            for (j = 0; j <= limit; ++j) {\n                this.coefficients[col][0] = (this.coefficients[col][0] * Math.pow(scaleX1, i) * Math.pow(scaleX2, j)) / scaleY;\n                col++;\n            }\n        }\n    }\n\n    _predict(newInputs) {\n        var x1 = newInputs[0];\n        var x2 = newInputs[1];\n\n        var y = 0;\n        var column = 0;\n\n        for (var i = 0; i <= this.order; i++) {\n            for (var j = 0; j <= this.order - i; j++) {\n                y += Math.pow(x1, i) * (Math.pow(x2, j)) * this.coefficients[column][0];\n                column++;\n            }\n        }\n\n        return y;\n    }\n\n    toJSON() {\n        return {\n            name: 'polyfit2D',\n            order: this.order,\n            coefficients: this.coefficients\n        };\n    }\n\n    static load(json) {\n        if (json.name !== 'polyfit2D') {\n            throw new TypeError('not a polyfit2D model');\n        }\n        return new PolynomialFitRegression2D(true, json);\n    }\n}\n\n/**\n * Function that given a column vector return this: vector^power\n *\n * @param x - Column vector.\n * @param power - Pow number.\n * @return {Suite|Matrix}\n */\nfunction powColVector(x, power) {\n    var result = x.clone();\n    for (var i = 0; i < x.rows; ++i) {\n        result[i][0] = Math.pow(result[i][0], power);\n    }\n    return result;\n}\n\n/**\n * Function to use in the apply method to get the absolute value\n * of each element of the matrix\n *\n * @param i - current row.\n * @param j - current column.\n */\nfunction abs(i, j) {\n    this[i][j] = Math.abs(this[i][j]);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-regression/src/regression/poly-fit-regression2d.js","import BaseRegression, {checkArrayLength, maybeToPrecision} from 'ml-regression-base';\nimport {array} from 'ml-stat';\nconst median = array.median;\n\nexport default class TheilSenRegression extends BaseRegression {\n\n    /**\n     * Theil–Sen estimator\n     * https://en.wikipedia.org/wiki/Theil%E2%80%93Sen_estimator\n     * @param {Array<number>|boolean} x\n     * @param {Array<number>|object} y\n     * @constructor\n     */\n    constructor(x, y) {\n        super();\n        if (x === true) {\n            // loads the model\n            this.slope = y.slope;\n            this.intercept = y.intercept;\n            this.coefficients = y.coefficients;\n        } else {\n            // creates the model\n            checkArrayLength(x, y);\n            theilSen(this, x, y);\n        }\n\n    }\n\n    toJSON() {\n        return {\n            name: 'TheilSenRegression',\n            slope: this.slope,\n            intercept: this.intercept\n        };\n    }\n\n    _predict(input) {\n        return this.slope * input + this.intercept;\n    }\n\n    computeX(input) {\n        return (input - this.intercept) / this.slope;\n    }\n\n    toString(precision) {\n        var result = 'f(x) = ';\n        if (this.slope) {\n            var xFactor = maybeToPrecision(this.slope, precision);\n            result += (Math.abs(xFactor - 1) < 1e-5 ? '' : xFactor + ' * ') + 'x';\n            if (this.intercept) {\n                var absIntercept = Math.abs(this.intercept);\n                var operator = absIntercept === this.intercept ? '+' : '-';\n                result += ' ' + operator + ' ' + maybeToPrecision(absIntercept, precision);\n            }\n        } else {\n            result += maybeToPrecision(this.intercept, precision);\n        }\n        return result;\n    }\n\n    toLaTeX(precision) {\n        return this.toString(precision);\n    }\n\n    static load(json) {\n        if (json.name !== 'TheilSenRegression') {\n            throw new TypeError('not a Theil-Sen model');\n        }\n        return new TheilSenRegression(true, json);\n    }\n}\n\nfunction theilSen(regression, x, y) {\n    let len = x.length;\n    let slopes = new Array(len * len);\n    let count = 0;\n    for (let i = 0; i < len; ++i) {\n        for (let j = i + 1; j < len; ++j) {\n            if (x[i] !== x[j]) {\n                slopes[count++] = (y[j] - y[i]) / (x[j] - x[i]);\n            }\n        }\n    }\n    slopes.length = count;\n    let medianSlope = median(slopes);\n\n    let cuts = new Array(len);\n    for (let i = 0; i < len; ++i) {\n        cuts[i] = y[i] - medianSlope * x[i];\n    }\n\n    regression.slope = medianSlope;\n    regression.intercept = median(cuts);\n    regression.coefficients = [regression.intercept, regression.slope];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-regression-theil-sen/src/index.js","import BaseRegression, {checkArrayLength, maybeToPrecision} from 'ml-regression-base';\nimport {solve} from 'ml-matrix';\n\nexport default class RobustPolynomialRegression extends BaseRegression {\n    constructor(x, y, degree) {\n        super();\n        if (x === true) {\n            this.degree = y.degree;\n            this.powers = y.powers;\n            this.coefficients = y.coefficients;\n        } else {\n            checkArrayLength(x, y);\n            robustPolynomial(this, x, y, degree);\n        }\n    }\n\n    toJSON() {\n        return {\n            name: 'robustPolynomialRegression',\n            degree: this.degree,\n            powers: this.powers,\n            coefficients: this.coefficients\n        };\n    }\n\n    _predict(x) {\n        return predict(x, this.powers, this.coefficients);\n    }\n\n    toString(precision) {\n        return this._toFormula(precision, false);\n    }\n\n    toLaTeX(precision) {\n        return this._toFormula(precision, true);\n    }\n\n    _toFormula(precision, isLaTeX) {\n        let sup = '^';\n        let closeSup = '';\n        let times = ' * ';\n        if (isLaTeX) {\n            sup = '^{';\n            closeSup = '}';\n            times = '';\n        }\n\n        let fn = '';\n        let str = '';\n        for (let k = 0; k < this.coefficients.length; k++) {\n            str = '';\n            if (this.coefficients[k] !== 0) {\n                if (this.powers[k] === 0) {\n                    str = maybeToPrecision(this.coefficients[k], precision);\n                } else {\n                    if (this.powers[k] === 1) {\n                        str = maybeToPrecision(this.coefficients[k], precision) + times + 'x';\n                    } else {\n                        str = maybeToPrecision(this.coefficients[k], precision) + times + 'x' + sup + this.powers[k] + closeSup;\n                    }\n                }\n\n                if (this.coefficients[k] > 0 && k !== (this.coefficients.length - 1)) {\n                    str = ' + ' + str;\n                } else if (k !== (this.coefficients.length - 1)) {\n                    str = ' ' + str;\n                }\n            }\n            fn = str + fn;\n        }\n        if (fn.charAt(0) === '+') {\n            fn = fn.slice(1);\n        }\n\n        return 'f(x) = ' + fn;\n    }\n\n    static load(json) {\n        if (json.name !== 'robustPolynomialRegression') {\n            throw new TypeError('not a RobustPolynomialRegression model');\n        }\n        return new RobustPolynomialRegression(true, json);\n    }\n}\n\nfunction robustPolynomial(regression, x, y, degree) {\n    let powers = new Array(degree);\n    for (let k = 0; k < degree; k++) {\n        powers[k] = k;\n    }\n\n    const tuples = getRandomTuples(x, y, degree);\n    var min;\n\n    for (var i = 0; i < tuples.length; i++) {\n        var tuple = tuples[i];\n        var coefficients = calcCoefficients(tuple, powers);\n\n        var residuals = x.slice();\n        for (var j = 0; j < x.length; j++) {\n            residuals[j] = y[j] - predict(x[j], powers, coefficients);\n            residuals[j] = {\n                residual: residuals[j] * residuals[j],\n                coefficients\n            };\n        }\n\n        var median = residualsMedian(residuals);\n        if (!min || median.residual < min.residual) {\n            min = median;\n        }\n    }\n\n    regression.degree = degree;\n    regression.powers = powers;\n    regression.coefficients = min.coefficients;\n}\n\n/**\n * @ignore\n * @param {Array<number>} x\n * @param {Array<number>} y\n * @param {number} degree\n * @return {Array<{x:number,y:number}>}\n */\nfunction getRandomTuples(x, y, degree) {\n    var len = Math.floor(x.length / degree);\n    var tuples = new Array(len);\n\n    for (var i = 0; i < x.length; i++) {\n        var pos = Math.floor(Math.random() * len);\n\n        var counter = 0;\n        while (counter < x.length) {\n            if (!tuples[pos]) {\n                tuples[pos] = [{\n                    x: x[i],\n                    y: y[i]\n                }];\n                break;\n            } else if (tuples[pos].length < degree) {\n                tuples[pos].push({\n                    x: x[i],\n                    y: y[i]\n                });\n                break;\n            } else {\n                counter++;\n                pos = (pos + 1) % len;\n            }\n        }\n\n        if (counter === x.length) {\n            return tuples;\n        }\n    }\n    return tuples;\n}\n\n/**\n * @ignore\n * @param {{x:number,y:number}} tuple\n * @param {Array<number>} powers\n * @return {Array<number>}\n */\nfunction calcCoefficients(tuple, powers) {\n    var X = tuple.slice();\n    var Y = tuple.slice();\n    for (var i = 0; i < X.length; i++) {\n        Y[i] = [tuple[i].y];\n        X[i] = new Array(powers.length);\n        for (var j = 0; j < powers.length; j++) {\n            X[i][j] = Math.pow(tuple[i].x, powers[j]);\n        }\n    }\n\n    return solve(X, Y).to1DArray();\n}\n\nfunction predict(x, powers, coefficients) {\n    let y = 0;\n    for (let k = 0; k < powers.length; k++) {\n        y += coefficients[k] * Math.pow(x, powers[k]);\n    }\n    return y;\n}\n\nfunction residualsMedian(residuals) {\n    residuals.sort((a, b) => a.residual - b.residual);\n\n    var l = residuals.length;\n    var half = Math.floor(l / 2);\n    if (l % 2 === 0) {\n        return residuals[half - 1];\n    } else {\n        return residuals[half];\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-regression-robust-polynomial/src/index.js","import {maybeToPrecision} from 'ml-regression-base';\nimport PolynomialRegression from 'ml-regression-polynomial';\nimport BaseRegression from 'ml-regression-base';\n\n/*\n * Function that calculate the potential fit in the form f(x) = A*x^M\n * with a given M and return de A coefficient.\n *\n * @param {Vector} X - Vector of the x positions of the points.\n * @param {Vector} Y - Vector of the x positions of the points.\n * @param {Number} M - The exponent of the potential fit.\n * @return {Number} A - The A coefficient of the potential fit.\n */\nexport default class PotentialRegression extends BaseRegression {\n    /**\n     * @constructor\n     * @param x: Independent variable\n     * @param y: Dependent variable\n     * @param M\n     */\n    constructor(x, y, M) {\n        super();\n        if (x === true) { // reloading model\n            this.A = y.A;\n            this.M = y.M;\n        } else {\n            var n = x.length;\n            if (n !== y.length) {\n                throw new RangeError('input and output array have a different length');\n            }\n\n            var linear = new PolynomialRegression(x, y, [M]);\n            this.A = linear.coefficients[0];\n            this.M = M;\n        }\n    }\n\n    _predict(x) {\n        return this.A * Math.pow(x, this.M);\n    }\n\n    toJSON() {\n        return {\n            name: 'potentialRegression',\n            A: this.A,\n            M: this.M\n        };\n    }\n\n    toString(precision) {\n        return 'f(x) = ' + maybeToPrecision(this.A, precision) + ' * x^' + this.M;\n    }\n\n    toLaTeX(precision) {\n        if (this.M >= 0) {\n            return 'f(x) = ' + maybeToPrecision(this.A, precision) + 'x^{' + this.M + '}';\n        } else {\n            return 'f(x) = \\\\frac{' + maybeToPrecision(this.A, precision) + '}{x^{' + (-this.M) + '}}';\n        }\n    }\n\n    static load(json) {\n        if (json.name !== 'potentialRegression') {\n            throw new TypeError('not a potential regression model');\n        }\n        return new PotentialRegression(true, json);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-regression/src/regression/potential-regression.js","'use strict';\n\nexports.distance = require('./distances');\nexports.similarity = require('./similarities');\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/index.js","\"use strict\";\n\nexports.additiveSymmetric = require('./distances/additiveSymmetric');\nexports.avg = require('./distances/avg');\nexports.bhattacharyya = require('./distances/bhattacharyya');\nexports.canberra = require('./distances/canberra');\nexports.chebyshev = require('./distances/chebyshev');\nexports.clark = require('./distances/clark');\nexports.czekanowski = require('./distances/czekanowski');\nexports.dice = require('./distances/dice');\nexports.divergence = require('./distances/divergence');\nexports.euclidean = require('ml-distance-euclidean');\nexports.fidelity = require('./distances/fidelity');\nexports.gower = require('./distances/gower');\nexports.harmonicMean = require('./distances/harmonicMean');\nexports.hellinger = require('./distances/hellinger');\nexports.innerProduct = require('./distances/innerProduct');\nexports.intersection = require('./distances/intersection');\nexports.jaccard = require('./distances/jaccard');\nexports.jeffreys = require('./distances/jeffreys');\nexports.jensenDifference = require('./distances/jensenDifference');\nexports.jensenShannon = require('./distances/jensenShannon');\nexports.kdivergence = require('./distances/kdivergence');\nexports.kulczynski = require('./distances/kulczynski');\nexports.kullbackLeibler = require('./distances/kullbackLeibler');\nexports.kumarHassebrook = require('./distances/kumarHassebrook');\nexports.kumarJohnson = require('./distances/kumarJohnson');\nexports.lorentzian = require('./distances/lorentzian');\nexports.manhattan = require('./distances/manhattan');\nexports.matusita = require('./distances/matusita');\nexports.minkowski = require('./distances/minkowski');\nexports.motyka = require('./distances/motyka');\nexports.neyman = require('./distances/neyman');\nexports.pearson = require('./distances/pearson');\nexports.probabilisticSymmetric = require('./distances/probabilisticSymmetric');\nexports.ruzicka = require('./distances/ruzicka');\nexports.soergel = require('./distances/soergel');\nexports.sorensen = require('./distances/sorensen');\nexports.squared = require('./distances/squared');\nexports.squaredChord = require('./distances/squaredChord');\nexports.squaredEuclidean = require('ml-distance-euclidean').squared;\nexports.taneja = require('./distances/taneja');\nexports.tanimoto = require('./distances/tanimoto');\nexports.topsoe = require('./distances/topsoe');\nexports.tree = require('ml-tree-similarity');\nexports.waveHedges = require('./distances/waveHedges');\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances.js","module.exports = function additiveSymmetric(a, b) {\n    var i = 0,\n        ii = a.length,\n        d = 0;\n    for (; i < ii; i++) {\n        d += ((a[i] - b[i]) * (a[i] - b[i]) * (a[i] + b[i])) / (a[i] * b[i]);\n    }\n    return 2 * d;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/additiveSymmetric.js","module.exports = function avg(a, b) {\n    var ii = a.length,\n        max = 0,\n        ans = 0,\n        aux = 0;\n    for (var i = 0; i < ii ; i++) {\n        aux = Math.abs(a[i] - b[i]);\n        ans += aux;\n        if (max < aux) {\n            max = aux;\n        }\n    }\n    return (max + ans) / 2;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/avg.js","module.exports = function bhattacharyya(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += Math.sqrt(a[i] * b[i]);\n    }\n    return - Math.log(ans);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/bhattacharyya.js","module.exports = function canberra(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += Math.abs(a[i] - b[i]) / (a[i] + b[i]);\n    }\n    return ans;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/canberra.js","module.exports = function chebyshev(a, b) {\n    var ii = a.length,\n        max = 0,\n        aux = 0;\n    for (var i = 0; i < ii ; i++) {\n        aux = Math.abs(a[i] - b[i]);\n        if (max < aux) {\n            max = aux;\n        }\n    }\n    return max;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/chebyshev.js","module.exports = function clark(a, b) {\n    var i = 0,\n        ii = a.length,\n        d = 0;\n    for (; i < ii; i++) {\n        d += Math.sqrt(((a[i] - b[i]) * (a[i] - b[i])) / ((a[i] + b[i]) * (a[i] + b[i])));\n    }\n    return 2 * d;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/clark.js","'use strict';\n\nconst czekanowskiSimilarity = require('../similarities/czekanowski');\n\nmodule.exports = function czekanowskiDistance(a, b) {\n    return 1 - czekanowskiSimilarity(a, b);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/czekanowski.js","module.exports = function divergence(a, b) {\n    var i = 0,\n        ii = a.length,\n        d = 0;\n    for (; i < ii; i++) {\n        d += ((a[i] - b[i]) * (a[i] - b[i])) / ((a[i] + b[i]) * (a[i] + b[i]));\n    }\n    return 2 * d;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/divergence.js","module.exports = function fidelity(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += Math.sqrt(a[i] * b[i]);\n    }\n    return ans;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/fidelity.js","module.exports = function gower(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += Math.abs(a[i] - b[i]);\n    }\n    return ans / ii;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/gower.js","module.exports = function harmonicMean(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += (a[i] * b[i]) / (a[i] + b[i]);\n    }\n    return 2 * ans;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/harmonicMean.js","module.exports = function hellinger(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += Math.sqrt(a[i] * b[i]);\n    }\n    return 2 * Math.sqrt(1 - ans);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/hellinger.js","module.exports = function innerProduct(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += a[i] * b[i];\n    }\n    return ans;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/innerProduct.js","module.exports = function jeffreys(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += (a[i] - b[i]) * Math.log(a[i] / b[i]);\n    }\n    return ans;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/jeffreys.js","module.exports = function jensenDifference(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += ((a[i] * Math.log(a[i]) + b[i] * Math.log(b[i])) / 2) - ((a[i] + b[i]) / 2) * Math.log((a[i] + b[i]) / 2);\n    }\n    return ans;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/jensenDifference.js","module.exports = function jensenShannon(a, b) {\n    var ii = a.length,\n        p = 0,\n        q = 0;\n    for (var i = 0; i < ii ; i++) {\n        p += a[i] * Math.log(2 * a[i] / (a[i] + b[i]));\n        q += b[i] * Math.log(2 * b[i] / (a[i] + b[i]));\n    }\n    return (p + q) / 2;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/jensenShannon.js","module.exports = function kdivergence(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += a[i] * Math.log(2 * a[i] / (a[i] + b[i]));\n    }\n    return ans;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/kdivergence.js","module.exports = function kullbackLeibler(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += a[i] * Math.log(a[i] / b[i]);\n    }\n    return ans;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/kullbackLeibler.js","module.exports = function kumarHassebrook(a, b) {\n    var ii = a.length,\n        p = 0,\n        p2 = 0,\n        q2 = 0;\n    for (var i = 0; i < ii ; i++) {\n        p += a[i] * b[i];\n        p2 += a[i] * a[i];\n        q2 += b[i] * b[i];\n    }\n    return p / (p2 + q2 - p);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/kumarHassebrook.js","module.exports = function kumarJohnson(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += Math.pow(a[i] * a[i] - b[i] * b[i],2) / (2 * Math.pow(a[i] * b[i],1.5));\n    }\n    return ans;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/kumarJohnson.js","module.exports = function lorentzian(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += Math.log(Math.abs(a[i] - b[i]) + 1);\n    }\n    return ans;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/lorentzian.js","module.exports = function manhattan(a, b) {\n    var i = 0,\n        ii = a.length,\n        d = 0;\n    for (; i < ii; i++) {\n        d += Math.abs(a[i] - b[i]);\n    }\n    return d;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/manhattan.js","module.exports = function matusita(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += Math.sqrt(a[i] * b[i]);\n    }\n    return Math.sqrt(2 - 2 * ans);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/matusita.js","module.exports = function minkowski(a, b, p) {\n    var i = 0,\n        ii = a.length,\n        d = 0;\n    for (; i < ii; i++) {\n        d += Math.pow(Math.abs(a[i] - b[i]),p);\n    }\n    return Math.pow(d,(1/p));\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/minkowski.js","module.exports = function neyman(a, b) {\n    var i = 0,\n        ii = a.length,\n        d = 0;\n    for (; i < ii; i++) {\n        d += ((a[i] - b[i]) * (a[i] - b[i])) / a[i];\n    }\n    return d;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/neyman.js","module.exports = function pearson(a, b) {\n    var i = 0,\n        ii = a.length,\n        d = 0;\n    for (; i < ii; i++) {\n        d += ((a[i] - b[i]) * (a[i] - b[i])) / b[i];\n    }\n    return d;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/pearson.js","module.exports = function probabilisticSymmetric(a, b) {\n    var i = 0,\n        ii = a.length,\n        d = 0;\n    for (; i < ii; i++) {\n        d += ((a[i] - b[i]) * (a[i] - b[i])) / (a[i] + b[i]);\n    }\n    return 2 * d;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/probabilisticSymmetric.js","module.exports = function ruzicka(a, b) {\n    var ii = a.length,\n        up = 0,\n        down = 0;\n    for (var i = 0; i < ii ; i++) {\n        up += Math.min(a[i],b[i]);\n        down += Math.max(a[i],b[i]);\n    }\n    return up / down;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/ruzicka.js","module.exports = function soergel(a, b) {\n    var ii = a.length,\n        up = 0,\n        down = 0;\n    for (var i = 0; i < ii ; i++) {\n        up += Math.abs(a[i] - b[i]);\n        down += Math.max(a[i],b[i]);\n    }\n    return up / down;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/soergel.js","module.exports = function sorensen(a, b) {\n    var ii = a.length,\n        up = 0,\n        down = 0;\n    for (var i = 0; i < ii ; i++) {\n        up += Math.abs(a[i] - b[i]);\n        down += a[i] + b[i];\n    }\n    return up / down;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/sorensen.js","module.exports = function squared(a, b) {\n    var i = 0,\n        ii = a.length,\n        d = 0;\n    for (; i < ii; i++) {\n        d += ((a[i] - b[i]) * (a[i] - b[i])) / (a[i] + b[i]);\n    }\n    return d;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/squared.js","module.exports = function taneja(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += (a[i] + b[i]) / 2 * Math.log((a[i] + b[i]) / (2 * Math.sqrt(a[i] * b[i])));\n    }\n    return ans;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/taneja.js","var tanimotoS = require('./../similarities/tanimoto');\n\nmodule.exports = function tanimoto(a, b, bitvector) {\n    if (bitvector)\n        return 1 - tanimotoS(a, b, bitvector);\n    else {\n        var ii = a.length,\n            p = 0,\n            q = 0,\n            m = 0;\n        for (var i = 0; i < ii ; i++) {\n            p += a[i];\n            q += b[i];\n            m += Math.min(a[i],b[i]);\n        }\n        return (p + q - 2 * m) / (p + q - m);\n    }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/tanimoto.js","module.exports = function topsoe(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += a[i] * Math.log(2 * a[i] / (a[i] + b[i])) + b[i] * Math.log(2 * b[i] / (a[i] + b[i]));\n    }\n    return ans;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/topsoe.js","\"use strict\";\n\n/**\n * Function that creates the tree\n * @param {Array <number>} X - chemical shifts of the signal\n * @param {Array <number>} Y - intensity of the signal\n * @param {number} from - the low limit of x\n * @param {number} to - the top limit of x\n * @param {number} minWindow - smallest range to accept in x\n * @param {number} threshold - smallest range to accept in y\n * @returns {{sum: number, center: number, left: {json}, right: {json}}}\n * left and right have the same structure than the parent, or have a\n * undefined value if are leafs\n */\nfunction createTree (X, Y, from, to, minWindow, threshold) {\n    minWindow = minWindow || 0.16;\n    threshold = threshold || 0.01;\n    if ((to - from) < minWindow)\n        return undefined;\n    var sum = 0;\n    for (var i = 0; X[i] < to; i++) {\n        if (X[i] > from)\n            sum += Y[i];\n    }\n    if (sum < threshold) {\n        return undefined;\n    }\n    var center = 0;\n    for (var j = 0; X[j] < to; j++) {\n        if (X[i] > from)\n            center += X[j] * Y[j];\n    }\n    center = center / sum;\n    if (((center - from) < 10e-6) || ((to - center) < 10e-6)) return undefined;\n    if ((center - from) < (minWindow /4)) {\n        return createTree(X, Y, center, to, minWindow, threshold);\n    }\n    else {\n        if ((to - center) < (minWindow / 4)) {\n            return createTree(X, Y, from, center, minWindow, threshold);\n        }\n        else {\n            return {\n                'sum': sum,\n                'center': center,\n                'left': createTree(X, Y, from, center, minWindow, threshold),\n                'right': createTree(X, Y, center, to, minWindow, threshold)\n            };\n        }\n    }\n}\n\n/**\n * Similarity between two nodes\n * @param {{sum: number, center: number, left: {json}, right: {json}}} a - tree A node\n * @param {{sum: number, center: number, left: {json}, right: {json}}} b - tree B node\n * @param {number} alpha - weights the relative importance of intensity vs. shift match\n * @param {number} beta - weights the relative importance of node matching and children matching\n * @param {number} gamma - controls the attenuation of the effect of chemical shift differences\n * @returns {number} similarity measure between tree nodes\n */\nfunction S(a, b, alpha, beta, gamma) {\n    if (a === undefined || b === undefined) {\n        return 0;\n    }\n    else {\n        var C = (alpha*Math.min(a.sum, b.sum)/Math.max(a.sum, b.sum)+ (1-alpha)*Math.exp(-gamma*Math.abs(a.center - b.center)));\n    }\n    return beta*C + (1-beta)*(S(a.left, b.left, alpha, beta, gamma)+S(a.right, b.right, alpha, beta, gamma));\n}\n\n/**\n * @type {number} alpha - weights the relative importance of intensity vs. shift match\n * @type {number} beta - weights the relative importance of node matching and children matching\n * @type {number} gamma - controls the attenuation of the effect of chemical shift differences\n * @type {number} minWindow - smallest range to accept in x\n * @type {number} threshold - smallest range to accept in y\n */\nvar defaultOptions = {\n    minWindow: 0.16,\n    threshold : 0.01,\n    alpha: 0.1,\n    beta: 0.33,\n    gamma: 0.001\n};\n\n/**\n * Builds a tree based in the spectra and compares this trees\n * @param {{x: Array<number>, y: Array<number>}} A - first spectra to be compared\n * @param {{x: Array<number>, y: Array<number>}} B - second spectra to be compared\n * @param {number} from - the low limit of x\n * @param {number} to - the top limit of x\n * @param {{minWindow: number, threshold: number, alpha: number, beta: number, gamma: number}} options\n * @returns {number} similarity measure between the spectra\n */\nfunction tree(A, B, from, to, options) {\n    options = options || {};\n    for (var o in defaultOptions)\n        if (!options.hasOwnProperty(o)) {\n            options[o] = defaultOptions[o];\n        }\n    var Atree, Btree;\n    if (A.sum)\n        Atree = A;\n    else\n        Atree = createTree(A.x, A.y, from, to, options.minWindow, options.threshold);\n    if (B.sum)\n        Btree = B;\n    else\n        Btree = createTree(B.x, B.y, from, to, options.minWindow, options.threshold);\n    return S(Atree, Btree, options.alpha, options.beta, options.gamma);\n}\n\nmodule.exports = {\n    calc: tree,\n    createTree: createTree\n};\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-tree-similarity/src/index.js","module.exports = function waveHedges(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += 1 - (Math.min(a[i], b[i]) / Math.max(a[i], b[i]));\n    }\n    return ans;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/distances/waveHedges.js","\"use strict\";\n\nexports.cosine = require('./similarities/cosine');\nexports.czekanowski = require('./similarities/czekanowski');\nexports.dice = require('./similarities/dice');\nexports.intersection = require('./similarities/intersection');\nexports.jaccard = require('./similarities/jaccard');\nexports.kulczynski = require('./similarities/kulczynski');\nexports.motyka = require('./similarities/motyka');\nexports.pearson = require('./similarities/pearson');\nexports.squaredChord = require('./similarities/squaredChord');\nexports.tanimoto = require('./similarities/tanimoto');\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/similarities.js","var diceD = require('./../distances/dice');\n\nmodule.exports = function dice(a, b) {\n    return 1 - diceD(a,b);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/similarities/dice.js","var intersectionD = require('./../distances/intersection');\n\nmodule.exports = function intersection(a, b) {\n    return 1 - intersectionD(a,b);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/similarities/intersection.js","var jaccardD = require('./../distances/jaccard');\n\nmodule.exports = function jaccard(a, b) {\n    return 1 - jaccardD(a, b);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/similarities/jaccard.js","var kulczynskiD = require('./../distances/kulczynski');\n\nmodule.exports = function kulczynski(a, b) {\n    return 1 / kulczynskiD(a, b);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/similarities/kulczynski.js","var motykaD = require('./../distances/motyka');\n\nmodule.exports = function motyka(a, b) {\n    return 1 - motykaD(a,b);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/similarities/motyka.js","'use strict';\n\nvar stat=require('ml-stat').array;\nvar cosine=require('./cosine');\n\nmodule.exports = function pearson(a, b) {\n    var avgA=stat.mean(a);\n    var avgB=stat.mean(b);\n\n    var newA=new Array(a.length);\n    var newB=new Array(b.length);\n    for (var i=0; i<newA.length; i++) {\n        newA[i]=a[i]-avgA;\n        newB[i]=b[i]-avgB;\n    }\n\n    return cosine(newA, newB);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/similarities/pearson.js","var squaredChordD = require('./../distances/squaredChord');\n\nmodule.exports = function squaredChord(a, b) {\n    return 1 - squaredChordD(a, b);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-distance/src/similarities/squaredChord.js","'use strict';\n\nvar Matrix = require('ml-matrix');\nvar padArray = require('ml-pad-array');\nvar extend = require('extend');\n\nvar defaultOptions = {\n    windowSize: 5,\n    derivative: 1,\n    polynomial: 2,\n    pad: 'none',\n    padValue: 'replicate'\n};\n\n/**\n * Savitzky-Golay filter\n * @param {Array <number>} data\n * @param {number} h\n * @param {Object} options\n * @returns {Array}\n */\nfunction SavitzkyGolay (data, h, options) {\n    options = extend({}, defaultOptions, options);\n    if ((options.windowSize % 2 === 0) || (options.windowSize < 5) || !(Number.isInteger(options.windowSize)))\n        throw new RangeError('Invalid window size (should be odd and at least 5 integer number)');\n    if ((options.derivative < 0) || !(Number.isInteger(options.derivative)))\n        throw new RangeError('Derivative should be a positive integer');\n    if ((options.polynomial < 1) || !(Number.isInteger(options.polynomial)))\n        throw new RangeError('Polynomial should be a positive integer');\n\n    var C, norm;\n    var step = Math.floor(options.windowSize / 2);\n\n    if (options.pad === 'pre') {\n        data = padArray(data, {size: step, value: options.padValue});\n    }\n\n    var ans =  new Array(data.length - 2*step);\n\n    if ((options.windowSize === 5) && (options.polynomial === 2) && ((options.derivative === 1) || (options.derivative === 2))) {\n        if (options.derivative === 1) {\n            C = [-2,-1,0,1,2];\n            norm = 10;\n        }\n        else {\n            C = [2, -1, -2, -1, 2];\n            norm = 7;\n        }\n    }\n    else {\n        var J = Matrix.ones(options.windowSize, options.polynomial + 1);\n        var inic = -(options.windowSize - 1) / 2;\n        for (var i = 0; i < J.length; i++) {\n            for (var j = 0; j < J[i].length; j++) {\n                if ((inic + 1 !== 0) || (j !== 0))\n                    J[i][j] = Math.pow((inic + i), j);\n            }\n        }\n        var Jtranspose = J.transposeView();\n        var Jinv = (Jtranspose.mmul(J)).inverse();\n        C = Jinv.mmul(Jtranspose);\n        C = C[options.derivative];\n        norm = 1;\n    }\n    var det = norm * Math.pow(h, options.derivative);\n    for (var k = step; k < (data.length - step); k++) {\n        var d = 0;\n        for (var l = 0; l < C.length; l++)\n            d += C[l] * data[l + k - step] / det;\n        ans[k - step] = d;\n    }\n\n    if (options.pad === 'post') {\n        ans = padArray(ans, {size: step, value: options.padValue});\n    }\n\n    return ans;\n}\n\nmodule.exports = SavitzkyGolay;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-savitzky-golay/src/index.js","'use strict';\n\nmodule.exports = require('./matrix').Matrix;\nmodule.exports.Decompositions = module.exports.DC = require('./decompositions');\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/index.js","'use strict';\n\nif (!Symbol.species) {\n    Symbol.species = Symbol.for('@@species');\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/symbol-species.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixTransposeView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.columns, matrix.rows);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(columnIndex, rowIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(columnIndex, rowIndex);\n    }\n}\n\nmodule.exports = MatrixTransposeView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/views/transpose.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixRowView extends BaseView {\n    constructor(matrix, row) {\n        super(matrix, 1, matrix.columns);\n        this.row = row;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.row, columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.row, columnIndex);\n    }\n}\n\nmodule.exports = MatrixRowView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/views/row.js","'use strict';\n\nvar BaseView = require('./base');\nvar util = require('../util');\n\nclass MatrixSubView extends BaseView {\n    constructor(matrix, startRow, endRow, startColumn, endColumn) {\n        util.checkRange(matrix, startRow, endRow, startColumn, endColumn);\n        super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n        this.startRow = startRow;\n        this.startColumn = startColumn;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.startRow + rowIndex, this.startColumn + columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.startRow + rowIndex, this.startColumn + columnIndex);\n    }\n}\n\nmodule.exports = MatrixSubView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/views/sub.js","'use strict';\n\nvar BaseView = require('./base');\nvar util = require('../util');\n\nclass MatrixSelectionView extends BaseView {\n    constructor(matrix, rowIndices, columnIndices) {\n        var indices = util.checkIndices(matrix, rowIndices, columnIndices);\n        super(matrix, indices.row.length, indices.column.length);\n        this.rowIndices = indices.row;\n        this.columnIndices = indices.column;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.rowIndices[rowIndex], this.columnIndices[columnIndex], value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.rowIndices[rowIndex], this.columnIndices[columnIndex]);\n    }\n}\n\nmodule.exports = MatrixSelectionView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/views/selection.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixColumnView extends BaseView {\n    constructor(matrix, column) {\n        super(matrix, matrix.rows, 1);\n        this.column = column;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(rowIndex, this.column, value);\n        return this;\n    }\n\n    get(rowIndex) {\n        return this.matrix.get(rowIndex, this.column);\n    }\n}\n\nmodule.exports = MatrixColumnView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/views/column.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixFlipRowView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.rows, matrix.columns);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\n    }\n}\n\nmodule.exports = MatrixFlipRowView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/views/flipRow.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixFlipColumnView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.rows, matrix.columns);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\n    }\n}\n\nmodule.exports = MatrixFlipColumnView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/views/flipColumn.js","'use strict';\n\nvar Matrix = require('./matrix').Matrix;\n\nvar SingularValueDecomposition = require('./dc/svd');\nvar EigenvalueDecomposition = require('./dc/evd');\nvar LuDecomposition = require('./dc/lu');\nvar QrDecomposition = require('./dc/qr');\nvar CholeskyDecomposition = require('./dc/cholesky');\n\nfunction inverse(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    return solve(matrix, Matrix.eye(matrix.rows));\n}\n\n/**\n * Returns the inverse\n * @memberOf Matrix\n * @static\n * @param {Matrix} matrix\n * @return {Matrix} matrix\n * @alias inv\n */\nMatrix.inverse = Matrix.inv = inverse;\n\n/**\n * Returns the inverse\n * @memberOf Matrix\n * @static\n * @param {Matrix} matrix\n * @return {Matrix} matrix\n * @alias inv\n */\nMatrix.prototype.inverse = Matrix.prototype.inv = function () {\n    return inverse(this);\n};\n\nfunction solve(leftHandSide, rightHandSide) {\n    leftHandSide = Matrix.checkMatrix(leftHandSide);\n    rightHandSide = Matrix.checkMatrix(rightHandSide);\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n}\n\nMatrix.solve = solve;\nMatrix.prototype.solve = function (other) {\n    return solve(this, other);\n};\n\nmodule.exports = {\n    SingularValueDecomposition: SingularValueDecomposition,\n    SVD: SingularValueDecomposition,\n    EigenvalueDecomposition: EigenvalueDecomposition,\n    EVD: EigenvalueDecomposition,\n    LuDecomposition: LuDecomposition,\n    LU: LuDecomposition,\n    QrDecomposition: QrDecomposition,\n    QR: QrDecomposition,\n    CholeskyDecomposition: CholeskyDecomposition,\n    CHO: CholeskyDecomposition,\n    inverse: inverse,\n    solve: solve\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/decompositions.js","'use strict';\n\nconst Matrix = require('../matrix').Matrix;\nconst util = require('./util');\nconst hypotenuse = util.hypotenuse;\nconst getFilled2DArray = util.getFilled2DArray;\n\nconst defaultOptions = {\n    assumeSymmetric: false\n};\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\nfunction EigenvalueDecomposition(matrix, options) {\n    options = Object.assign({}, defaultOptions, options);\n    if (!(this instanceof EigenvalueDecomposition)) {\n        return new EigenvalueDecomposition(matrix, options);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n        throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns,\n        V = getFilled2DArray(n, n, 0),\n        d = new Array(n),\n        e = new Array(n),\n        value = matrix,\n        i, j;\n\n    var isSymmetric = false;\n    if (options.assumeSymmetric) {\n        isSymmetric = true;\n    } else {\n        isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                V[i][j] = value.get(i, j);\n            }\n        }\n        tred2(n, e, d, V);\n        tql2(n, e, d, V);\n    } else {\n        var H = getFilled2DArray(n, n, 0),\n            ort = new Array(n);\n        for (j = 0; j < n; j++) {\n            for (i = 0; i < n; i++) {\n                H[i][j] = value.get(i, j);\n            }\n        }\n        orthes(n, H, ort, V);\n        hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n}\n\nEigenvalueDecomposition.prototype = {\n    get realEigenvalues() {\n        return this.d;\n    },\n    get imaginaryEigenvalues() {\n        return this.e;\n    },\n    get eigenvectorMatrix() {\n        if (!Matrix.isMatrix(this.V)) {\n            this.V = new Matrix(this.V);\n        }\n        return this.V;\n    },\n    get diagonalMatrix() {\n        var n = this.n,\n            e = this.e,\n            d = this.d,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                X[i][j] = 0;\n            }\n            X[i][i] = d[i];\n            if (e[i] > 0) {\n                X[i][i + 1] = e[i];\n            } else if (e[i] < 0) {\n                X[i][i - 1] = e[i];\n            }\n        }\n        return X;\n    }\n};\n\nfunction tred2(n, e, d, V) {\n\n    var f, g, h, i, j, k,\n        hh, scale;\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n    }\n\n    for (i = n - 1; i > 0; i--) {\n        scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n            scale = scale + Math.abs(d[k]);\n        }\n\n        if (scale === 0) {\n            e[i] = d[i - 1];\n            for (j = 0; j < i; j++) {\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n                V[j][i] = 0;\n            }\n        } else {\n            for (k = 0; k < i; k++) {\n                d[k] /= scale;\n                h += d[k] * d[k];\n            }\n\n            f = d[i - 1];\n            g = Math.sqrt(h);\n            if (f > 0) {\n                g = -g;\n            }\n\n            e[i] = scale * g;\n            h = h - f * g;\n            d[i - 1] = f - g;\n            for (j = 0; j < i; j++) {\n                e[j] = 0;\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                V[j][i] = f;\n                g = e[j] + V[j][j] * f;\n                for (k = j + 1; k <= i - 1; k++) {\n                    g += V[k][j] * d[k];\n                    e[k] += V[k][j] * f;\n                }\n                e[j] = g;\n            }\n\n            f = 0;\n            for (j = 0; j < i; j++) {\n                e[j] /= h;\n                f += e[j] * d[j];\n            }\n\n            hh = f / (h + h);\n            for (j = 0; j < i; j++) {\n                e[j] -= hh * d[j];\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                g = e[j];\n                for (k = j; k <= i - 1; k++) {\n                    V[k][j] -= (f * e[k] + g * d[k]);\n                }\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n            }\n        }\n        d[i] = h;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        V[n - 1][i] = V[i][i];\n        V[i][i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n            for (k = 0; k <= i; k++) {\n                d[k] = V[k][i + 1] / h;\n            }\n\n            for (j = 0; j <= i; j++) {\n                g = 0;\n                for (k = 0; k <= i; k++) {\n                    g += V[k][i + 1] * V[k][j];\n                }\n                for (k = 0; k <= i; k++) {\n                    V[k][j] -= g * d[k];\n                }\n            }\n        }\n\n        for (k = 0; k <= i; k++) {\n            V[k][i + 1] = 0;\n        }\n    }\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n        V[n - 1][j] = 0;\n    }\n\n    V[n - 1][n - 1] = 1;\n    e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n\n    var g, h, i, j, k, l, m, p, r,\n        dl1, c, c2, c3, el1, s, s2,\n        iter;\n\n    for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n    }\n\n    e[n - 1] = 0;\n\n    var f = 0,\n        tst1 = 0,\n        eps = Math.pow(2, -52);\n\n    for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        m = l;\n        while (m < n) {\n            if (Math.abs(e[m]) <= eps * tst1) {\n                break;\n            }\n            m++;\n        }\n\n        if (m > l) {\n            iter = 0;\n            do {\n                iter = iter + 1;\n\n                g = d[l];\n                p = (d[l + 1] - g) / (2 * e[l]);\n                r = hypotenuse(p, 1);\n                if (p < 0) {\n                    r = -r;\n                }\n\n                d[l] = e[l] / (p + r);\n                d[l + 1] = e[l] * (p + r);\n                dl1 = d[l + 1];\n                h = g - d[l];\n                for (i = l + 2; i < n; i++) {\n                    d[i] -= h;\n                }\n\n                f = f + h;\n\n                p = d[m];\n                c = 1;\n                c2 = c;\n                c3 = c;\n                el1 = e[l + 1];\n                s = 0;\n                s2 = 0;\n                for (i = m - 1; i >= l; i--) {\n                    c3 = c2;\n                    c2 = c;\n                    s2 = s;\n                    g = c * e[i];\n                    h = c * p;\n                    r = hypotenuse(p, e[i]);\n                    e[i + 1] = s * r;\n                    s = e[i] / r;\n                    c = p / r;\n                    p = c * d[i] - s * g;\n                    d[i + 1] = h + s * (c * g + s * d[i]);\n\n                    for (k = 0; k < n; k++) {\n                        h = V[k][i + 1];\n                        V[k][i + 1] = s * V[k][i] + c * h;\n                        V[k][i] = c * V[k][i] - s * h;\n                    }\n                }\n\n                p = -s * s2 * c3 * el1 * e[l] / dl1;\n                e[l] = s * p;\n                d[l] = c * p;\n\n            }\n            while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n            if (d[j] < p) {\n                k = j;\n                p = d[j];\n            }\n        }\n\n        if (k !== i) {\n            d[k] = d[i];\n            d[i] = p;\n            for (j = 0; j < n; j++) {\n                p = V[j][i];\n                V[j][i] = V[j][k];\n                V[j][k] = p;\n            }\n        }\n    }\n}\n\nfunction orthes(n, H, ort, V) {\n\n    var low = 0,\n        high = n - 1,\n        f, g, h, i, j, m,\n        scale;\n\n    for (m = low + 1; m <= high - 1; m++) {\n        scale = 0;\n        for (i = m; i <= high; i++) {\n            scale = scale + Math.abs(H[i][m - 1]);\n        }\n\n        if (scale !== 0) {\n            h = 0;\n            for (i = high; i >= m; i--) {\n                ort[i] = H[i][m - 1] / scale;\n                h += ort[i] * ort[i];\n            }\n\n            g = Math.sqrt(h);\n            if (ort[m] > 0) {\n                g = -g;\n            }\n\n            h = h - ort[m] * g;\n            ort[m] = ort[m] - g;\n\n            for (j = m; j < n; j++) {\n                f = 0;\n                for (i = high; i >= m; i--) {\n                    f += ort[i] * H[i][j];\n                }\n\n                f = f / h;\n                for (i = m; i <= high; i++) {\n                    H[i][j] -= f * ort[i];\n                }\n            }\n\n            for (i = 0; i <= high; i++) {\n                f = 0;\n                for (j = high; j >= m; j--) {\n                    f += ort[j] * H[i][j];\n                }\n\n                f = f / h;\n                for (j = m; j <= high; j++) {\n                    H[i][j] -= f * ort[j];\n                }\n            }\n\n            ort[m] = scale * ort[m];\n            H[m][m - 1] = scale * g;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            V[i][j] = (i === j ? 1 : 0);\n        }\n    }\n\n    for (m = high - 1; m >= low + 1; m--) {\n        if (H[m][m - 1] !== 0) {\n            for (i = m + 1; i <= high; i++) {\n                ort[i] = H[i][m - 1];\n            }\n\n            for (j = m; j <= high; j++) {\n                g = 0;\n                for (i = m; i <= high; i++) {\n                    g += ort[i] * V[i][j];\n                }\n\n                g = (g / ort[m]) / H[m][m - 1];\n                for (i = m; i <= high; i++) {\n                    V[i][j] += g * ort[i];\n                }\n            }\n        }\n    }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n    var n = nn - 1,\n        low = 0,\n        high = nn - 1,\n        eps = Math.pow(2, -52),\n        exshift = 0,\n        norm = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n        s = 0,\n        z = 0,\n        iter = 0,\n        i, j, k, l, m, t, w, x, y,\n        ra, sa, vr, vi,\n        notlast, cdivres;\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            d[i] = H[i][i];\n            e[i] = 0;\n        }\n\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n            norm = norm + Math.abs(H[i][j]);\n        }\n    }\n\n    while (n >= low) {\n        l = n;\n        while (l > low) {\n            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n            if (s === 0) {\n                s = norm;\n            }\n            if (Math.abs(H[l][l - 1]) < eps * s) {\n                break;\n            }\n            l--;\n        }\n\n        if (l === n) {\n            H[n][n] = H[n][n] + exshift;\n            d[n] = H[n][n];\n            e[n] = 0;\n            n--;\n            iter = 0;\n        } else if (l === n - 1) {\n            w = H[n][n - 1] * H[n - 1][n];\n            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n            q = p * p + w;\n            z = Math.sqrt(Math.abs(q));\n            H[n][n] = H[n][n] + exshift;\n            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n            x = H[n][n];\n\n            if (q >= 0) {\n                z = (p >= 0) ? (p + z) : (p - z);\n                d[n - 1] = x + z;\n                d[n] = d[n - 1];\n                if (z !== 0) {\n                    d[n] = x - w / z;\n                }\n                e[n - 1] = 0;\n                e[n] = 0;\n                x = H[n][n - 1];\n                s = Math.abs(x) + Math.abs(z);\n                p = x / s;\n                q = z / s;\n                r = Math.sqrt(p * p + q * q);\n                p = p / r;\n                q = q / r;\n\n                for (j = n - 1; j < nn; j++) {\n                    z = H[n - 1][j];\n                    H[n - 1][j] = q * z + p * H[n][j];\n                    H[n][j] = q * H[n][j] - p * z;\n                }\n\n                for (i = 0; i <= n; i++) {\n                    z = H[i][n - 1];\n                    H[i][n - 1] = q * z + p * H[i][n];\n                    H[i][n] = q * H[i][n] - p * z;\n                }\n\n                for (i = low; i <= high; i++) {\n                    z = V[i][n - 1];\n                    V[i][n - 1] = q * z + p * V[i][n];\n                    V[i][n] = q * V[i][n] - p * z;\n                }\n            } else {\n                d[n - 1] = x + p;\n                d[n] = x + p;\n                e[n - 1] = z;\n                e[n] = -z;\n            }\n\n            n = n - 2;\n            iter = 0;\n        } else {\n            x = H[n][n];\n            y = 0;\n            w = 0;\n            if (l < n) {\n                y = H[n - 1][n - 1];\n                w = H[n][n - 1] * H[n - 1][n];\n            }\n\n            if (iter === 10) {\n                exshift += x;\n                for (i = low; i <= n; i++) {\n                    H[i][i] -= x;\n                }\n                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n                x = y = 0.75 * s;\n                w = -0.4375 * s * s;\n            }\n\n            if (iter === 30) {\n                s = (y - x) / 2;\n                s = s * s + w;\n                if (s > 0) {\n                    s = Math.sqrt(s);\n                    if (y < x) {\n                        s = -s;\n                    }\n                    s = x - w / ((y - x) / 2 + s);\n                    for (i = low; i <= n; i++) {\n                        H[i][i] -= s;\n                    }\n                    exshift += s;\n                    x = y = w = 0.964;\n                }\n            }\n\n            iter = iter + 1;\n\n            m = n - 2;\n            while (m >= l) {\n                z = H[m][m];\n                r = x - z;\n                s = y - z;\n                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n                q = H[m + 1][m + 1] - z - r - s;\n                r = H[m + 2][m + 1];\n                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                p = p / s;\n                q = q / s;\n                r = r / s;\n                if (m === l) {\n                    break;\n                }\n                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n                    break;\n                }\n                m--;\n            }\n\n            for (i = m + 2; i <= n; i++) {\n                H[i][i - 2] = 0;\n                if (i > m + 2) {\n                    H[i][i - 3] = 0;\n                }\n            }\n\n            for (k = m; k <= n - 1; k++) {\n                notlast = (k !== n - 1);\n                if (k !== m) {\n                    p = H[k][k - 1];\n                    q = H[k + 1][k - 1];\n                    r = (notlast ? H[k + 2][k - 1] : 0);\n                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                    if (x !== 0) {\n                        p = p / x;\n                        q = q / x;\n                        r = r / x;\n                    }\n                }\n\n                if (x === 0) {\n                    break;\n                }\n\n                s = Math.sqrt(p * p + q * q + r * r);\n                if (p < 0) {\n                    s = -s;\n                }\n\n                if (s !== 0) {\n                    if (k !== m) {\n                        H[k][k - 1] = -s * x;\n                    } else if (l !== m) {\n                        H[k][k - 1] = -H[k][k - 1];\n                    }\n\n                    p = p + s;\n                    x = p / s;\n                    y = q / s;\n                    z = r / s;\n                    q = q / p;\n                    r = r / p;\n\n                    for (j = k; j < nn; j++) {\n                        p = H[k][j] + q * H[k + 1][j];\n                        if (notlast) {\n                            p = p + r * H[k + 2][j];\n                            H[k + 2][j] = H[k + 2][j] - p * z;\n                        }\n\n                        H[k][j] = H[k][j] - p * x;\n                        H[k + 1][j] = H[k + 1][j] - p * y;\n                    }\n\n                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n                        p = x * H[i][k] + y * H[i][k + 1];\n                        if (notlast) {\n                            p = p + z * H[i][k + 2];\n                            H[i][k + 2] = H[i][k + 2] - p * r;\n                        }\n\n                        H[i][k] = H[i][k] - p;\n                        H[i][k + 1] = H[i][k + 1] - p * q;\n                    }\n\n                    for (i = low; i <= high; i++) {\n                        p = x * V[i][k] + y * V[i][k + 1];\n                        if (notlast) {\n                            p = p + z * V[i][k + 2];\n                            V[i][k + 2] = V[i][k + 2] - p * r;\n                        }\n\n                        V[i][k] = V[i][k] - p;\n                        V[i][k + 1] = V[i][k + 1] - p * q;\n                    }\n                }\n            }\n        }\n    }\n\n    if (norm === 0) {\n        return;\n    }\n\n    for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n\n        if (q === 0) {\n            l = n;\n            H[n][n] = 1;\n            for (i = n - 1; i >= 0; i--) {\n                w = H[i][i] - p;\n                r = 0;\n                for (j = l; j <= n; j++) {\n                    r = r + H[i][j] * H[j][n];\n                }\n\n                if (e[i] < 0) {\n                    z = w;\n                    s = r;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                        t = (x * s - z * r) / q;\n                        H[i][n] = t;\n                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n                    }\n\n                    t = Math.abs(H[i][n]);\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        } else if (q < 0) {\n            l = n - 1;\n\n            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n                H[n - 1][n - 1] = q / H[n][n - 1];\n                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n            } else {\n                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n                H[n - 1][n - 1] = cdivres[0];\n                H[n - 1][n] = cdivres[1];\n            }\n\n            H[n][n - 1] = 0;\n            H[n][n] = 1;\n            for (i = n - 2; i >= 0; i--) {\n                ra = 0;\n                sa = 0;\n                for (j = l; j <= n; j++) {\n                    ra = ra + H[i][j] * H[j][n - 1];\n                    sa = sa + H[i][j] * H[j][n];\n                }\n\n                w = H[i][i] - p;\n\n                if (e[i] < 0) {\n                    z = w;\n                    r = ra;\n                    s = sa;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        cdivres = cdiv(-ra, -sa, w, q);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                        vi = (d[i] - p) * 2 * q;\n                        if (vr === 0 && vi === 0) {\n                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                        }\n                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n                        } else {\n                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n                            H[i + 1][n - 1] = cdivres[0];\n                            H[i + 1][n] = cdivres[1];\n                        }\n                    }\n\n                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n - 1] = H[j][n - 1] / t;\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            for (j = i; j < nn; j++) {\n                V[i][j] = H[i][j];\n            }\n        }\n    }\n\n    for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n            z = 0;\n            for (k = low; k <= Math.min(j, high); k++) {\n                z = z + V[i][k] * H[k][j];\n            }\n            V[i][j] = z;\n        }\n    }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n    var r, d;\n    if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        return [(xr + r * xi) / d, (xi - r * xr) / d];\n    } else {\n        r = yr / yi;\n        d = yi + r * yr;\n        return [(r * xr + xi) / d, (r * xi - xr) / d];\n    }\n}\n\nmodule.exports = EigenvalueDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/dc/evd.js","'use strict';\n\nvar Matrix = require('../matrix').Matrix;\nvar hypotenuse = require('./util').hypotenuse;\n\n//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\nfunction QrDecomposition(value) {\n    if (!(this instanceof QrDecomposition)) {\n        return new QrDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n\n    var qr = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        rdiag = new Array(n),\n        i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) {\n            nrm = hypotenuse(nrm, qr[i][k]);\n        }\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) {\n                nrm = -nrm;\n            }\n            for (i = k; i < m; i++) {\n                qr[i][k] /= nrm;\n            }\n            qr[k][k] += 1;\n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * qr[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    qr[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n}\n\nQrDecomposition.prototype = {\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var qr = this.QR,\n            m = qr.rows;\n\n        if (value.rows !== m) {\n            throw new Error('Matrix row dimensions must agree');\n        }\n        if (!this.isFullRank()) {\n            throw new Error('Matrix is rank deficient');\n        }\n\n        var count = value.columns;\n        var X = value.clone();\n        var n = qr.columns;\n        var i, j, k, s;\n\n        for (k = 0; k < n; k++) {\n            for (j = 0; j < count; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * X[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    X[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        for (k = n - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= this.Rdiag[k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * qr[i][k];\n                }\n            }\n        }\n\n        return X.subMatrix(0, n - 1, 0, count - 1);\n    },\n    isFullRank: function () {\n        var columns = this.QR.columns;\n        for (var i = 0; i < columns; i++) {\n            if (this.Rdiag[i] === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n    get upperTriangularMatrix() {\n        var qr = this.QR,\n            n = qr.columns,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                if (i < j) {\n                    X[i][j] = qr[i][j];\n                } else if (i === j) {\n                    X[i][j] = this.Rdiag[i];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get orthogonalMatrix() {\n        var qr = this.QR,\n            rows = qr.rows,\n            columns = qr.columns,\n            X = new Matrix(rows, columns),\n            i, j, k, s;\n\n        for (k = columns - 1; k >= 0; k--) {\n            for (i = 0; i < rows; i++) {\n                X[i][k] = 0;\n            }\n            X[k][k] = 1;\n            for (j = k; j < columns; j++) {\n                if (qr[k][k] !== 0) {\n                    s = 0;\n                    for (i = k; i < rows; i++) {\n                        s += qr[i][k] * X[i][j];\n                    }\n\n                    s = -s / qr[k][k];\n\n                    for (i = k; i < rows; i++) {\n                        X[i][j] += s * qr[i][k];\n                    }\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = QrDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/dc/qr.js","'use strict';\n\nvar Matrix = require('../matrix').Matrix;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\nfunction CholeskyDecomposition(value) {\n    if (!(this instanceof CholeskyDecomposition)) {\n        return new CholeskyDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n    if (!value.isSymmetric()) {\n        throw new Error('Matrix is not symmetric');\n    }\n\n    var a = value,\n        dimension = a.rows,\n        l = new Matrix(dimension, dimension),\n        positiveDefinite = true,\n        i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n        var Lrowj = l[j];\n        var d = 0;\n        for (k = 0; k < j; k++) {\n            var Lrowk = l[k];\n            var s = 0;\n            for (i = 0; i < k; i++) {\n                s += Lrowk[i] * Lrowj[i];\n            }\n            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n            d = d + s * s;\n        }\n\n        d = a[j][j] - d;\n\n        positiveDefinite &= (d > 0);\n        l[j][j] = Math.sqrt(Math.max(d, 0));\n        for (k = j + 1; k < dimension; k++) {\n            l[j][k] = 0;\n        }\n    }\n\n    if (!positiveDefinite) {\n        throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n}\n\nCholeskyDecomposition.prototype = {\n    get lowerTriangularMatrix() {\n        return this.L;\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var l = this.L,\n            dimension = l.rows;\n\n        if (value.rows !== dimension) {\n            throw new Error('Matrix dimensions do not match');\n        }\n\n        var count = value.columns,\n            B = value.clone(),\n            i, j, k;\n\n        for (k = 0; k < dimension; k++) {\n            for (j = 0; j < count; j++) {\n                for (i = 0; i < k; i++) {\n                    B[k][j] -= B[i][j] * l[k][i];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        for (k = dimension - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                for (i = k + 1; i < dimension; i++) {\n                    B[k][j] -= B[i][j] * l[i][k];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        return B;\n    }\n};\n\nmodule.exports = CholeskyDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-savitzky-golay/node_modules/ml-matrix/src/dc/cholesky.js","//Code translate from Pascal source in http://pubs.acs.org/doi/pdf/10.1021/ac00205a007\nvar extend = require('extend');\nvar stat = require('ml-stat');\n\nvar defaultOptions = {\n    windowSize: 9,\n    derivative: 0,\n    polynomial: 3,\n};\n\n\nfunction SavitzkyGolay(data, h, options) {\n    options = extend({}, defaultOptions, options);\n\n    if ((options.windowSize % 2 === 0) || (options.windowSize < 5) || !(Number.isInteger(options.windowSize)))\n            throw new RangeError('Invalid window size (should be odd and at least 5 integer number)')\n\n\n    if (options.windowSize>data.length)\n        throw new RangeError('Window size is higher than the data length '+options.windowSize+\">\"+data.length);\n    if ((options.derivative < 0) || !(Number.isInteger(options.derivative)))\n        throw new RangeError('Derivative should be a positive integer');\n    if ((options.polynomial < 1) || !(Number.isInteger(options.polynomial)))\n        throw new RangeError('Polynomial should be a positive integer');\n    if (options.polynomial >= 6)\n        console.warn('You should not use polynomial grade higher than 5 if you are' +\n            ' not sure that your data arises from such a model. Possible polynomial oscillation problems');\n\n    var windowSize = options.windowSize;\n\n    var half = Math.floor(windowSize/2);\n    var np = data.length;\n    var ans = new Array(np);\n    var weights = fullWeights(windowSize,options.polynomial,options.derivative);\n    var hs = 0;\n    var constantH = true;\n    if( Object.prototype.toString.call( h ) === '[object Array]' ) {\n        constantH = false;\n    }\n    else{\n        hs = Math.pow(h, options.derivative);\n    }\n    //console.log(\"Constant h: \"+constantH);\n    //For the borders\n    for(var i=0;i<half;i++){\n        var wg1=weights[half-i-1];\n        var wg2=weights[half+i+1];\n        var d1 = 0,d2=0;\n        for (var l = 0; l < windowSize; l++){\n            d1 += wg1[l] * data[l];\n            d2 += wg2[l] * data[np-windowSize+l-1];\n        }\n        if(constantH){\n            ans[half-i-1] = d1/hs;\n            ans[np-half+i] = d2/hs;\n        }\n        else{\n            hs = getHs(h,half-i-1,half, options.derivative);\n            ans[half-i-1] = d1/hs;\n            hs = getHs(h,np-half+i,half, options.derivative);\n            ans[np-half+i] = d2/hs;\n        }\n    }\n    //For the internal points\n    var wg = weights[half];\n    for(var i=windowSize;i<np+1;i++){\n        var d = 0;\n        for (var l = 0; l < windowSize; l++)\n            d += wg[l] * data[l+i-windowSize];\n        if(!constantH)\n            hs = getHs(h,i-half-1,half, options.derivative);\n        ans[i-half-1] = d/hs;\n    }\n    return ans;\n}\n\nfunction getHs(h,center,half,derivative){\n    var hs = 0;\n    var count = 0;\n    for(var i=center-half;i<center+half;i++){\n        if(i>=0 && i < h.length-1){\n            hs+= (h[i+1]-h[i]);\n            count++;\n        }\n    }\n    return Math.pow(hs/count,derivative);\n}\n\nfunction GramPoly(i,m,k,s){\n    var Grampoly = 0;\n    if(k>0){\n        Grampoly = (4*k-2)/(k*(2*m-k+1))*(i*GramPoly(i,m,k-1,s) +\n            s*GramPoly(i,m,k-1,s-1)) - ((k-1)*(2*m+k))/(k*(2*m-k+1))*GramPoly(i,m,k-2,s);\n    }\n    else{\n        if(k==0&&s==0){\n            Grampoly=1;\n        }\n        else{\n            Grampoly=0;\n        }\n    }\n    //console.log(Grampoly);\n    return Grampoly;\n}\n\nfunction GenFact(a,b){\n    var gf=1;\n    if(a>=b){\n        for(var j=a-b+1;j<=a;j++){\n            gf*=j;\n        }\n    }\n    return gf;\n}\n\nfunction Weight(i,t,m,n,s){\n    var sum=0;\n    for(var k=0;k<=n;k++){\n        //console.log(k);\n        sum+=(2*k+1)*(GenFact(2*m,k)/GenFact(2*m+k+1,k+1))*GramPoly(i,m,k,0)*GramPoly(t,m,k,s)\n    }\n    return sum;\n}\n\n/**\n *\n * @param m  Number of points\n * @param n  Polynomial grade\n * @param s  Derivative\n */\nfunction fullWeights(m,n,s){\n    var weights = new Array(m);\n    var np = Math.floor(m/2);\n    for(var t=-np;t<=np;t++){\n        weights[t+np] = new Array(m);\n        for(var j=-np;j<=np;j++){\n            weights[t+np][j+np]=Weight(j,t,np,n,s);\n        }\n    }\n    return weights;\n}\n\n/*function entropy(data,h,options){\n    var trend = SavitzkyGolay(data,h,trendOptions);\n    var copy = new Array(data.length);\n    var sum = 0;\n    var max = 0;\n    for(var i=0;i<data.length;i++){\n        copy[i] = data[i]-trend[i];\n    }\n\n    sum/=data.length;\n    console.log(sum+\" \"+max);\n    console.log(stat.array.standardDeviation(copy));\n    console.log(Math.abs(stat.array.mean(copy))/stat.array.standardDeviation(copy));\n    return sum;\n\n}\n\n\n\nfunction guessWindowSize(data, h){\n    console.log(\"entropy \"+entropy(data,h,trendOptions));\n    return 5;\n}\n*/\nmodule.exports = SavitzkyGolay;\n \n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-savitzky-golay-generalized/src/index.js","'use strict';\n\nexports.array = require('./array');\nexports.matrix = require('./matrix');\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-savitzky-golay-generalized/node_modules/ml-stat/index.js","'use strict';\nvar arrayStat = require('./array');\n\n// https://github.com/accord-net/framework/blob/development/Sources/Accord.Statistics/Tools.cs\n\nfunction entropy(matrix, eps) {\n    if (typeof(eps) === 'undefined') {\n        eps = 0;\n    }\n    var sum = 0,\n        l1 = matrix.length,\n        l2 = matrix[0].length;\n    for (var i = 0; i < l1; i++) {\n        for (var j = 0; j < l2; j++) {\n            sum += matrix[i][j] * Math.log(matrix[i][j] + eps);\n        }\n    }\n    return -sum;\n}\n\nfunction mean(matrix, dimension) {\n    if (typeof(dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        theMean, N, i, j;\n\n    if (dimension === -1) {\n        theMean = [0];\n        N = rows * cols;\n        for (i = 0; i < rows; i++) {\n            for (j = 0; j < cols; j++) {\n                theMean[0] += matrix[i][j];\n            }\n        }\n        theMean[0] /= N;\n    } else if (dimension === 0) {\n        theMean = new Array(cols);\n        N = rows;\n        for (j = 0; j < cols; j++) {\n            theMean[j] = 0;\n            for (i = 0; i < rows; i++) {\n                theMean[j] += matrix[i][j];\n            }\n            theMean[j] /= N;\n        }\n    } else if (dimension === 1) {\n        theMean = new Array(rows);\n        N = cols;\n        for (j = 0; j < rows; j++) {\n            theMean[j] = 0;\n            for (i = 0; i < cols; i++) {\n                theMean[j] += matrix[j][i];\n            }\n            theMean[j] /= N;\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n    return theMean;\n}\n\nfunction standardDeviation(matrix, means, unbiased) {\n    var vari = variance(matrix, means, unbiased), l = vari.length;\n    for (var i = 0; i < l; i++) {\n        vari[i] = Math.sqrt(vari[i]);\n    }\n    return vari;\n}\n\nfunction variance(matrix, means, unbiased) {\n    if (typeof(unbiased) === 'undefined') {\n        unbiased = true;\n    }\n    means = means || mean(matrix);\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length;\n    var vari = new Array(cols);\n\n    for (var j = 0; j < cols; j++) {\n        var sum1 = 0, sum2 = 0, x = 0;\n        for (var i = 0; i < rows; i++) {\n            x = matrix[i][j] - means[j];\n            sum1 += x;\n            sum2 += x * x;\n        }\n        if (unbiased) {\n            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / (rows - 1);\n        } else {\n            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / rows;\n        }\n    }\n    return vari;\n}\n\nfunction median(matrix) {\n    var rows = matrix.length, cols = matrix[0].length;\n    var medians = new Array(cols);\n\n    for (var i = 0; i < cols; i++) {\n        var data = new Array(rows);\n        for (var j = 0; j < rows; j++) {\n            data[j] = matrix[j][i];\n        }\n        data.sort();\n        var N = data.length;\n        if (N % 2 === 0) {\n            medians[i] = (data[N / 2] + data[(N / 2) - 1]) * 0.5;\n        } else {\n            medians[i] = data[Math.floor(N / 2)];\n        }\n    }\n    return medians;\n}\n\nfunction mode(matrix) {\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        modes = new Array(cols),\n        i, j;\n    for (i = 0; i < cols; i++) {\n        var itemCount = new Array(rows);\n        for (var k = 0; k < rows; k++) {\n            itemCount[k] = 0;\n        }\n        var itemArray = new Array(rows);\n        var count = 0;\n\n        for (j = 0; j < rows; j++) {\n            var index = itemArray.indexOf(matrix[j][i]);\n            if (index >= 0) {\n                itemCount[index]++;\n            } else {\n                itemArray[count] = matrix[j][i];\n                itemCount[count] = 1;\n                count++;\n            }\n        }\n\n        var maxValue = 0, maxIndex = 0;\n        for (j = 0; j < count; j++) {\n            if (itemCount[j] > maxValue) {\n                maxValue = itemCount[j];\n                maxIndex = j;\n            }\n        }\n\n        modes[i] = itemArray[maxIndex];\n    }\n    return modes;\n}\n\nfunction skewness(matrix, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var means = mean(matrix);\n    var n = matrix.length, l = means.length;\n    var skew = new Array(l);\n\n    for (var j = 0; j < l; j++) {\n        var s2 = 0, s3 = 0;\n        for (var i = 0; i < n; i++) {\n            var dev = matrix[i][j] - means[j];\n            s2 += dev * dev;\n            s3 += dev * dev * dev;\n        }\n\n        var m2 = s2 / n;\n        var m3 = s3 / n;\n        var g = m3 / Math.pow(m2, 3 / 2);\n\n        if (unbiased) {\n            var a = Math.sqrt(n * (n - 1));\n            var b = n - 2;\n            skew[j] = (a / b) * g;\n        } else {\n            skew[j] = g;\n        }\n    }\n    return skew;\n}\n\nfunction kurtosis(matrix, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var means = mean(matrix);\n    var n = matrix.length, m = matrix[0].length;\n    var kurt = new Array(m);\n\n    for (var j = 0; j < m; j++) {\n        var s2 = 0, s4 = 0;\n        for (var i = 0; i < n; i++) {\n            var dev = matrix[i][j] - means[j];\n            s2 += dev * dev;\n            s4 += dev * dev * dev * dev;\n        }\n        var m2 = s2 / n;\n        var m4 = s4 / n;\n\n        if (unbiased) {\n            var v = s2 / (n - 1);\n            var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n            var b = s4 / (v * v);\n            var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n            kurt[j] = a * b - 3 * c;\n        } else {\n            kurt[j] = m4 / (m2 * m2) - 3;\n        }\n    }\n    return kurt;\n}\n\nfunction standardError(matrix) {\n    var samples = matrix.length;\n    var standardDeviations = standardDeviation(matrix), l = standardDeviations.length;\n    var standardErrors = new Array(l);\n    var sqrtN = Math.sqrt(samples);\n\n    for (var i = 0; i < l; i++) {\n        standardErrors[i] = standardDeviations[i] / sqrtN;\n    }\n    return standardErrors;\n}\n\nfunction covariance(matrix, dimension) {\n    return scatter(matrix, undefined, dimension);\n}\n\nfunction scatter(matrix, divisor, dimension) {\n    if (typeof(dimension) === 'undefined') {\n        dimension = 0;\n    }\n    if (typeof(divisor) === 'undefined') {\n        if (dimension === 0) {\n            divisor = matrix.length - 1;\n        } else if (dimension === 1) {\n            divisor = matrix[0].length - 1;\n        }\n    }\n    var means = mean(matrix, dimension),\n        rows = matrix.length;\n    if (rows === 0) {\n        return [[]];\n    }\n    var cols = matrix[0].length,\n        cov, i, j, s, k;\n\n    if (dimension === 0) {\n        cov = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            cov[i] = new Array(cols);\n        }\n        for (i = 0; i < cols; i++) {\n            for (j = i; j < cols; j++) {\n                s = 0;\n                for (k = 0; k < rows; k++) {\n                    s += (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n                }\n                s /= divisor;\n                cov[i][j] = s;\n                cov[j][i] = s;\n            }\n        }\n    } else if (dimension === 1) {\n        cov = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            cov[i] = new Array(rows);\n        }\n        for (i = 0; i < rows; i++) {\n            for (j = i; j < rows; j++) {\n                s = 0;\n                for (k = 0; k < cols; k++) {\n                    s += (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n                }\n                s /= divisor;\n                cov[i][j] = s;\n                cov[j][i] = s;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    return cov;\n}\n\nfunction correlation(matrix) {\n    var means = mean(matrix),\n        standardDeviations = standardDeviation(matrix, true, means),\n        scores = zScores(matrix, means, standardDeviations),\n        rows = matrix.length,\n        cols = matrix[0].length,\n        i, j;\n\n    var cor = new Array(cols);\n    for (i = 0; i < cols; i++) {\n        cor[i] = new Array(cols);\n    }\n    for (i = 0; i < cols; i++) {\n        for (j = i; j < cols; j++) {\n            var c = 0;\n            for (var k = 0, l = scores.length; k < l; k++) {\n                c += scores[k][j] * scores[k][i];\n            }\n            c /= rows - 1;\n            cor[i][j] = c;\n            cor[j][i] = c;\n        }\n    }\n    return cor;\n}\n\nfunction zScores(matrix, means, standardDeviations) {\n    means = means || mean(matrix);\n    if (typeof(standardDeviations) === 'undefined') standardDeviations = standardDeviation(matrix, true, means);\n    return standardize(center(matrix, means, false), standardDeviations, true);\n}\n\nfunction center(matrix, means, inPlace) {\n    means = means || mean(matrix);\n    var result = matrix,\n        l = matrix.length,\n        i, j, jj;\n\n    if (!inPlace) {\n        result = new Array(l);\n        for (i = 0; i < l; i++) {\n            result[i] = new Array(matrix[i].length);\n        }\n    }\n\n    for (i = 0; i < l; i++) {\n        var row = result[i];\n        for (j = 0, jj = row.length; j < jj; j++) {\n            row[j] = matrix[i][j] - means[j];\n        }\n    }\n    return result;\n}\n\nfunction standardize(matrix, standardDeviations, inPlace) {\n    if (typeof(standardDeviations) === 'undefined') standardDeviations = standardDeviation(matrix);\n    var result = matrix,\n        l = matrix.length,\n        i, j, jj;\n\n    if (!inPlace) {\n        result = new Array(l);\n        for (i = 0; i < l; i++) {\n            result[i] = new Array(matrix[i].length);\n        }\n    }\n\n    for (i = 0; i < l; i++) {\n        var resultRow = result[i];\n        var sourceRow = matrix[i];\n        for (j = 0, jj = resultRow.length; j < jj; j++) {\n            if (standardDeviations[j] !== 0 && !isNaN(standardDeviations[j])) {\n                resultRow[j] = sourceRow[j] / standardDeviations[j];\n            }\n        }\n    }\n    return result;\n}\n\nfunction weightedVariance(matrix, weights) {\n    var means = mean(matrix);\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length;\n    var vari = new Array(cols);\n\n    for (var j = 0; j < cols; j++) {\n        var sum = 0;\n        var a = 0, b = 0;\n\n        for (var i = 0; i < rows; i++) {\n            var z = matrix[i][j] - means[j];\n            var w = weights[i];\n\n            sum += w * (z * z);\n            b += w;\n            a += w * w;\n        }\n\n        vari[j] = sum * (b / (b * b - a));\n    }\n\n    return vari;\n}\n\nfunction weightedMean(matrix, weights, dimension) {\n    if (typeof(dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length,\n        means, i, ii, j, w, row;\n\n    if (dimension === 0) {\n        means = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            means[i] = 0;\n        }\n        for (i = 0; i < rows; i++) {\n            row = matrix[i];\n            w = weights[i];\n            for (j = 0; j < cols; j++) {\n                means[j] += row[j] * w;\n            }\n        }\n    } else if (dimension === 1) {\n        means = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            means[i] = 0;\n        }\n        for (j = 0; j < rows; j++) {\n            row = matrix[j];\n            w = weights[j];\n            for (i = 0; i < cols; i++) {\n                means[j] += row[i] * w;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    var weightSum = arrayStat.sum(weights);\n    if (weightSum !== 0) {\n        for (i = 0, ii = means.length; i < ii; i++) {\n            means[i] /= weightSum;\n        }\n    }\n    return means;\n}\n\nfunction weightedCovariance(matrix, weights, means, dimension) {\n    dimension = dimension || 0;\n    means = means || weightedMean(matrix, weights, dimension);\n    var s1 = 0, s2 = 0;\n    for (var i = 0, ii = weights.length; i < ii; i++) {\n        s1 += weights[i];\n        s2 += weights[i] * weights[i];\n    }\n    var factor = s1 / (s1 * s1 - s2);\n    return weightedScatter(matrix, weights, means, factor, dimension);\n}\n\nfunction weightedScatter(matrix, weights, means, factor, dimension) {\n    dimension = dimension || 0;\n    means = means || weightedMean(matrix, weights, dimension);\n    if (typeof(factor) === 'undefined') {\n        factor = 1;\n    }\n    var rows = matrix.length;\n    if (rows === 0) {\n        return [[]];\n    }\n    var cols = matrix[0].length,\n        cov, i, j, k, s;\n\n    if (dimension === 0) {\n        cov = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            cov[i] = new Array(cols);\n        }\n        for (i = 0; i < cols; i++) {\n            for (j = i; j < cols; j++) {\n                s = 0;\n                for (k = 0; k < rows; k++) {\n                    s += weights[k] * (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n                }\n                cov[i][j] = s * factor;\n                cov[j][i] = s * factor;\n            }\n        }\n    } else if (dimension === 1) {\n        cov = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            cov[i] = new Array(rows);\n        }\n        for (i = 0; i < rows; i++) {\n            for (j = i; j < rows; j++) {\n                s = 0;\n                for (k = 0; k < cols; k++) {\n                    s += weights[k] * (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n                }\n                cov[i][j] = s * factor;\n                cov[j][i] = s * factor;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    return cov;\n}\n\nmodule.exports = {\n    entropy: entropy,\n    mean: mean,\n    standardDeviation: standardDeviation,\n    variance: variance,\n    median: median,\n    mode: mode,\n    skewness: skewness,\n    kurtosis: kurtosis,\n    standardError: standardError,\n    covariance: covariance,\n    scatter: scatter,\n    correlation: correlation,\n    zScores: zScores,\n    center: center,\n    standardize: standardize,\n    weightedVariance: weightedVariance,\n    weightedMean: weightedMean,\n    weightedCovariance: weightedCovariance,\n    weightedScatter: weightedScatter\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-savitzky-golay-generalized/node_modules/ml-stat/matrix.js","const HashTable = require('ml-hash-table');\n\nclass SparseMatrix {\n    constructor(rows, columns, options = {}) {\n        if (rows instanceof SparseMatrix) { // clone\n            const other = rows;\n            this._init(other.rows, other.columns, other.elements.clone(), other.threshold);\n            return;\n        }\n\n        if (Array.isArray(rows)) {\n            const matrix = rows;\n            rows = matrix.length;\n            options = columns || {};\n            columns = matrix[0].length;\n            this._init(rows, columns, new HashTable(options), options.threshold);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    var value = matrix[i][j];\n                    if (this.threshold && Math.abs(value) < this.threshold) value = 0;\n                    if (value !== 0) {\n                        this.elements.set(i * columns + j, matrix[i][j]);\n                    }\n                }\n            }\n        } else {\n            this._init(rows, columns, new HashTable(options), options.threshold);\n        }\n    }\n\n    _init(rows, columns, elements, threshold) {\n        this.rows = rows;\n        this.columns = columns;\n        this.elements = elements;\n        this.threshold = threshold || 0;\n    }\n    \n    static eye(rows = 1, columns = rows) {\n        const min = Math.min(rows, columns);\n        const matrix = new SparseMatrix(rows, columns, {initialCapacity: min});\n        for (var i = 0; i < min; i++) {\n            matrix.set(i, i, 1);\n        }\n        return matrix;\n    }\n\n    clone() {\n        return new SparseMatrix(this);\n    }\n    \n    to2DArray() {\n        const copy = new Array(this.rows);\n        for (var i = 0; i < this.rows; i++) {\n            copy[i] = new Array(this.columns);\n            for (var j = 0; j < this.columns; j++) {\n                copy[i][j] = this.get(i, j);\n            }\n        }\n        return copy;\n    }\n\n    isSquare() {\n        return this.rows === this.columns;\n    }\n\n    isSymmetric() {\n        if (!this.isSquare()) return false;\n\n        var symmetric = true;\n        this.forEachNonZero((i, j, v) => {\n            if (this.get(j, i) !== v) {\n                symmetric = false;\n                return false;\n            }\n            return v;\n        });\n        return symmetric;\n    }\n\n    get cardinality() {\n        return this.elements.size;\n    }\n\n    get size() {\n        return this.rows * this.columns;\n    }\n\n    get(row, column) {\n        return this.elements.get(row * this.columns + column);\n    }\n\n    set(row, column, value) {\n        if (this.threshold && Math.abs(value) < this.threshold) value = 0;\n        if (value === 0) {\n            this.elements.remove(row * this.columns + column);\n        } else {\n            this.elements.set(row * this.columns + column, value);\n        }\n        return this;\n    }\n    \n    mmul(other) {\n        if (this.columns !== other.rows)\n            console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n        \n        const m = this.rows;\n        const p = other.columns;\n        \n        const result = new SparseMatrix(m, p);\n        this.forEachNonZero((i, j, v1) => {\n            other.forEachNonZero((k, l, v2) => {\n                if (j === k) {\n                    result.set(i, l, result.get(i, l) + v1 * v2);\n                }\n                return v2;\n            });\n            return v1;\n        });\n        return result;\n    }\n\n    kroneckerProduct(other) {\n        const m = this.rows;\n        const n = this.columns;\n        const p = other.rows;\n        const q = other.columns;\n\n        const result = new SparseMatrix(m * p, n * q, {\n            initialCapacity: this.cardinality * other.cardinality\n        });\n        this.forEachNonZero((i, j, v1) => {\n            other.forEachNonZero((k, l, v2) => {\n                result.set(p * i + k, q * j + l, v1 * v2);\n                return v2;\n            });\n            return v1;\n        });\n        return result;\n    }\n\n    forEachNonZero(callback) {\n        this.elements.forEachPair((key, value) => {\n            const i = (key / this.columns) | 0;\n            const j = key % this.columns;\n            let r = callback(i, j, value);\n            if (r === false) return false; // stop iteration\n            if (this.threshold && Math.abs(r) < this.threshold) r = 0;\n            if (r !== value) {\n                if (r === 0) {\n                    this.elements.remove(key, true);\n                } else {\n                    this.elements.set(key, r);\n                }\n            }\n            return true;\n        });\n        this.elements.maybeShrinkCapacity();\n        return this;\n    }\n\n    getNonZeros() {\n        const cardinality = this.cardinality;\n        const rows = new Array(cardinality);\n        const columns = new Array(cardinality);\n        const values = new Array(cardinality);\n        var idx = 0;\n        this.forEachNonZero((i, j, value) => {\n            rows[idx] = i;\n            columns[idx] = j;\n            values[idx] = value;\n            idx++;\n            return value;\n        });\n        return {rows, columns, values};\n    }\n\n    setThreshold(newThreshold) {\n        if (newThreshold !== 0 && newThreshold !== this.threshold) {\n            this.threshold = newThreshold;\n            this.forEachNonZero((i, j, v) => v);\n        }\n        return this;\n    }\n}\n\nSparseMatrix.prototype.klass = 'Matrix';\n\nSparseMatrix.identity = SparseMatrix.eye;\nSparseMatrix.prototype.tensorProduct = SparseMatrix.prototype.kroneckerProduct;\n\nmodule.exports = SparseMatrix;\n\n/*\n Add dynamically instance and static methods for mathematical operations\n */\n\nvar inplaceOperator = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\nvar inplaceOperatorScalar = `\n(function %name%S(value) {\n    this.forEachNonZero((i, j, v) => v %op% value);\n    return this;\n})\n`;\n\nvar inplaceOperatorMatrix = `\n(function %name%M(matrix) {\n    matrix.forEachNonZero((i, j, v) => {\n        this.set(i, j, this.get(i, j) %op% v);\n        return v;\n    });\n    return this;\n})\n`;\n\nvar staticOperator = `\n(function %name%(matrix, value) {\n    var newMatrix = new SparseMatrix(matrix);\n    return newMatrix.%name%(value);\n})\n`;\n\nvar inplaceMethod = `\n(function %name%() {\n    this.forEachNonZero((i, j, v) => %method%(v));\n    return this;\n})\n`;\n\nvar staticMethod = `\n(function %name%(matrix) {\n    var newMatrix = new SparseMatrix(matrix);\n    return newMatrix.%name%();\n})\n`;\n\nvar operators = [\n    // Arithmetic operators\n    ['+', 'add'],\n    ['-', 'sub', 'subtract'],\n    ['*', 'mul', 'multiply'],\n    ['/', 'div', 'divide'],\n    ['%', 'mod', 'modulus'],\n    // Bitwise operators\n    ['&', 'and'],\n    ['|', 'or'],\n    ['^', 'xor'],\n    ['<<', 'leftShift'],\n    ['>>', 'signPropagatingRightShift'],\n    ['>>>', 'rightShift', 'zeroFillRightShift']\n];\n\nfor (var operator of operators) {\n    for (var i = 1; i < operator.length; i++) {\n        SparseMatrix.prototype[operator[i]] = eval(fillTemplateFunction(inplaceOperator, {name: operator[i], op: operator[0]}));\n        SparseMatrix.prototype[operator[i] + 'S'] = eval(fillTemplateFunction(inplaceOperatorScalar, {name: operator[i] + 'S', op: operator[0]}));\n        SparseMatrix.prototype[operator[i] + 'M'] = eval(fillTemplateFunction(inplaceOperatorMatrix, {name: operator[i] + 'M', op: operator[0]}));\n\n        SparseMatrix[operator[i]] = eval(fillTemplateFunction(staticOperator, {name: operator[i]}));\n    }\n}\n\nvar methods = [\n    ['~', 'not']\n];\n\n[\n    'abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cbrt', 'ceil',\n    'clz32', 'cos', 'cosh', 'exp', 'expm1', 'floor', 'fround', 'log', 'log1p',\n    'log10', 'log2', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc'\n].forEach(function (mathMethod) {\n    methods.push(['Math.' + mathMethod, mathMethod]);\n});\n\nfor (var method of methods) {\n    for (var i = 1; i < method.length; i++) {\n        SparseMatrix.prototype[method[i]] = eval(fillTemplateFunction(inplaceMethod, {name: method[i], method: method[0]}));\n        SparseMatrix[method[i]] = eval(fillTemplateFunction(staticMethod, {name: method[i]}));\n    }\n}\n\nfunction fillTemplateFunction(template, values) {\n    for (var i in values) {\n        template = template.replace(new RegExp('%' + i + '%', 'g'), values[i]);\n    }\n    return template;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-sparse-matrix/src/SparseMatrix.js","'use strict';\n\nconst Matrix = require('ml-matrix');\nconst EVD = Matrix.DC.EVD;\nconst SVD = Matrix.DC.SVD;\nconst Stat = require('ml-stat').matrix;\nconst mean = Stat.mean;\nconst stdev = Stat.standardDeviation;\n\nconst defaultOptions = {\n    isCovarianceMatrix: false,\n    center: true,\n    scale: false\n};\n\n/**\n * Creates new PCA (Principal Component Analysis) from the dataset\n * @param {Matrix} dataset - dataset or covariance matrix\n * @param {Object} options\n * @param {boolean} [options.isCovarianceMatrix=false] - true if the dataset is a covariance matrix\n * @param {boolean} [options.center=true] - should the data be centered (subtract the mean)\n * @param {boolean} [options.scale=false] - should the data be scaled (divide by the standard deviation)\n * */\nclass PCA {\n    constructor(dataset, options) {\n        if (dataset === true) {\n            const model = options;\n            this.center = model.center;\n            this.scale = model.scale;\n            this.means = model.means;\n            this.stdevs = model.stdevs;\n            this.U = Matrix.checkMatrix(model.U);\n            this.S = model.S;\n            return;\n        }\n\n        options = Object.assign({}, defaultOptions, options);\n\n        this.center = false;\n        this.scale = false;\n        this.means = null;\n        this.stdevs = null;\n\n        if (options.isCovarianceMatrix) { // user provided a covariance matrix instead of dataset\n            this._computeFromCovarianceMatrix(dataset);\n            return;\n        }\n\n        var useCovarianceMatrix;\n        if (typeof options.useCovarianceMatrix === 'boolean') {\n            useCovarianceMatrix = options.useCovarianceMatrix;\n        } else {\n            useCovarianceMatrix = dataset.length > dataset[0].length;\n        }\n\n        if (useCovarianceMatrix) { // user provided a dataset but wants us to compute and use the covariance matrix\n            dataset = this._adjust(dataset, options);\n            const covarianceMatrix = dataset.transposeView().mmul(dataset).div(dataset.rows - 1);\n            this._computeFromCovarianceMatrix(covarianceMatrix);\n        } else {\n            dataset = this._adjust(dataset, options);\n            var svd = new SVD(dataset, {\n                computeLeftSingularVectors: false,\n                computeRightSingularVectors: true,\n                autoTranspose: true\n            });\n\n            this.U = svd.rightSingularVectors;\n\n            const singularValues = svd.diagonal;\n            const eigenvalues = new Array(singularValues.length);\n            for (var i = 0; i < singularValues.length; i++) {\n                eigenvalues[i] = singularValues[i] * singularValues[i] / (dataset.length - 1);\n            }\n            this.S = eigenvalues;\n        }\n    }\n\n    /**\n     * Load a PCA model from JSON\n     * @param {Object} model\n     * @return {PCA}\n     */\n    static load(model) {\n        if (model.name !== 'PCA')\n            throw new RangeError('Invalid model: ' + model.name);\n        return new PCA(true, model);\n    }\n\n    /**\n     * Project the dataset into the PCA space\n     * @param {Matrix} dataset\n     * @return {Matrix} dataset projected in the PCA space\n     */\n    predict(dataset) {\n        dataset = new Matrix(dataset);\n\n        if (this.center) {\n            dataset.subRowVector(this.means);\n            if (this.scale) {\n                dataset.divRowVector(this.stdevs);\n            }\n        }\n\n        return dataset.mmul(this.U);\n    }\n\n    /**\n     * Returns the proportion of variance for each component\n     * @return {[number]}\n     */\n    getExplainedVariance() {\n        var sum = 0;\n        for (var i = 0; i < this.S.length; i++) {\n            sum += this.S[i];\n        }\n        return this.S.map(value => value / sum);\n    }\n\n    /**\n     * Returns the cumulative proportion of variance\n     * @return {[number]}\n     */\n    getCumulativeVariance() {\n        var explained = this.getExplainedVariance();\n        for (var i = 1; i < explained.length; i++) {\n            explained[i] += explained[i - 1];\n        }\n        return explained;\n    }\n\n    /**\n     * Returns the Eigenvectors of the covariance matrix\n     * @returns {Matrix}\n     */\n    getEigenvectors() {\n        return this.U;\n    }\n\n    /**\n     * Returns the Eigenvalues (on the diagonal)\n     * @returns {[number]}\n     */\n    getEigenvalues() {\n        return this.S;\n    }\n\n    /**\n     * Returns the standard deviations of the principal components\n     * @returns {[number]}\n     */\n    getStandardDeviations() {\n        return this.S.map(x => Math.sqrt(x));\n    }\n\n    /**\n     * Returns the loadings matrix\n     * @return {Matrix}\n     */\n    getLoadings() {\n        return this.U.transpose();\n    }\n\n    /**\n     * Export the current model to a JSON object\n     * @return {Object} model\n     */\n    toJSON() {\n        return {\n            name: 'PCA',\n            center: this.center,\n            scale: this.scale,\n            means: this.means,\n            stdevs: this.stdevs,\n            U: this.U,\n            S: this.S,\n        };\n    }\n\n    _adjust(dataset, options) {\n        this.center = !!options.center;\n        this.scale = !!options.scale;\n\n        dataset = new Matrix(dataset);\n\n        if (this.center) {\n            const means = mean(dataset);\n            const stdevs = this.scale ? stdev(dataset, means, true) : null;\n            this.means = means;\n            dataset.subRowVector(means);\n            if (this.scale) {\n                for (var i = 0; i < stdevs.length; i++) {\n                    if (stdevs[i] === 0) {\n                        throw new RangeError('Cannot scale the dataset (standard deviation is zero at index ' + i);\n                    }\n                }\n                this.stdevs = stdevs;\n                dataset.divRowVector(stdevs);\n            }\n        }\n\n        return dataset;\n    }\n\n    _computeFromCovarianceMatrix(dataset) {\n        const evd = new EVD(dataset, {assumeSymmetric: true});\n        this.U = evd.eigenvectorMatrix;\n        for (var i = 0; i < this.U.length; i++) {\n            this.U[i].reverse();\n        }\n        this.S = evd.realEigenvalues.reverse();\n    }\n}\n\nmodule.exports = PCA;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pca/src/pca.js","'use strict';\n\nmodule.exports = require('./matrix').Matrix;\nmodule.exports.Decompositions = module.exports.DC = require('./decompositions');\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pca/node_modules/ml-matrix/src/index.js","'use strict';\n\nif (!Symbol.species) {\n    Symbol.species = Symbol.for('@@species');\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pca/node_modules/ml-matrix/src/symbol-species.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixTransposeView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.columns, matrix.rows);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(columnIndex, rowIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(columnIndex, rowIndex);\n    }\n}\n\nmodule.exports = MatrixTransposeView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pca/node_modules/ml-matrix/src/views/transpose.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixRowView extends BaseView {\n    constructor(matrix, row) {\n        super(matrix, 1, matrix.columns);\n        this.row = row;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.row, columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.row, columnIndex);\n    }\n}\n\nmodule.exports = MatrixRowView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pca/node_modules/ml-matrix/src/views/row.js","'use strict';\n\nvar BaseView = require('./base');\nvar util = require('../util');\n\nclass MatrixSubView extends BaseView {\n    constructor(matrix, startRow, endRow, startColumn, endColumn) {\n        util.checkRange(matrix, startRow, endRow, startColumn, endColumn);\n        super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n        this.startRow = startRow;\n        this.startColumn = startColumn;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.startRow + rowIndex, this.startColumn + columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.startRow + rowIndex, this.startColumn + columnIndex);\n    }\n}\n\nmodule.exports = MatrixSubView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pca/node_modules/ml-matrix/src/views/sub.js","'use strict';\n\nvar BaseView = require('./base');\nvar util = require('../util');\n\nclass MatrixSelectionView extends BaseView {\n    constructor(matrix, rowIndices, columnIndices) {\n        var indices = util.checkIndices(matrix, rowIndices, columnIndices);\n        super(matrix, indices.row.length, indices.column.length);\n        this.rowIndices = indices.row;\n        this.columnIndices = indices.column;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.rowIndices[rowIndex], this.columnIndices[columnIndex], value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.rowIndices[rowIndex], this.columnIndices[columnIndex]);\n    }\n}\n\nmodule.exports = MatrixSelectionView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pca/node_modules/ml-matrix/src/views/selection.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixColumnView extends BaseView {\n    constructor(matrix, column) {\n        super(matrix, matrix.rows, 1);\n        this.column = column;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(rowIndex, this.column, value);\n        return this;\n    }\n\n    get(rowIndex) {\n        return this.matrix.get(rowIndex, this.column);\n    }\n}\n\nmodule.exports = MatrixColumnView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pca/node_modules/ml-matrix/src/views/column.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixFlipRowView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.rows, matrix.columns);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\n    }\n}\n\nmodule.exports = MatrixFlipRowView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pca/node_modules/ml-matrix/src/views/flipRow.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixFlipColumnView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.rows, matrix.columns);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\n    }\n}\n\nmodule.exports = MatrixFlipColumnView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pca/node_modules/ml-matrix/src/views/flipColumn.js","'use strict';\n\nvar Matrix = require('./matrix').Matrix;\n\nvar SingularValueDecomposition = require('./dc/svd');\nvar EigenvalueDecomposition = require('./dc/evd');\nvar LuDecomposition = require('./dc/lu');\nvar QrDecomposition = require('./dc/qr');\nvar CholeskyDecomposition = require('./dc/cholesky');\n\nfunction inverse(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    return solve(matrix, Matrix.eye(matrix.rows));\n}\n\n/**\n * Returns the inverse\n * @memberOf Matrix\n * @static\n * @param {Matrix} matrix\n * @return {Matrix} matrix\n * @alias inv\n */\nMatrix.inverse = Matrix.inv = inverse;\n\n/**\n * Returns the inverse\n * @memberOf Matrix\n * @static\n * @param {Matrix} matrix\n * @return {Matrix} matrix\n * @alias inv\n */\nMatrix.prototype.inverse = Matrix.prototype.inv = function () {\n    return inverse(this);\n};\n\nfunction solve(leftHandSide, rightHandSide) {\n    leftHandSide = Matrix.checkMatrix(leftHandSide);\n    rightHandSide = Matrix.checkMatrix(rightHandSide);\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n}\n\nMatrix.solve = solve;\nMatrix.prototype.solve = function (other) {\n    return solve(this, other);\n};\n\nmodule.exports = {\n    SingularValueDecomposition: SingularValueDecomposition,\n    SVD: SingularValueDecomposition,\n    EigenvalueDecomposition: EigenvalueDecomposition,\n    EVD: EigenvalueDecomposition,\n    LuDecomposition: LuDecomposition,\n    LU: LuDecomposition,\n    QrDecomposition: QrDecomposition,\n    QR: QrDecomposition,\n    CholeskyDecomposition: CholeskyDecomposition,\n    CHO: CholeskyDecomposition,\n    inverse: inverse,\n    solve: solve\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pca/node_modules/ml-matrix/src/decompositions.js","'use strict';\n\nconst Matrix = require('../matrix').Matrix;\nconst util = require('./util');\nconst hypotenuse = util.hypotenuse;\nconst getFilled2DArray = util.getFilled2DArray;\n\nconst defaultOptions = {\n    assumeSymmetric: false\n};\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\nfunction EigenvalueDecomposition(matrix, options) {\n    options = Object.assign({}, defaultOptions, options);\n    if (!(this instanceof EigenvalueDecomposition)) {\n        return new EigenvalueDecomposition(matrix, options);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n        throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns,\n        V = getFilled2DArray(n, n, 0),\n        d = new Array(n),\n        e = new Array(n),\n        value = matrix,\n        i, j;\n\n    var isSymmetric = false;\n    if (options.assumeSymmetric) {\n        isSymmetric = true;\n    } else {\n        isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                V[i][j] = value.get(i, j);\n            }\n        }\n        tred2(n, e, d, V);\n        tql2(n, e, d, V);\n    } else {\n        var H = getFilled2DArray(n, n, 0),\n            ort = new Array(n);\n        for (j = 0; j < n; j++) {\n            for (i = 0; i < n; i++) {\n                H[i][j] = value.get(i, j);\n            }\n        }\n        orthes(n, H, ort, V);\n        hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n}\n\nEigenvalueDecomposition.prototype = {\n    get realEigenvalues() {\n        return this.d;\n    },\n    get imaginaryEigenvalues() {\n        return this.e;\n    },\n    get eigenvectorMatrix() {\n        if (!Matrix.isMatrix(this.V)) {\n            this.V = new Matrix(this.V);\n        }\n        return this.V;\n    },\n    get diagonalMatrix() {\n        var n = this.n,\n            e = this.e,\n            d = this.d,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                X[i][j] = 0;\n            }\n            X[i][i] = d[i];\n            if (e[i] > 0) {\n                X[i][i + 1] = e[i];\n            } else if (e[i] < 0) {\n                X[i][i - 1] = e[i];\n            }\n        }\n        return X;\n    }\n};\n\nfunction tred2(n, e, d, V) {\n\n    var f, g, h, i, j, k,\n        hh, scale;\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n    }\n\n    for (i = n - 1; i > 0; i--) {\n        scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n            scale = scale + Math.abs(d[k]);\n        }\n\n        if (scale === 0) {\n            e[i] = d[i - 1];\n            for (j = 0; j < i; j++) {\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n                V[j][i] = 0;\n            }\n        } else {\n            for (k = 0; k < i; k++) {\n                d[k] /= scale;\n                h += d[k] * d[k];\n            }\n\n            f = d[i - 1];\n            g = Math.sqrt(h);\n            if (f > 0) {\n                g = -g;\n            }\n\n            e[i] = scale * g;\n            h = h - f * g;\n            d[i - 1] = f - g;\n            for (j = 0; j < i; j++) {\n                e[j] = 0;\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                V[j][i] = f;\n                g = e[j] + V[j][j] * f;\n                for (k = j + 1; k <= i - 1; k++) {\n                    g += V[k][j] * d[k];\n                    e[k] += V[k][j] * f;\n                }\n                e[j] = g;\n            }\n\n            f = 0;\n            for (j = 0; j < i; j++) {\n                e[j] /= h;\n                f += e[j] * d[j];\n            }\n\n            hh = f / (h + h);\n            for (j = 0; j < i; j++) {\n                e[j] -= hh * d[j];\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                g = e[j];\n                for (k = j; k <= i - 1; k++) {\n                    V[k][j] -= (f * e[k] + g * d[k]);\n                }\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n            }\n        }\n        d[i] = h;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        V[n - 1][i] = V[i][i];\n        V[i][i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n            for (k = 0; k <= i; k++) {\n                d[k] = V[k][i + 1] / h;\n            }\n\n            for (j = 0; j <= i; j++) {\n                g = 0;\n                for (k = 0; k <= i; k++) {\n                    g += V[k][i + 1] * V[k][j];\n                }\n                for (k = 0; k <= i; k++) {\n                    V[k][j] -= g * d[k];\n                }\n            }\n        }\n\n        for (k = 0; k <= i; k++) {\n            V[k][i + 1] = 0;\n        }\n    }\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n        V[n - 1][j] = 0;\n    }\n\n    V[n - 1][n - 1] = 1;\n    e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n\n    var g, h, i, j, k, l, m, p, r,\n        dl1, c, c2, c3, el1, s, s2,\n        iter;\n\n    for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n    }\n\n    e[n - 1] = 0;\n\n    var f = 0,\n        tst1 = 0,\n        eps = Math.pow(2, -52);\n\n    for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        m = l;\n        while (m < n) {\n            if (Math.abs(e[m]) <= eps * tst1) {\n                break;\n            }\n            m++;\n        }\n\n        if (m > l) {\n            iter = 0;\n            do {\n                iter = iter + 1;\n\n                g = d[l];\n                p = (d[l + 1] - g) / (2 * e[l]);\n                r = hypotenuse(p, 1);\n                if (p < 0) {\n                    r = -r;\n                }\n\n                d[l] = e[l] / (p + r);\n                d[l + 1] = e[l] * (p + r);\n                dl1 = d[l + 1];\n                h = g - d[l];\n                for (i = l + 2; i < n; i++) {\n                    d[i] -= h;\n                }\n\n                f = f + h;\n\n                p = d[m];\n                c = 1;\n                c2 = c;\n                c3 = c;\n                el1 = e[l + 1];\n                s = 0;\n                s2 = 0;\n                for (i = m - 1; i >= l; i--) {\n                    c3 = c2;\n                    c2 = c;\n                    s2 = s;\n                    g = c * e[i];\n                    h = c * p;\n                    r = hypotenuse(p, e[i]);\n                    e[i + 1] = s * r;\n                    s = e[i] / r;\n                    c = p / r;\n                    p = c * d[i] - s * g;\n                    d[i + 1] = h + s * (c * g + s * d[i]);\n\n                    for (k = 0; k < n; k++) {\n                        h = V[k][i + 1];\n                        V[k][i + 1] = s * V[k][i] + c * h;\n                        V[k][i] = c * V[k][i] - s * h;\n                    }\n                }\n\n                p = -s * s2 * c3 * el1 * e[l] / dl1;\n                e[l] = s * p;\n                d[l] = c * p;\n\n            }\n            while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n            if (d[j] < p) {\n                k = j;\n                p = d[j];\n            }\n        }\n\n        if (k !== i) {\n            d[k] = d[i];\n            d[i] = p;\n            for (j = 0; j < n; j++) {\n                p = V[j][i];\n                V[j][i] = V[j][k];\n                V[j][k] = p;\n            }\n        }\n    }\n}\n\nfunction orthes(n, H, ort, V) {\n\n    var low = 0,\n        high = n - 1,\n        f, g, h, i, j, m,\n        scale;\n\n    for (m = low + 1; m <= high - 1; m++) {\n        scale = 0;\n        for (i = m; i <= high; i++) {\n            scale = scale + Math.abs(H[i][m - 1]);\n        }\n\n        if (scale !== 0) {\n            h = 0;\n            for (i = high; i >= m; i--) {\n                ort[i] = H[i][m - 1] / scale;\n                h += ort[i] * ort[i];\n            }\n\n            g = Math.sqrt(h);\n            if (ort[m] > 0) {\n                g = -g;\n            }\n\n            h = h - ort[m] * g;\n            ort[m] = ort[m] - g;\n\n            for (j = m; j < n; j++) {\n                f = 0;\n                for (i = high; i >= m; i--) {\n                    f += ort[i] * H[i][j];\n                }\n\n                f = f / h;\n                for (i = m; i <= high; i++) {\n                    H[i][j] -= f * ort[i];\n                }\n            }\n\n            for (i = 0; i <= high; i++) {\n                f = 0;\n                for (j = high; j >= m; j--) {\n                    f += ort[j] * H[i][j];\n                }\n\n                f = f / h;\n                for (j = m; j <= high; j++) {\n                    H[i][j] -= f * ort[j];\n                }\n            }\n\n            ort[m] = scale * ort[m];\n            H[m][m - 1] = scale * g;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            V[i][j] = (i === j ? 1 : 0);\n        }\n    }\n\n    for (m = high - 1; m >= low + 1; m--) {\n        if (H[m][m - 1] !== 0) {\n            for (i = m + 1; i <= high; i++) {\n                ort[i] = H[i][m - 1];\n            }\n\n            for (j = m; j <= high; j++) {\n                g = 0;\n                for (i = m; i <= high; i++) {\n                    g += ort[i] * V[i][j];\n                }\n\n                g = (g / ort[m]) / H[m][m - 1];\n                for (i = m; i <= high; i++) {\n                    V[i][j] += g * ort[i];\n                }\n            }\n        }\n    }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n    var n = nn - 1,\n        low = 0,\n        high = nn - 1,\n        eps = Math.pow(2, -52),\n        exshift = 0,\n        norm = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n        s = 0,\n        z = 0,\n        iter = 0,\n        i, j, k, l, m, t, w, x, y,\n        ra, sa, vr, vi,\n        notlast, cdivres;\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            d[i] = H[i][i];\n            e[i] = 0;\n        }\n\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n            norm = norm + Math.abs(H[i][j]);\n        }\n    }\n\n    while (n >= low) {\n        l = n;\n        while (l > low) {\n            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n            if (s === 0) {\n                s = norm;\n            }\n            if (Math.abs(H[l][l - 1]) < eps * s) {\n                break;\n            }\n            l--;\n        }\n\n        if (l === n) {\n            H[n][n] = H[n][n] + exshift;\n            d[n] = H[n][n];\n            e[n] = 0;\n            n--;\n            iter = 0;\n        } else if (l === n - 1) {\n            w = H[n][n - 1] * H[n - 1][n];\n            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n            q = p * p + w;\n            z = Math.sqrt(Math.abs(q));\n            H[n][n] = H[n][n] + exshift;\n            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n            x = H[n][n];\n\n            if (q >= 0) {\n                z = (p >= 0) ? (p + z) : (p - z);\n                d[n - 1] = x + z;\n                d[n] = d[n - 1];\n                if (z !== 0) {\n                    d[n] = x - w / z;\n                }\n                e[n - 1] = 0;\n                e[n] = 0;\n                x = H[n][n - 1];\n                s = Math.abs(x) + Math.abs(z);\n                p = x / s;\n                q = z / s;\n                r = Math.sqrt(p * p + q * q);\n                p = p / r;\n                q = q / r;\n\n                for (j = n - 1; j < nn; j++) {\n                    z = H[n - 1][j];\n                    H[n - 1][j] = q * z + p * H[n][j];\n                    H[n][j] = q * H[n][j] - p * z;\n                }\n\n                for (i = 0; i <= n; i++) {\n                    z = H[i][n - 1];\n                    H[i][n - 1] = q * z + p * H[i][n];\n                    H[i][n] = q * H[i][n] - p * z;\n                }\n\n                for (i = low; i <= high; i++) {\n                    z = V[i][n - 1];\n                    V[i][n - 1] = q * z + p * V[i][n];\n                    V[i][n] = q * V[i][n] - p * z;\n                }\n            } else {\n                d[n - 1] = x + p;\n                d[n] = x + p;\n                e[n - 1] = z;\n                e[n] = -z;\n            }\n\n            n = n - 2;\n            iter = 0;\n        } else {\n            x = H[n][n];\n            y = 0;\n            w = 0;\n            if (l < n) {\n                y = H[n - 1][n - 1];\n                w = H[n][n - 1] * H[n - 1][n];\n            }\n\n            if (iter === 10) {\n                exshift += x;\n                for (i = low; i <= n; i++) {\n                    H[i][i] -= x;\n                }\n                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n                x = y = 0.75 * s;\n                w = -0.4375 * s * s;\n            }\n\n            if (iter === 30) {\n                s = (y - x) / 2;\n                s = s * s + w;\n                if (s > 0) {\n                    s = Math.sqrt(s);\n                    if (y < x) {\n                        s = -s;\n                    }\n                    s = x - w / ((y - x) / 2 + s);\n                    for (i = low; i <= n; i++) {\n                        H[i][i] -= s;\n                    }\n                    exshift += s;\n                    x = y = w = 0.964;\n                }\n            }\n\n            iter = iter + 1;\n\n            m = n - 2;\n            while (m >= l) {\n                z = H[m][m];\n                r = x - z;\n                s = y - z;\n                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n                q = H[m + 1][m + 1] - z - r - s;\n                r = H[m + 2][m + 1];\n                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                p = p / s;\n                q = q / s;\n                r = r / s;\n                if (m === l) {\n                    break;\n                }\n                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n                    break;\n                }\n                m--;\n            }\n\n            for (i = m + 2; i <= n; i++) {\n                H[i][i - 2] = 0;\n                if (i > m + 2) {\n                    H[i][i - 3] = 0;\n                }\n            }\n\n            for (k = m; k <= n - 1; k++) {\n                notlast = (k !== n - 1);\n                if (k !== m) {\n                    p = H[k][k - 1];\n                    q = H[k + 1][k - 1];\n                    r = (notlast ? H[k + 2][k - 1] : 0);\n                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                    if (x !== 0) {\n                        p = p / x;\n                        q = q / x;\n                        r = r / x;\n                    }\n                }\n\n                if (x === 0) {\n                    break;\n                }\n\n                s = Math.sqrt(p * p + q * q + r * r);\n                if (p < 0) {\n                    s = -s;\n                }\n\n                if (s !== 0) {\n                    if (k !== m) {\n                        H[k][k - 1] = -s * x;\n                    } else if (l !== m) {\n                        H[k][k - 1] = -H[k][k - 1];\n                    }\n\n                    p = p + s;\n                    x = p / s;\n                    y = q / s;\n                    z = r / s;\n                    q = q / p;\n                    r = r / p;\n\n                    for (j = k; j < nn; j++) {\n                        p = H[k][j] + q * H[k + 1][j];\n                        if (notlast) {\n                            p = p + r * H[k + 2][j];\n                            H[k + 2][j] = H[k + 2][j] - p * z;\n                        }\n\n                        H[k][j] = H[k][j] - p * x;\n                        H[k + 1][j] = H[k + 1][j] - p * y;\n                    }\n\n                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n                        p = x * H[i][k] + y * H[i][k + 1];\n                        if (notlast) {\n                            p = p + z * H[i][k + 2];\n                            H[i][k + 2] = H[i][k + 2] - p * r;\n                        }\n\n                        H[i][k] = H[i][k] - p;\n                        H[i][k + 1] = H[i][k + 1] - p * q;\n                    }\n\n                    for (i = low; i <= high; i++) {\n                        p = x * V[i][k] + y * V[i][k + 1];\n                        if (notlast) {\n                            p = p + z * V[i][k + 2];\n                            V[i][k + 2] = V[i][k + 2] - p * r;\n                        }\n\n                        V[i][k] = V[i][k] - p;\n                        V[i][k + 1] = V[i][k + 1] - p * q;\n                    }\n                }\n            }\n        }\n    }\n\n    if (norm === 0) {\n        return;\n    }\n\n    for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n\n        if (q === 0) {\n            l = n;\n            H[n][n] = 1;\n            for (i = n - 1; i >= 0; i--) {\n                w = H[i][i] - p;\n                r = 0;\n                for (j = l; j <= n; j++) {\n                    r = r + H[i][j] * H[j][n];\n                }\n\n                if (e[i] < 0) {\n                    z = w;\n                    s = r;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                        t = (x * s - z * r) / q;\n                        H[i][n] = t;\n                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n                    }\n\n                    t = Math.abs(H[i][n]);\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        } else if (q < 0) {\n            l = n - 1;\n\n            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n                H[n - 1][n - 1] = q / H[n][n - 1];\n                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n            } else {\n                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n                H[n - 1][n - 1] = cdivres[0];\n                H[n - 1][n] = cdivres[1];\n            }\n\n            H[n][n - 1] = 0;\n            H[n][n] = 1;\n            for (i = n - 2; i >= 0; i--) {\n                ra = 0;\n                sa = 0;\n                for (j = l; j <= n; j++) {\n                    ra = ra + H[i][j] * H[j][n - 1];\n                    sa = sa + H[i][j] * H[j][n];\n                }\n\n                w = H[i][i] - p;\n\n                if (e[i] < 0) {\n                    z = w;\n                    r = ra;\n                    s = sa;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        cdivres = cdiv(-ra, -sa, w, q);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                        vi = (d[i] - p) * 2 * q;\n                        if (vr === 0 && vi === 0) {\n                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                        }\n                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n                        } else {\n                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n                            H[i + 1][n - 1] = cdivres[0];\n                            H[i + 1][n] = cdivres[1];\n                        }\n                    }\n\n                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n - 1] = H[j][n - 1] / t;\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            for (j = i; j < nn; j++) {\n                V[i][j] = H[i][j];\n            }\n        }\n    }\n\n    for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n            z = 0;\n            for (k = low; k <= Math.min(j, high); k++) {\n                z = z + V[i][k] * H[k][j];\n            }\n            V[i][j] = z;\n        }\n    }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n    var r, d;\n    if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        return [(xr + r * xi) / d, (xi - r * xr) / d];\n    } else {\n        r = yr / yi;\n        d = yi + r * yr;\n        return [(r * xr + xi) / d, (r * xi - xr) / d];\n    }\n}\n\nmodule.exports = EigenvalueDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pca/node_modules/ml-matrix/src/dc/evd.js","'use strict';\n\nvar Matrix = require('../matrix').Matrix;\nvar hypotenuse = require('./util').hypotenuse;\n\n//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\nfunction QrDecomposition(value) {\n    if (!(this instanceof QrDecomposition)) {\n        return new QrDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n\n    var qr = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        rdiag = new Array(n),\n        i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) {\n            nrm = hypotenuse(nrm, qr[i][k]);\n        }\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) {\n                nrm = -nrm;\n            }\n            for (i = k; i < m; i++) {\n                qr[i][k] /= nrm;\n            }\n            qr[k][k] += 1;\n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * qr[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    qr[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n}\n\nQrDecomposition.prototype = {\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var qr = this.QR,\n            m = qr.rows;\n\n        if (value.rows !== m) {\n            throw new Error('Matrix row dimensions must agree');\n        }\n        if (!this.isFullRank()) {\n            throw new Error('Matrix is rank deficient');\n        }\n\n        var count = value.columns;\n        var X = value.clone();\n        var n = qr.columns;\n        var i, j, k, s;\n\n        for (k = 0; k < n; k++) {\n            for (j = 0; j < count; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * X[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    X[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        for (k = n - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= this.Rdiag[k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * qr[i][k];\n                }\n            }\n        }\n\n        return X.subMatrix(0, n - 1, 0, count - 1);\n    },\n    isFullRank: function () {\n        var columns = this.QR.columns;\n        for (var i = 0; i < columns; i++) {\n            if (this.Rdiag[i] === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n    get upperTriangularMatrix() {\n        var qr = this.QR,\n            n = qr.columns,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                if (i < j) {\n                    X[i][j] = qr[i][j];\n                } else if (i === j) {\n                    X[i][j] = this.Rdiag[i];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get orthogonalMatrix() {\n        var qr = this.QR,\n            rows = qr.rows,\n            columns = qr.columns,\n            X = new Matrix(rows, columns),\n            i, j, k, s;\n\n        for (k = columns - 1; k >= 0; k--) {\n            for (i = 0; i < rows; i++) {\n                X[i][k] = 0;\n            }\n            X[k][k] = 1;\n            for (j = k; j < columns; j++) {\n                if (qr[k][k] !== 0) {\n                    s = 0;\n                    for (i = k; i < rows; i++) {\n                        s += qr[i][k] * X[i][j];\n                    }\n\n                    s = -s / qr[k][k];\n\n                    for (i = k; i < rows; i++) {\n                        X[i][j] += s * qr[i][k];\n                    }\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = QrDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pca/node_modules/ml-matrix/src/dc/qr.js","'use strict';\n\nvar Matrix = require('../matrix').Matrix;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\nfunction CholeskyDecomposition(value) {\n    if (!(this instanceof CholeskyDecomposition)) {\n        return new CholeskyDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n    if (!value.isSymmetric()) {\n        throw new Error('Matrix is not symmetric');\n    }\n\n    var a = value,\n        dimension = a.rows,\n        l = new Matrix(dimension, dimension),\n        positiveDefinite = true,\n        i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n        var Lrowj = l[j];\n        var d = 0;\n        for (k = 0; k < j; k++) {\n            var Lrowk = l[k];\n            var s = 0;\n            for (i = 0; i < k; i++) {\n                s += Lrowk[i] * Lrowj[i];\n            }\n            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n            d = d + s * s;\n        }\n\n        d = a[j][j] - d;\n\n        positiveDefinite &= (d > 0);\n        l[j][j] = Math.sqrt(Math.max(d, 0));\n        for (k = j + 1; k < dimension; k++) {\n            l[j][k] = 0;\n        }\n    }\n\n    if (!positiveDefinite) {\n        throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n}\n\nCholeskyDecomposition.prototype = {\n    get lowerTriangularMatrix() {\n        return this.L;\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var l = this.L,\n            dimension = l.rows;\n\n        if (value.rows !== dimension) {\n            throw new Error('Matrix dimensions do not match');\n        }\n\n        var count = value.columns,\n            B = value.clone(),\n            i, j, k;\n\n        for (k = 0; k < dimension; k++) {\n            for (j = 0; j < count; j++) {\n                for (i = 0; i < k; i++) {\n                    B[k][j] -= B[i][j] * l[k][i];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        for (k = dimension - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                for (i = k + 1; i < dimension; i++) {\n                    B[k][j] -= B[i][j] * l[i][k];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        return B;\n    }\n};\n\nmodule.exports = CholeskyDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pca/node_modules/ml-matrix/src/dc/cholesky.js","'use strict';\n\nconst measures = require('./measures');\n\nclass Performance {\n    /**\n     *\n     * @param prediction - The prediction matrix\n     * @param target - The target matrix (values: truthy for same class, falsy for different class)\n     * @param options\n     *\n     * @option    all    True if the entire matrix must be used. False to ignore the diagonal and lower part (default is false, for similarity/distance matrices)\n     * @option    max    True if the max value corresponds to a perfect match (like in similarity matrices), false if it is the min value (default is false, like in distance matrices. All values will be multiplied by -1)\n     */\n    constructor(prediction, target, options) {\n        options = options || {};\n        if (prediction.length !== target.length || prediction[0].length !== target[0].length) {\n            throw new Error('dimensions of prediction and target do not match');\n        }\n        const rows = prediction.length;\n        const columns = prediction[0].length;\n        const isDistance = !options.max;\n\n        const predP = [];\n\n        if (options.all) {\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    predP.push({\n                        pred: prediction[i][j],\n                        targ: target[i][j]\n                    });\n                }\n            }\n        } else {\n            if (rows < 3 || rows !== columns) {\n                throw new Error('When \"all\" option is false, the prediction matrix must be square and have at least 3 columns');\n            }\n            for (var i = 0; i < rows - 1; i++) {\n                for (var j = i + 1; j < columns; j++) {\n                    predP.push({\n                        pred: prediction[i][j],\n                        targ: target[i][j]\n                    });\n                }\n            }\n        }\n\n        if (isDistance) {\n            predP.sort((a, b) => a.pred - b.pred);\n        } else {\n            predP.sort((a, b) => b.pred - a.pred);\n        }\n        \n        const cutoffs = this.cutoffs = [isDistance ? Number.MIN_VALUE : Number.MAX_VALUE];\n        const fp = this.fp = [0];\n        const tp = this.tp = [0];\n\n        var nPos = 0;\n        var nNeg = 0;\n\n        var currentPred = predP[0].pred;\n        var nTp = 0;\n        var nFp = 0;\n        for (var i = 0; i < predP.length; i++) {\n            if (predP[i].pred !== currentPred) {\n                cutoffs.push(currentPred);\n                fp.push(nFp);\n                tp.push(nTp);\n                currentPred = predP[i].pred;\n            }\n            if (predP[i].targ) {\n                nPos++;\n                nTp++;\n            } else {\n                nNeg++;\n                nFp++;\n            }\n        }\n        cutoffs.push(currentPred);\n        fp.push(nFp);\n        tp.push(nTp);\n\n        const l = cutoffs.length;\n        const fn = this.fn = new Array(l);\n        const tn = this.tn = new Array(l);\n        const nPosPred = this.nPosPred = new Array(l);\n        const nNegPred = this.nNegPred = new Array(l);\n\n        for (var i = 0; i < l; i++) {\n            fn[i] = nPos - tp[i];\n            tn[i] = nNeg - fp[i];\n\n            nPosPred[i] = tp[i] + fp[i];\n            nNegPred[i] = tn[i] + fn[i];\n        }\n\n        this.nPos = nPos;\n        this.nNeg = nNeg;\n        this.nSamples = nPos + nNeg;\n    }\n\n    /**\n     * Computes a measure from the prediction object.\n     *\n     * Many measures are available and can be combined :\n     * To create a ROC curve, you need fpr and tpr\n     * To create a DET curve, you need fnr and fpr\n     * To create a Lift chart, you need rpp and lift\n     *\n     * Possible measures are : threshold (Threshold), acc (Accuracy), err (Error rate),\n     * fpr (False positive rate), tpr (True positive rate), fnr (False negative rate), tnr (True negative rate), ppv (Positive predictive value),\n     * npv (Negative predictive value), pcfall (Prediction-conditioned fallout), pcmiss (Prediction-conditioned miss), lift (Lift value), rpp (Rate of positive predictions), rnp (Rate of negative predictions)\n     *\n     * @param measure - The short name of the measure\n     *\n     * @return [number]\n     */\n    getMeasure(measure) {\n        if (typeof measure !== 'string') {\n            throw new Error('No measure specified');\n        }\n        if (!measures[measure]) {\n            throw new Error(`The specified measure (${measure}) does not exist`);\n        }\n        return measures[measure](this);\n    }\n\n    /**\n     * Returns the area under the ROC curve\n     */\n    getAURC() {\n        const l = this.cutoffs.length;\n        const x = new Array(l);\n        const y = new Array(l);\n        for (var i = 0; i < l; i++) {\n            x[i] = this.fp[i] / this.nNeg;\n            y[i] = this.tp[i] / this.nPos;\n        }\n        var auc = 0;\n        for (i = 1; i < l; i++) {\n            auc += 0.5 * (x[i] - x[i - 1]) * (y[i] + y[i - 1]);\n        }\n        return auc;\n    }\n\n    /**\n     * Returns the area under the DET curve\n     */\n    getAUDC() {\n        const l = this.cutoffs.length;\n        const x = new Array(l);\n        const y = new Array(l);\n        for (var i = 0; i < l; i++) {\n            x[i] = this.fn[i] / this.nPos;\n            y[i] = this.fp[i] / this.nNeg;\n        }\n        var auc = 0;\n        for (i = 1; i < l; i++) {\n            auc += 0.5 * (x[i] + x[i - 1]) * (y[i] - y[i - 1]);\n        }\n        return auc;\n    }\n\n    getDistribution(options) {\n        options = options || {};\n        var cutLength = this.cutoffs.length;\n        var cutLow = options.xMin || Math.floor(this.cutoffs[cutLength - 1] * 100) / 100;\n        var cutHigh = options.xMax || Math.ceil(this.cutoffs[1] * 100) / 100;\n        var interval = options.interval || Math.floor(((cutHigh - cutLow) / 20 * 10000000) - 1) / 10000000; // Trick to avoid the precision problem of float numbers\n\n        var xLabels = [];\n        var interValues = [];\n        var intraValues = [];\n        var interCumPercent = [];\n        var intraCumPercent = [];\n\n        var nTP = this.tp[cutLength - 1], currentTP = 0;\n        var nFP = this.fp[cutLength - 1], currentFP = 0;\n\n        for (var i = cutLow, j = (cutLength - 1); i <= cutHigh; i += interval) {\n            while (this.cutoffs[j] < i)\n                j--;\n\n            xLabels.push(i);\n\n            var thisTP = nTP - currentTP - this.tp[j];\n            var thisFP = nFP - currentFP - this.fp[j];\n\n            currentTP += thisTP;\n            currentFP += thisFP;\n\n            interValues.push(thisFP);\n            intraValues.push(thisTP);\n\n            interCumPercent.push(100 - (nFP - this.fp[j]) / nFP * 100);\n            intraCumPercent.push(100 - (nTP - this.tp[j]) / nTP * 100);\n        }\n\n        return {\n            xLabels: xLabels,\n            interValues: interValues,\n            intraValues: intraValues,\n            interCumPercent: interCumPercent,\n            intraCumPercent: intraCumPercent\n        };\n    }\n}\n\nPerformance.names = {\n    acc: 'Accuracy',\n    err: 'Error rate',\n    fpr: 'False positive rate',\n    tpr: 'True positive rate',\n    fnr: 'False negative rate',\n    tnr: 'True negative rate',\n    ppv: 'Positive predictive value',\n    npv: 'Negative predictive value',\n    pcfall: 'Prediction-conditioned fallout',\n    pcmiss: 'Prediction-conditioned miss',\n    lift: 'Lift value',\n    rpp: 'Rate of positive predictions',\n    rnp: 'Rate of negative predictions',\n    threshold: 'Threshold'\n};\n\nmodule.exports = Performance;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-performance/src/index.js","'use strict';\n\n// Accuracy\nexports.acc = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.tn[i] + pred.tp[i]) / (l - 1);\n    }\n    return result;\n};\n\n// Error rate\nexports.err = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.fn[i] + pred.fp[i] / (l - 1));\n    }\n    return result;\n};\n\n// False positive rate\nexports.fpr = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.fp[i] / pred.nNeg;\n    }\n    return result;\n};\n\n// True positive rate\nexports.tpr = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.tp[i] / pred.nPos;\n    }\n    return result;\n};\n\n// False negative rate\nexports.fnr = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.fn[i] / pred.nPos;\n    }\n    return result;\n};\n\n// True negative rate\nexports.tnr = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.tn[i] / pred.nNeg;\n    }\n    return result;\n};\n\n// Positive predictive value\nexports.ppv = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.fp[i] + pred.tp[i] !== 0) ? (pred.tp[i] / (pred.fp[i] + pred.tp[i])) : 0;\n    }\n    return result;\n};\n\n// Negative predictive value\nexports.npv = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.fn[i] + pred.tn[i] !== 0) ? (pred.tn[i] / (pred.fn[i] + pred.tn[i])) : 0;\n    }\n    return result;\n};\n\n// Prediction conditioned fallout\nexports.pcfall = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.fp[i] + pred.tp[i] !== 0) ? 1 - (pred.tp[i] / (pred.fp[i] + pred.tp[i])) : 1;\n    }\n    return result;\n};\n\n// Prediction conditioned miss\nexports.pcmiss = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.fn[i] + pred.tn[i] !== 0) ? 1 - (pred.tn[i] / (pred.fn[i] + pred.tn[i])) : 1;\n    }\n    return result;\n};\n\n// Lift value\nexports.lift = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = (pred.nPosPred[i] !== 0) ? ((pred.tp[i] / pred.nPos) / (pred.nPosPred[i] / pred.nSamples)) : 0;\n    }\n    return result;\n};\n\n// Rate of positive predictions\nexports.rpp = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.nPosPred[i] / pred.nSamples;\n    }\n    return result;\n};\n\n// Rate of negative predictions\nexports.rnp = pred => {\n    const l = pred.cutoffs.length;\n    const result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        result[i] = pred.nNegPred[i] / pred.nSamples;\n    }\n    return result;\n};\n\n// Threshold\nexports.threshold = pred => {\n    const clone = pred.cutoffs.slice();\n    clone[0] = clone[1]; // Remove the infinite value\n    return clone;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-performance/src/measures.js","'use strict';\n\nvar LM = require('ml-curve-fitting');\nvar math = LM.Matrix.algebra;\nvar Matrix = require('ml-matrix');\n\n/**\n * This function calculates the spectrum as a sum of lorentzian functions. The Lorentzian\n * parameters are divided in 3 batches. 1st: centers; 2nd: heights; 3th: widths;\n * @param t Ordinate values\n * @param p Lorentzian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction sumOfLorentzians(t,p,c){\n    var nL = p.length/3,factor,i, j,p2, cols = t.rows;\n    var result = Matrix.zeros(t.length,1);\n\n    for(i=0;i<nL;i++){\n        p2 = Math.pow(p[i+nL*2][0]/2,2);\n        factor = p[i+nL][0]*p2;\n        for(j=0;j<cols;j++){\n            result[j][0]+=factor/(Math.pow(t[j][0]-p[i][0],2)+p2);\n        }\n    }\n    return result;\n}\n\n/**\n * This function calculates the spectrum as a sum of gaussian functions. The Gaussian\n * parameters are divided in 3 batches. 1st: centers; 2nd: height; 3th: std's;\n * @param t Ordinate values\n * @param p Gaussian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction sumOfGaussians(t,p,c){\n    var nL = p.length/3,factor,i, j, cols = t.rows;\n    var result = Matrix.zeros(t.length,1);\n\n    for(i=0;i<nL;i++){\n        factor = p[i+nL*2][0]*p[i+nL*2][0]/2;\n        for(j=0;j<cols;j++){\n            result[j][0]+=p[i+nL][0]*Math.exp(-(t[i][0]-p[i][0])*(t[i][0]-p[i][0])/factor);\n        }\n    }\n    return result;\n}\n/**\n * Single 4 parameter lorentzian function\n * @param t Ordinate values\n * @param p Lorentzian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction singleLorentzian(t,p,c){\n    var factor = p[1][0]*Math.pow(p[2][0]/2,2);\n    var rows = t.rows;\n    var result = new Matrix(t.rows, t.columns);\n    for(var i=0;i<rows;i++){\n        result[i][0]=factor/(Math.pow(t[i][0]-p[0][0],2)+Math.pow(p[2][0]/2,2));\n    }\n    return result;\n}\n\n/**\n * Single 3 parameter gaussian function\n * @param t Ordinate values\n * @param p Gaussian parameters [mean, height, std]\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction singleGaussian(t,p,c){\n    var factor2 = p[2][0]*p[2][0]/2;\n    var rows = t.rows;\n    var result = new Matrix(t.rows, t.columns);\n    for(var i=0;i<rows;i++){\n        result[i][0]=p[1][0]*Math.exp(-(t[i][0]-p[0][0])*(t[i][0]-p[0][0])/factor2);\n    }\n    return result;\n}\n\n/**\n * * Fits a set of points to a Lorentzian function. Returns the center of the peak, the width at half height, and the height of the signal.\n * @param data,[y]\n * @returns {*[]}\n */\nfunction optimizeSingleLorentzian(xy, peak, opts) {\n    opts = opts || {};\n    var xy2 = parseData(xy, opts.percentage||0);\n\n    if(xy2===null||xy2[0].rows<3){\n        return null; //Cannot run an optimization with less than 3 points\n    }\n\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var nbPoints = t.rows, i;\n\n    var weight = [nbPoints / Math.sqrt(y_data.dot(y_data))];\n\n    var opts=Object.create(opts.LMOptions || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n    //var opts = [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ];\n    var consts = [ ];\n    var dt = Math.abs(t[0][0]-t[1][0]);// optional vector of constants\n    var dx = new Matrix([[-dt/10000],[-1e-3],[-dt/10000]]);//-Math.abs(t[0][0]-t[1][0])/100;\n    var p_init = new Matrix([[peak.x],[1],[peak.width]]);\n    var p_min = new Matrix([[peak.x-dt],[0.75],[peak.width/4]]);\n    var p_max = new Matrix([[peak.x+dt],[1.25],[peak.width*4]]);\n\n    var p_fit = LM.optimize(singleLorentzian,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n\n\n    p_fit = p_fit.p;\n    return [p_fit[0],[p_fit[1][0]*maxY],p_fit[2]];\n\n}\n\n/**\n * Fits a set of points to a gaussian bell. Returns the mean of the peak, the std and the height of the signal.\n * @param data,[y]\n * @returns {*[]}\n */\nfunction optimizeSingleGaussian(xy, peak, opts) {\n    opts = opts || {};\n    var xy2 = parseData(xy, opts.percentage||0);\n\n    if(xy2===null||xy2[0].rows<3){\n        return null; //Cannot run an optimization with less than 3 points\n    }\n\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n\n    var nbPoints = t.rows, i;\n\n\n\n    var weight = [nbPoints / Math.sqrt(y_data.dot(y_data))];\n\n    var opts=Object.create(opts.LMOptions || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n    //var opts = [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ];\n    var consts = [ ];                         // optional vector of constants\n    var dt = Math.abs(t[0][0]-t[1][0]);\n    var dx = new Matrix([[-dt/10000],[-1e-3],[-dt/10000]]);//-Math.abs(t[0][0]-t[1][0])/100;\n\n    var dx = new Matrix([[-Math.abs(t[0][0]-t[1][0])/1000],[-1e-3],[-peak.width/1000]]);\n    var p_init = new Matrix([[peak.x],[1],[peak.width]]);\n    var p_min = new Matrix([[peak.x-dt],[0.75],[peak.width/4]]);\n    var p_max = new Matrix([[peak.x+dt],[1.25],[peak.width*4]]);\n    //var p_min = new Matrix([[peak.x-peak.width/4],[0.75],[peak.width/3]]);\n    //var p_max = new Matrix([[peak.x+peak.width/4],[1.25],[peak.width*3]]);\n\n    var p_fit = LM.optimize(singleGaussian,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n    p_fit = p_fit.p;\n    return [p_fit[0],[p_fit[1][0]*maxY],p_fit[2]];\n}\n\n/*\n peaks on group should sorted\n */\nfunction optimizeLorentzianTrain(xy, group, opts){\n    var xy2 = parseData(xy);\n    //console.log(xy2[0].rows);\n    if(xy2===null||xy2[0].rows<3){\n        return null; //Cannot run an optimization with less than 3 points\n    }\n\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var currentIndex = 0;\n    var nbPoints = t.length;\n    var nextX;\n    var tI, yI, maxY;\n    var result=[], current;\n    for(var i=0; i<group.length;i++){\n        nextX = group[i].x-group[i].width*1.5;\n        //console.log(group[i]);\n        while(t[currentIndex++]<nextX&&currentIndex<nbPoints);\n        nextX = group[i].x+group[i].width*1.5;\n        tI = [];\n        yI = [];\n        while(t[currentIndex]<=nextX&&currentIndex<nbPoints){\n            tI.push(t[currentIndex][0]);\n            yI.push(y_data[currentIndex][0]*maxY);\n            currentIndex++;\n        }\n\n        current=optimizeSingleLorentzian([tI, yI], group[i], opts);\n        if(current){\n            result.push({\"x\":current[0][0],\"y\":current[1][0],\"width\":current[2][0],\"opt\":true});\n        }\n        else{\n            result.push({\"x\":group[i].x,\"y\":group[i].y,\"width\":group[i].width,\"opt\":false});\n        }\n    }\n\n    return result;\n\n}\n\nfunction optimizeGaussianTrain(xy, group, opts){\n    var xy2 = parseData(xy);\n    //console.log(xy2[0].rows);\n    if(xy2===null||xy2[0].rows<3){\n        return null; //Cannot run an optimization with less than 3 points\n    }\n\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var currentIndex = 0;\n    var nbPoints = t.length;\n    var nextX;\n    var tI, yI, maxY;\n    var result=[], current;\n    for(var i=0; i<group.length;i++){\n        nextX = group[i].x-group[i].width*1.5;\n        //console.log(group[i]);\n        while(t[currentIndex++]<nextX&&currentIndex<nbPoints);\n        nextX = group[i].x+group[i].width*1.5;\n        tI = [];\n        yI = [];\n        while(t[currentIndex]<=nextX&&currentIndex<nbPoints){\n            tI.push(t[currentIndex][0]);\n            yI.push(y_data[currentIndex][0]*maxY);\n            currentIndex++;\n        }\n\n        current=optimizeSingleGaussian([tI, yI], group[i], opts);\n        if(current){\n            result.push({\"x\":current[0][0],\"y\":current[1][0],\"width\":current[2][0],\"opt\":true});\n        }\n        else{\n            result.push({\"x\":group[i].x,\"y\":group[i].y,\"width\":group[i].width,\"opt\":false});\n        }\n    }\n\n    return result;\n}\n\n\n\n/**\n *\n * @param xy A two column matrix containing the x and y data to be fitted\n * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n */\nfunction optimizeLorentzianSum(xy, group, opts){\n    var xy2 = parseData(xy);\n\n    if(xy2===null||xy2[0].rows<3){\n        return null; //Cannot run an optimization with less than 3 points\n    }\n\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var nbPoints = t.rows, i;\n\n    var weight = [nbPoints / math.sqrt(y_data.dot(y_data))];\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2, 11, 9, 1 ]);\n    var consts = [ ];// optional vector of constants\n\n    var nL = group.length;\n    var p_init = new Matrix(nL*3,1);\n    var p_min =  new Matrix(nL*3,1);\n    var p_max =  new Matrix(nL*3,1);\n    var dx = new Matrix(nL*3,1);\n    var dt = Math.abs(t[0][0]-t[1][0]);\n    for( i=0;i<nL;i++){\n        p_init[i][0] = group[i].x;\n        p_init[i+nL][0] = 1;\n        p_init[i+2*nL][0] = group[i].width;\n\n        p_min[i][0] = group[i].x-dt;//-group[i].width/4;\n        p_min[i+nL][0] = 0;\n        p_min[i+2*nL][0] = group[i].width/4;\n\n        p_max[i][0] = group[i].x+dt;//+group[i].width/4;\n        p_max[i+nL][0] = 1.5;\n        p_max[i+2*nL][0] = group[i].width*4;\n\n        dx[i][0] = -dt/1000;\n        dx[i+nL][0] = -1e-3;\n        dx[i+2*nL][0] = -dt/1000;\n    }\n\n    var dx = -Math.abs(t[0][0]-t[1][0])/10000;\n    var p_fit = LM.optimize(sumOfLorentzians, p_init, t, y_data, weight, dx, p_min, p_max, consts, opts);\n    p_fit=p_fit.p;\n    //Put back the result in the correct format\n    var result = new Array(nL);\n    for( i=0;i<nL;i++){\n        result[i]=[p_fit[i],[p_fit[i+nL][0]*maxY],p_fit[i+2*nL]];\n    }\n\n    return result;\n\n}\n\n/**\n *\n * @param xy A two column matrix containing the x and y data to be fitted\n * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n */\nfunction optimizeGaussianSum(xy, group, opts){\n    var xy2 = parseData(xy);\n\n    if(xy2===null||xy2[0].rows<3){\n        return null; //Cannot run an optimization with less than 3 points\n    }\n\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var nbPoints = t.rows,i;\n\n    var weight = new Matrix(nbPoints,1);//[nbPoints / math.sqrt(y_data.dot(y_data))];\n    var k = nbPoints / math.sqrt(y_data.dot(y_data));\n    for(i=0;i<nbPoints;i++){\n        weight[i][0]=k;///(y_data[i][0]);\n        //weight[i][0]=k*(2-y_data[i][0]);\n    }\n\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        2 ]);\n    //var opts=[  3,    100, 1e-5, 1e-6, 1e-6, 1e-6, 1e-6,    11,    9,        1 ];\n    var consts = [ ];// optional vector of constants\n\n    var nL = group.length;\n    var p_init = new Matrix(nL*3,1);\n    var p_min =  new Matrix(nL*3,1);\n    var p_max =  new Matrix(nL*3,1);\n    var dx = new Matrix(nL*3,1);\n    var dt = Math.abs(t[0][0]-t[1][0]);\n    for( i=0;i<nL;i++){\n        p_init[i][0] = group[i].x;\n        p_init[i+nL][0] = group[i].y/maxY;\n        p_init[i+2*nL][0] = group[i].width;\n\n        p_min[i][0] = group[i].x-dt;\n        p_min[i+nL][0] = group[i].y*0.8/maxY;\n        p_min[i+2*nL][0] = group[i].width/2;\n\n        p_max[i][0] = group[i].x+dt;\n        p_max[i+nL][0] = group[i].y*1.2/maxY;\n        p_max[i+2*nL][0] = group[i].width*2;\n\n        dx[i][0] = -dt/1000;\n        dx[i+nL][0] = -1e-3;\n        dx[i+2*nL][0] = -dt/1000;\n    }\n    //console.log(t);\n    var p_fit = LM.optimize(sumOfLorentzians,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n    p_fit = p_fit.p;\n    //Put back the result in the correct format\n    var result = new Array(nL);\n    for( i=0;i<nL;i++){\n        result[i]=[p_fit[i],[p_fit[i+nL][0]*maxY],p_fit[i+2*nL]];\n    }\n\n    return result;\n\n}\n/**\n *\n * Converts the given input to the required x, y column matrices. y data is normalized to max(y)=1\n * @param xy\n * @returns {*[]}\n */\nfunction parseData(xy, threshold){\n    var nbSeries = xy.length;\n    var t = null;\n    var y_data = null, x,y;\n    var maxY = 0, i,j;\n\n    if(nbSeries==2){\n        //Looks like row wise matrix [x,y]\n        var nbPoints = xy[0].length;\n        //if(nbPoints<3)\n        //    throw new Exception(nbPoints);\n        //else{\n        t = new Array(nbPoints);//new Matrix(nbPoints,1);\n        y_data = new Array(nbPoints);//new Matrix(nbPoints,1);\n        x = xy[0];\n        y = xy[1];\n        if(typeof x[0] === \"number\"){\n            for(i=0;i<nbPoints;i++){\n                t[i]=x[i];\n                y_data[i]=y[i];\n                if(y[i]>maxY)\n                    maxY = y[i];\n            }\n        }\n        else{\n            //It is a colum matrix\n            if(typeof x[0] === \"object\"){\n                for(i=0;i<nbPoints;i++){\n                    t[i]=x[i][0];\n                    y_data[i]=y[i][0];\n                    if(y[i][0]>maxY)\n                        maxY = y[i][0];\n                }\n            }\n\n        }\n\n        //}\n    }\n    else{\n        //Looks like a column wise matrix [[x],[y]]\n        var nbPoints = nbSeries;\n        //if(nbPoints<3)\n        //    throw new SizeException(nbPoints);\n        //else {\n        t = new Array(nbPoints);//new Matrix(nbPoints, 1);\n        y_data = new Array(nbPoints);//new Matrix(nbPoints, 1);\n        for (i = 0; i < nbPoints; i++) {\n            t[i] = xy[i][0];\n            y_data[i] = xy[i][1];\n            if(y_data[i]>maxY)\n                maxY = y_data[i];\n        }\n        //}\n    }\n    for (i = 0; i < nbPoints; i++) {\n        y_data[i]/=maxY;\n    }\n    if(threshold){\n        for (i = nbPoints-1; i >=0; i--) {\n            if(y_data[i]<threshold) {\n                y_data.splice(i,1);\n                t.splice(i,1);\n            }\n        }\n    }\n    if(t.length>0)\n        return [(new Matrix([t])).transpose(),(new Matrix([y_data])).transpose(),maxY];\n    return null;\n}\n\nfunction sizeException(nbPoints) {\n    return new RangeError(\"Not enough points to perform the optimization: \"+nbPoints +\"< 3\");\n}\n\nmodule.exports.optimizeSingleLorentzian = optimizeSingleLorentzian;\nmodule.exports.optimizeLorentzianSum = optimizeLorentzianSum;\nmodule.exports.optimizeSingleGaussian = optimizeSingleGaussian;\nmodule.exports.optimizeGaussianSum = optimizeGaussianSum;\nmodule.exports.singleGaussian = singleGaussian;\nmodule.exports.singleLorentzian = singleLorentzian;\nmodule.exports.optimizeGaussianTrain = optimizeGaussianTrain;\nmodule.exports.optimizeLorentzianTrain = optimizeLorentzianTrain;\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-optimize-lorentzian/src/index.js","'use strict';\n\nmodule.exports = require('./LM');\nmodule.exports.Matrix = require('ml-matrix');\nmodule.exports.Matrix.algebra = require('./algebra');\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-curve-fitting/src/index.js","/**\n * Created by acastillo on 8/5/15.\n */\nvar Matrix = require(\"ml-matrix\");\nvar math = require(\"./algebra\");\n\nvar DEBUG = false;\n/** Levenberg Marquardt curve-fitting: minimize sum of weighted squared residuals\n ----------  INPUT  VARIABLES  -----------\n func   = function of n independent variables, 't', and m parameters, 'p',\n returning the simulated model: y_hat = func(t,p,c)\n p      = n-vector of initial guess of parameter values\n t      = m-vectors or matrix of independent variables (used as arg to func)\n y_dat  = m-vectors or matrix of data to be fit by func(t,p)\n weight = weighting vector for least squares fit ( weight >= 0 ) ...\n inverse of the standard measurement errors\n Default:  sqrt(d.o.f. / ( y_dat' * y_dat ))\n dp     = fractional increment of 'p' for numerical derivatives\n dp(j)>0 central differences calculated\n dp(j)<0 one sided 'backwards' differences calculated\n dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n Default:  0.001;\n p_min  = n-vector of lower bounds for parameter values\n p_max  = n-vector of upper bounds for parameter values\n c      = an optional matrix of values passed to func(t,p,c)\n opts   = vector of algorithmic parameters\n parameter    defaults    meaning\n opts(1)  =  prnt            3        >1 intermediate results; >2 plots\n opts(2)  =  MaxIter      10*Npar     maximum number of iterations\n opts(3)  =  epsilon_1       1e-3     convergence tolerance for gradient\n opts(4)  =  epsilon_2       1e-3     convergence tolerance for parameters\n opts(5)  =  epsilon_3       1e-3     convergence tolerance for Chi-square\n opts(6)  =  epsilon_4       1e-2     determines acceptance of a L-M step\n opts(7)  =  lambda_0        1e-2     initial value of L-M paramter\n opts(8)  =  lambda_UP_fac   11       factor for increasing lambda\n opts(9)  =  lambda_DN_fac    9       factor for decreasing lambda\n opts(10) =  Update_Type      1       1: Levenberg-Marquardt lambda update\n 2: Quadratic update\n 3: Nielsen's lambda update equations\n\n ----------  OUTPUT  VARIABLES  -----------\n p       = least-squares optimal estimate of the parameter values\n X2      = Chi squared criteria\n sigma_p = asymptotic standard error of the parameters\n sigma_y = asymptotic standard error of the curve-fit\n corr    = correlation matrix of the parameters\n R_sq    = R-squared cofficient of multiple determination\n cvg_hst = convergence history\n\n Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. 22 Sep 2013\n modified from: http://octave.sourceforge.net/optim/function/leasqr.html\n using references by\n Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n Sam Roweis       http://www.cs.toronto.edu/~roweis/notes/lm.pdf\n Manolis Lourakis http://www.ics.forth.gr/~lourakis/levmar/levmar.pdf\n Hans Nielson     http://www2.imm.dtu.dk/~hbn/publ/TR9905.ps\n Mathworks        optimization toolbox reference manual\n K. Madsen, H.B., Nielsen, and O. Tingleff\n http://www2.imm.dtu.dk/pubdb/views/edoc_download.php/3215/pdf/imm3215.pdf\n */\nvar LM = {\n\n    optimize: function(func,p,t,y_dat,weight,dp,p_min,p_max,c,opts){\n\n        var tensor_parameter = 0;\t\t\t// set to 1 of parameter is a tensor\n\n        var iteration  = 0;\t\t\t// iteration counter\n        //func_calls = 0;\t\t\t// running count of function evaluations\n\n        if((typeof p[0])!=\"object\"){\n            for(var i=0;i< p.length;i++){\n                p[i]=[p[i]];\n            }\n\n        }\n        //p = p(:); y_dat = y_dat(:); \t\t// make column vectors\n        var i,k;\n        var eps = 2^-52;\n        var Npar   = p.length;//length(p); \t\t\t// number of parameters\n        var Npnt   = y_dat.length;//length(y_dat);\t\t// number of data points\n        var p_old  = Matrix.zeros(Npar,1);\t\t// previous set of parameters\n        var y_old  = Matrix.zeros(Npnt,1);\t\t// previous model, y_old = y_hat(t;p_old)\n        var X2     = 1e-2/eps;\t\t\t// a really big initial Chi-sq value\n        var X2_old = 1e-2/eps;\t\t\t// a really big initial Chi-sq value\n        var J =  Matrix.zeros(Npnt,Npar);\n\n\n        if (t.length != y_dat.length) {\n            console.log('lm.m error: the length of t must equal the length of y_dat');\n\n            length_t = t.length;\n            length_y_dat = y_dat.length;\n            var X2 = 0, corr = 0, sigma_p = 0, sigma_y = 0, R_sq = 0, cvg_hist = 0;\n            if (!tensor_parameter) {\n                return;\n            }\n        }\n\n        weight = weight||Math.sqrt((Npnt-Npar+1)/(math.multiply(math.transpose(y_dat),y_dat)));\n        dp = dp || 0.001;\n        p_min   = p_min || math.multiply(Math.abs(p),-100);\n        p_max   = p_max || math.multiply(Math.abs(p),100);\n        c = c || 1;\n        // Algorithmic Paramters\n        //prnt MaxIter  eps1  eps2  epx3  eps4  lam0  lamUP lamDN UpdateType\n        opts = opts ||[  3,10*Npar, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2, 11, 9, 1 ];\n\n        var prnt          = opts[0];\t// >1 intermediate results; >2 plots\n        var MaxIter       = opts[1];\t// maximum number of iterations\n        var epsilon_1     = opts[2];\t// convergence tolerance for gradient\n        var epsilon_2     = opts[3];\t// convergence tolerance for parameter\n        var epsilon_3     = opts[4];\t// convergence tolerance for Chi-square\n        var epsilon_4     = opts[5];\t// determines acceptance of a L-M step\n        var lambda_0      = opts[6];\t// initial value of damping paramter, lambda\n        var lambda_UP_fac = opts[7];\t// factor for increasing lambda\n        var lambda_DN_fac = opts[8];\t// factor for decreasing lambda\n        var Update_Type   = opts[9];\t// 1: Levenberg-Marquardt lambda update\n        // 2: Quadratic update\n        // 3: Nielsen's lambda update equations\n\n        if ( tensor_parameter && prnt == 3 ) prnt = 2;\n\n\n        if(!dp.length || dp.length == 1){\n            var dp_array = new Array(Npar);\n            for(var i=0;i<Npar;i++)\n                dp_array[i]=[dp];\n            dp=dp_array;\n        }\n\n        // indices of the parameters to be fit\n        var idx   = [];\n        for(i=0;i<dp.length;i++){\n            if(dp[i][0]!=0){\n                idx.push(i);\n            }\n        }\n\n        var Nfit = idx.length;\t\t\t// number of parameters to fit\n        var stop = false;\t\t\t\t// termination flag\n\n        var weight_sq = null;\n        //console.log(weight);\n        if ( !weight.length || weight.length < Npnt )\t{\n            // squared weighting vector\n            //weight_sq = ( weight(1)*ones(Npnt,1) ).^2;\n            //console.log(\"weight[0] \"+typeof weight[0]);\n            var tmp = math.multiply(Matrix.ones(Npnt,1),weight[0]);\n            weight_sq = math.dotMultiply(tmp,tmp);\n        }\n        else{\n            //weight_sq = (weight(:)).^2;\n            weight_sq = math.dotMultiply(weight,weight);\n        }\n\n\n        // initialize Jacobian with finite difference calculation\n        //console.log(\"J \"+weight_sq);\n        var result = this.lm_matx(func,t,p_old,y_old,1,J,p,y_dat,weight_sq,dp,c);\n        var JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n        //[JtWJ,JtWdy,X2,y_hat,J] = this.lm_matx(func,t,p_old,y_old,1,J,p,y_dat,weight_sq,dp,c);\n        //console.log(JtWJ);\n\n        if ( Math.max(Math.abs(JtWdy)) < epsilon_1 ){\n            console.log(' *** Your Initial Guess is Extremely Close to Optimal ***')\n            console.log(' *** epsilon_1 = ', epsilon_1);\n            stop = true;\n        }\n\n\n        switch(Update_Type){\n            case 1: // Marquardt: init'l lambda\n                lambda  = lambda_0;\n                break;\n            default:    // Quadratic and Nielsen\n                lambda  = lambda_0 * Math.max(math.diag(JtWJ));\n                nu=2;\n        }\n        //console.log(X2);\n        X2_old = X2; // previous value of X2\n        //console.log(MaxIter+\" \"+Npar);\n        //var cvg_hst = Matrix.ones(MaxIter,Npar+3);\t\t// initialize convergence history\n        var h = null;\n        while ( !stop && iteration <= MaxIter ) {\t\t// --- Main Loop\n            iteration = iteration + 1;\n            // incremental change in parameters\n            switch(Update_Type){\n                case 1:\t\t\t\t\t// Marquardt\n                    //h = ( JtWJ + lambda * math.diag(math.diag(JtWJ)) ) \\ JtWdy;\n                    //h = math.multiply(math.inv(JtWdy),math.add(JtWJ,math.multiply(lambda,math.diag(math.diag(Npar)))));\n                    h = math.solve(math.add(JtWJ,math.multiply(math.diag(math.diag(JtWJ)),lambda)),JtWdy);\n                    break;\n                default:\t\t\t\t\t// Quadratic and Nielsen\n                    //h = ( JtWJ + lambda * math.eye(Npar) ) \\ JtWdy;\n\n                    h = math.solve(math.add(JtWJ,math.multiply( Matrix.eye(Npar),lambda)),JtWdy);\n            }\n\n            /*for(var k=0;k< h.length;k++){\n             h[k]=[h[k]];\n             }*/\n            //console.log(\"h \"+h);\n            //h=math.matrix(h);\n            //  big = max(abs(h./p)) > 2;\n            //this is a big step\n            // --- Are parameters [p+h] much better than [p] ?\n            var hidx = new Array(idx.length);\n            for(k=0;k<idx.length;k++){\n                hidx[k]=h[idx[k]];\n            }\n            var p_try = math.add(p, hidx);// update the [idx] elements\n\n            for(k=0;k<p_try.length;k++){\n                p_try[k][0]=Math.min(Math.max(p_min[k][0],p_try[k][0]),p_max[k][0]);\n            }\n            // p_try = Math.min(Math.max(p_min,p_try),p_max);           // apply constraints\n\n            var delta_y = math.subtract(y_dat, func(t,p_try,c));       // residual error using p_try\n            //func_calls = func_calls + 1;\n            //X2_try = delta_y' * ( delta_y .* weight_sq );  // Chi-squared error criteria\n\n            var X2_try = math.multiply(math.transpose(delta_y),math.dotMultiply(delta_y,weight_sq));\n\n            if ( Update_Type == 2 ){  \t\t\t  // Quadratic\n                //    One step of quadratic line update in the h direction for minimum X2\n                //var alpha =  JtWdy'*h / ( (X2_try - X2)/2 + 2*JtWdy'*h ) ;\n                var JtWdy_th = math.multiply(math.transpose(JtWdy),h);\n                var alpha =  math.multiply(JtWdy_th,math.inv(math.add(math.multiply(math.subtract(X2_try - X2),1/2)),math.multiply(JtWdy_th,2)));//JtWdy'*h / ( (X2_try - X2)/2 + 2*JtWdy'*h ) ;\n\n                h = math.multiply(alpha, h);\n                for(var k=0;k<idx.length;k++){\n                    hidx[k]=h[idx[k]];\n                }\n\n                p_try = math.add(p ,hidx);                     // update only [idx] elements\n                p_try = math.min(math.max(p_min,p_try),p_max);          // apply constraints\n\n                delta_y = math.subtract(y_dat, func(t,p_try,c));      // residual error using p_try\n                // func_calls = func_calls + 1;\n                //X2_try = delta_y' * ( delta_y .* weight_sq ); // Chi-squared error criteria\n                X2_try = math.multiply(math.transpose(delta_y), mat.dotMultiply(delta_y, weight_sq));\n            }\n\n            //rho = (X2 - X2_try) / ( 2*h' * (lambda * h + JtWdy) ); // Nielsen\n            var rho = (X2-X2_try)/math.multiply(math.multiply(math.transpose(h),2),math.add(math.multiply(lambda, h),JtWdy));\n            //console.log(\"rho \"+rho);\n            if ( rho > epsilon_4 ) {\t\t// it IS significantly better\n                //console.log(\"Here\");\n                dX2 = X2 - X2_old;\n                X2_old = X2;\n                p_old = p;\n                y_old = y_hat;\n                p = p_try;\t\t\t// accept p_try\n\n                result = this.lm_matx(func, t, p_old, y_old, dX2, J, p, y_dat, weight_sq, dp, c);\n                JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n                // decrease lambda ==> Gauss-Newton method\n\n                switch (Update_Type) {\n                    case 1:\t\t\t\t\t\t\t// Levenberg\n                        lambda = Math.max(lambda / lambda_DN_fac, 1.e-7);\n                        break;\n                    case 2:\t\t\t\t\t\t\t// Quadratic\n                        lambda = Math.max(lambda / (1 + alpha), 1.e-7);\n                        break;\n                    case 3:\t\t\t\t\t\t\t// Nielsen\n                        lambda = math.multiply(Math.max(1 / 3, 1 - (2 * rho - 1) ^ 3),lambda);\n                        nu = 2;\n                        break;\n                }\n            }\n            else {\t\t\t\t\t// it IS NOT better\n                X2 = X2_old;\t\t\t// do not accept p_try\n                if (iteration%(2 * Npar)==0) {\t// rank-1 update of Jacobian\n                    result = this.lm_matx(func, t, p_old, y_old, -1, J, p, y_dat, weight_sq, dp, c);\n                    JtWJ = result.JtWJ,JtWdy=result.JtWdy,dX2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n                }\n\n                // increase lambda  ==> gradient descent method\n                switch (Update_Type) {\n                    case 1:\t\t\t\t\t\t\t// Levenberg\n                        lambda = Math.min(lambda * lambda_UP_fac, 1.e7);\n                        break;\n                    case 2:\t\t\t\t\t\t\t// Quadratic\n                        lambda = lambda + Math.abs((X2_try - X2) / 2 / alpha);\n                        break;\n                    case 3:\t\t\t\t\t\t// Nielsen\n                        lambda = lambda * nu;\n                        nu = 2 * nu;\n                        break;\n                }\n            }\n        }// --- End of Main Loop\n\n        // --- convergence achieved, find covariance and confidence intervals\n\n        // equal weights for paramter error analysis\n        weight_sq = math.multiply(math.multiply(math.transpose(delta_y),delta_y), Matrix.ones(Npnt,1));\n\n        weight_sq.apply(function(i,j){\n            weight_sq[i][j] = (Npnt-Nfit+1)/weight_sq[i][j];\n        });\n        //console.log(weight_sq);\n        result = this.lm_matx(func,t,p_old,y_old,-1,J,p,y_dat,weight_sq,dp,c);\n        JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n\n        /*if nargout > 2\t\t\t\t// standard error of parameters\n         covar = inv(JtWJ);\n         sigma_p = sqrt(diag(covar));\n         end\n\n         if nargout > 3\t\t\t\t// standard error of the fit\n         //  sigma_y = sqrt(diag(J * covar * J'));\t// slower version of below\n         sigma_y = zeros(Npnt,1);\n         for i=1:Npnt\n         sigma_y(i) = J(i,:) * covar * J(i,:)';\n         end\n         sigma_y = sqrt(sigma_y);\n         end\n\n         if nargout > 4\t\t\t\t// parameter correlation matrix\n         corr = covar ./ [sigma_p*sigma_p'];\n         end\n\n         if nargout > 5\t\t\t\t// coefficient of multiple determination\n         R_sq = corrcoef([y_dat y_hat]);\n         R_sq = R_sq(1,2).^2;\n         end\n\n         if nargout > 6\t\t\t\t// convergence history\n         cvg_hst = cvg_hst(1:iteration,:);\n         end*/\n\n        // endfunction  # ---------------------------------------------------------- LM\n\n        return { p:p, X2:X2};\n    },\n\n    lm_FD_J:function(func,t,p,y,dp,c) {\n        // J = lm_FD_J(func,t,p,y,{dp},{c})\n        //\n        // partial derivatives (Jacobian) dy/dp for use with lm.m\n        // computed via Finite Differences\n        // Requires n or 2n function evaluations, n = number of nonzero values of dp\n        // -------- INPUT VARIABLES ---------\n        // func = function of independent variables, 't', and parameters, 'p',\n        //        returning the simulated model: y_hat = func(t,p,c)\n        // t  = m-vector of independent variables (used as arg to func)\n        // p  = n-vector of current parameter values\n        // y  = func(t,p,c) n-vector initialised by user before each call to lm_FD_J\n        // dp = fractional increment of p for numerical derivatives\n        //      dp(j)>0 central differences calculated\n        //      dp(j)<0 one sided differences calculated\n        //      dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n        //      Default:  0.001;\n        // c  = optional vector of constants passed to y_hat = func(t,p,c)\n        //---------- OUTPUT VARIABLES -------\n        // J  = Jacobian Matrix J(i,j)=dy(i)/dp(j)\ti=1:n; j=1:m\n\n        //   Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. November 2005\n        //   modified from: ftp://fly.cnuce.cnr.it/pub/software/octave/leasqr/\n        //   Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\n        var m = y.length;\t\t\t// number of data points\n        var n = p.length;\t\t\t// number of parameters\n\n        dp = dp || math.multiply( Matrix.ones(n, 1), 0.001);\n\n        var ps = p.clone();//JSON.parse(JSON.stringify(p));\n        //var ps = $.extend(true, [], p);\n        var J = new Matrix(m,n), del =new Array(n);         // initialize Jacobian to Zero\n\n        for (var j = 0;j < n; j++) {\n            //console.log(j+\" \"+dp[j]+\" \"+p[j]+\" \"+ps[j]+\" \"+del[j]);\n            del[j] = dp[j]*(1+Math.abs(p[j][0]));  // parameter perturbation\n            p[j] = [ps[j][0]+del[j]];\t      // perturb parameter p(j)\n            //console.log(j+\" \"+dp[j]+\" \"+p[j]+\" \"+ps[j]+\" \"+del[j]);\n\n            if (del[j] != 0){\n                y1 = func(t, p, c);\n                //func_calls = func_calls + 1;\n                if (dp[j][0] < 0) {\t\t// backwards difference\n                    //J(:,j) = math.dotDivide(math.subtract(y1, y),del[j]);//. / del[j];\n                    //console.log(del[j]);\n                    //console.log(y);\n                    var column = math.dotDivide(math.subtract(y1, y),del[j]);\n                    for(var k=0;k< m;k++){\n                        J[k][j]=column[k][0];\n                    }\n                    //console.log(column);\n                }\n                else{\n                    p[j][0] = ps[j][0] - del[j];\n                    //J(:,j) = (y1 - feval(func, t, p, c)). / (2. * del[j]);\n                    var column = math.dotDivide(math.subtract(y1,func(t,p,c)),2*del[j]);\n                    for(var k=0;k< m;k++){\n                        J[k][j]=column[k][0];\n                    }\n\n                }\t\t\t// central difference, additional func call\n            }\n\n            p[j] = ps[j];\t\t// restore p(j)\n\n        }\n        //console.log(\"lm_FD_J: \"+ JSON.stringify(J));\n        return J;\n\n    },\n\n    // endfunction # -------------------------------------------------- LM_FD_J\n    lm_Broyden_J: function(p_old,y_old,J,p,y){\n        // J = lm_Broyden_J(p_old,y_old,J,p,y)\n        // carry out a rank-1 update to the Jacobian matrix using Broyden's equation\n        //---------- INPUT VARIABLES -------\n        // p_old = previous set of parameters\n        // y_old = model evaluation at previous set of parameters, y_hat(t;p_old)\n        // J  = current version of the Jacobian matrix\n        // p     = current  set of parameters\n        // y     = model evaluation at current  set of parameters, y_hat(t;p)\n        //---------- OUTPUT VARIABLES -------\n        // J = rank-1 update to Jacobian Matrix J(i,j)=dy(i)/dp(j)\ti=1:n; j=1:m\n        //console.log(p+\" X \"+ p_old)\n        var h  = math.subtract(p, p_old);\n\n        //console.log(\"hhh \"+h);\n        var h_t = math.transpose(h);\n        h_t.div(math.multiply(h_t,h));\n\n        //console.log(h_t);\n        //J = J + ( y - y_old - J*h )*h' / (h'*h);\t// Broyden rank-1 update eq'n\n        J = math.add(J, math.multiply(math.subtract(y, math.add(y_old,math.multiply(J,h))),h_t));\n        return J;\n        // endfunction # ---------------------------------------------- LM_Broyden_J\n    },\n\n    lm_matx : function (func,t,p_old,y_old,dX2,J,p,y_dat,weight_sq,dp,c,iteration){\n        // [JtWJ,JtWdy,Chi_sq,y_hat,J] = this.lm_matx(func,t,p_old,y_old,dX2,J,p,y_dat,weight_sq,{da},{c})\n        //\n        // Evaluate the linearized fitting matrix, JtWJ, and vector JtWdy,\n        // and calculate the Chi-squared error function, Chi_sq\n        // Used by Levenberg-Marquard algorithm, lm.m\n        // -------- INPUT VARIABLES ---------\n        // func   = function ofpn independent variables, p, and m parameters, p,\n        //         returning the simulated model: y_hat = func(t,p,c)\n        // t      = m-vectors or matrix of independent variables (used as arg to func)\n        // p_old  = n-vector of previous parameter values\n        // y_old  = m-vector of previous model ... y_old = y_hat(t;p_old);\n        // dX2    = previous change in Chi-squared criteria\n        // J   = m-by-n Jacobian of model, y_hat, with respect to parameters, p\n        // p      = n-vector of current  parameter values\n        // y_dat  = n-vector of data to be fit by func(t,p,c)\n        // weight_sq = square of the weighting vector for least squares fit ...\n        //\t    inverse of the standard measurement errors\n        // dp     = fractional increment of 'p' for numerical derivatives\n        //          dp(j)>0 central differences calculated\n        //          dp(j)<0 one sided differences calculated\n        //          dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n        //          Default:  0.001;\n        // c      = optional vector of constants passed to y_hat = func(t,p,c)\n        //---------- OUTPUT VARIABLES -------\n        // JtWJ\t = linearized Hessian matrix (inverse of covariance matrix)\n        // JtWdy   = linearized fitting vector\n        // Chi_sq = Chi-squared criteria: weighted sum of the squared residuals WSSR\n        // y_hat  = model evaluated with parameters 'p'\n        // J   = m-by-n Jacobian of model, y_hat, with respect to parameters, p\n\n        //   Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. November 2005\n        //   modified from: ftp://fly.cnuce.cnr.it/pub/software/octave/leasqr/\n        //   Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\n\n        var Npnt = y_dat.length;\t\t// number of data points\n        var Npar = p.length;\t\t// number of parameters\n\n        dp = dp || 0.001;\n\n\n        //var JtWJ = new Matrix.zeros(Npar);\n        //var JtWdy  = new Matrix.zeros(Npar,1);\n\n        var y_hat = func(t,p,c);\t// evaluate model using parameters 'p'\n        //func_calls = func_calls + 1;\n        //console.log(J);\n        if ( (iteration%(2*Npar))==0 || dX2 > 0 ) {\n            //console.log(\"Par\");\n            J = this.lm_FD_J(func, t, p, y_hat, dp, c);\t\t// finite difference\n        }\n        else{\n            //console.log(\"ImPar\");\n            J = this.lm_Broyden_J(p_old, y_old, J, p, y_hat); // rank-1 update\n        }\n        //console.log(y_dat);\n        //console.log(y_hat);\n        var delta_y = math.subtract(y_dat, y_hat);\t// residual error between model and data\n        //console.log(delta_y[0][0]);\n        //console.log(delta_y.rows+\" \"+delta_y.columns+\" \"+JSON.stringify(weight_sq));\n        //var Chi_sq = delta_y' * ( delta_y .* weight_sq ); \t// Chi-squared error criteria\n        var Chi_sq = math.multiply(math.transpose(delta_y),math.dotMultiply(delta_y,weight_sq));\n        //JtWJ  = J' * ( J .* ( weight_sq * ones(1,Npar) ) );\n        var Jt = math.transpose(J);\n\n        //console.log(weight_sq);\n\n        var JtWJ = math.multiply(Jt, math.dotMultiply(J,math.multiply(weight_sq, Matrix.ones(1,Npar))));\n\n        //JtWdy = J' * ( weight_sq .* delta_y );\n        var JtWdy = math.multiply(Jt, math.dotMultiply(weight_sq,delta_y));\n\n\n        return {JtWJ:JtWJ,JtWdy:JtWdy,Chi_sq:Chi_sq,y_hat:y_hat,J:J};\n        // endfunction  # ------------------------------------------------------ LM_MATX\n    }\n\n\n\n};\n\nmodule.exports = LM;\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-curve-fitting/src/LM.js","'use strict';\n\nif (!Symbol.species) {\n    Symbol.species = Symbol.for('@@species');\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/symbol-species.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixTransposeView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.columns, matrix.rows);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(columnIndex, rowIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(columnIndex, rowIndex);\n    }\n}\n\nmodule.exports = MatrixTransposeView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/views/transpose.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixRowView extends BaseView {\n    constructor(matrix, row) {\n        super(matrix, 1, matrix.columns);\n        this.row = row;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.row, columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.row, columnIndex);\n    }\n}\n\nmodule.exports = MatrixRowView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/views/row.js","'use strict';\n\nvar BaseView = require('./base');\nvar util = require('../util');\n\nclass MatrixSubView extends BaseView {\n    constructor(matrix, startRow, endRow, startColumn, endColumn) {\n        util.checkRange(matrix, startRow, endRow, startColumn, endColumn);\n        super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n        this.startRow = startRow;\n        this.startColumn = startColumn;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.startRow + rowIndex, this.startColumn + columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.startRow + rowIndex, this.startColumn + columnIndex);\n    }\n}\n\nmodule.exports = MatrixSubView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/views/sub.js","'use strict';\n\nvar BaseView = require('./base');\nvar util = require('../util');\n\nclass MatrixSelectionView extends BaseView {\n    constructor(matrix, rowIndices, columnIndices) {\n        var indices = util.checkIndices(matrix, rowIndices, columnIndices);\n        super(matrix, indices.row.length, indices.column.length);\n        this.rowIndices = indices.row;\n        this.columnIndices = indices.column;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.rowIndices[rowIndex], this.columnIndices[columnIndex], value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.rowIndices[rowIndex], this.columnIndices[columnIndex]);\n    }\n}\n\nmodule.exports = MatrixSelectionView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/views/selection.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixColumnView extends BaseView {\n    constructor(matrix, column) {\n        super(matrix, matrix.rows, 1);\n        this.column = column;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(rowIndex, this.column, value);\n        return this;\n    }\n\n    get(rowIndex) {\n        return this.matrix.get(rowIndex, this.column);\n    }\n}\n\nmodule.exports = MatrixColumnView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/views/column.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixFlipRowView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.rows, matrix.columns);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\n    }\n}\n\nmodule.exports = MatrixFlipRowView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/views/flipRow.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixFlipColumnView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.rows, matrix.columns);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\n    }\n}\n\nmodule.exports = MatrixFlipColumnView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/views/flipColumn.js","'use strict';\n\nvar Matrix = require('./matrix').Matrix;\n\nvar SingularValueDecomposition = require('./dc/svd');\nvar EigenvalueDecomposition = require('./dc/evd');\nvar LuDecomposition = require('./dc/lu');\nvar QrDecomposition = require('./dc/qr');\nvar CholeskyDecomposition = require('./dc/cholesky');\n\nfunction inverse(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    return solve(matrix, Matrix.eye(matrix.rows));\n}\n\n/**\n * Returns the inverse\n * @memberOf Matrix\n * @static\n * @param {Matrix} matrix\n * @return {Matrix} matrix\n * @alias inv\n */\nMatrix.inverse = Matrix.inv = inverse;\n\n/**\n * Returns the inverse\n * @memberOf Matrix\n * @static\n * @param {Matrix} matrix\n * @return {Matrix} matrix\n * @alias inv\n */\nMatrix.prototype.inverse = Matrix.prototype.inv = function () {\n    return inverse(this);\n};\n\nfunction solve(leftHandSide, rightHandSide) {\n    leftHandSide = Matrix.checkMatrix(leftHandSide);\n    rightHandSide = Matrix.checkMatrix(rightHandSide);\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n}\n\nMatrix.solve = solve;\nMatrix.prototype.solve = function (other) {\n    return solve(this, other);\n};\n\nmodule.exports = {\n    SingularValueDecomposition: SingularValueDecomposition,\n    SVD: SingularValueDecomposition,\n    EigenvalueDecomposition: EigenvalueDecomposition,\n    EVD: EigenvalueDecomposition,\n    LuDecomposition: LuDecomposition,\n    LU: LuDecomposition,\n    QrDecomposition: QrDecomposition,\n    QR: QrDecomposition,\n    CholeskyDecomposition: CholeskyDecomposition,\n    CHO: CholeskyDecomposition,\n    inverse: inverse,\n    solve: solve\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/decompositions.js","'use strict';\n\nconst Matrix = require('../matrix').Matrix;\nconst util = require('./util');\nconst hypotenuse = util.hypotenuse;\nconst getFilled2DArray = util.getFilled2DArray;\n\nconst defaultOptions = {\n    assumeSymmetric: false\n};\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\nfunction EigenvalueDecomposition(matrix, options) {\n    options = Object.assign({}, defaultOptions, options);\n    if (!(this instanceof EigenvalueDecomposition)) {\n        return new EigenvalueDecomposition(matrix, options);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n        throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns,\n        V = getFilled2DArray(n, n, 0),\n        d = new Array(n),\n        e = new Array(n),\n        value = matrix,\n        i, j;\n\n    var isSymmetric = false;\n    if (options.assumeSymmetric) {\n        isSymmetric = true;\n    } else {\n        isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                V[i][j] = value.get(i, j);\n            }\n        }\n        tred2(n, e, d, V);\n        tql2(n, e, d, V);\n    } else {\n        var H = getFilled2DArray(n, n, 0),\n            ort = new Array(n);\n        for (j = 0; j < n; j++) {\n            for (i = 0; i < n; i++) {\n                H[i][j] = value.get(i, j);\n            }\n        }\n        orthes(n, H, ort, V);\n        hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n}\n\nEigenvalueDecomposition.prototype = {\n    get realEigenvalues() {\n        return this.d;\n    },\n    get imaginaryEigenvalues() {\n        return this.e;\n    },\n    get eigenvectorMatrix() {\n        if (!Matrix.isMatrix(this.V)) {\n            this.V = new Matrix(this.V);\n        }\n        return this.V;\n    },\n    get diagonalMatrix() {\n        var n = this.n,\n            e = this.e,\n            d = this.d,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                X[i][j] = 0;\n            }\n            X[i][i] = d[i];\n            if (e[i] > 0) {\n                X[i][i + 1] = e[i];\n            } else if (e[i] < 0) {\n                X[i][i - 1] = e[i];\n            }\n        }\n        return X;\n    }\n};\n\nfunction tred2(n, e, d, V) {\n\n    var f, g, h, i, j, k,\n        hh, scale;\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n    }\n\n    for (i = n - 1; i > 0; i--) {\n        scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n            scale = scale + Math.abs(d[k]);\n        }\n\n        if (scale === 0) {\n            e[i] = d[i - 1];\n            for (j = 0; j < i; j++) {\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n                V[j][i] = 0;\n            }\n        } else {\n            for (k = 0; k < i; k++) {\n                d[k] /= scale;\n                h += d[k] * d[k];\n            }\n\n            f = d[i - 1];\n            g = Math.sqrt(h);\n            if (f > 0) {\n                g = -g;\n            }\n\n            e[i] = scale * g;\n            h = h - f * g;\n            d[i - 1] = f - g;\n            for (j = 0; j < i; j++) {\n                e[j] = 0;\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                V[j][i] = f;\n                g = e[j] + V[j][j] * f;\n                for (k = j + 1; k <= i - 1; k++) {\n                    g += V[k][j] * d[k];\n                    e[k] += V[k][j] * f;\n                }\n                e[j] = g;\n            }\n\n            f = 0;\n            for (j = 0; j < i; j++) {\n                e[j] /= h;\n                f += e[j] * d[j];\n            }\n\n            hh = f / (h + h);\n            for (j = 0; j < i; j++) {\n                e[j] -= hh * d[j];\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                g = e[j];\n                for (k = j; k <= i - 1; k++) {\n                    V[k][j] -= (f * e[k] + g * d[k]);\n                }\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n            }\n        }\n        d[i] = h;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        V[n - 1][i] = V[i][i];\n        V[i][i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n            for (k = 0; k <= i; k++) {\n                d[k] = V[k][i + 1] / h;\n            }\n\n            for (j = 0; j <= i; j++) {\n                g = 0;\n                for (k = 0; k <= i; k++) {\n                    g += V[k][i + 1] * V[k][j];\n                }\n                for (k = 0; k <= i; k++) {\n                    V[k][j] -= g * d[k];\n                }\n            }\n        }\n\n        for (k = 0; k <= i; k++) {\n            V[k][i + 1] = 0;\n        }\n    }\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n        V[n - 1][j] = 0;\n    }\n\n    V[n - 1][n - 1] = 1;\n    e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n\n    var g, h, i, j, k, l, m, p, r,\n        dl1, c, c2, c3, el1, s, s2,\n        iter;\n\n    for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n    }\n\n    e[n - 1] = 0;\n\n    var f = 0,\n        tst1 = 0,\n        eps = Math.pow(2, -52);\n\n    for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        m = l;\n        while (m < n) {\n            if (Math.abs(e[m]) <= eps * tst1) {\n                break;\n            }\n            m++;\n        }\n\n        if (m > l) {\n            iter = 0;\n            do {\n                iter = iter + 1;\n\n                g = d[l];\n                p = (d[l + 1] - g) / (2 * e[l]);\n                r = hypotenuse(p, 1);\n                if (p < 0) {\n                    r = -r;\n                }\n\n                d[l] = e[l] / (p + r);\n                d[l + 1] = e[l] * (p + r);\n                dl1 = d[l + 1];\n                h = g - d[l];\n                for (i = l + 2; i < n; i++) {\n                    d[i] -= h;\n                }\n\n                f = f + h;\n\n                p = d[m];\n                c = 1;\n                c2 = c;\n                c3 = c;\n                el1 = e[l + 1];\n                s = 0;\n                s2 = 0;\n                for (i = m - 1; i >= l; i--) {\n                    c3 = c2;\n                    c2 = c;\n                    s2 = s;\n                    g = c * e[i];\n                    h = c * p;\n                    r = hypotenuse(p, e[i]);\n                    e[i + 1] = s * r;\n                    s = e[i] / r;\n                    c = p / r;\n                    p = c * d[i] - s * g;\n                    d[i + 1] = h + s * (c * g + s * d[i]);\n\n                    for (k = 0; k < n; k++) {\n                        h = V[k][i + 1];\n                        V[k][i + 1] = s * V[k][i] + c * h;\n                        V[k][i] = c * V[k][i] - s * h;\n                    }\n                }\n\n                p = -s * s2 * c3 * el1 * e[l] / dl1;\n                e[l] = s * p;\n                d[l] = c * p;\n\n            }\n            while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n            if (d[j] < p) {\n                k = j;\n                p = d[j];\n            }\n        }\n\n        if (k !== i) {\n            d[k] = d[i];\n            d[i] = p;\n            for (j = 0; j < n; j++) {\n                p = V[j][i];\n                V[j][i] = V[j][k];\n                V[j][k] = p;\n            }\n        }\n    }\n}\n\nfunction orthes(n, H, ort, V) {\n\n    var low = 0,\n        high = n - 1,\n        f, g, h, i, j, m,\n        scale;\n\n    for (m = low + 1; m <= high - 1; m++) {\n        scale = 0;\n        for (i = m; i <= high; i++) {\n            scale = scale + Math.abs(H[i][m - 1]);\n        }\n\n        if (scale !== 0) {\n            h = 0;\n            for (i = high; i >= m; i--) {\n                ort[i] = H[i][m - 1] / scale;\n                h += ort[i] * ort[i];\n            }\n\n            g = Math.sqrt(h);\n            if (ort[m] > 0) {\n                g = -g;\n            }\n\n            h = h - ort[m] * g;\n            ort[m] = ort[m] - g;\n\n            for (j = m; j < n; j++) {\n                f = 0;\n                for (i = high; i >= m; i--) {\n                    f += ort[i] * H[i][j];\n                }\n\n                f = f / h;\n                for (i = m; i <= high; i++) {\n                    H[i][j] -= f * ort[i];\n                }\n            }\n\n            for (i = 0; i <= high; i++) {\n                f = 0;\n                for (j = high; j >= m; j--) {\n                    f += ort[j] * H[i][j];\n                }\n\n                f = f / h;\n                for (j = m; j <= high; j++) {\n                    H[i][j] -= f * ort[j];\n                }\n            }\n\n            ort[m] = scale * ort[m];\n            H[m][m - 1] = scale * g;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            V[i][j] = (i === j ? 1 : 0);\n        }\n    }\n\n    for (m = high - 1; m >= low + 1; m--) {\n        if (H[m][m - 1] !== 0) {\n            for (i = m + 1; i <= high; i++) {\n                ort[i] = H[i][m - 1];\n            }\n\n            for (j = m; j <= high; j++) {\n                g = 0;\n                for (i = m; i <= high; i++) {\n                    g += ort[i] * V[i][j];\n                }\n\n                g = (g / ort[m]) / H[m][m - 1];\n                for (i = m; i <= high; i++) {\n                    V[i][j] += g * ort[i];\n                }\n            }\n        }\n    }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n    var n = nn - 1,\n        low = 0,\n        high = nn - 1,\n        eps = Math.pow(2, -52),\n        exshift = 0,\n        norm = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n        s = 0,\n        z = 0,\n        iter = 0,\n        i, j, k, l, m, t, w, x, y,\n        ra, sa, vr, vi,\n        notlast, cdivres;\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            d[i] = H[i][i];\n            e[i] = 0;\n        }\n\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n            norm = norm + Math.abs(H[i][j]);\n        }\n    }\n\n    while (n >= low) {\n        l = n;\n        while (l > low) {\n            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n            if (s === 0) {\n                s = norm;\n            }\n            if (Math.abs(H[l][l - 1]) < eps * s) {\n                break;\n            }\n            l--;\n        }\n\n        if (l === n) {\n            H[n][n] = H[n][n] + exshift;\n            d[n] = H[n][n];\n            e[n] = 0;\n            n--;\n            iter = 0;\n        } else if (l === n - 1) {\n            w = H[n][n - 1] * H[n - 1][n];\n            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n            q = p * p + w;\n            z = Math.sqrt(Math.abs(q));\n            H[n][n] = H[n][n] + exshift;\n            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n            x = H[n][n];\n\n            if (q >= 0) {\n                z = (p >= 0) ? (p + z) : (p - z);\n                d[n - 1] = x + z;\n                d[n] = d[n - 1];\n                if (z !== 0) {\n                    d[n] = x - w / z;\n                }\n                e[n - 1] = 0;\n                e[n] = 0;\n                x = H[n][n - 1];\n                s = Math.abs(x) + Math.abs(z);\n                p = x / s;\n                q = z / s;\n                r = Math.sqrt(p * p + q * q);\n                p = p / r;\n                q = q / r;\n\n                for (j = n - 1; j < nn; j++) {\n                    z = H[n - 1][j];\n                    H[n - 1][j] = q * z + p * H[n][j];\n                    H[n][j] = q * H[n][j] - p * z;\n                }\n\n                for (i = 0; i <= n; i++) {\n                    z = H[i][n - 1];\n                    H[i][n - 1] = q * z + p * H[i][n];\n                    H[i][n] = q * H[i][n] - p * z;\n                }\n\n                for (i = low; i <= high; i++) {\n                    z = V[i][n - 1];\n                    V[i][n - 1] = q * z + p * V[i][n];\n                    V[i][n] = q * V[i][n] - p * z;\n                }\n            } else {\n                d[n - 1] = x + p;\n                d[n] = x + p;\n                e[n - 1] = z;\n                e[n] = -z;\n            }\n\n            n = n - 2;\n            iter = 0;\n        } else {\n            x = H[n][n];\n            y = 0;\n            w = 0;\n            if (l < n) {\n                y = H[n - 1][n - 1];\n                w = H[n][n - 1] * H[n - 1][n];\n            }\n\n            if (iter === 10) {\n                exshift += x;\n                for (i = low; i <= n; i++) {\n                    H[i][i] -= x;\n                }\n                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n                x = y = 0.75 * s;\n                w = -0.4375 * s * s;\n            }\n\n            if (iter === 30) {\n                s = (y - x) / 2;\n                s = s * s + w;\n                if (s > 0) {\n                    s = Math.sqrt(s);\n                    if (y < x) {\n                        s = -s;\n                    }\n                    s = x - w / ((y - x) / 2 + s);\n                    for (i = low; i <= n; i++) {\n                        H[i][i] -= s;\n                    }\n                    exshift += s;\n                    x = y = w = 0.964;\n                }\n            }\n\n            iter = iter + 1;\n\n            m = n - 2;\n            while (m >= l) {\n                z = H[m][m];\n                r = x - z;\n                s = y - z;\n                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n                q = H[m + 1][m + 1] - z - r - s;\n                r = H[m + 2][m + 1];\n                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                p = p / s;\n                q = q / s;\n                r = r / s;\n                if (m === l) {\n                    break;\n                }\n                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n                    break;\n                }\n                m--;\n            }\n\n            for (i = m + 2; i <= n; i++) {\n                H[i][i - 2] = 0;\n                if (i > m + 2) {\n                    H[i][i - 3] = 0;\n                }\n            }\n\n            for (k = m; k <= n - 1; k++) {\n                notlast = (k !== n - 1);\n                if (k !== m) {\n                    p = H[k][k - 1];\n                    q = H[k + 1][k - 1];\n                    r = (notlast ? H[k + 2][k - 1] : 0);\n                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                    if (x !== 0) {\n                        p = p / x;\n                        q = q / x;\n                        r = r / x;\n                    }\n                }\n\n                if (x === 0) {\n                    break;\n                }\n\n                s = Math.sqrt(p * p + q * q + r * r);\n                if (p < 0) {\n                    s = -s;\n                }\n\n                if (s !== 0) {\n                    if (k !== m) {\n                        H[k][k - 1] = -s * x;\n                    } else if (l !== m) {\n                        H[k][k - 1] = -H[k][k - 1];\n                    }\n\n                    p = p + s;\n                    x = p / s;\n                    y = q / s;\n                    z = r / s;\n                    q = q / p;\n                    r = r / p;\n\n                    for (j = k; j < nn; j++) {\n                        p = H[k][j] + q * H[k + 1][j];\n                        if (notlast) {\n                            p = p + r * H[k + 2][j];\n                            H[k + 2][j] = H[k + 2][j] - p * z;\n                        }\n\n                        H[k][j] = H[k][j] - p * x;\n                        H[k + 1][j] = H[k + 1][j] - p * y;\n                    }\n\n                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n                        p = x * H[i][k] + y * H[i][k + 1];\n                        if (notlast) {\n                            p = p + z * H[i][k + 2];\n                            H[i][k + 2] = H[i][k + 2] - p * r;\n                        }\n\n                        H[i][k] = H[i][k] - p;\n                        H[i][k + 1] = H[i][k + 1] - p * q;\n                    }\n\n                    for (i = low; i <= high; i++) {\n                        p = x * V[i][k] + y * V[i][k + 1];\n                        if (notlast) {\n                            p = p + z * V[i][k + 2];\n                            V[i][k + 2] = V[i][k + 2] - p * r;\n                        }\n\n                        V[i][k] = V[i][k] - p;\n                        V[i][k + 1] = V[i][k + 1] - p * q;\n                    }\n                }\n            }\n        }\n    }\n\n    if (norm === 0) {\n        return;\n    }\n\n    for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n\n        if (q === 0) {\n            l = n;\n            H[n][n] = 1;\n            for (i = n - 1; i >= 0; i--) {\n                w = H[i][i] - p;\n                r = 0;\n                for (j = l; j <= n; j++) {\n                    r = r + H[i][j] * H[j][n];\n                }\n\n                if (e[i] < 0) {\n                    z = w;\n                    s = r;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                        t = (x * s - z * r) / q;\n                        H[i][n] = t;\n                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n                    }\n\n                    t = Math.abs(H[i][n]);\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        } else if (q < 0) {\n            l = n - 1;\n\n            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n                H[n - 1][n - 1] = q / H[n][n - 1];\n                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n            } else {\n                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n                H[n - 1][n - 1] = cdivres[0];\n                H[n - 1][n] = cdivres[1];\n            }\n\n            H[n][n - 1] = 0;\n            H[n][n] = 1;\n            for (i = n - 2; i >= 0; i--) {\n                ra = 0;\n                sa = 0;\n                for (j = l; j <= n; j++) {\n                    ra = ra + H[i][j] * H[j][n - 1];\n                    sa = sa + H[i][j] * H[j][n];\n                }\n\n                w = H[i][i] - p;\n\n                if (e[i] < 0) {\n                    z = w;\n                    r = ra;\n                    s = sa;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        cdivres = cdiv(-ra, -sa, w, q);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                        vi = (d[i] - p) * 2 * q;\n                        if (vr === 0 && vi === 0) {\n                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                        }\n                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n                        } else {\n                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n                            H[i + 1][n - 1] = cdivres[0];\n                            H[i + 1][n] = cdivres[1];\n                        }\n                    }\n\n                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n - 1] = H[j][n - 1] / t;\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            for (j = i; j < nn; j++) {\n                V[i][j] = H[i][j];\n            }\n        }\n    }\n\n    for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n            z = 0;\n            for (k = low; k <= Math.min(j, high); k++) {\n                z = z + V[i][k] * H[k][j];\n            }\n            V[i][j] = z;\n        }\n    }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n    var r, d;\n    if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        return [(xr + r * xi) / d, (xi - r * xr) / d];\n    } else {\n        r = yr / yi;\n        d = yi + r * yr;\n        return [(r * xr + xi) / d, (r * xi - xr) / d];\n    }\n}\n\nmodule.exports = EigenvalueDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/dc/evd.js","'use strict';\n\nvar Matrix = require('../matrix').Matrix;\nvar hypotenuse = require('./util').hypotenuse;\n\n//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\nfunction QrDecomposition(value) {\n    if (!(this instanceof QrDecomposition)) {\n        return new QrDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n\n    var qr = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        rdiag = new Array(n),\n        i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) {\n            nrm = hypotenuse(nrm, qr[i][k]);\n        }\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) {\n                nrm = -nrm;\n            }\n            for (i = k; i < m; i++) {\n                qr[i][k] /= nrm;\n            }\n            qr[k][k] += 1;\n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * qr[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    qr[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n}\n\nQrDecomposition.prototype = {\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var qr = this.QR,\n            m = qr.rows;\n\n        if (value.rows !== m) {\n            throw new Error('Matrix row dimensions must agree');\n        }\n        if (!this.isFullRank()) {\n            throw new Error('Matrix is rank deficient');\n        }\n\n        var count = value.columns;\n        var X = value.clone();\n        var n = qr.columns;\n        var i, j, k, s;\n\n        for (k = 0; k < n; k++) {\n            for (j = 0; j < count; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * X[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    X[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        for (k = n - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= this.Rdiag[k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * qr[i][k];\n                }\n            }\n        }\n\n        return X.subMatrix(0, n - 1, 0, count - 1);\n    },\n    isFullRank: function () {\n        var columns = this.QR.columns;\n        for (var i = 0; i < columns; i++) {\n            if (this.Rdiag[i] === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n    get upperTriangularMatrix() {\n        var qr = this.QR,\n            n = qr.columns,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                if (i < j) {\n                    X[i][j] = qr[i][j];\n                } else if (i === j) {\n                    X[i][j] = this.Rdiag[i];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get orthogonalMatrix() {\n        var qr = this.QR,\n            rows = qr.rows,\n            columns = qr.columns,\n            X = new Matrix(rows, columns),\n            i, j, k, s;\n\n        for (k = columns - 1; k >= 0; k--) {\n            for (i = 0; i < rows; i++) {\n                X[i][k] = 0;\n            }\n            X[k][k] = 1;\n            for (j = k; j < columns; j++) {\n                if (qr[k][k] !== 0) {\n                    s = 0;\n                    for (i = k; i < rows; i++) {\n                        s += qr[i][k] * X[i][j];\n                    }\n\n                    s = -s / qr[k][k];\n\n                    for (i = k; i < rows; i++) {\n                        X[i][j] += s * qr[i][k];\n                    }\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = QrDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/dc/qr.js","'use strict';\n\nvar Matrix = require('../matrix').Matrix;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\nfunction CholeskyDecomposition(value) {\n    if (!(this instanceof CholeskyDecomposition)) {\n        return new CholeskyDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n    if (!value.isSymmetric()) {\n        throw new Error('Matrix is not symmetric');\n    }\n\n    var a = value,\n        dimension = a.rows,\n        l = new Matrix(dimension, dimension),\n        positiveDefinite = true,\n        i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n        var Lrowj = l[j];\n        var d = 0;\n        for (k = 0; k < j; k++) {\n            var Lrowk = l[k];\n            var s = 0;\n            for (i = 0; i < k; i++) {\n                s += Lrowk[i] * Lrowj[i];\n            }\n            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n            d = d + s * s;\n        }\n\n        d = a[j][j] - d;\n\n        positiveDefinite &= (d > 0);\n        l[j][j] = Math.sqrt(Math.max(d, 0));\n        for (k = j + 1; k < dimension; k++) {\n            l[j][k] = 0;\n        }\n    }\n\n    if (!positiveDefinite) {\n        throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n}\n\nCholeskyDecomposition.prototype = {\n    get lowerTriangularMatrix() {\n        return this.L;\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var l = this.L,\n            dimension = l.rows;\n\n        if (value.rows !== dimension) {\n            throw new Error('Matrix dimensions do not match');\n        }\n\n        var count = value.columns,\n            B = value.clone(),\n            i, j, k;\n\n        for (k = 0; k < dimension; k++) {\n            for (j = 0; j < count; j++) {\n                for (i = 0; i < k; i++) {\n                    B[k][j] -= B[i][j] * l[k][i];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        for (k = dimension - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                for (i = k + 1; i < dimension; i++) {\n                    B[k][j] -= B[i][j] * l[i][k];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        return B;\n    }\n};\n\nmodule.exports = CholeskyDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-curve-fitting/node_modules/ml-matrix/src/dc/cholesky.js","'use strict';\n\nmodule.exports = require('./matrix').Matrix;\nmodule.exports.Decompositions = module.exports.DC = require('./decompositions');\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/index.js","'use strict';\n\nif (!Symbol.species) {\n    Symbol.species = Symbol.for('@@species');\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/symbol-species.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixTransposeView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.columns, matrix.rows);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(columnIndex, rowIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(columnIndex, rowIndex);\n    }\n}\n\nmodule.exports = MatrixTransposeView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/views/transpose.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixRowView extends BaseView {\n    constructor(matrix, row) {\n        super(matrix, 1, matrix.columns);\n        this.row = row;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.row, columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.row, columnIndex);\n    }\n}\n\nmodule.exports = MatrixRowView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/views/row.js","'use strict';\n\nvar BaseView = require('./base');\nvar util = require('../util');\n\nclass MatrixSubView extends BaseView {\n    constructor(matrix, startRow, endRow, startColumn, endColumn) {\n        util.checkRange(matrix, startRow, endRow, startColumn, endColumn);\n        super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n        this.startRow = startRow;\n        this.startColumn = startColumn;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.startRow + rowIndex, this.startColumn + columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.startRow + rowIndex, this.startColumn + columnIndex);\n    }\n}\n\nmodule.exports = MatrixSubView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/views/sub.js","'use strict';\n\nvar BaseView = require('./base');\nvar util = require('../util');\n\nclass MatrixSelectionView extends BaseView {\n    constructor(matrix, rowIndices, columnIndices) {\n        var indices = util.checkIndices(matrix, rowIndices, columnIndices);\n        super(matrix, indices.row.length, indices.column.length);\n        this.rowIndices = indices.row;\n        this.columnIndices = indices.column;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.rowIndices[rowIndex], this.columnIndices[columnIndex], value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.rowIndices[rowIndex], this.columnIndices[columnIndex]);\n    }\n}\n\nmodule.exports = MatrixSelectionView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/views/selection.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixColumnView extends BaseView {\n    constructor(matrix, column) {\n        super(matrix, matrix.rows, 1);\n        this.column = column;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(rowIndex, this.column, value);\n        return this;\n    }\n\n    get(rowIndex) {\n        return this.matrix.get(rowIndex, this.column);\n    }\n}\n\nmodule.exports = MatrixColumnView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/views/column.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixFlipRowView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.rows, matrix.columns);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\n    }\n}\n\nmodule.exports = MatrixFlipRowView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/views/flipRow.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixFlipColumnView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.rows, matrix.columns);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\n    }\n}\n\nmodule.exports = MatrixFlipColumnView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/views/flipColumn.js","'use strict';\n\nvar Matrix = require('./matrix').Matrix;\n\nvar SingularValueDecomposition = require('./dc/svd');\nvar EigenvalueDecomposition = require('./dc/evd');\nvar LuDecomposition = require('./dc/lu');\nvar QrDecomposition = require('./dc/qr');\nvar CholeskyDecomposition = require('./dc/cholesky');\n\nfunction inverse(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    return solve(matrix, Matrix.eye(matrix.rows));\n}\n\n/**\n * Returns the inverse\n * @memberOf Matrix\n * @static\n * @param {Matrix} matrix\n * @return {Matrix} matrix\n * @alias inv\n */\nMatrix.inverse = Matrix.inv = inverse;\n\n/**\n * Returns the inverse\n * @memberOf Matrix\n * @static\n * @param {Matrix} matrix\n * @return {Matrix} matrix\n * @alias inv\n */\nMatrix.prototype.inverse = Matrix.prototype.inv = function () {\n    return inverse(this);\n};\n\nfunction solve(leftHandSide, rightHandSide) {\n    leftHandSide = Matrix.checkMatrix(leftHandSide);\n    rightHandSide = Matrix.checkMatrix(rightHandSide);\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n}\n\nMatrix.solve = solve;\nMatrix.prototype.solve = function (other) {\n    return solve(this, other);\n};\n\nmodule.exports = {\n    SingularValueDecomposition: SingularValueDecomposition,\n    SVD: SingularValueDecomposition,\n    EigenvalueDecomposition: EigenvalueDecomposition,\n    EVD: EigenvalueDecomposition,\n    LuDecomposition: LuDecomposition,\n    LU: LuDecomposition,\n    QrDecomposition: QrDecomposition,\n    QR: QrDecomposition,\n    CholeskyDecomposition: CholeskyDecomposition,\n    CHO: CholeskyDecomposition,\n    inverse: inverse,\n    solve: solve\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/decompositions.js","'use strict';\n\nconst Matrix = require('../matrix').Matrix;\nconst util = require('./util');\nconst hypotenuse = util.hypotenuse;\nconst getFilled2DArray = util.getFilled2DArray;\n\nconst defaultOptions = {\n    assumeSymmetric: false\n};\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\nfunction EigenvalueDecomposition(matrix, options) {\n    options = Object.assign({}, defaultOptions, options);\n    if (!(this instanceof EigenvalueDecomposition)) {\n        return new EigenvalueDecomposition(matrix, options);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n        throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns,\n        V = getFilled2DArray(n, n, 0),\n        d = new Array(n),\n        e = new Array(n),\n        value = matrix,\n        i, j;\n\n    var isSymmetric = false;\n    if (options.assumeSymmetric) {\n        isSymmetric = true;\n    } else {\n        isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                V[i][j] = value.get(i, j);\n            }\n        }\n        tred2(n, e, d, V);\n        tql2(n, e, d, V);\n    } else {\n        var H = getFilled2DArray(n, n, 0),\n            ort = new Array(n);\n        for (j = 0; j < n; j++) {\n            for (i = 0; i < n; i++) {\n                H[i][j] = value.get(i, j);\n            }\n        }\n        orthes(n, H, ort, V);\n        hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n}\n\nEigenvalueDecomposition.prototype = {\n    get realEigenvalues() {\n        return this.d;\n    },\n    get imaginaryEigenvalues() {\n        return this.e;\n    },\n    get eigenvectorMatrix() {\n        if (!Matrix.isMatrix(this.V)) {\n            this.V = new Matrix(this.V);\n        }\n        return this.V;\n    },\n    get diagonalMatrix() {\n        var n = this.n,\n            e = this.e,\n            d = this.d,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                X[i][j] = 0;\n            }\n            X[i][i] = d[i];\n            if (e[i] > 0) {\n                X[i][i + 1] = e[i];\n            } else if (e[i] < 0) {\n                X[i][i - 1] = e[i];\n            }\n        }\n        return X;\n    }\n};\n\nfunction tred2(n, e, d, V) {\n\n    var f, g, h, i, j, k,\n        hh, scale;\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n    }\n\n    for (i = n - 1; i > 0; i--) {\n        scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n            scale = scale + Math.abs(d[k]);\n        }\n\n        if (scale === 0) {\n            e[i] = d[i - 1];\n            for (j = 0; j < i; j++) {\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n                V[j][i] = 0;\n            }\n        } else {\n            for (k = 0; k < i; k++) {\n                d[k] /= scale;\n                h += d[k] * d[k];\n            }\n\n            f = d[i - 1];\n            g = Math.sqrt(h);\n            if (f > 0) {\n                g = -g;\n            }\n\n            e[i] = scale * g;\n            h = h - f * g;\n            d[i - 1] = f - g;\n            for (j = 0; j < i; j++) {\n                e[j] = 0;\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                V[j][i] = f;\n                g = e[j] + V[j][j] * f;\n                for (k = j + 1; k <= i - 1; k++) {\n                    g += V[k][j] * d[k];\n                    e[k] += V[k][j] * f;\n                }\n                e[j] = g;\n            }\n\n            f = 0;\n            for (j = 0; j < i; j++) {\n                e[j] /= h;\n                f += e[j] * d[j];\n            }\n\n            hh = f / (h + h);\n            for (j = 0; j < i; j++) {\n                e[j] -= hh * d[j];\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                g = e[j];\n                for (k = j; k <= i - 1; k++) {\n                    V[k][j] -= (f * e[k] + g * d[k]);\n                }\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n            }\n        }\n        d[i] = h;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        V[n - 1][i] = V[i][i];\n        V[i][i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n            for (k = 0; k <= i; k++) {\n                d[k] = V[k][i + 1] / h;\n            }\n\n            for (j = 0; j <= i; j++) {\n                g = 0;\n                for (k = 0; k <= i; k++) {\n                    g += V[k][i + 1] * V[k][j];\n                }\n                for (k = 0; k <= i; k++) {\n                    V[k][j] -= g * d[k];\n                }\n            }\n        }\n\n        for (k = 0; k <= i; k++) {\n            V[k][i + 1] = 0;\n        }\n    }\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n        V[n - 1][j] = 0;\n    }\n\n    V[n - 1][n - 1] = 1;\n    e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n\n    var g, h, i, j, k, l, m, p, r,\n        dl1, c, c2, c3, el1, s, s2,\n        iter;\n\n    for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n    }\n\n    e[n - 1] = 0;\n\n    var f = 0,\n        tst1 = 0,\n        eps = Math.pow(2, -52);\n\n    for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        m = l;\n        while (m < n) {\n            if (Math.abs(e[m]) <= eps * tst1) {\n                break;\n            }\n            m++;\n        }\n\n        if (m > l) {\n            iter = 0;\n            do {\n                iter = iter + 1;\n\n                g = d[l];\n                p = (d[l + 1] - g) / (2 * e[l]);\n                r = hypotenuse(p, 1);\n                if (p < 0) {\n                    r = -r;\n                }\n\n                d[l] = e[l] / (p + r);\n                d[l + 1] = e[l] * (p + r);\n                dl1 = d[l + 1];\n                h = g - d[l];\n                for (i = l + 2; i < n; i++) {\n                    d[i] -= h;\n                }\n\n                f = f + h;\n\n                p = d[m];\n                c = 1;\n                c2 = c;\n                c3 = c;\n                el1 = e[l + 1];\n                s = 0;\n                s2 = 0;\n                for (i = m - 1; i >= l; i--) {\n                    c3 = c2;\n                    c2 = c;\n                    s2 = s;\n                    g = c * e[i];\n                    h = c * p;\n                    r = hypotenuse(p, e[i]);\n                    e[i + 1] = s * r;\n                    s = e[i] / r;\n                    c = p / r;\n                    p = c * d[i] - s * g;\n                    d[i + 1] = h + s * (c * g + s * d[i]);\n\n                    for (k = 0; k < n; k++) {\n                        h = V[k][i + 1];\n                        V[k][i + 1] = s * V[k][i] + c * h;\n                        V[k][i] = c * V[k][i] - s * h;\n                    }\n                }\n\n                p = -s * s2 * c3 * el1 * e[l] / dl1;\n                e[l] = s * p;\n                d[l] = c * p;\n\n            }\n            while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n            if (d[j] < p) {\n                k = j;\n                p = d[j];\n            }\n        }\n\n        if (k !== i) {\n            d[k] = d[i];\n            d[i] = p;\n            for (j = 0; j < n; j++) {\n                p = V[j][i];\n                V[j][i] = V[j][k];\n                V[j][k] = p;\n            }\n        }\n    }\n}\n\nfunction orthes(n, H, ort, V) {\n\n    var low = 0,\n        high = n - 1,\n        f, g, h, i, j, m,\n        scale;\n\n    for (m = low + 1; m <= high - 1; m++) {\n        scale = 0;\n        for (i = m; i <= high; i++) {\n            scale = scale + Math.abs(H[i][m - 1]);\n        }\n\n        if (scale !== 0) {\n            h = 0;\n            for (i = high; i >= m; i--) {\n                ort[i] = H[i][m - 1] / scale;\n                h += ort[i] * ort[i];\n            }\n\n            g = Math.sqrt(h);\n            if (ort[m] > 0) {\n                g = -g;\n            }\n\n            h = h - ort[m] * g;\n            ort[m] = ort[m] - g;\n\n            for (j = m; j < n; j++) {\n                f = 0;\n                for (i = high; i >= m; i--) {\n                    f += ort[i] * H[i][j];\n                }\n\n                f = f / h;\n                for (i = m; i <= high; i++) {\n                    H[i][j] -= f * ort[i];\n                }\n            }\n\n            for (i = 0; i <= high; i++) {\n                f = 0;\n                for (j = high; j >= m; j--) {\n                    f += ort[j] * H[i][j];\n                }\n\n                f = f / h;\n                for (j = m; j <= high; j++) {\n                    H[i][j] -= f * ort[j];\n                }\n            }\n\n            ort[m] = scale * ort[m];\n            H[m][m - 1] = scale * g;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            V[i][j] = (i === j ? 1 : 0);\n        }\n    }\n\n    for (m = high - 1; m >= low + 1; m--) {\n        if (H[m][m - 1] !== 0) {\n            for (i = m + 1; i <= high; i++) {\n                ort[i] = H[i][m - 1];\n            }\n\n            for (j = m; j <= high; j++) {\n                g = 0;\n                for (i = m; i <= high; i++) {\n                    g += ort[i] * V[i][j];\n                }\n\n                g = (g / ort[m]) / H[m][m - 1];\n                for (i = m; i <= high; i++) {\n                    V[i][j] += g * ort[i];\n                }\n            }\n        }\n    }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n    var n = nn - 1,\n        low = 0,\n        high = nn - 1,\n        eps = Math.pow(2, -52),\n        exshift = 0,\n        norm = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n        s = 0,\n        z = 0,\n        iter = 0,\n        i, j, k, l, m, t, w, x, y,\n        ra, sa, vr, vi,\n        notlast, cdivres;\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            d[i] = H[i][i];\n            e[i] = 0;\n        }\n\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n            norm = norm + Math.abs(H[i][j]);\n        }\n    }\n\n    while (n >= low) {\n        l = n;\n        while (l > low) {\n            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n            if (s === 0) {\n                s = norm;\n            }\n            if (Math.abs(H[l][l - 1]) < eps * s) {\n                break;\n            }\n            l--;\n        }\n\n        if (l === n) {\n            H[n][n] = H[n][n] + exshift;\n            d[n] = H[n][n];\n            e[n] = 0;\n            n--;\n            iter = 0;\n        } else if (l === n - 1) {\n            w = H[n][n - 1] * H[n - 1][n];\n            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n            q = p * p + w;\n            z = Math.sqrt(Math.abs(q));\n            H[n][n] = H[n][n] + exshift;\n            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n            x = H[n][n];\n\n            if (q >= 0) {\n                z = (p >= 0) ? (p + z) : (p - z);\n                d[n - 1] = x + z;\n                d[n] = d[n - 1];\n                if (z !== 0) {\n                    d[n] = x - w / z;\n                }\n                e[n - 1] = 0;\n                e[n] = 0;\n                x = H[n][n - 1];\n                s = Math.abs(x) + Math.abs(z);\n                p = x / s;\n                q = z / s;\n                r = Math.sqrt(p * p + q * q);\n                p = p / r;\n                q = q / r;\n\n                for (j = n - 1; j < nn; j++) {\n                    z = H[n - 1][j];\n                    H[n - 1][j] = q * z + p * H[n][j];\n                    H[n][j] = q * H[n][j] - p * z;\n                }\n\n                for (i = 0; i <= n; i++) {\n                    z = H[i][n - 1];\n                    H[i][n - 1] = q * z + p * H[i][n];\n                    H[i][n] = q * H[i][n] - p * z;\n                }\n\n                for (i = low; i <= high; i++) {\n                    z = V[i][n - 1];\n                    V[i][n - 1] = q * z + p * V[i][n];\n                    V[i][n] = q * V[i][n] - p * z;\n                }\n            } else {\n                d[n - 1] = x + p;\n                d[n] = x + p;\n                e[n - 1] = z;\n                e[n] = -z;\n            }\n\n            n = n - 2;\n            iter = 0;\n        } else {\n            x = H[n][n];\n            y = 0;\n            w = 0;\n            if (l < n) {\n                y = H[n - 1][n - 1];\n                w = H[n][n - 1] * H[n - 1][n];\n            }\n\n            if (iter === 10) {\n                exshift += x;\n                for (i = low; i <= n; i++) {\n                    H[i][i] -= x;\n                }\n                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n                x = y = 0.75 * s;\n                w = -0.4375 * s * s;\n            }\n\n            if (iter === 30) {\n                s = (y - x) / 2;\n                s = s * s + w;\n                if (s > 0) {\n                    s = Math.sqrt(s);\n                    if (y < x) {\n                        s = -s;\n                    }\n                    s = x - w / ((y - x) / 2 + s);\n                    for (i = low; i <= n; i++) {\n                        H[i][i] -= s;\n                    }\n                    exshift += s;\n                    x = y = w = 0.964;\n                }\n            }\n\n            iter = iter + 1;\n\n            m = n - 2;\n            while (m >= l) {\n                z = H[m][m];\n                r = x - z;\n                s = y - z;\n                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n                q = H[m + 1][m + 1] - z - r - s;\n                r = H[m + 2][m + 1];\n                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                p = p / s;\n                q = q / s;\n                r = r / s;\n                if (m === l) {\n                    break;\n                }\n                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n                    break;\n                }\n                m--;\n            }\n\n            for (i = m + 2; i <= n; i++) {\n                H[i][i - 2] = 0;\n                if (i > m + 2) {\n                    H[i][i - 3] = 0;\n                }\n            }\n\n            for (k = m; k <= n - 1; k++) {\n                notlast = (k !== n - 1);\n                if (k !== m) {\n                    p = H[k][k - 1];\n                    q = H[k + 1][k - 1];\n                    r = (notlast ? H[k + 2][k - 1] : 0);\n                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                    if (x !== 0) {\n                        p = p / x;\n                        q = q / x;\n                        r = r / x;\n                    }\n                }\n\n                if (x === 0) {\n                    break;\n                }\n\n                s = Math.sqrt(p * p + q * q + r * r);\n                if (p < 0) {\n                    s = -s;\n                }\n\n                if (s !== 0) {\n                    if (k !== m) {\n                        H[k][k - 1] = -s * x;\n                    } else if (l !== m) {\n                        H[k][k - 1] = -H[k][k - 1];\n                    }\n\n                    p = p + s;\n                    x = p / s;\n                    y = q / s;\n                    z = r / s;\n                    q = q / p;\n                    r = r / p;\n\n                    for (j = k; j < nn; j++) {\n                        p = H[k][j] + q * H[k + 1][j];\n                        if (notlast) {\n                            p = p + r * H[k + 2][j];\n                            H[k + 2][j] = H[k + 2][j] - p * z;\n                        }\n\n                        H[k][j] = H[k][j] - p * x;\n                        H[k + 1][j] = H[k + 1][j] - p * y;\n                    }\n\n                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n                        p = x * H[i][k] + y * H[i][k + 1];\n                        if (notlast) {\n                            p = p + z * H[i][k + 2];\n                            H[i][k + 2] = H[i][k + 2] - p * r;\n                        }\n\n                        H[i][k] = H[i][k] - p;\n                        H[i][k + 1] = H[i][k + 1] - p * q;\n                    }\n\n                    for (i = low; i <= high; i++) {\n                        p = x * V[i][k] + y * V[i][k + 1];\n                        if (notlast) {\n                            p = p + z * V[i][k + 2];\n                            V[i][k + 2] = V[i][k + 2] - p * r;\n                        }\n\n                        V[i][k] = V[i][k] - p;\n                        V[i][k + 1] = V[i][k + 1] - p * q;\n                    }\n                }\n            }\n        }\n    }\n\n    if (norm === 0) {\n        return;\n    }\n\n    for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n\n        if (q === 0) {\n            l = n;\n            H[n][n] = 1;\n            for (i = n - 1; i >= 0; i--) {\n                w = H[i][i] - p;\n                r = 0;\n                for (j = l; j <= n; j++) {\n                    r = r + H[i][j] * H[j][n];\n                }\n\n                if (e[i] < 0) {\n                    z = w;\n                    s = r;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                        t = (x * s - z * r) / q;\n                        H[i][n] = t;\n                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n                    }\n\n                    t = Math.abs(H[i][n]);\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        } else if (q < 0) {\n            l = n - 1;\n\n            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n                H[n - 1][n - 1] = q / H[n][n - 1];\n                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n            } else {\n                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n                H[n - 1][n - 1] = cdivres[0];\n                H[n - 1][n] = cdivres[1];\n            }\n\n            H[n][n - 1] = 0;\n            H[n][n] = 1;\n            for (i = n - 2; i >= 0; i--) {\n                ra = 0;\n                sa = 0;\n                for (j = l; j <= n; j++) {\n                    ra = ra + H[i][j] * H[j][n - 1];\n                    sa = sa + H[i][j] * H[j][n];\n                }\n\n                w = H[i][i] - p;\n\n                if (e[i] < 0) {\n                    z = w;\n                    r = ra;\n                    s = sa;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        cdivres = cdiv(-ra, -sa, w, q);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                        vi = (d[i] - p) * 2 * q;\n                        if (vr === 0 && vi === 0) {\n                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                        }\n                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n                        } else {\n                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n                            H[i + 1][n - 1] = cdivres[0];\n                            H[i + 1][n] = cdivres[1];\n                        }\n                    }\n\n                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n - 1] = H[j][n - 1] / t;\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            for (j = i; j < nn; j++) {\n                V[i][j] = H[i][j];\n            }\n        }\n    }\n\n    for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n            z = 0;\n            for (k = low; k <= Math.min(j, high); k++) {\n                z = z + V[i][k] * H[k][j];\n            }\n            V[i][j] = z;\n        }\n    }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n    var r, d;\n    if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        return [(xr + r * xi) / d, (xi - r * xr) / d];\n    } else {\n        r = yr / yi;\n        d = yi + r * yr;\n        return [(r * xr + xi) / d, (r * xi - xr) / d];\n    }\n}\n\nmodule.exports = EigenvalueDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/dc/evd.js","'use strict';\n\nvar Matrix = require('../matrix').Matrix;\nvar hypotenuse = require('./util').hypotenuse;\n\n//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\nfunction QrDecomposition(value) {\n    if (!(this instanceof QrDecomposition)) {\n        return new QrDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n\n    var qr = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        rdiag = new Array(n),\n        i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) {\n            nrm = hypotenuse(nrm, qr[i][k]);\n        }\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) {\n                nrm = -nrm;\n            }\n            for (i = k; i < m; i++) {\n                qr[i][k] /= nrm;\n            }\n            qr[k][k] += 1;\n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * qr[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    qr[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n}\n\nQrDecomposition.prototype = {\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var qr = this.QR,\n            m = qr.rows;\n\n        if (value.rows !== m) {\n            throw new Error('Matrix row dimensions must agree');\n        }\n        if (!this.isFullRank()) {\n            throw new Error('Matrix is rank deficient');\n        }\n\n        var count = value.columns;\n        var X = value.clone();\n        var n = qr.columns;\n        var i, j, k, s;\n\n        for (k = 0; k < n; k++) {\n            for (j = 0; j < count; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * X[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    X[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        for (k = n - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= this.Rdiag[k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * qr[i][k];\n                }\n            }\n        }\n\n        return X.subMatrix(0, n - 1, 0, count - 1);\n    },\n    isFullRank: function () {\n        var columns = this.QR.columns;\n        for (var i = 0; i < columns; i++) {\n            if (this.Rdiag[i] === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n    get upperTriangularMatrix() {\n        var qr = this.QR,\n            n = qr.columns,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                if (i < j) {\n                    X[i][j] = qr[i][j];\n                } else if (i === j) {\n                    X[i][j] = this.Rdiag[i];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get orthogonalMatrix() {\n        var qr = this.QR,\n            rows = qr.rows,\n            columns = qr.columns,\n            X = new Matrix(rows, columns),\n            i, j, k, s;\n\n        for (k = columns - 1; k >= 0; k--) {\n            for (i = 0; i < rows; i++) {\n                X[i][k] = 0;\n            }\n            X[k][k] = 1;\n            for (j = k; j < columns; j++) {\n                if (qr[k][k] !== 0) {\n                    s = 0;\n                    for (i = k; i < rows; i++) {\n                        s += qr[i][k] * X[i][j];\n                    }\n\n                    s = -s / qr[k][k];\n\n                    for (i = k; i < rows; i++) {\n                        X[i][j] += s * qr[i][k];\n                    }\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = QrDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/dc/qr.js","'use strict';\n\nvar Matrix = require('../matrix').Matrix;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\nfunction CholeskyDecomposition(value) {\n    if (!(this instanceof CholeskyDecomposition)) {\n        return new CholeskyDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n    if (!value.isSymmetric()) {\n        throw new Error('Matrix is not symmetric');\n    }\n\n    var a = value,\n        dimension = a.rows,\n        l = new Matrix(dimension, dimension),\n        positiveDefinite = true,\n        i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n        var Lrowj = l[j];\n        var d = 0;\n        for (k = 0; k < j; k++) {\n            var Lrowk = l[k];\n            var s = 0;\n            for (i = 0; i < k; i++) {\n                s += Lrowk[i] * Lrowj[i];\n            }\n            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n            d = d + s * s;\n        }\n\n        d = a[j][j] - d;\n\n        positiveDefinite &= (d > 0);\n        l[j][j] = Math.sqrt(Math.max(d, 0));\n        for (k = j + 1; k < dimension; k++) {\n            l[j][k] = 0;\n        }\n    }\n\n    if (!positiveDefinite) {\n        throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n}\n\nCholeskyDecomposition.prototype = {\n    get lowerTriangularMatrix() {\n        return this.L;\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var l = this.L,\n            dimension = l.rows;\n\n        if (value.rows !== dimension) {\n            throw new Error('Matrix dimensions do not match');\n        }\n\n        var count = value.columns,\n            B = value.clone(),\n            i, j, k;\n\n        for (k = 0; k < dimension; k++) {\n            for (j = 0; j < count; j++) {\n                for (i = 0; i < k; i++) {\n                    B[k][j] -= B[i][j] * l[k][i];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        for (k = dimension - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                for (i = k + 1; i < dimension; i++) {\n                    B[k][j] -= B[i][j] * l[i][k];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        return B;\n    }\n};\n\nmodule.exports = CholeskyDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-optimize-lorentzian/node_modules/ml-matrix/src/dc/cholesky.js","'use strict';\n\nconst errorCalculation = require('./errorCalculation');\nconst step = require('./step');\n\nconst defaultOptions = {\n    damping: undefined,\n    gradientDifference: 10e-2,\n    initialValues: undefined,\n    maxIterations: 100,\n    errorTolerance: 10e-3\n};\n\n/**\n * Curve fitting algorithm\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {function} parameterizedFunction - The parameters and returns a function with the independent variable as a parameter\n * @param {object} [options] - Options object\n * @param {number} [options.damping = undefined] - Levenberg-Marquardt parameter\n * @param {number} [options.gradientDifference = 10e-2] - Adjustment for decrease the damping parameter\n * @param {Array<number>} [options.initialValues = undefined] - Array of initial parameter values\n * @param {number} [options.maxIterations = 100] - Maximum of allowed iterations\n * @param {number} [options.errorTolerance = 10e-3] - Minimum uncertainty allowed for each point\n * @return {{parameterValues: Array<number>, parameterError: number, iterations: number}}\n */\nfunction levenbergMarquardt(data, parameterizedFunction, options) {\n    // verify that damping is not undefined\n    if ((!options) || (!options.damping) || (options.damping <= 0)) {\n        throw new TypeError('The damping option should be a positive number');\n    }\n\n    // assign default values\n    options = Object.assign({}, defaultOptions, options);\n\n    // fill with default value for initialValues\n    if (!options.initialValues) {\n        options.initialValues = new Array(parameterizedFunction.length);\n\n        for (var i = 0; i < parameterizedFunction.length; i++) {\n            options.initialValues[i] = 1;\n        }\n    }\n\n    // check that the data has the correct format\n    if (!data.x || !data.y) {\n        throw new TypeError('The data parameter should have a x and y elements');\n    } else if ((data.x.constructor !== Array) || (data.x.length < 2) ||\n               (data.y.constructor !== Array) || (data.y.length < 2)) {\n        throw new TypeError('The data parameter elements should be an array with more than 2 points');\n    }\n\n    const dataLen = data.x.length;\n    if (dataLen !== data.y.length) {\n        throw new RangeError('The data parameter elements should have the same size');\n    }\n\n    // initial parameters\n    var parameters = options.initialValues;\n\n    // check errorCalculation\n    var error = errorCalculation(data, parameters, parameterizedFunction);\n    var converged = error <= options.errorTolerance;\n\n    for (var iteration = 0; (iteration < options.maxIterations) && !converged; iteration++) {\n        // step function\n        parameters = step(data, parameters, options.damping, options.gradientDifference, parameterizedFunction);\n\n        // reevaluate errorCalculation\n        error = errorCalculation(data, parameters, parameterizedFunction);\n        converged = error <= options.errorTolerance;\n    }\n\n\n    // return example\n    return {\n        parameterValues: parameters,\n        parameterError: error,\n        iterations: iteration\n    };\n}\n\nmodule.exports = levenbergMarquardt;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-levenberg-marquardt/src/index.js","'use strict';\n\n/**\n * Calculate current error\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} parameters - Array of current parameter values\n * @param {function} parameterizedFunction - The parameters and returns a function with the independent variable as a parameter\n * @return {number}\n */\nfunction errorCalculation(data, parameters, parameterizedFunction) {\n    var error = 0;\n    const func = parameterizedFunction(...parameters);\n\n    for (var i = 0; i < data.x.length; i++) {\n        error += Math.abs(data.y[i] - func(data.x[i]));\n    }\n\n    return error;\n}\n\nmodule.exports = errorCalculation;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-levenberg-marquardt/src/errorCalculation.js","'use strict';\n\nconst Matrix = require('ml-matrix');\n\n/**\n * Difference of the matrix function over the parameters\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} params - Array of previous parameter values\n * @param {number} gradientDifference - Adjustment for decrease the damping parameter\n * @param {function} paramFunction - The parameters and returns a function with the independent variable as a parameter\n * @return {Matrix}\n */\nfunction gradientFunction(data, params, gradientDifference, paramFunction) {\n    const n = paramFunction.length;\n    const m = data.x.length;\n\n    var ans = new Array(n);\n    const func = paramFunction(...params);\n\n    for (var param = 0; param < n; param++) {\n        ans[param] = new Array(m);\n\n        var auxParams = params.concat();\n        auxParams[param] += gradientDifference;\n        var funcParam = paramFunction(...auxParams);\n\n        for (var point = 0; point < m; point++) {\n            ans[param][point] = func(data.x[point]) - funcParam(data.x[point]);\n        }\n    }\n\n    return new Matrix(ans);\n}\n\n/**\n * Matrix function over the samples\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} params - Array of previous parameter values\n * @param {function} paramFunction - The parameters and returns a function with the independent variable as a parameter\n * @return {Matrix}\n */\nfunction matrixFunction(data, params, paramFunction) {\n    const m = data.x.length;\n\n    var ans = new Array(m);\n    const func = paramFunction(...params);\n\n    for (var point = 0; point < m; point++) {\n        ans[point] = data.y[point] - func(data.x[point]);\n    }\n\n    return new Matrix([ans]);\n}\n\n/**\n * Iteration for Levenberg-Marquardt\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} params - Array of previous parameter values\n * @param {number} damping - Levenberg-Marquardt parameter\n * @param {number} gradientDifference - Adjustment for decrease the damping parameter\n * @param {function} parameterizedFunction - The parameters and returns a function with the independent variable as a parameter\n * @return {Array<number>}\n */\nfunction step(data, params, damping, gradientDifference, parameterizedFunction) {\n    var identity = Matrix.eye(parameterizedFunction.length)\n        .mul(damping * gradientDifference * gradientDifference);\n    var gradientFunc = gradientFunction(data, params, gradientDifference, parameterizedFunction);\n    var matrixFunc = matrixFunction(data, params, parameterizedFunction).transpose();\n    params = new Matrix([params]);\n\n    var inverse = Matrix.inv(identity.add(gradientFunc.mmul(gradientFunc.transposeView())));\n    params = params.sub(\n        ((inverse.mmul(gradientFunc)).mmul(matrixFunc).mul(gradientDifference)).transposeView()\n    );\n    return params.to1DArray();\n}\n\nmodule.exports = step;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-levenberg-marquardt/src/step.js","'use strict';\n\nmodule.exports = require('./matrix').Matrix;\nmodule.exports.Decompositions = module.exports.DC = require('./decompositions');\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/index.js","'use strict';\n\nif (!Symbol.species) {\n    Symbol.species = Symbol.for('@@species');\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/symbol-species.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixTransposeView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.columns, matrix.rows);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(columnIndex, rowIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(columnIndex, rowIndex);\n    }\n}\n\nmodule.exports = MatrixTransposeView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/views/transpose.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixRowView extends BaseView {\n    constructor(matrix, row) {\n        super(matrix, 1, matrix.columns);\n        this.row = row;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.row, columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.row, columnIndex);\n    }\n}\n\nmodule.exports = MatrixRowView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/views/row.js","'use strict';\n\nvar BaseView = require('./base');\nvar util = require('../util');\n\nclass MatrixSubView extends BaseView {\n    constructor(matrix, startRow, endRow, startColumn, endColumn) {\n        util.checkRange(matrix, startRow, endRow, startColumn, endColumn);\n        super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n        this.startRow = startRow;\n        this.startColumn = startColumn;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.startRow + rowIndex, this.startColumn + columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.startRow + rowIndex, this.startColumn + columnIndex);\n    }\n}\n\nmodule.exports = MatrixSubView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/views/sub.js","'use strict';\n\nvar BaseView = require('./base');\nvar util = require('../util');\n\nclass MatrixSelectionView extends BaseView {\n    constructor(matrix, rowIndices, columnIndices) {\n        var indices = util.checkIndices(matrix, rowIndices, columnIndices);\n        super(matrix, indices.row.length, indices.column.length);\n        this.rowIndices = indices.row;\n        this.columnIndices = indices.column;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.rowIndices[rowIndex], this.columnIndices[columnIndex], value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.rowIndices[rowIndex], this.columnIndices[columnIndex]);\n    }\n}\n\nmodule.exports = MatrixSelectionView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/views/selection.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixColumnView extends BaseView {\n    constructor(matrix, column) {\n        super(matrix, matrix.rows, 1);\n        this.column = column;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(rowIndex, this.column, value);\n        return this;\n    }\n\n    get(rowIndex) {\n        return this.matrix.get(rowIndex, this.column);\n    }\n}\n\nmodule.exports = MatrixColumnView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/views/column.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixFlipRowView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.rows, matrix.columns);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\n    }\n}\n\nmodule.exports = MatrixFlipRowView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/views/flipRow.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixFlipColumnView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.rows, matrix.columns);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\n    }\n}\n\nmodule.exports = MatrixFlipColumnView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/views/flipColumn.js","'use strict';\n\nvar Matrix = require('./matrix').Matrix;\n\nvar SingularValueDecomposition = require('./dc/svd');\nvar EigenvalueDecomposition = require('./dc/evd');\nvar LuDecomposition = require('./dc/lu');\nvar QrDecomposition = require('./dc/qr');\nvar CholeskyDecomposition = require('./dc/cholesky');\n\nfunction inverse(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    return solve(matrix, Matrix.eye(matrix.rows));\n}\n\n/**\n * Returns the inverse\n * @memberOf Matrix\n * @static\n * @param {Matrix} matrix\n * @return {Matrix} matrix\n * @alias inv\n */\nMatrix.inverse = Matrix.inv = inverse;\n\n/**\n * Returns the inverse\n * @memberOf Matrix\n * @static\n * @param {Matrix} matrix\n * @return {Matrix} matrix\n * @alias inv\n */\nMatrix.prototype.inverse = Matrix.prototype.inv = function () {\n    return inverse(this);\n};\n\nfunction solve(leftHandSide, rightHandSide) {\n    leftHandSide = Matrix.checkMatrix(leftHandSide);\n    rightHandSide = Matrix.checkMatrix(rightHandSide);\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n}\n\nMatrix.solve = solve;\nMatrix.prototype.solve = function (other) {\n    return solve(this, other);\n};\n\nmodule.exports = {\n    SingularValueDecomposition: SingularValueDecomposition,\n    SVD: SingularValueDecomposition,\n    EigenvalueDecomposition: EigenvalueDecomposition,\n    EVD: EigenvalueDecomposition,\n    LuDecomposition: LuDecomposition,\n    LU: LuDecomposition,\n    QrDecomposition: QrDecomposition,\n    QR: QrDecomposition,\n    CholeskyDecomposition: CholeskyDecomposition,\n    CHO: CholeskyDecomposition,\n    inverse: inverse,\n    solve: solve\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/decompositions.js","'use strict';\n\nconst Matrix = require('../matrix').Matrix;\nconst util = require('./util');\nconst hypotenuse = util.hypotenuse;\nconst getFilled2DArray = util.getFilled2DArray;\n\nconst defaultOptions = {\n    assumeSymmetric: false\n};\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\nfunction EigenvalueDecomposition(matrix, options) {\n    options = Object.assign({}, defaultOptions, options);\n    if (!(this instanceof EigenvalueDecomposition)) {\n        return new EigenvalueDecomposition(matrix, options);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n        throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns,\n        V = getFilled2DArray(n, n, 0),\n        d = new Array(n),\n        e = new Array(n),\n        value = matrix,\n        i, j;\n\n    var isSymmetric = false;\n    if (options.assumeSymmetric) {\n        isSymmetric = true;\n    } else {\n        isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                V[i][j] = value.get(i, j);\n            }\n        }\n        tred2(n, e, d, V);\n        tql2(n, e, d, V);\n    } else {\n        var H = getFilled2DArray(n, n, 0),\n            ort = new Array(n);\n        for (j = 0; j < n; j++) {\n            for (i = 0; i < n; i++) {\n                H[i][j] = value.get(i, j);\n            }\n        }\n        orthes(n, H, ort, V);\n        hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n}\n\nEigenvalueDecomposition.prototype = {\n    get realEigenvalues() {\n        return this.d;\n    },\n    get imaginaryEigenvalues() {\n        return this.e;\n    },\n    get eigenvectorMatrix() {\n        if (!Matrix.isMatrix(this.V)) {\n            this.V = new Matrix(this.V);\n        }\n        return this.V;\n    },\n    get diagonalMatrix() {\n        var n = this.n,\n            e = this.e,\n            d = this.d,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                X[i][j] = 0;\n            }\n            X[i][i] = d[i];\n            if (e[i] > 0) {\n                X[i][i + 1] = e[i];\n            } else if (e[i] < 0) {\n                X[i][i - 1] = e[i];\n            }\n        }\n        return X;\n    }\n};\n\nfunction tred2(n, e, d, V) {\n\n    var f, g, h, i, j, k,\n        hh, scale;\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n    }\n\n    for (i = n - 1; i > 0; i--) {\n        scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n            scale = scale + Math.abs(d[k]);\n        }\n\n        if (scale === 0) {\n            e[i] = d[i - 1];\n            for (j = 0; j < i; j++) {\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n                V[j][i] = 0;\n            }\n        } else {\n            for (k = 0; k < i; k++) {\n                d[k] /= scale;\n                h += d[k] * d[k];\n            }\n\n            f = d[i - 1];\n            g = Math.sqrt(h);\n            if (f > 0) {\n                g = -g;\n            }\n\n            e[i] = scale * g;\n            h = h - f * g;\n            d[i - 1] = f - g;\n            for (j = 0; j < i; j++) {\n                e[j] = 0;\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                V[j][i] = f;\n                g = e[j] + V[j][j] * f;\n                for (k = j + 1; k <= i - 1; k++) {\n                    g += V[k][j] * d[k];\n                    e[k] += V[k][j] * f;\n                }\n                e[j] = g;\n            }\n\n            f = 0;\n            for (j = 0; j < i; j++) {\n                e[j] /= h;\n                f += e[j] * d[j];\n            }\n\n            hh = f / (h + h);\n            for (j = 0; j < i; j++) {\n                e[j] -= hh * d[j];\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                g = e[j];\n                for (k = j; k <= i - 1; k++) {\n                    V[k][j] -= (f * e[k] + g * d[k]);\n                }\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n            }\n        }\n        d[i] = h;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        V[n - 1][i] = V[i][i];\n        V[i][i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n            for (k = 0; k <= i; k++) {\n                d[k] = V[k][i + 1] / h;\n            }\n\n            for (j = 0; j <= i; j++) {\n                g = 0;\n                for (k = 0; k <= i; k++) {\n                    g += V[k][i + 1] * V[k][j];\n                }\n                for (k = 0; k <= i; k++) {\n                    V[k][j] -= g * d[k];\n                }\n            }\n        }\n\n        for (k = 0; k <= i; k++) {\n            V[k][i + 1] = 0;\n        }\n    }\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n        V[n - 1][j] = 0;\n    }\n\n    V[n - 1][n - 1] = 1;\n    e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n\n    var g, h, i, j, k, l, m, p, r,\n        dl1, c, c2, c3, el1, s, s2,\n        iter;\n\n    for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n    }\n\n    e[n - 1] = 0;\n\n    var f = 0,\n        tst1 = 0,\n        eps = Math.pow(2, -52);\n\n    for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        m = l;\n        while (m < n) {\n            if (Math.abs(e[m]) <= eps * tst1) {\n                break;\n            }\n            m++;\n        }\n\n        if (m > l) {\n            iter = 0;\n            do {\n                iter = iter + 1;\n\n                g = d[l];\n                p = (d[l + 1] - g) / (2 * e[l]);\n                r = hypotenuse(p, 1);\n                if (p < 0) {\n                    r = -r;\n                }\n\n                d[l] = e[l] / (p + r);\n                d[l + 1] = e[l] * (p + r);\n                dl1 = d[l + 1];\n                h = g - d[l];\n                for (i = l + 2; i < n; i++) {\n                    d[i] -= h;\n                }\n\n                f = f + h;\n\n                p = d[m];\n                c = 1;\n                c2 = c;\n                c3 = c;\n                el1 = e[l + 1];\n                s = 0;\n                s2 = 0;\n                for (i = m - 1; i >= l; i--) {\n                    c3 = c2;\n                    c2 = c;\n                    s2 = s;\n                    g = c * e[i];\n                    h = c * p;\n                    r = hypotenuse(p, e[i]);\n                    e[i + 1] = s * r;\n                    s = e[i] / r;\n                    c = p / r;\n                    p = c * d[i] - s * g;\n                    d[i + 1] = h + s * (c * g + s * d[i]);\n\n                    for (k = 0; k < n; k++) {\n                        h = V[k][i + 1];\n                        V[k][i + 1] = s * V[k][i] + c * h;\n                        V[k][i] = c * V[k][i] - s * h;\n                    }\n                }\n\n                p = -s * s2 * c3 * el1 * e[l] / dl1;\n                e[l] = s * p;\n                d[l] = c * p;\n\n            }\n            while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n            if (d[j] < p) {\n                k = j;\n                p = d[j];\n            }\n        }\n\n        if (k !== i) {\n            d[k] = d[i];\n            d[i] = p;\n            for (j = 0; j < n; j++) {\n                p = V[j][i];\n                V[j][i] = V[j][k];\n                V[j][k] = p;\n            }\n        }\n    }\n}\n\nfunction orthes(n, H, ort, V) {\n\n    var low = 0,\n        high = n - 1,\n        f, g, h, i, j, m,\n        scale;\n\n    for (m = low + 1; m <= high - 1; m++) {\n        scale = 0;\n        for (i = m; i <= high; i++) {\n            scale = scale + Math.abs(H[i][m - 1]);\n        }\n\n        if (scale !== 0) {\n            h = 0;\n            for (i = high; i >= m; i--) {\n                ort[i] = H[i][m - 1] / scale;\n                h += ort[i] * ort[i];\n            }\n\n            g = Math.sqrt(h);\n            if (ort[m] > 0) {\n                g = -g;\n            }\n\n            h = h - ort[m] * g;\n            ort[m] = ort[m] - g;\n\n            for (j = m; j < n; j++) {\n                f = 0;\n                for (i = high; i >= m; i--) {\n                    f += ort[i] * H[i][j];\n                }\n\n                f = f / h;\n                for (i = m; i <= high; i++) {\n                    H[i][j] -= f * ort[i];\n                }\n            }\n\n            for (i = 0; i <= high; i++) {\n                f = 0;\n                for (j = high; j >= m; j--) {\n                    f += ort[j] * H[i][j];\n                }\n\n                f = f / h;\n                for (j = m; j <= high; j++) {\n                    H[i][j] -= f * ort[j];\n                }\n            }\n\n            ort[m] = scale * ort[m];\n            H[m][m - 1] = scale * g;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            V[i][j] = (i === j ? 1 : 0);\n        }\n    }\n\n    for (m = high - 1; m >= low + 1; m--) {\n        if (H[m][m - 1] !== 0) {\n            for (i = m + 1; i <= high; i++) {\n                ort[i] = H[i][m - 1];\n            }\n\n            for (j = m; j <= high; j++) {\n                g = 0;\n                for (i = m; i <= high; i++) {\n                    g += ort[i] * V[i][j];\n                }\n\n                g = (g / ort[m]) / H[m][m - 1];\n                for (i = m; i <= high; i++) {\n                    V[i][j] += g * ort[i];\n                }\n            }\n        }\n    }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n    var n = nn - 1,\n        low = 0,\n        high = nn - 1,\n        eps = Math.pow(2, -52),\n        exshift = 0,\n        norm = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n        s = 0,\n        z = 0,\n        iter = 0,\n        i, j, k, l, m, t, w, x, y,\n        ra, sa, vr, vi,\n        notlast, cdivres;\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            d[i] = H[i][i];\n            e[i] = 0;\n        }\n\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n            norm = norm + Math.abs(H[i][j]);\n        }\n    }\n\n    while (n >= low) {\n        l = n;\n        while (l > low) {\n            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n            if (s === 0) {\n                s = norm;\n            }\n            if (Math.abs(H[l][l - 1]) < eps * s) {\n                break;\n            }\n            l--;\n        }\n\n        if (l === n) {\n            H[n][n] = H[n][n] + exshift;\n            d[n] = H[n][n];\n            e[n] = 0;\n            n--;\n            iter = 0;\n        } else if (l === n - 1) {\n            w = H[n][n - 1] * H[n - 1][n];\n            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n            q = p * p + w;\n            z = Math.sqrt(Math.abs(q));\n            H[n][n] = H[n][n] + exshift;\n            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n            x = H[n][n];\n\n            if (q >= 0) {\n                z = (p >= 0) ? (p + z) : (p - z);\n                d[n - 1] = x + z;\n                d[n] = d[n - 1];\n                if (z !== 0) {\n                    d[n] = x - w / z;\n                }\n                e[n - 1] = 0;\n                e[n] = 0;\n                x = H[n][n - 1];\n                s = Math.abs(x) + Math.abs(z);\n                p = x / s;\n                q = z / s;\n                r = Math.sqrt(p * p + q * q);\n                p = p / r;\n                q = q / r;\n\n                for (j = n - 1; j < nn; j++) {\n                    z = H[n - 1][j];\n                    H[n - 1][j] = q * z + p * H[n][j];\n                    H[n][j] = q * H[n][j] - p * z;\n                }\n\n                for (i = 0; i <= n; i++) {\n                    z = H[i][n - 1];\n                    H[i][n - 1] = q * z + p * H[i][n];\n                    H[i][n] = q * H[i][n] - p * z;\n                }\n\n                for (i = low; i <= high; i++) {\n                    z = V[i][n - 1];\n                    V[i][n - 1] = q * z + p * V[i][n];\n                    V[i][n] = q * V[i][n] - p * z;\n                }\n            } else {\n                d[n - 1] = x + p;\n                d[n] = x + p;\n                e[n - 1] = z;\n                e[n] = -z;\n            }\n\n            n = n - 2;\n            iter = 0;\n        } else {\n            x = H[n][n];\n            y = 0;\n            w = 0;\n            if (l < n) {\n                y = H[n - 1][n - 1];\n                w = H[n][n - 1] * H[n - 1][n];\n            }\n\n            if (iter === 10) {\n                exshift += x;\n                for (i = low; i <= n; i++) {\n                    H[i][i] -= x;\n                }\n                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n                x = y = 0.75 * s;\n                w = -0.4375 * s * s;\n            }\n\n            if (iter === 30) {\n                s = (y - x) / 2;\n                s = s * s + w;\n                if (s > 0) {\n                    s = Math.sqrt(s);\n                    if (y < x) {\n                        s = -s;\n                    }\n                    s = x - w / ((y - x) / 2 + s);\n                    for (i = low; i <= n; i++) {\n                        H[i][i] -= s;\n                    }\n                    exshift += s;\n                    x = y = w = 0.964;\n                }\n            }\n\n            iter = iter + 1;\n\n            m = n - 2;\n            while (m >= l) {\n                z = H[m][m];\n                r = x - z;\n                s = y - z;\n                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n                q = H[m + 1][m + 1] - z - r - s;\n                r = H[m + 2][m + 1];\n                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                p = p / s;\n                q = q / s;\n                r = r / s;\n                if (m === l) {\n                    break;\n                }\n                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n                    break;\n                }\n                m--;\n            }\n\n            for (i = m + 2; i <= n; i++) {\n                H[i][i - 2] = 0;\n                if (i > m + 2) {\n                    H[i][i - 3] = 0;\n                }\n            }\n\n            for (k = m; k <= n - 1; k++) {\n                notlast = (k !== n - 1);\n                if (k !== m) {\n                    p = H[k][k - 1];\n                    q = H[k + 1][k - 1];\n                    r = (notlast ? H[k + 2][k - 1] : 0);\n                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                    if (x !== 0) {\n                        p = p / x;\n                        q = q / x;\n                        r = r / x;\n                    }\n                }\n\n                if (x === 0) {\n                    break;\n                }\n\n                s = Math.sqrt(p * p + q * q + r * r);\n                if (p < 0) {\n                    s = -s;\n                }\n\n                if (s !== 0) {\n                    if (k !== m) {\n                        H[k][k - 1] = -s * x;\n                    } else if (l !== m) {\n                        H[k][k - 1] = -H[k][k - 1];\n                    }\n\n                    p = p + s;\n                    x = p / s;\n                    y = q / s;\n                    z = r / s;\n                    q = q / p;\n                    r = r / p;\n\n                    for (j = k; j < nn; j++) {\n                        p = H[k][j] + q * H[k + 1][j];\n                        if (notlast) {\n                            p = p + r * H[k + 2][j];\n                            H[k + 2][j] = H[k + 2][j] - p * z;\n                        }\n\n                        H[k][j] = H[k][j] - p * x;\n                        H[k + 1][j] = H[k + 1][j] - p * y;\n                    }\n\n                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n                        p = x * H[i][k] + y * H[i][k + 1];\n                        if (notlast) {\n                            p = p + z * H[i][k + 2];\n                            H[i][k + 2] = H[i][k + 2] - p * r;\n                        }\n\n                        H[i][k] = H[i][k] - p;\n                        H[i][k + 1] = H[i][k + 1] - p * q;\n                    }\n\n                    for (i = low; i <= high; i++) {\n                        p = x * V[i][k] + y * V[i][k + 1];\n                        if (notlast) {\n                            p = p + z * V[i][k + 2];\n                            V[i][k + 2] = V[i][k + 2] - p * r;\n                        }\n\n                        V[i][k] = V[i][k] - p;\n                        V[i][k + 1] = V[i][k + 1] - p * q;\n                    }\n                }\n            }\n        }\n    }\n\n    if (norm === 0) {\n        return;\n    }\n\n    for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n\n        if (q === 0) {\n            l = n;\n            H[n][n] = 1;\n            for (i = n - 1; i >= 0; i--) {\n                w = H[i][i] - p;\n                r = 0;\n                for (j = l; j <= n; j++) {\n                    r = r + H[i][j] * H[j][n];\n                }\n\n                if (e[i] < 0) {\n                    z = w;\n                    s = r;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                        t = (x * s - z * r) / q;\n                        H[i][n] = t;\n                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n                    }\n\n                    t = Math.abs(H[i][n]);\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        } else if (q < 0) {\n            l = n - 1;\n\n            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n                H[n - 1][n - 1] = q / H[n][n - 1];\n                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n            } else {\n                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n                H[n - 1][n - 1] = cdivres[0];\n                H[n - 1][n] = cdivres[1];\n            }\n\n            H[n][n - 1] = 0;\n            H[n][n] = 1;\n            for (i = n - 2; i >= 0; i--) {\n                ra = 0;\n                sa = 0;\n                for (j = l; j <= n; j++) {\n                    ra = ra + H[i][j] * H[j][n - 1];\n                    sa = sa + H[i][j] * H[j][n];\n                }\n\n                w = H[i][i] - p;\n\n                if (e[i] < 0) {\n                    z = w;\n                    r = ra;\n                    s = sa;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        cdivres = cdiv(-ra, -sa, w, q);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                        vi = (d[i] - p) * 2 * q;\n                        if (vr === 0 && vi === 0) {\n                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                        }\n                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n                        } else {\n                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n                            H[i + 1][n - 1] = cdivres[0];\n                            H[i + 1][n] = cdivres[1];\n                        }\n                    }\n\n                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n - 1] = H[j][n - 1] / t;\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            for (j = i; j < nn; j++) {\n                V[i][j] = H[i][j];\n            }\n        }\n    }\n\n    for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n            z = 0;\n            for (k = low; k <= Math.min(j, high); k++) {\n                z = z + V[i][k] * H[k][j];\n            }\n            V[i][j] = z;\n        }\n    }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n    var r, d;\n    if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        return [(xr + r * xi) / d, (xi - r * xr) / d];\n    } else {\n        r = yr / yi;\n        d = yi + r * yr;\n        return [(r * xr + xi) / d, (r * xi - xr) / d];\n    }\n}\n\nmodule.exports = EigenvalueDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/dc/evd.js","'use strict';\n\nvar Matrix = require('../matrix').Matrix;\nvar hypotenuse = require('./util').hypotenuse;\n\n//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\nfunction QrDecomposition(value) {\n    if (!(this instanceof QrDecomposition)) {\n        return new QrDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n\n    var qr = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        rdiag = new Array(n),\n        i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) {\n            nrm = hypotenuse(nrm, qr[i][k]);\n        }\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) {\n                nrm = -nrm;\n            }\n            for (i = k; i < m; i++) {\n                qr[i][k] /= nrm;\n            }\n            qr[k][k] += 1;\n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * qr[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    qr[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n}\n\nQrDecomposition.prototype = {\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var qr = this.QR,\n            m = qr.rows;\n\n        if (value.rows !== m) {\n            throw new Error('Matrix row dimensions must agree');\n        }\n        if (!this.isFullRank()) {\n            throw new Error('Matrix is rank deficient');\n        }\n\n        var count = value.columns;\n        var X = value.clone();\n        var n = qr.columns;\n        var i, j, k, s;\n\n        for (k = 0; k < n; k++) {\n            for (j = 0; j < count; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * X[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    X[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        for (k = n - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= this.Rdiag[k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * qr[i][k];\n                }\n            }\n        }\n\n        return X.subMatrix(0, n - 1, 0, count - 1);\n    },\n    isFullRank: function () {\n        var columns = this.QR.columns;\n        for (var i = 0; i < columns; i++) {\n            if (this.Rdiag[i] === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n    get upperTriangularMatrix() {\n        var qr = this.QR,\n            n = qr.columns,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                if (i < j) {\n                    X[i][j] = qr[i][j];\n                } else if (i === j) {\n                    X[i][j] = this.Rdiag[i];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get orthogonalMatrix() {\n        var qr = this.QR,\n            rows = qr.rows,\n            columns = qr.columns,\n            X = new Matrix(rows, columns),\n            i, j, k, s;\n\n        for (k = columns - 1; k >= 0; k--) {\n            for (i = 0; i < rows; i++) {\n                X[i][k] = 0;\n            }\n            X[k][k] = 1;\n            for (j = k; j < columns; j++) {\n                if (qr[k][k] !== 0) {\n                    s = 0;\n                    for (i = k; i < rows; i++) {\n                        s += qr[i][k] * X[i][j];\n                    }\n\n                    s = -s / qr[k][k];\n\n                    for (i = k; i < rows; i++) {\n                        X[i][j] += s * qr[i][k];\n                    }\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = QrDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/dc/qr.js","'use strict';\n\nvar Matrix = require('../matrix').Matrix;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\nfunction CholeskyDecomposition(value) {\n    if (!(this instanceof CholeskyDecomposition)) {\n        return new CholeskyDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n    if (!value.isSymmetric()) {\n        throw new Error('Matrix is not symmetric');\n    }\n\n    var a = value,\n        dimension = a.rows,\n        l = new Matrix(dimension, dimension),\n        positiveDefinite = true,\n        i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n        var Lrowj = l[j];\n        var d = 0;\n        for (k = 0; k < j; k++) {\n            var Lrowk = l[k];\n            var s = 0;\n            for (i = 0; i < k; i++) {\n                s += Lrowk[i] * Lrowj[i];\n            }\n            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n            d = d + s * s;\n        }\n\n        d = a[j][j] - d;\n\n        positiveDefinite &= (d > 0);\n        l[j][j] = Math.sqrt(Math.max(d, 0));\n        for (k = j + 1; k < dimension; k++) {\n            l[j][k] = 0;\n        }\n    }\n\n    if (!positiveDefinite) {\n        throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n}\n\nCholeskyDecomposition.prototype = {\n    get lowerTriangularMatrix() {\n        return this.L;\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var l = this.L,\n            dimension = l.rows;\n\n        if (value.rows !== dimension) {\n            throw new Error('Matrix dimensions do not match');\n        }\n\n        var count = value.columns,\n            B = value.clone(),\n            i, j, k;\n\n        for (k = 0; k < dimension; k++) {\n            for (j = 0; j < count; j++) {\n                for (i = 0; i < k; i++) {\n                    B[k][j] -= B[i][j] * l[k][i];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        for (k = dimension - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                for (i = k + 1; i < dimension; i++) {\n                    B[k][j] -= B[i][j] * l[i][k];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        return B;\n    }\n};\n\nmodule.exports = CholeskyDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-levenberg-marquardt/node_modules/ml-matrix/src/dc/cholesky.js","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar LOOP = 8;\nvar FLOAT_MUL = 1 / 16777216;\n\nfunction multiply_uint32(n, m) {\n    n >>>= 0;\n    m >>>= 0;\n    var nlo = n & 0xffff;\n    var nhi = n - nlo;\n    return (nhi * m >>> 0) + nlo * m >>> 0;\n}\n\nvar XSadd = (function () {\n    function XSadd() {\n        var seed = arguments.length <= 0 || arguments[0] === undefined ? Date.now() : arguments[0];\n\n        _classCallCheck(this, XSadd);\n\n        this.state = new Uint32Array(4);\n        this.init(seed);\n    }\n\n    _createClass(XSadd, [{\n        key: \"init\",\n        value: function init(seed) {\n            this.state[0] = seed;\n            this.state[1] = 0;\n            this.state[2] = 0;\n            this.state[3] = 0;\n            for (var i = 1; i < LOOP; i++) {\n                this.state[i & 3] ^= i + multiply_uint32(1812433253, this.state[i - 1 & 3] ^ this.state[i - 1 & 3] >>> 30 >>> 0) >>> 0;\n            }\n            period_certification(this);\n            for (var i = 0; i < LOOP; i++) {\n                next_state(this);\n            }\n        }\n\n        /**\n         * Returns a 32-bit integer r (0 <= r < 2^32)\n         */\n    }, {\n        key: \"getUint32\",\n        value: function getUint32() {\n            next_state(this);\n            return this.state[3] + this.state[2] >>> 0;\n        }\n\n        /**\n         * Returns a floating point number r (0.0 <= r < 1.0)\n         */\n    }, {\n        key: \"getFloat\",\n        value: function getFloat() {\n            return (this.getUint32() >>> 8) * FLOAT_MUL;\n        }\n    }, {\n        key: \"random\",\n        get: function get() {\n            if (!this._random) {\n                this._random = this.getFloat.bind(this);\n            }\n            return this._random;\n        }\n    }]);\n\n    return XSadd;\n})();\n\nexports[\"default\"] = XSadd;\n\nfunction period_certification(xsadd) {\n    if (xsadd.state[0] === 0 && xsadd.state[1] === 0 && xsadd.state[2] === 0 && xsadd.state[3] === 0) {\n        xsadd.state[0] = 88; // X\n        xsadd.state[1] = 83; // S\n        xsadd.state[2] = 65; // A\n        xsadd.state[3] = 68; // D\n    }\n}\n\nvar sh1 = 15;\nvar sh2 = 18;\nvar sh3 = 11;\nfunction next_state(xsadd) {\n    var t = xsadd.state[0];\n    t ^= t << sh1;\n    t ^= t >>> sh2;\n    t ^= xsadd.state[3] << sh3;\n    xsadd.state[0] = xsadd.state[1];\n    xsadd.state[1] = xsadd.state[2];\n    xsadd.state[2] = xsadd.state[3];\n    xsadd.state[3] = t;\n}\nmodule.exports = exports[\"default\"];\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-xsadd/xsadd-es5.js","'use strict';\n\nconst ConfusionMatrix = require('ml-confusion-matrix');\n\nconst CV = {};\nconst combinations = require('ml-combinations');\n\n/**\n * Performs a leave-one-out cross-validation (LOO-CV) of the given samples. In LOO-CV, 1 observation is used as the validation\n * set while the rest is used as the training set. This is repeated once for each observation. LOO-CV is a special case\n * of LPO-CV. @see leavePout\n * @param {function} Classifier - The classifier's constructor to use for the cross validation. Expect ml-classifier api.\n * @param {Array} features - The features for all samples of the data-set\n * @param {Array} labels - The classification class of all samples of the data-set\n * @param {object} classifierOptions - The classifier options with which the classifier should be instantiated.\n * @return {ConfusionMatrix} - The cross-validation confusion matrix\n */\nCV.leaveOneOut = function (Classifier, features, labels, classifierOptions) {\n    return CV.leavePOut(Classifier, features, labels, classifierOptions, 1);\n};\n\n\n/**\n * Performs a leave-p-out cross-validation (LPO-CV) of the given samples. In LPO-CV, p observations are used as the\n * validation set while the rest is used as the training set. This is repeated as many times as there are possible\n * ways to combine p observations from the set (unordered without replacement). Be aware that for relatively small\n * data-set size this can require a very large number of training and testing to do!\n * @param {function} Classifier - The classifier's constructor to use for the cross validation. Expect ml-classifier api.\n * @param {Array} features - The features for all samples of the data-set\n * @param {Array} labels - The classification class of all samples of the data-set\n * @param {object} classifierOptions - The classifier options with which the classifier should be instantiated.\n * @param {number} p - The size of the validation sub-samples' set\n * @return {ConfusionMatrix} - The cross-validation confusion matrix\n */\nCV.leavePOut = function (Classifier, features, labels, classifierOptions, p) {\n    check(features, labels);\n    const distinct = getDistinct(labels);\n    const confusionMatrix = initMatrix(distinct.length, distinct.length);\n\n    var N = features.length;\n    var gen = combinations(p, N);\n    var allIdx = new Array(N);\n    for (let i = 0; i < N; i++) {\n        allIdx[i] = i;\n    }\n    for (const testIdx of gen) {\n        var trainIdx = allIdx.slice();\n\n        for (let i = testIdx.length - 1; i >= 0; i--) {\n            trainIdx.splice(testIdx[i], 1);\n        }\n\n        validate(Classifier, features, labels, classifierOptions, testIdx, trainIdx, confusionMatrix, distinct);\n    }\n\n    return new ConfusionMatrix(confusionMatrix, distinct);\n};\n\n/**\n * Performs k-fold cross-validation (KF-CV). KF-CV separates the data-set into k random equally sized partitions, and\n * uses each as a validation set, with all other partitions used in the training set. Observations left over from if k\n * does not divide the number of observations are left out of the cross-validation process.\n * @param {function} Classifier - The classifier's to use for the cross validation. Expect ml-classifier api.\n * @param {Array} features - The features for all samples of the data-set\n * @param {Array} labels - The classification class of all samples of the data-set\n * @param {object} classifierOptions - The classifier options with which the classifier should be instantiated.\n * @param {number} k - The number of partitions to create\n * @return {ConfusionMatrix} - The cross-validation confusion matrix\n */\nCV.kFold = function (Classifier, features, labels, classifierOptions, k) {\n    check(features, labels);\n    const distinct = getDistinct(labels);\n    const confusionMatrix = initMatrix(distinct.length, distinct.length);\n    var N = features.length;\n    var allIdx = new Array(N);\n    for (var i = 0; i < N; i++) {\n        allIdx[i] = i;\n    }\n\n    var l = Math.floor(N / k);\n    // create random k-folds\n    var current = [];\n    var folds = [];\n    while (allIdx.length) {\n        var randi = Math.floor(Math.random() * allIdx.length);\n        current.push(allIdx[randi]);\n        allIdx.splice(randi, 1);\n        if (current.length === l) {\n            folds.push(current);\n            current = [];\n        }\n    }\n    if (current.length) folds.push(current);\n    folds = folds.slice(0, k);\n\n\n    for (i = 0; i < folds.length; i++) {\n        var testIdx = folds[i];\n        var trainIdx = [];\n        for (var j = 0; j < folds.length; j++) {\n            if (j !== i) trainIdx = trainIdx.concat(folds[j]);\n        }\n\n        validate(Classifier, features, labels, classifierOptions, testIdx, trainIdx, confusionMatrix, distinct);\n    }\n\n    return new ConfusionMatrix(confusionMatrix, distinct);\n};\n\nfunction check(features, labels) {\n    if (features.length !== labels.length) {\n        throw new Error('features and labels should have the same length');\n    }\n}\n\nfunction initMatrix(rows, columns) {\n    return new Array(rows).fill(0).map(() => new Array(columns).fill(0));\n}\n\nfunction getDistinct(arr) {\n    var s = new Set();\n    for (let i = 0; i < arr.length; i++) {\n        s.add(arr[i]);\n    }\n    return Array.from(s);\n}\n\nfunction validate(Classifier, features, labels, classifierOptions, testIdx, trainIdx, confusionMatrix, distinct) {\n    var testFeatures = testIdx.map(function (index) {\n        return features[index];\n    });\n    var trainFeatures = trainIdx.map(function (index) {\n        return features[index];\n    });\n    var testLabels = testIdx.map(function (index) {\n        return labels[index];\n    });\n    var trainLabels = trainIdx.map(function (index) {\n        return labels[index];\n    });\n\n    var classifier;\n    if (Classifier.prototype.train) {\n        classifier = new Classifier(classifierOptions);\n        classifier.train(trainFeatures, trainLabels);\n    } else {\n        classifier = new Classifier(trainFeatures, trainLabels, classifierOptions);\n    }\n\n    var predictedLabels = classifier.predict(testFeatures);\n    for (var i = 0; i < predictedLabels.length; i++) {\n        confusionMatrix[distinct.indexOf(testLabels[i])][distinct.indexOf(predictedLabels[i])]++;\n    }\n}\n\nmodule.exports = CV;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-cross-validation/src/index.js","'use strict';\nconst defaultOptions = {\n    mode: 'index'\n};\n\nmodule.exports = function *(M, N, options) {\n    options = Object.assign({}, defaultOptions, options);\n    var a = new Array(N);\n    var c = new Array(M);\n    var b = new Array(N);\n    var p = new Array(N + 2);\n    var x, y, z;\n\n    // init a and b\n    for (var i = 0; i < N; i++) {\n        a[i] = i;\n        if (i < N - M) b[i] = 0;\n        else b[i] = 1;\n    }\n\n    // init c\n    for (i = 0; i < M; i++) {\n        c[i] = N - M + i;\n    }\n\n    // init p\n    for (i = 0; i < p.length; i++) {\n        if (i === 0) p[i] = N + 1;\n        else if (i <= N - M) p[i] = 0;\n        else if (i <= N) p[i] = i - N + M;\n        else p[i] = -2;\n    }\n\n    function twiddle() {\n        var i, j, k;\n        j = 1;\n        while (p[j] <= 0)\n            j++;\n        if (p[j - 1] === 0) {\n            for (i = j - 1; i !== 1; i--)\n                p[i] = -1;\n            p[j] = 0;\n            x = z = 0;\n            p[1] = 1;\n            y = j - 1;\n        } else {\n            if (j > 1)\n                p[j - 1] = 0;\n            do\n                j++;\n            while (p[j] > 0);\n            k = j - 1;\n            i = j;\n            while (p[i] === 0)\n                p[i++] = -1;\n            if (p[i] === -1) {\n                p[i] = p[k];\n                z = p[k] - 1;\n                x = i - 1;\n                y = k - 1;\n                p[k] = -1;\n            } else {\n                if (i === p[0]) {\n                    return 0;\n                } else {\n                    p[j] = p[i];\n                    z = p[i] - 1;\n                    p[i] = 0;\n                    x = j - 1;\n                    y = i - 1;\n                }\n            }\n        }\n        return 1;\n    }\n\n    if (options.mode === 'index') {\n        yield c.slice();\n        while (twiddle()) {\n            c[z] = a[x];\n            yield c.slice();\n        }\n    } else if (options.mode === 'mask') {\n        yield b.slice();\n        while (twiddle()) {\n            b[x] = 1;\n            b[y] = 0;\n            yield b.slice();\n        }\n    } else {\n        throw new Error('Invalid mode');\n    }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-combinations/src/index.js","'use strict';\nconst Kernel = require('ml-kernel');\nconst stat = require('ml-stat').array;\n\nvar defaultOptions = {\n    C: 1,\n    tol: 1e-4,\n    maxPasses: 10,\n    maxIterations: 10000,\n    kernel: 'linear',\n    alphaTol: 1e-6,\n    random: Math.random,\n    whitening: true\n};\n\n/**\n * Simplified version of the Sequential Minimal Optimization algorithm for training\n * support vector machines\n * @param {{Object}} options - SVM options\n * @param {Number} [options.C=1] - regularization parameter\n * @param {Number} [options.tol=1e-4] - numerical tolerance\n * @param {Number} [options.alphaTol=1e-6] - alpha tolerance, threshold to decide support vectors\n * @param {Number} [options.maxPasses=10] - max number of times to iterate over alphas without changing\n * @param {Number} [options.maxIterations=10000] - max number of iterations\n * @param {String} [options.kernel=linear] - the kind of kernel. {@link https://github.com/mljs/kernel/tree/1252de5f9012776e6e0eb06c7b434b8631fb21f0 List of kernels}\n * @param {Function} [options.random=Math.random] - custom random number generator\n * @constructor\n */\nfunction SVM(options) {\n    this.options = Object.assign({}, defaultOptions, options);\n\n    this.kernel = new Kernel(this.options.kernel, this.options.kernelOptions);\n    this.b = 0;\n}\n\n/**\n * Train the SVM model\n * @param {Array <Array <number>>} features - training data features\n * @param {Array <number>} labels - training data labels in the domain {1,-1}\n */\nSVM.prototype.train = function (features, labels) {\n    if (features.length !== labels.length) {\n        throw new Error('Features and labels should have the same length');\n    }\n    if (features.length < 2) {\n        throw new Error('Cannot train with less than 2 observations');\n    }\n    this._trained = false;\n    this._loaded = false;\n    this.N = labels.length;\n    this.D = features[0].length;\n    if (this.options.whitening) {\n        this.X = new Array(this.N);\n        for (var i = 0; i < this.N; i++) {\n            this.X[i] = new Array(this.D);\n        }\n        this.minMax = new Array(this.D);\n        // Apply normalization and keep normalization parameters\n        for (var j = 0; j < this.D; j++) {\n            var d = new Array(this.N);\n            for (i = 0; i < this.N; i++) {\n                d[i] = features[i][j];\n            }\n            this.minMax[j] = stat.minMax(d);\n            for (i = 0; i < this.N; i++) {\n                this.X[i][j] = (features[i][j] - this.minMax[j].min) / (this.minMax[j].max - this.minMax[j].min);\n            }\n        }\n    } else {\n        this.X = features;\n    }\n    this.Y = labels;\n    this.b = 0;\n    this.W = undefined;\n\n    var kernel = this.kernel.compute(this.X);\n    var m = labels.length;\n    var alpha = new Array(m).fill(0);\n    this.alphas = alpha;\n    for (var a = 0; a < m; a++)\n        alpha[a] = 0;\n\n    var b1 = 0,\n        b2 = 0,\n        iter = 0,\n        passes = 0,\n        Ei = 0,\n        Ej = 0,\n        ai = 0,\n        aj = 0,\n        L = 0,\n        H = 0,\n        eta = 0;\n\n    while (passes < this.options.maxPasses && iter < this.options.maxIterations) {\n        var numChange = 0;\n        for (i = 0; i < m; i++) {\n            Ei = this._marginOnePrecomputed(i, kernel) - labels[i];\n            if (labels[i] * Ei < -this.options.tol && alpha[i] < this.options.C || labels[i] * Ei > this.options.tol && alpha[i] > 0) {\n                j = i;\n                while (j === i) j = Math.floor(this.options.random() * m);\n                Ej = this._marginOnePrecomputed(j, kernel) - labels[j];\n                ai = alpha[i];\n                aj = alpha[j];\n                if (labels[i] === labels[j]) {\n                    L = Math.max(0, ai + aj - this.options.C);\n                    H = Math.min(this.options.C, ai + aj);\n                } else  {\n                    L = Math.max(0, aj - ai);\n                    H = Math.min(this.options.C, this.options.C + aj + ai);\n                }\n                if (Math.abs(L - H) < 1e-4) continue;\n\n                eta = 2 * kernel[i][j] - kernel[i][i] - kernel[j][j];\n                if (eta >= 0) continue;\n                var newaj = alpha[j] - labels[j] * (Ei - Ej) / eta;\n                if (newaj > H)\n                    newaj = H;\n                else if (newaj < L)\n                    newaj = L;\n                if (Math.abs(aj - newaj) < 10e-4) continue;\n                alpha[j] = newaj;\n                alpha[i] = alpha[i] + labels[i] * labels[j] * (aj - newaj);\n                b1 = this.b - Ei - labels[i] * (alpha[i] - ai) * kernel[i][i] - labels[j] * (alpha[j] - aj) * kernel[i][j];\n                b2 = this.b - Ej - labels[i] * (alpha[i] - ai) * kernel[i][j] - labels[j] * (alpha[j] - aj) * kernel[j][j];\n                this.b = (b1 + b2) / 2;\n                if (alpha[i] < this.options.C && alpha[i] > 0) this.b = b1;\n                if (alpha[j] < this.options.C && alpha[j] > 0) this.b = b2;\n                numChange += 1;\n            }\n        }\n        iter++;\n        if (numChange === 0)\n            passes += 1;\n        else\n            passes = 0;\n    }\n    if (iter === this.options.maxIterations) {\n        throw new Error('max iterations reached');\n    }\n\n    this.iterations = iter;\n\n    // Compute the weights (useful for fast decision on new test instances when linear SVM)\n    if (this.options.kernel === 'linear') {\n        this.W = new Array(this.D);\n        for (var r = 0; r < this.D; r++) {\n            this.W[r] = 0;\n            for (var w = 0; w < m; w++)\n                this.W[r] += labels[w] * alpha[w] * this.X[w][r];\n        }\n    }\n\n    // Keep only support vectors\n    // It will compute decision on new test instances faster\n    // We also keep the index of the support vectors\n    // in the original data\n    var nX = [];\n    var nY = [];\n    var nAlphas = [];\n    this._supportVectorIdx = [];\n    for (i = 0; i < this.N; i++) {\n        if (this.alphas[i] > this.options.alphaTol) {\n            nX.push(this.X[i]);\n            nY.push(labels[i]);\n            nAlphas.push(this.alphas[i]);\n            this._supportVectorIdx.push(i);\n\n        }\n    }\n    this.X = nX;\n    this.Y = nY;\n    this.N = nX.length;\n    this.alphas = nAlphas;\n\n\n    // A flag to say this SVM has been trained\n    this._trained = true;\n};\n\n/**\n * Get prediction ({-1,1}) given one observation's features.\n * @private\n * @param p The observation's features.\n * @returns {number} Classification result ({-1,1})\n */\nSVM.prototype.predictOne = function (p) {\n    var margin = this.marginOne(p);\n    return margin > 0 ? 1 : -1;\n};\n\n/**\n * Predict the classification outcome of a trained svm given one or several observations' features.\n * @param {Array} features - The observation(s)' features\n * @returns {Array<Number>|Number} An array of {-1, 1} if several observations are given or a number if one observation\n * is given\n */\nSVM.prototype.predict = function (features) {\n    if (!this._trained && !this._loaded) throw new Error('Cannot predict, you need to train the SVM first');\n    if (Array.isArray(features) && Array.isArray(features[0])) {\n        return features.map(this.predictOne.bind(this));\n    } else {\n        return this.predictOne(features);\n    }\n};\n\n/**\n * Get margin given one observation's features\n * @private\n * @param {Array<Number>} features - Features\n * @returns {Number} - The computed margin\n */\nSVM.prototype.marginOne = function (features, noWhitening) {\n    // Apply normalization\n    if (this.options.whitening && !noWhitening) {\n        features = this._applyWhitening(features);\n    }\n    var ans = this.b, i;\n    if (this.options.kernel === 'linear' && this.W) {\n        // Use weights, it's faster\n        for (i = 0; i < this.W.length; i++) {\n            ans += this.W[i] * features[i];\n        }\n    } else {\n        for (i = 0; i < this.N; i++) {\n            ans += this.alphas[i] * this.Y[i] * this.kernel.compute([features], [this.X[i]])[0][0];\n        }\n    }\n    return ans;\n};\n\n\n/**\n * Get a margin using the precomputed kernel. Much faster than normal margin computation\n * @private\n * @param {Number} index - Train data index\n * @param {Array< Array<Number> >} kernel - The precomputed kernel\n * @returns {number} Computed margin\n * @private\n */\nSVM.prototype._marginOnePrecomputed = function (index, kernel) {\n    var ans = this.b, i;\n    for (i = 0; i < this.N; i++) {\n        ans += this.alphas[i] * this.Y[i] * kernel[index][i];\n    }\n    return ans;\n};\n\n\n/**\n * Returns the margin of one or several observations given its features\n * @param {Array <Array<Number> >|Array<Number>} features - Features from on or several observations.\n * @returns {Number|Array} The computed margin. Is an Array if several observations' features given, or a Number if\n * only one observation's features given\n */\nSVM.prototype.margin = function (features) {\n    if (Array.isArray(features)) {\n        return features.map(this.marginOne.bind(this));\n    } else {\n        return this.marginOne(features);\n    }\n};\n\n/**\n * Get support vectors indexes of the trained classifier. WARINNG: this method does not work for svm instances\n * created from {@link #SVM.load load} if linear kernel\n * @returns {Array<Number>} The indices in the training vector of the support vectors\n */\nSVM.prototype.supportVectors = function () {\n    if (!this._trained && !this._loaded) throw new Error('Cannot get support vectors, you need to train the SVM first');\n    if (this._loaded && this.options.kernel === 'linear') throw new Error('Cannot get support vectors from saved linear model, you need to train the SVM to have them');\n    return this._supportVectorIdx;\n};\n\n/**\n * Create a SVM instance from a saved model\n * @param {Object} model -  Object such as returned by a trained SVM instance with {@link #SVM#toJSON toJSON}\n * @returns {SVM} Instance of svm classifier\n */\nSVM.load = function (model) {\n    this._loaded = true;\n    this._trained = false;\n    var svm = new SVM(model.options);\n    if (model.options.kernel === 'linear') {\n        svm.W = model.W.slice();\n        svm.D = svm.W.length;\n    } else {\n        svm.X = model.X.slice();\n        svm.Y = model.Y.slice();\n        svm.alphas = model.alphas.slice();\n        svm.N = svm.X.length;\n        svm.D = svm.X[0].length;\n    }\n    svm.minMax = model.minMax;\n    svm.b = model.b;\n    svm._loaded = true;\n    svm._trained = false;\n    return svm;\n};\n\n/**\n * Export the minimal object that enables to reload the model\n * @returns {Object} Model object that can be reused with {@link #SVM.load load}\n */\nSVM.prototype.toJSON = function () {\n    if (!this._trained && !this._loaded) throw new Error('Cannot export, you need to train the SVM first');\n    var model = {};\n    model.options = Object.assign({}, this.options);\n    model.b = this.b;\n    model.minMax = this.minMax;\n    if (model.options.kernel === 'linear') {\n        model.W = this.W.slice();\n    } else {\n        // Exporting non-linear models is heavier\n        model.X = this.X.slice();\n        model.Y = this.Y.slice();\n        model.alphas = this.alphas.slice();\n    }\n    return model;\n};\n\nSVM.prototype._applyWhitening = function (features) {\n    if (!this.minMax) throw new Error('Could not apply whitening');\n    var whitened = new Array(features.length);\n    for (var j = 0; j < features.length; j++) {\n        whitened[j] = (features[j] - this.minMax[j].min) / (this.minMax[j].max - this.minMax[j].min);\n    }\n    return whitened;\n};\n\nmodule.exports = SVM;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-svm/src/svm.js","import {kdTree as KDTree} from './kdTree';\nimport euclideanDistance from 'ml-distance-euclidean';\n\nexport default class KNN {\n    constructor(dataset, labels, options = {}) {\n        if (dataset === true) {\n            const model = labels;\n            this.kdTree = new KDTree(model.kdTree, options);\n            this.k = model.k;\n            this.classes = model.classes;\n            this.isEuclidean = model.isEuclidean;\n            return;\n        }\n        const {\n            distance = euclideanDistance,\n            k = dataset[0].length + 1\n        } = options;\n\n        const classes = new Set(labels).size;\n\n        const points = new Array(dataset.length);\n        for (var i = 0; i < points.length; ++i) {\n            points[i] = dataset[i].slice();\n        }\n\n        for (i = 0; i < labels.length; ++i) {\n            points[i].push(labels[i]);\n        }\n\n        this.kdTree = new KDTree(points, distance);\n        this.k = k;\n        this.classes = classes;\n        this.isEuclidean = distance === euclideanDistance;\n    }\n\n    static load(model, distance = euclideanDistance) {\n        if (model.name !== 'KNN') {\n            throw new Error('invalid model: ' + model.name);\n        }\n        if (!model.isEuclidean && distance === euclideanDistance) {\n            throw new Error('a custom distance function was used to create the model. Please provide it again');\n        }\n        if (model.isEuclidean && distance !== euclideanDistance) {\n            throw new Error('the model was created with the default distance function. Do not load it with another one');\n        }\n        return new KNN(true, model, distance);\n    }\n\n    toJSON() {\n        return {\n            name: 'KNN',\n            kdTree: this.kdTree.toJSON(),\n            k: this.k,\n            classes: this.classes,\n            isEuclidean: this.isEuclidean\n        };\n    }\n\n    predict(dataset) {\n        if (Array.isArray(dataset)) {\n            if (typeof dataset[0] === 'number') {\n                return getSinglePrediction(this, dataset);\n            } else if (Array.isArray(dataset[0]) && typeof dataset[0][0] === 'number') {\n                const predictions = new Array(dataset.length);\n                for (var i = 0; i < dataset.length; i++) {\n                    predictions[i] = getSinglePrediction(this, dataset[i]);\n                }\n                return predictions;\n            }\n        }\n        throw new TypeError('dataset to predict must be an array or a matrix');\n    }\n}\n\nfunction getSinglePrediction(knn, currentCase) {\n    var nearestPoints = knn.kdTree.nearest(currentCase, knn.k);\n    var pointsPerClass = new Array(knn.classes);\n    var predictedClass = -1;\n    var maxPoints = -1;\n    var lastElement = nearestPoints[0][0].length - 1;\n\n    for (var i = 0; i < pointsPerClass.length; ++i) {\n        pointsPerClass[i] = 0;\n    }\n\n    for (i = 0; i < nearestPoints.length; ++i) {\n        var currentClass = nearestPoints[i][0][lastElement];\n        var currentPoints = ++pointsPerClass[currentClass];\n        if (currentPoints > maxPoints) {\n            predictedClass = currentClass;\n            maxPoints = currentPoints;\n        }\n    }\n\n    return predictedClass;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-knn/src/index.js","/* eslint-disable */\n/**\n* k-d Tree JavaScript - V 1.01\n*\n* https://github.com/ubilabs/kd-tree-javascript\n*\n* @author Mircea Pricop <pricop@ubilabs.net>, 2012\n* @author Martin Kleppe <kleppe@ubilabs.net>, 2012\n* @author Ubilabs http://ubilabs.net, 2012\n* @license MIT License <http://www.opensource.org/licenses/mit-license.php>\n*/\n\n\nfunction Node(obj, dimension, parent) {\n    this.obj = obj;\n    this.left = null;\n    this.right = null;\n    this.parent = parent;\n    this.dimension = dimension;\n}\n\nfunction kdTree(points, metric) {\n\n    var dimensions;\n\n    var self = this;\n\n    function buildTree(points, depth, parent) {\n        var dim = depth % dimensions.length,\n            median,\n            node;\n\n        if (points.length === 0) {\n            return null;\n        }\n        if (points.length === 1) {\n            return new Node(points[0], dim, parent);\n        }\n\n        points.sort(function (a, b) {\n            return a[dimensions[dim]] - b[dimensions[dim]];\n        });\n\n        median = Math.floor(points.length / 2);\n        node = new Node(points[median], dim, parent);\n        node.left = buildTree(points.slice(0, median), depth + 1, node);\n        node.right = buildTree(points.slice(median + 1), depth + 1, node);\n\n        return node;\n    }\n\n    // Reloads a serialied tree\n    function loadTree(data) {\n        // Just need to restore the `parent` parameter\n        self.root = data;\n\n        function restoreParent(root) {\n            if (root.left) {\n                root.left.parent = root;\n                restoreParent(root.left);\n            }\n\n            if (root.right) {\n                root.right.parent = root;\n                restoreParent(root.right);\n            }\n        }\n\n        restoreParent(self.root);\n    }\n\n    // If points is not an array, assume we're loading a pre-built tree\n    if (!Array.isArray(points)) {\n        dimensions = points.dimensions;\n        loadTree(points, metric);\n    } else {\n        dimensions = new Array(points[0].length);\n        for (var i = 0; i < dimensions.length; ++i) {\n            dimensions[i] = i;\n        }\n        this.root = buildTree(points, 0, null);\n    }\n\n    // Convert to a JSON serializable structure; this just requires removing\n    // the `parent` property\n    this.toJSON = function (src, isRoot = true) {\n        if (!src) src = this.root;\n        var dest = new Node(src.obj, src.dimension, null);\n        if (src.left) dest.left = self.toJSON(src.left, false);\n        if (src.right) dest.right = self.toJSON(src.right, false);\n        if (isRoot) {\n            dest.dimensions = dimensions;\n        }\n        return dest;\n    };\n\n    this.insert = function (point) {\n        function innerSearch(node, parent) {\n\n            if (node === null) {\n                return parent;\n            }\n\n            var dimension = dimensions[node.dimension];\n            if (point[dimension] < node.obj[dimension]) {\n                return innerSearch(node.left, node);\n            } else {\n                return innerSearch(node.right, node);\n            }\n        }\n\n        var insertPosition = innerSearch(this.root, null),\n            newNode,\n            dimension;\n\n        if (insertPosition === null) {\n            this.root = new Node(point, 0, null);\n            return;\n        }\n\n        newNode = new Node(point, (insertPosition.dimension + 1) % dimensions.length, insertPosition);\n        dimension = dimensions[insertPosition.dimension];\n\n        if (point[dimension] < insertPosition.obj[dimension]) {\n            insertPosition.left = newNode;\n        } else {\n            insertPosition.right = newNode;\n        }\n    };\n\n    this.remove = function (point) {\n        var node;\n\n        function nodeSearch(node) {\n            if (node === null) {\n                return null;\n            }\n\n            if (node.obj === point) {\n                return node;\n            }\n\n            var dimension = dimensions[node.dimension];\n\n            if (point[dimension] < node.obj[dimension]) {\n                return nodeSearch(node.left, node);\n            } else {\n                return nodeSearch(node.right, node);\n            }\n        }\n\n        function removeNode(node) {\n            var nextNode,\n                nextObj,\n                pDimension;\n\n            function findMin(node, dim) {\n                var dimension,\n                    own,\n                    left,\n                    right,\n                    min;\n\n                if (node === null) {\n                    return null;\n                }\n\n                dimension = dimensions[dim];\n\n                if (node.dimension === dim) {\n                    if (node.left !== null) {\n                        return findMin(node.left, dim);\n                    }\n                    return node;\n                }\n\n                own = node.obj[dimension];\n                left = findMin(node.left, dim);\n                right = findMin(node.right, dim);\n                min = node;\n\n                if (left !== null && left.obj[dimension] < own) {\n                    min = left;\n                }\n                if (right !== null && right.obj[dimension] < min.obj[dimension]) {\n                    min = right;\n                }\n                return min;\n            }\n\n            if (node.left === null && node.right === null) {\n                if (node.parent === null) {\n                    self.root = null;\n                    return;\n                }\n\n                pDimension = dimensions[node.parent.dimension];\n\n                if (node.obj[pDimension] < node.parent.obj[pDimension]) {\n                    node.parent.left = null;\n                } else {\n                    node.parent.right = null;\n                }\n                return;\n            }\n\n            // If the right subtree is not empty, swap with the minimum element on the\n            // node's dimension. If it is empty, we swap the left and right subtrees and\n            // do the same.\n            if (node.right !== null) {\n                nextNode = findMin(node.right, node.dimension);\n                nextObj = nextNode.obj;\n                removeNode(nextNode);\n                node.obj = nextObj;\n            } else {\n                nextNode = findMin(node.left, node.dimension);\n                nextObj = nextNode.obj;\n                removeNode(nextNode);\n                node.right = node.left;\n                node.left = null;\n                node.obj = nextObj;\n            }\n\n        }\n\n        node = nodeSearch(self.root);\n\n        if (node === null) {\n            return;\n        }\n\n        removeNode(node);\n    };\n\n    this.nearest = function (point, maxNodes, maxDistance) {\n        var i,\n            result,\n            bestNodes;\n\n        bestNodes = new BinaryHeap(\n            function (e) {\n                return -e[1];\n            }\n        );\n\n        function nearestSearch(node) {\n            var bestChild,\n                dimension = dimensions[node.dimension],\n                ownDistance = metric(point, node.obj),\n                linearPoint = {},\n                linearDistance,\n                otherChild,\n                i;\n\n            function saveNode(node, distance) {\n                bestNodes.push([node, distance]);\n                if (bestNodes.size() > maxNodes) {\n                    bestNodes.pop();\n                }\n            }\n\n            for (i = 0; i < dimensions.length; i += 1) {\n                if (i === node.dimension) {\n                    linearPoint[dimensions[i]] = point[dimensions[i]];\n                } else {\n                    linearPoint[dimensions[i]] = node.obj[dimensions[i]];\n                }\n            }\n\n            linearDistance = metric(linearPoint, node.obj);\n\n            if (node.right === null && node.left === null) {\n                if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {\n                    saveNode(node, ownDistance);\n                }\n                return;\n            }\n\n            if (node.right === null) {\n                bestChild = node.left;\n            } else if (node.left === null) {\n                bestChild = node.right;\n            } else {\n                if (point[dimension] < node.obj[dimension]) {\n                    bestChild = node.left;\n                } else {\n                    bestChild = node.right;\n                }\n            }\n\n            nearestSearch(bestChild);\n\n            if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {\n                saveNode(node, ownDistance);\n            }\n\n            if (bestNodes.size() < maxNodes || Math.abs(linearDistance) < bestNodes.peek()[1]) {\n                if (bestChild === node.left) {\n                    otherChild = node.right;\n                } else {\n                    otherChild = node.left;\n                }\n                if (otherChild !== null) {\n                    nearestSearch(otherChild);\n                }\n            }\n        }\n\n        if (maxDistance) {\n            for (i = 0; i < maxNodes; i += 1) {\n                bestNodes.push([null, maxDistance]);\n            }\n        }\n\n        if (self.root) {\n            nearestSearch(self.root);\n        }\n\n        result = [];\n\n        for (i = 0; i < Math.min(maxNodes, bestNodes.content.length); i += 1) {\n            if (bestNodes.content[i][0]) {\n                result.push([bestNodes.content[i][0].obj, bestNodes.content[i][1]]);\n            }\n        }\n        return result;\n    };\n\n    this.balanceFactor = function () {\n        function height(node) {\n            if (node === null) {\n                return 0;\n            }\n            return Math.max(height(node.left), height(node.right)) + 1;\n        }\n\n        function count(node) {\n            if (node === null) {\n                return 0;\n            }\n            return count(node.left) + count(node.right) + 1;\n        }\n\n        return height(self.root) / (Math.log(count(self.root)) / Math.log(2));\n    };\n}\n\n// Binary heap implementation from:\n// http://eloquentjavascript.net/appendix2.html\n\nfunction BinaryHeap(scoreFunction) {\n    this.content = [];\n    this.scoreFunction = scoreFunction;\n}\n\nBinaryHeap.prototype = {\n    push: function (element) {\n        // Add the new element to the end of the array.\n        this.content.push(element);\n        // Allow it to bubble up.\n        this.bubbleUp(this.content.length - 1);\n    },\n\n    pop: function () {\n        // Store the first element so we can return it later.\n        var result = this.content[0];\n        // Get the element at the end of the array.\n        var end = this.content.pop();\n        // If there are any elements left, put the end element at the\n        // start, and let it sink down.\n        if (this.content.length > 0) {\n            this.content[0] = end;\n            this.sinkDown(0);\n        }\n        return result;\n    },\n\n    peek: function () {\n        return this.content[0];\n    },\n\n    remove: function (node) {\n        var len = this.content.length;\n        // To remove a value, we must search through the array to find\n        // it.\n        for (var i = 0; i < len; i++) {\n            if (this.content[i] == node) {\n                // When it is found, the process seen in 'pop' is repeated\n                // to fill up the hole.\n                var end = this.content.pop();\n                if (i != len - 1) {\n                    this.content[i] = end;\n                    if (this.scoreFunction(end) < this.scoreFunction(node)) {\n                        this.bubbleUp(i);\n                    } else {\n                        this.sinkDown(i);\n                    }\n                }\n                return;\n            }\n        }\n        throw new Error('Node not found.');\n    },\n\n    size: function () {\n        return this.content.length;\n    },\n\n    bubbleUp: function (n) {\n        // Fetch the element that has to be moved.\n        var element = this.content[n];\n        // When at 0, an element can not go up any further.\n        while (n > 0) {\n            // Compute the parent element's index, and fetch it.\n            var parentN = Math.floor((n + 1) / 2) - 1,\n                parent = this.content[parentN];\n            // Swap the elements if the parent is greater.\n            if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n                this.content[parentN] = element;\n                this.content[n] = parent;\n                // Update 'n' to continue at the new position.\n                n = parentN;\n            }\n            // Found a parent that is less, no need to move it further.\n            else {\n                break;\n            }\n        }\n    },\n\n    sinkDown: function (n) {\n        // Look up the target element and its score.\n        var length = this.content.length,\n            element = this.content[n],\n            elemScore = this.scoreFunction(element);\n\n        while (true) {\n            // Compute the indices of the child elements.\n            var child2N = (n + 1) * 2,\n                child1N = child2N - 1;\n            // This is used to store the new position of the element,\n            // if any.\n            var swap = null;\n            // If the first child exists (is inside the array)...\n            if (child1N < length) {\n                // Look it up and compute its score.\n                var child1 = this.content[child1N],\n                    child1Score = this.scoreFunction(child1);\n                // If the score is less than our element's, we need to swap.\n                if (child1Score < elemScore) {\n                    swap = child1N;\n                }\n            }\n            // Do the same checks for the other child.\n            if (child2N < length) {\n                var child2 = this.content[child2N],\n                    child2Score = this.scoreFunction(child2);\n                if (child2Score < (swap == null ? elemScore : child1Score)) {\n                    swap = child2N;\n                }\n            }\n\n            // If the element needs to be moved, swap it, and continue.\n            if (swap != null) {\n                this.content[n] = this.content[swap];\n                this.content[swap] = element;\n                n = swap;\n            }\n            // Otherwise, we are done.\n            else {\n                break;\n            }\n        }\n    }\n};\n\nexport {kdTree, BinaryHeap};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-knn/src/kdTree.js","'use strict';\n\nmodule.exports = exports = require('./naiveBayes').NaiveBayes;\nexports.separateClasses = require('./naiveBayes').separateClasses;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-naivebayes/src/index.js","'use strict';\n\nmodule.exports = require('./matrix').Matrix;\nmodule.exports.Decompositions = module.exports.DC = require('./decompositions');\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-naivebayes/node_modules/ml-matrix/src/index.js","'use strict';\n\nif (!Symbol.species) {\n    Symbol.species = Symbol.for('@@species');\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-naivebayes/node_modules/ml-matrix/src/symbol-species.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixTransposeView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.columns, matrix.rows);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(columnIndex, rowIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(columnIndex, rowIndex);\n    }\n}\n\nmodule.exports = MatrixTransposeView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-naivebayes/node_modules/ml-matrix/src/views/transpose.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixRowView extends BaseView {\n    constructor(matrix, row) {\n        super(matrix, 1, matrix.columns);\n        this.row = row;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.row, columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.row, columnIndex);\n    }\n}\n\nmodule.exports = MatrixRowView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-naivebayes/node_modules/ml-matrix/src/views/row.js","'use strict';\n\nvar BaseView = require('./base');\nvar util = require('../util');\n\nclass MatrixSubView extends BaseView {\n    constructor(matrix, startRow, endRow, startColumn, endColumn) {\n        util.checkRange(matrix, startRow, endRow, startColumn, endColumn);\n        super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n        this.startRow = startRow;\n        this.startColumn = startColumn;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.startRow + rowIndex, this.startColumn + columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.startRow + rowIndex, this.startColumn + columnIndex);\n    }\n}\n\nmodule.exports = MatrixSubView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-naivebayes/node_modules/ml-matrix/src/views/sub.js","'use strict';\n\nvar BaseView = require('./base');\nvar util = require('../util');\n\nclass MatrixSelectionView extends BaseView {\n    constructor(matrix, rowIndices, columnIndices) {\n        var indices = util.checkIndices(matrix, rowIndices, columnIndices);\n        super(matrix, indices.row.length, indices.column.length);\n        this.rowIndices = indices.row;\n        this.columnIndices = indices.column;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.rowIndices[rowIndex], this.columnIndices[columnIndex], value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.rowIndices[rowIndex], this.columnIndices[columnIndex]);\n    }\n}\n\nmodule.exports = MatrixSelectionView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-naivebayes/node_modules/ml-matrix/src/views/selection.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixColumnView extends BaseView {\n    constructor(matrix, column) {\n        super(matrix, matrix.rows, 1);\n        this.column = column;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(rowIndex, this.column, value);\n        return this;\n    }\n\n    get(rowIndex) {\n        return this.matrix.get(rowIndex, this.column);\n    }\n}\n\nmodule.exports = MatrixColumnView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-naivebayes/node_modules/ml-matrix/src/views/column.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixFlipRowView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.rows, matrix.columns);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\n    }\n}\n\nmodule.exports = MatrixFlipRowView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-naivebayes/node_modules/ml-matrix/src/views/flipRow.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixFlipColumnView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.rows, matrix.columns);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\n    }\n}\n\nmodule.exports = MatrixFlipColumnView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-naivebayes/node_modules/ml-matrix/src/views/flipColumn.js","'use strict';\n\nvar Matrix = require('./matrix').Matrix;\n\nvar SingularValueDecomposition = require('./dc/svd');\nvar EigenvalueDecomposition = require('./dc/evd');\nvar LuDecomposition = require('./dc/lu');\nvar QrDecomposition = require('./dc/qr');\nvar CholeskyDecomposition = require('./dc/cholesky');\n\nfunction inverse(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    return solve(matrix, Matrix.eye(matrix.rows));\n}\n\n/**\n * Returns the inverse\n * @memberOf Matrix\n * @static\n * @param {Matrix} matrix\n * @return {Matrix} matrix\n * @alias inv\n */\nMatrix.inverse = Matrix.inv = inverse;\n\n/**\n * Returns the inverse\n * @memberOf Matrix\n * @static\n * @param {Matrix} matrix\n * @return {Matrix} matrix\n * @alias inv\n */\nMatrix.prototype.inverse = Matrix.prototype.inv = function () {\n    return inverse(this);\n};\n\nfunction solve(leftHandSide, rightHandSide) {\n    leftHandSide = Matrix.checkMatrix(leftHandSide);\n    rightHandSide = Matrix.checkMatrix(rightHandSide);\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n}\n\nMatrix.solve = solve;\nMatrix.prototype.solve = function (other) {\n    return solve(this, other);\n};\n\nmodule.exports = {\n    SingularValueDecomposition: SingularValueDecomposition,\n    SVD: SingularValueDecomposition,\n    EigenvalueDecomposition: EigenvalueDecomposition,\n    EVD: EigenvalueDecomposition,\n    LuDecomposition: LuDecomposition,\n    LU: LuDecomposition,\n    QrDecomposition: QrDecomposition,\n    QR: QrDecomposition,\n    CholeskyDecomposition: CholeskyDecomposition,\n    CHO: CholeskyDecomposition,\n    inverse: inverse,\n    solve: solve\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-naivebayes/node_modules/ml-matrix/src/decompositions.js","'use strict';\n\nconst Matrix = require('../matrix').Matrix;\nconst util = require('./util');\nconst hypotenuse = util.hypotenuse;\nconst getFilled2DArray = util.getFilled2DArray;\n\nconst defaultOptions = {\n    assumeSymmetric: false\n};\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\nfunction EigenvalueDecomposition(matrix, options) {\n    options = Object.assign({}, defaultOptions, options);\n    if (!(this instanceof EigenvalueDecomposition)) {\n        return new EigenvalueDecomposition(matrix, options);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n        throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns,\n        V = getFilled2DArray(n, n, 0),\n        d = new Array(n),\n        e = new Array(n),\n        value = matrix,\n        i, j;\n\n    var isSymmetric = false;\n    if (options.assumeSymmetric) {\n        isSymmetric = true;\n    } else {\n        isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                V[i][j] = value.get(i, j);\n            }\n        }\n        tred2(n, e, d, V);\n        tql2(n, e, d, V);\n    } else {\n        var H = getFilled2DArray(n, n, 0),\n            ort = new Array(n);\n        for (j = 0; j < n; j++) {\n            for (i = 0; i < n; i++) {\n                H[i][j] = value.get(i, j);\n            }\n        }\n        orthes(n, H, ort, V);\n        hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n}\n\nEigenvalueDecomposition.prototype = {\n    get realEigenvalues() {\n        return this.d;\n    },\n    get imaginaryEigenvalues() {\n        return this.e;\n    },\n    get eigenvectorMatrix() {\n        if (!Matrix.isMatrix(this.V)) {\n            this.V = new Matrix(this.V);\n        }\n        return this.V;\n    },\n    get diagonalMatrix() {\n        var n = this.n,\n            e = this.e,\n            d = this.d,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                X[i][j] = 0;\n            }\n            X[i][i] = d[i];\n            if (e[i] > 0) {\n                X[i][i + 1] = e[i];\n            } else if (e[i] < 0) {\n                X[i][i - 1] = e[i];\n            }\n        }\n        return X;\n    }\n};\n\nfunction tred2(n, e, d, V) {\n\n    var f, g, h, i, j, k,\n        hh, scale;\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n    }\n\n    for (i = n - 1; i > 0; i--) {\n        scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n            scale = scale + Math.abs(d[k]);\n        }\n\n        if (scale === 0) {\n            e[i] = d[i - 1];\n            for (j = 0; j < i; j++) {\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n                V[j][i] = 0;\n            }\n        } else {\n            for (k = 0; k < i; k++) {\n                d[k] /= scale;\n                h += d[k] * d[k];\n            }\n\n            f = d[i - 1];\n            g = Math.sqrt(h);\n            if (f > 0) {\n                g = -g;\n            }\n\n            e[i] = scale * g;\n            h = h - f * g;\n            d[i - 1] = f - g;\n            for (j = 0; j < i; j++) {\n                e[j] = 0;\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                V[j][i] = f;\n                g = e[j] + V[j][j] * f;\n                for (k = j + 1; k <= i - 1; k++) {\n                    g += V[k][j] * d[k];\n                    e[k] += V[k][j] * f;\n                }\n                e[j] = g;\n            }\n\n            f = 0;\n            for (j = 0; j < i; j++) {\n                e[j] /= h;\n                f += e[j] * d[j];\n            }\n\n            hh = f / (h + h);\n            for (j = 0; j < i; j++) {\n                e[j] -= hh * d[j];\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                g = e[j];\n                for (k = j; k <= i - 1; k++) {\n                    V[k][j] -= (f * e[k] + g * d[k]);\n                }\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n            }\n        }\n        d[i] = h;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        V[n - 1][i] = V[i][i];\n        V[i][i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n            for (k = 0; k <= i; k++) {\n                d[k] = V[k][i + 1] / h;\n            }\n\n            for (j = 0; j <= i; j++) {\n                g = 0;\n                for (k = 0; k <= i; k++) {\n                    g += V[k][i + 1] * V[k][j];\n                }\n                for (k = 0; k <= i; k++) {\n                    V[k][j] -= g * d[k];\n                }\n            }\n        }\n\n        for (k = 0; k <= i; k++) {\n            V[k][i + 1] = 0;\n        }\n    }\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n        V[n - 1][j] = 0;\n    }\n\n    V[n - 1][n - 1] = 1;\n    e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n\n    var g, h, i, j, k, l, m, p, r,\n        dl1, c, c2, c3, el1, s, s2,\n        iter;\n\n    for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n    }\n\n    e[n - 1] = 0;\n\n    var f = 0,\n        tst1 = 0,\n        eps = Math.pow(2, -52);\n\n    for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        m = l;\n        while (m < n) {\n            if (Math.abs(e[m]) <= eps * tst1) {\n                break;\n            }\n            m++;\n        }\n\n        if (m > l) {\n            iter = 0;\n            do {\n                iter = iter + 1;\n\n                g = d[l];\n                p = (d[l + 1] - g) / (2 * e[l]);\n                r = hypotenuse(p, 1);\n                if (p < 0) {\n                    r = -r;\n                }\n\n                d[l] = e[l] / (p + r);\n                d[l + 1] = e[l] * (p + r);\n                dl1 = d[l + 1];\n                h = g - d[l];\n                for (i = l + 2; i < n; i++) {\n                    d[i] -= h;\n                }\n\n                f = f + h;\n\n                p = d[m];\n                c = 1;\n                c2 = c;\n                c3 = c;\n                el1 = e[l + 1];\n                s = 0;\n                s2 = 0;\n                for (i = m - 1; i >= l; i--) {\n                    c3 = c2;\n                    c2 = c;\n                    s2 = s;\n                    g = c * e[i];\n                    h = c * p;\n                    r = hypotenuse(p, e[i]);\n                    e[i + 1] = s * r;\n                    s = e[i] / r;\n                    c = p / r;\n                    p = c * d[i] - s * g;\n                    d[i + 1] = h + s * (c * g + s * d[i]);\n\n                    for (k = 0; k < n; k++) {\n                        h = V[k][i + 1];\n                        V[k][i + 1] = s * V[k][i] + c * h;\n                        V[k][i] = c * V[k][i] - s * h;\n                    }\n                }\n\n                p = -s * s2 * c3 * el1 * e[l] / dl1;\n                e[l] = s * p;\n                d[l] = c * p;\n\n            }\n            while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n            if (d[j] < p) {\n                k = j;\n                p = d[j];\n            }\n        }\n\n        if (k !== i) {\n            d[k] = d[i];\n            d[i] = p;\n            for (j = 0; j < n; j++) {\n                p = V[j][i];\n                V[j][i] = V[j][k];\n                V[j][k] = p;\n            }\n        }\n    }\n}\n\nfunction orthes(n, H, ort, V) {\n\n    var low = 0,\n        high = n - 1,\n        f, g, h, i, j, m,\n        scale;\n\n    for (m = low + 1; m <= high - 1; m++) {\n        scale = 0;\n        for (i = m; i <= high; i++) {\n            scale = scale + Math.abs(H[i][m - 1]);\n        }\n\n        if (scale !== 0) {\n            h = 0;\n            for (i = high; i >= m; i--) {\n                ort[i] = H[i][m - 1] / scale;\n                h += ort[i] * ort[i];\n            }\n\n            g = Math.sqrt(h);\n            if (ort[m] > 0) {\n                g = -g;\n            }\n\n            h = h - ort[m] * g;\n            ort[m] = ort[m] - g;\n\n            for (j = m; j < n; j++) {\n                f = 0;\n                for (i = high; i >= m; i--) {\n                    f += ort[i] * H[i][j];\n                }\n\n                f = f / h;\n                for (i = m; i <= high; i++) {\n                    H[i][j] -= f * ort[i];\n                }\n            }\n\n            for (i = 0; i <= high; i++) {\n                f = 0;\n                for (j = high; j >= m; j--) {\n                    f += ort[j] * H[i][j];\n                }\n\n                f = f / h;\n                for (j = m; j <= high; j++) {\n                    H[i][j] -= f * ort[j];\n                }\n            }\n\n            ort[m] = scale * ort[m];\n            H[m][m - 1] = scale * g;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            V[i][j] = (i === j ? 1 : 0);\n        }\n    }\n\n    for (m = high - 1; m >= low + 1; m--) {\n        if (H[m][m - 1] !== 0) {\n            for (i = m + 1; i <= high; i++) {\n                ort[i] = H[i][m - 1];\n            }\n\n            for (j = m; j <= high; j++) {\n                g = 0;\n                for (i = m; i <= high; i++) {\n                    g += ort[i] * V[i][j];\n                }\n\n                g = (g / ort[m]) / H[m][m - 1];\n                for (i = m; i <= high; i++) {\n                    V[i][j] += g * ort[i];\n                }\n            }\n        }\n    }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n    var n = nn - 1,\n        low = 0,\n        high = nn - 1,\n        eps = Math.pow(2, -52),\n        exshift = 0,\n        norm = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n        s = 0,\n        z = 0,\n        iter = 0,\n        i, j, k, l, m, t, w, x, y,\n        ra, sa, vr, vi,\n        notlast, cdivres;\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            d[i] = H[i][i];\n            e[i] = 0;\n        }\n\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n            norm = norm + Math.abs(H[i][j]);\n        }\n    }\n\n    while (n >= low) {\n        l = n;\n        while (l > low) {\n            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n            if (s === 0) {\n                s = norm;\n            }\n            if (Math.abs(H[l][l - 1]) < eps * s) {\n                break;\n            }\n            l--;\n        }\n\n        if (l === n) {\n            H[n][n] = H[n][n] + exshift;\n            d[n] = H[n][n];\n            e[n] = 0;\n            n--;\n            iter = 0;\n        } else if (l === n - 1) {\n            w = H[n][n - 1] * H[n - 1][n];\n            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n            q = p * p + w;\n            z = Math.sqrt(Math.abs(q));\n            H[n][n] = H[n][n] + exshift;\n            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n            x = H[n][n];\n\n            if (q >= 0) {\n                z = (p >= 0) ? (p + z) : (p - z);\n                d[n - 1] = x + z;\n                d[n] = d[n - 1];\n                if (z !== 0) {\n                    d[n] = x - w / z;\n                }\n                e[n - 1] = 0;\n                e[n] = 0;\n                x = H[n][n - 1];\n                s = Math.abs(x) + Math.abs(z);\n                p = x / s;\n                q = z / s;\n                r = Math.sqrt(p * p + q * q);\n                p = p / r;\n                q = q / r;\n\n                for (j = n - 1; j < nn; j++) {\n                    z = H[n - 1][j];\n                    H[n - 1][j] = q * z + p * H[n][j];\n                    H[n][j] = q * H[n][j] - p * z;\n                }\n\n                for (i = 0; i <= n; i++) {\n                    z = H[i][n - 1];\n                    H[i][n - 1] = q * z + p * H[i][n];\n                    H[i][n] = q * H[i][n] - p * z;\n                }\n\n                for (i = low; i <= high; i++) {\n                    z = V[i][n - 1];\n                    V[i][n - 1] = q * z + p * V[i][n];\n                    V[i][n] = q * V[i][n] - p * z;\n                }\n            } else {\n                d[n - 1] = x + p;\n                d[n] = x + p;\n                e[n - 1] = z;\n                e[n] = -z;\n            }\n\n            n = n - 2;\n            iter = 0;\n        } else {\n            x = H[n][n];\n            y = 0;\n            w = 0;\n            if (l < n) {\n                y = H[n - 1][n - 1];\n                w = H[n][n - 1] * H[n - 1][n];\n            }\n\n            if (iter === 10) {\n                exshift += x;\n                for (i = low; i <= n; i++) {\n                    H[i][i] -= x;\n                }\n                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n                x = y = 0.75 * s;\n                w = -0.4375 * s * s;\n            }\n\n            if (iter === 30) {\n                s = (y - x) / 2;\n                s = s * s + w;\n                if (s > 0) {\n                    s = Math.sqrt(s);\n                    if (y < x) {\n                        s = -s;\n                    }\n                    s = x - w / ((y - x) / 2 + s);\n                    for (i = low; i <= n; i++) {\n                        H[i][i] -= s;\n                    }\n                    exshift += s;\n                    x = y = w = 0.964;\n                }\n            }\n\n            iter = iter + 1;\n\n            m = n - 2;\n            while (m >= l) {\n                z = H[m][m];\n                r = x - z;\n                s = y - z;\n                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n                q = H[m + 1][m + 1] - z - r - s;\n                r = H[m + 2][m + 1];\n                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                p = p / s;\n                q = q / s;\n                r = r / s;\n                if (m === l) {\n                    break;\n                }\n                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n                    break;\n                }\n                m--;\n            }\n\n            for (i = m + 2; i <= n; i++) {\n                H[i][i - 2] = 0;\n                if (i > m + 2) {\n                    H[i][i - 3] = 0;\n                }\n            }\n\n            for (k = m; k <= n - 1; k++) {\n                notlast = (k !== n - 1);\n                if (k !== m) {\n                    p = H[k][k - 1];\n                    q = H[k + 1][k - 1];\n                    r = (notlast ? H[k + 2][k - 1] : 0);\n                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                    if (x !== 0) {\n                        p = p / x;\n                        q = q / x;\n                        r = r / x;\n                    }\n                }\n\n                if (x === 0) {\n                    break;\n                }\n\n                s = Math.sqrt(p * p + q * q + r * r);\n                if (p < 0) {\n                    s = -s;\n                }\n\n                if (s !== 0) {\n                    if (k !== m) {\n                        H[k][k - 1] = -s * x;\n                    } else if (l !== m) {\n                        H[k][k - 1] = -H[k][k - 1];\n                    }\n\n                    p = p + s;\n                    x = p / s;\n                    y = q / s;\n                    z = r / s;\n                    q = q / p;\n                    r = r / p;\n\n                    for (j = k; j < nn; j++) {\n                        p = H[k][j] + q * H[k + 1][j];\n                        if (notlast) {\n                            p = p + r * H[k + 2][j];\n                            H[k + 2][j] = H[k + 2][j] - p * z;\n                        }\n\n                        H[k][j] = H[k][j] - p * x;\n                        H[k + 1][j] = H[k + 1][j] - p * y;\n                    }\n\n                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n                        p = x * H[i][k] + y * H[i][k + 1];\n                        if (notlast) {\n                            p = p + z * H[i][k + 2];\n                            H[i][k + 2] = H[i][k + 2] - p * r;\n                        }\n\n                        H[i][k] = H[i][k] - p;\n                        H[i][k + 1] = H[i][k + 1] - p * q;\n                    }\n\n                    for (i = low; i <= high; i++) {\n                        p = x * V[i][k] + y * V[i][k + 1];\n                        if (notlast) {\n                            p = p + z * V[i][k + 2];\n                            V[i][k + 2] = V[i][k + 2] - p * r;\n                        }\n\n                        V[i][k] = V[i][k] - p;\n                        V[i][k + 1] = V[i][k + 1] - p * q;\n                    }\n                }\n            }\n        }\n    }\n\n    if (norm === 0) {\n        return;\n    }\n\n    for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n\n        if (q === 0) {\n            l = n;\n            H[n][n] = 1;\n            for (i = n - 1; i >= 0; i--) {\n                w = H[i][i] - p;\n                r = 0;\n                for (j = l; j <= n; j++) {\n                    r = r + H[i][j] * H[j][n];\n                }\n\n                if (e[i] < 0) {\n                    z = w;\n                    s = r;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                        t = (x * s - z * r) / q;\n                        H[i][n] = t;\n                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n                    }\n\n                    t = Math.abs(H[i][n]);\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        } else if (q < 0) {\n            l = n - 1;\n\n            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n                H[n - 1][n - 1] = q / H[n][n - 1];\n                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n            } else {\n                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n                H[n - 1][n - 1] = cdivres[0];\n                H[n - 1][n] = cdivres[1];\n            }\n\n            H[n][n - 1] = 0;\n            H[n][n] = 1;\n            for (i = n - 2; i >= 0; i--) {\n                ra = 0;\n                sa = 0;\n                for (j = l; j <= n; j++) {\n                    ra = ra + H[i][j] * H[j][n - 1];\n                    sa = sa + H[i][j] * H[j][n];\n                }\n\n                w = H[i][i] - p;\n\n                if (e[i] < 0) {\n                    z = w;\n                    r = ra;\n                    s = sa;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        cdivres = cdiv(-ra, -sa, w, q);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                        vi = (d[i] - p) * 2 * q;\n                        if (vr === 0 && vi === 0) {\n                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                        }\n                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n                        } else {\n                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n                            H[i + 1][n - 1] = cdivres[0];\n                            H[i + 1][n] = cdivres[1];\n                        }\n                    }\n\n                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n - 1] = H[j][n - 1] / t;\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            for (j = i; j < nn; j++) {\n                V[i][j] = H[i][j];\n            }\n        }\n    }\n\n    for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n            z = 0;\n            for (k = low; k <= Math.min(j, high); k++) {\n                z = z + V[i][k] * H[k][j];\n            }\n            V[i][j] = z;\n        }\n    }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n    var r, d;\n    if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        return [(xr + r * xi) / d, (xi - r * xr) / d];\n    } else {\n        r = yr / yi;\n        d = yi + r * yr;\n        return [(r * xr + xi) / d, (r * xi - xr) / d];\n    }\n}\n\nmodule.exports = EigenvalueDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-naivebayes/node_modules/ml-matrix/src/dc/evd.js","'use strict';\n\nvar Matrix = require('../matrix').Matrix;\nvar hypotenuse = require('./util').hypotenuse;\n\n//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\nfunction QrDecomposition(value) {\n    if (!(this instanceof QrDecomposition)) {\n        return new QrDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n\n    var qr = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        rdiag = new Array(n),\n        i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) {\n            nrm = hypotenuse(nrm, qr[i][k]);\n        }\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) {\n                nrm = -nrm;\n            }\n            for (i = k; i < m; i++) {\n                qr[i][k] /= nrm;\n            }\n            qr[k][k] += 1;\n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * qr[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    qr[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n}\n\nQrDecomposition.prototype = {\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var qr = this.QR,\n            m = qr.rows;\n\n        if (value.rows !== m) {\n            throw new Error('Matrix row dimensions must agree');\n        }\n        if (!this.isFullRank()) {\n            throw new Error('Matrix is rank deficient');\n        }\n\n        var count = value.columns;\n        var X = value.clone();\n        var n = qr.columns;\n        var i, j, k, s;\n\n        for (k = 0; k < n; k++) {\n            for (j = 0; j < count; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * X[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    X[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        for (k = n - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= this.Rdiag[k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * qr[i][k];\n                }\n            }\n        }\n\n        return X.subMatrix(0, n - 1, 0, count - 1);\n    },\n    isFullRank: function () {\n        var columns = this.QR.columns;\n        for (var i = 0; i < columns; i++) {\n            if (this.Rdiag[i] === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n    get upperTriangularMatrix() {\n        var qr = this.QR,\n            n = qr.columns,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                if (i < j) {\n                    X[i][j] = qr[i][j];\n                } else if (i === j) {\n                    X[i][j] = this.Rdiag[i];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get orthogonalMatrix() {\n        var qr = this.QR,\n            rows = qr.rows,\n            columns = qr.columns,\n            X = new Matrix(rows, columns),\n            i, j, k, s;\n\n        for (k = columns - 1; k >= 0; k--) {\n            for (i = 0; i < rows; i++) {\n                X[i][k] = 0;\n            }\n            X[k][k] = 1;\n            for (j = k; j < columns; j++) {\n                if (qr[k][k] !== 0) {\n                    s = 0;\n                    for (i = k; i < rows; i++) {\n                        s += qr[i][k] * X[i][j];\n                    }\n\n                    s = -s / qr[k][k];\n\n                    for (i = k; i < rows; i++) {\n                        X[i][j] += s * qr[i][k];\n                    }\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = QrDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-naivebayes/node_modules/ml-matrix/src/dc/qr.js","'use strict';\n\nvar Matrix = require('../matrix').Matrix;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\nfunction CholeskyDecomposition(value) {\n    if (!(this instanceof CholeskyDecomposition)) {\n        return new CholeskyDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n    if (!value.isSymmetric()) {\n        throw new Error('Matrix is not symmetric');\n    }\n\n    var a = value,\n        dimension = a.rows,\n        l = new Matrix(dimension, dimension),\n        positiveDefinite = true,\n        i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n        var Lrowj = l[j];\n        var d = 0;\n        for (k = 0; k < j; k++) {\n            var Lrowk = l[k];\n            var s = 0;\n            for (i = 0; i < k; i++) {\n                s += Lrowk[i] * Lrowj[i];\n            }\n            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n            d = d + s * s;\n        }\n\n        d = a[j][j] - d;\n\n        positiveDefinite &= (d > 0);\n        l[j][j] = Math.sqrt(Math.max(d, 0));\n        for (k = j + 1; k < dimension; k++) {\n            l[j][k] = 0;\n        }\n    }\n\n    if (!positiveDefinite) {\n        throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n}\n\nCholeskyDecomposition.prototype = {\n    get lowerTriangularMatrix() {\n        return this.L;\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var l = this.L,\n            dimension = l.rows;\n\n        if (value.rows !== dimension) {\n            throw new Error('Matrix dimensions do not match');\n        }\n\n        var count = value.columns,\n            B = value.clone(),\n            i, j, k;\n\n        for (k = 0; k < dimension; k++) {\n            for (j = 0; j < count; j++) {\n                for (i = 0; i < k; i++) {\n                    B[k][j] -= B[i][j] * l[k][i];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        for (k = dimension - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                for (i = k + 1; i < dimension; i++) {\n                    B[k][j] -= B[i][j] * l[i][k];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        return B;\n    }\n};\n\nmodule.exports = CholeskyDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-naivebayes/node_modules/ml-matrix/src/dc/cholesky.js","module.exports = exports = require('./pls');\nexports.Utils = require('./utils');\nexports.OPLS = require('./opls');\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pls/src/index.js","'use strict';\n\nvar Matrix = require('ml-matrix');\nvar Utils = require('./utils');\n\nclass PLS {\n    constructor(X, Y) {\n        if (X === true) {\n            const model = Y;\n            this.meanX = model.meanX;\n            this.stdDevX = model.stdDevX;\n            this.meanY = model.meanY;\n            this.stdDevY = model.stdDevY;\n            this.PBQ = Matrix.checkMatrix(model.PBQ);\n            this.R2X = model.R2X;\n        } else {\n            if (X.length !== Y.length)\n                throw new RangeError('The number of X rows must be equal to the number of Y rows');\n\n            const resultX = Utils.featureNormalize(X);\n            this.X = resultX.result;\n            this.meanX = resultX.means;\n            this.stdDevX = resultX.std;\n\n            const resultY = Utils.featureNormalize(Y);\n            this.Y = resultY.result;\n            this.meanY = resultY.means;\n            this.stdDevY = resultY.std;\n        }\n    }\n\n    /**\n     * Fits the model with the given data and predictions, in this function is calculated the\n     * following outputs:\n     *\n     * T - Score matrix of X\n     * P - Loading matrix of X\n     * U - Score matrix of Y\n     * Q - Loading matrix of Y\n     * B - Matrix of regression coefficient\n     * W - Weight matrix of X\n     *\n     * @param {Object} options - recieves the latentVectors and the tolerance of each step of the PLS\n     */\n    train(options) {\n        if(options === undefined) options = {};\n\n        var latentVectors = options.latentVectors;\n        if (latentVectors === undefined) {\n            latentVectors = Math.min(this.X.length - 1, this.X[0].length);\n        }\n\n        var tolerance = options.tolerance;\n        if (tolerance === undefined) {\n            tolerance = 1e-5;\n        }\n        \n        var X = this.X;\n        var Y = this.Y;\n\n        var rx = X.rows;\n        var cx = X.columns;\n        var ry = Y.rows;\n        var cy = Y.columns;\n\n        var ssqXcal = X.clone().mul(X).sum(); // for the r²\n        var sumOfSquaresY = Y.clone().mul(Y).sum();\n\n        var n = latentVectors; //Math.max(cx, cy); // components of the pls\n        var T = Matrix.zeros(rx, n);\n        var P = Matrix.zeros(cx, n);\n        var U = Matrix.zeros(ry, n);\n        var Q = Matrix.zeros(cy, n);\n        var B = Matrix.zeros(n, n);\n        var W = P.clone();\n        var k = 0;\n\n        while(Utils.norm(Y) > tolerance && k < n) {\n            var transposeX = X.transpose();\n            var transposeY = Y.transpose();\n\n            var tIndex = maxSumColIndex(X.clone().mulM(X));\n            var uIndex = maxSumColIndex(Y.clone().mulM(Y));\n\n            var t1 = X.getColumnVector(tIndex);\n            var u = Y.getColumnVector(uIndex);\n            var t = Matrix.zeros(rx, 1);\n\n            while(Utils.norm(t1.clone().sub(t)) > tolerance) {\n                var w = transposeX.mmul(u);\n                w.div(Utils.norm(w));\n                t = t1;\n                t1 = X.mmul(w);\n                var q = transposeY.mmul(t1);\n                q.div(Utils.norm(q));\n                u = Y.mmul(q);\n            }\n\n            t = t1;\n            var num = transposeX.mmul(t);\n            var den = (t.transpose().mmul(t))[0][0];\n            var p = num.div(den);\n            var pnorm = Utils.norm(p);\n            p.div(pnorm);\n            t.mul(pnorm);\n            w.mul(pnorm);\n\n            num = u.transpose().mmul(t);\n            den = (t.transpose().mmul(t))[0][0];\n            var b = (num.div(den))[0][0];\n            X.sub(t.mmul(p.transpose()));\n            Y.sub(t.clone().mul(b).mmul(q.transpose()));\n\n            T.setColumn(k, t);\n            P.setColumn(k, p);\n            U.setColumn(k, u);\n            Q.setColumn(k, q);\n            W.setColumn(k, w);\n\n            B[k][k] = b;\n            k++;\n        }\n\n        k--;\n        T = T.subMatrix(0, T.rows - 1, 0, k);\n        P = P.subMatrix(0, P.rows - 1, 0, k);\n        U = U.subMatrix(0, U.rows - 1, 0, k);\n        Q = Q.subMatrix(0, Q.rows - 1, 0, k);\n        W = W.subMatrix(0, W.rows - 1, 0, k);\n        B = B.subMatrix(0, k, 0, k);\n\n        // TODO: review of R2Y\n        //this.R2Y = t.transpose().mmul(t).mul(q[k][0]*q[k][0]).divS(ssqYcal)[0][0];\n\n        this.ssqYcal = sumOfSquaresY;\n        this.E = X;\n        this.F = Y;\n        this.T = T;\n        this.P = P;\n        this.U = U;\n        this.Q = Q;\n        this.W = W;\n        this.B = B;\n        this.PBQ = P.mmul(B).mmul(Q.transpose());\n        this.R2X = t.transpose().mmul(t).mmul(p.transpose().mmul(p)).div(ssqXcal)[0][0];\n    }\n\n    /**\n     * Predicts the behavior of the given dataset.\n     * @param dataset - data to be predicted.\n     * @returns {Matrix} - predictions of each element of the dataset.\n     */\n    predict(dataset) {\n        var X = Matrix.checkMatrix(dataset);\n        X = X.subRowVector(this.meanX).divRowVector(this.stdDevX);\n        var Y = X.mmul(this.PBQ);\n        Y = Y.mulRowVector(this.stdDevY).addRowVector(this.meanY);\n        return Y;\n    }\n\n    /**\n     * Returns the explained variance on training of the PLS model\n     * @return {number}\n     */\n    getExplainedVariance() {\n        return this.R2X;\n    }\n    \n    toJSON() {\n        return {\n            name: 'PLS',\n            R2X: this.R2X,\n            meanX: this.meanX,\n            stdDevX: this.stdDevX,\n            meanY: this.meanY,\n            stdDevY: this.stdDevY,\n            PBQ: this.PBQ,\n        };\n    }\n\n    /**\n     * Load a PLS model from a JSON Object\n     * @param model\n     * @return {PLS} - PLS object from the given model\n     */\n    static load(model) {\n        if (model.name !== 'PLS')\n            throw new RangeError('Invalid model: ' + model.name);\n        return new PLS(true, model);\n    }\n}\n\nmodule.exports = PLS;\n\n/**\n * Retrieves the sum at the column of the given matrix.\n * @param matrix\n * @param column\n * @returns {number}\n */\nfunction getColSum(matrix, column) {\n    var sum = 0;\n    for (var i = 0; i < matrix.rows; i++) {\n        sum += matrix[i][column];\n    }\n    return sum;\n}\n\n/**\n * Function that returns the index where the sum of each\n * column vector is maximum.\n * @param {Matrix} data\n * @returns {number} index of the maximum\n */\nfunction maxSumColIndex(data) {\n    var maxIndex = 0;\n    var maxSum = -Infinity;\n    for(var i = 0; i < data.columns; ++i) {\n        var currentSum = getColSum(data, i);\n        if(currentSum > maxSum) {\n            maxSum = currentSum;\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pls/src/pls.js","'use strict';\n\nif (!Symbol.species) {\n    Symbol.species = Symbol.for('@@species');\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pls/node_modules/ml-matrix/src/symbol-species.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixTransposeView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.columns, matrix.rows);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(columnIndex, rowIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(columnIndex, rowIndex);\n    }\n}\n\nmodule.exports = MatrixTransposeView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pls/node_modules/ml-matrix/src/views/transpose.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixRowView extends BaseView {\n    constructor(matrix, row) {\n        super(matrix, 1, matrix.columns);\n        this.row = row;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.row, columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.row, columnIndex);\n    }\n}\n\nmodule.exports = MatrixRowView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pls/node_modules/ml-matrix/src/views/row.js","'use strict';\n\nvar BaseView = require('./base');\nvar util = require('../util');\n\nclass MatrixSubView extends BaseView {\n    constructor(matrix, startRow, endRow, startColumn, endColumn) {\n        util.checkRange(matrix, startRow, endRow, startColumn, endColumn);\n        super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n        this.startRow = startRow;\n        this.startColumn = startColumn;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.startRow + rowIndex, this.startColumn + columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.startRow + rowIndex, this.startColumn + columnIndex);\n    }\n}\n\nmodule.exports = MatrixSubView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pls/node_modules/ml-matrix/src/views/sub.js","'use strict';\n\nvar BaseView = require('./base');\nvar util = require('../util');\n\nclass MatrixSelectionView extends BaseView {\n    constructor(matrix, rowIndices, columnIndices) {\n        var indices = util.checkIndices(matrix, rowIndices, columnIndices);\n        super(matrix, indices.row.length, indices.column.length);\n        this.rowIndices = indices.row;\n        this.columnIndices = indices.column;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.rowIndices[rowIndex], this.columnIndices[columnIndex], value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.rowIndices[rowIndex], this.columnIndices[columnIndex]);\n    }\n}\n\nmodule.exports = MatrixSelectionView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pls/node_modules/ml-matrix/src/views/selection.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixColumnView extends BaseView {\n    constructor(matrix, column) {\n        super(matrix, matrix.rows, 1);\n        this.column = column;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(rowIndex, this.column, value);\n        return this;\n    }\n\n    get(rowIndex) {\n        return this.matrix.get(rowIndex, this.column);\n    }\n}\n\nmodule.exports = MatrixColumnView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pls/node_modules/ml-matrix/src/views/column.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixFlipRowView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.rows, matrix.columns);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\n    }\n}\n\nmodule.exports = MatrixFlipRowView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pls/node_modules/ml-matrix/src/views/flipRow.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixFlipColumnView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.rows, matrix.columns);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\n    }\n}\n\nmodule.exports = MatrixFlipColumnView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pls/node_modules/ml-matrix/src/views/flipColumn.js","'use strict';\n\nvar Matrix = require('./matrix').Matrix;\n\nvar SingularValueDecomposition = require('./dc/svd');\nvar EigenvalueDecomposition = require('./dc/evd');\nvar LuDecomposition = require('./dc/lu');\nvar QrDecomposition = require('./dc/qr');\nvar CholeskyDecomposition = require('./dc/cholesky');\n\nfunction inverse(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    return solve(matrix, Matrix.eye(matrix.rows));\n}\n\n/**\n * Returns the inverse\n * @memberOf Matrix\n * @static\n * @param {Matrix} matrix\n * @return {Matrix} matrix\n * @alias inv\n */\nMatrix.inverse = Matrix.inv = inverse;\n\n/**\n * Returns the inverse\n * @memberOf Matrix\n * @static\n * @param {Matrix} matrix\n * @return {Matrix} matrix\n * @alias inv\n */\nMatrix.prototype.inverse = Matrix.prototype.inv = function () {\n    return inverse(this);\n};\n\nfunction solve(leftHandSide, rightHandSide) {\n    leftHandSide = Matrix.checkMatrix(leftHandSide);\n    rightHandSide = Matrix.checkMatrix(rightHandSide);\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n}\n\nMatrix.solve = solve;\nMatrix.prototype.solve = function (other) {\n    return solve(this, other);\n};\n\nmodule.exports = {\n    SingularValueDecomposition: SingularValueDecomposition,\n    SVD: SingularValueDecomposition,\n    EigenvalueDecomposition: EigenvalueDecomposition,\n    EVD: EigenvalueDecomposition,\n    LuDecomposition: LuDecomposition,\n    LU: LuDecomposition,\n    QrDecomposition: QrDecomposition,\n    QR: QrDecomposition,\n    CholeskyDecomposition: CholeskyDecomposition,\n    CHO: CholeskyDecomposition,\n    inverse: inverse,\n    solve: solve\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pls/node_modules/ml-matrix/src/decompositions.js","'use strict';\n\nconst Matrix = require('../matrix').Matrix;\nconst util = require('./util');\nconst hypotenuse = util.hypotenuse;\nconst getFilled2DArray = util.getFilled2DArray;\n\nconst defaultOptions = {\n    assumeSymmetric: false\n};\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\nfunction EigenvalueDecomposition(matrix, options) {\n    options = Object.assign({}, defaultOptions, options);\n    if (!(this instanceof EigenvalueDecomposition)) {\n        return new EigenvalueDecomposition(matrix, options);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n        throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns,\n        V = getFilled2DArray(n, n, 0),\n        d = new Array(n),\n        e = new Array(n),\n        value = matrix,\n        i, j;\n\n    var isSymmetric = false;\n    if (options.assumeSymmetric) {\n        isSymmetric = true;\n    } else {\n        isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                V[i][j] = value.get(i, j);\n            }\n        }\n        tred2(n, e, d, V);\n        tql2(n, e, d, V);\n    } else {\n        var H = getFilled2DArray(n, n, 0),\n            ort = new Array(n);\n        for (j = 0; j < n; j++) {\n            for (i = 0; i < n; i++) {\n                H[i][j] = value.get(i, j);\n            }\n        }\n        orthes(n, H, ort, V);\n        hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n}\n\nEigenvalueDecomposition.prototype = {\n    get realEigenvalues() {\n        return this.d;\n    },\n    get imaginaryEigenvalues() {\n        return this.e;\n    },\n    get eigenvectorMatrix() {\n        if (!Matrix.isMatrix(this.V)) {\n            this.V = new Matrix(this.V);\n        }\n        return this.V;\n    },\n    get diagonalMatrix() {\n        var n = this.n,\n            e = this.e,\n            d = this.d,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                X[i][j] = 0;\n            }\n            X[i][i] = d[i];\n            if (e[i] > 0) {\n                X[i][i + 1] = e[i];\n            } else if (e[i] < 0) {\n                X[i][i - 1] = e[i];\n            }\n        }\n        return X;\n    }\n};\n\nfunction tred2(n, e, d, V) {\n\n    var f, g, h, i, j, k,\n        hh, scale;\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n    }\n\n    for (i = n - 1; i > 0; i--) {\n        scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n            scale = scale + Math.abs(d[k]);\n        }\n\n        if (scale === 0) {\n            e[i] = d[i - 1];\n            for (j = 0; j < i; j++) {\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n                V[j][i] = 0;\n            }\n        } else {\n            for (k = 0; k < i; k++) {\n                d[k] /= scale;\n                h += d[k] * d[k];\n            }\n\n            f = d[i - 1];\n            g = Math.sqrt(h);\n            if (f > 0) {\n                g = -g;\n            }\n\n            e[i] = scale * g;\n            h = h - f * g;\n            d[i - 1] = f - g;\n            for (j = 0; j < i; j++) {\n                e[j] = 0;\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                V[j][i] = f;\n                g = e[j] + V[j][j] * f;\n                for (k = j + 1; k <= i - 1; k++) {\n                    g += V[k][j] * d[k];\n                    e[k] += V[k][j] * f;\n                }\n                e[j] = g;\n            }\n\n            f = 0;\n            for (j = 0; j < i; j++) {\n                e[j] /= h;\n                f += e[j] * d[j];\n            }\n\n            hh = f / (h + h);\n            for (j = 0; j < i; j++) {\n                e[j] -= hh * d[j];\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                g = e[j];\n                for (k = j; k <= i - 1; k++) {\n                    V[k][j] -= (f * e[k] + g * d[k]);\n                }\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n            }\n        }\n        d[i] = h;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        V[n - 1][i] = V[i][i];\n        V[i][i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n            for (k = 0; k <= i; k++) {\n                d[k] = V[k][i + 1] / h;\n            }\n\n            for (j = 0; j <= i; j++) {\n                g = 0;\n                for (k = 0; k <= i; k++) {\n                    g += V[k][i + 1] * V[k][j];\n                }\n                for (k = 0; k <= i; k++) {\n                    V[k][j] -= g * d[k];\n                }\n            }\n        }\n\n        for (k = 0; k <= i; k++) {\n            V[k][i + 1] = 0;\n        }\n    }\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n        V[n - 1][j] = 0;\n    }\n\n    V[n - 1][n - 1] = 1;\n    e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n\n    var g, h, i, j, k, l, m, p, r,\n        dl1, c, c2, c3, el1, s, s2,\n        iter;\n\n    for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n    }\n\n    e[n - 1] = 0;\n\n    var f = 0,\n        tst1 = 0,\n        eps = Math.pow(2, -52);\n\n    for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        m = l;\n        while (m < n) {\n            if (Math.abs(e[m]) <= eps * tst1) {\n                break;\n            }\n            m++;\n        }\n\n        if (m > l) {\n            iter = 0;\n            do {\n                iter = iter + 1;\n\n                g = d[l];\n                p = (d[l + 1] - g) / (2 * e[l]);\n                r = hypotenuse(p, 1);\n                if (p < 0) {\n                    r = -r;\n                }\n\n                d[l] = e[l] / (p + r);\n                d[l + 1] = e[l] * (p + r);\n                dl1 = d[l + 1];\n                h = g - d[l];\n                for (i = l + 2; i < n; i++) {\n                    d[i] -= h;\n                }\n\n                f = f + h;\n\n                p = d[m];\n                c = 1;\n                c2 = c;\n                c3 = c;\n                el1 = e[l + 1];\n                s = 0;\n                s2 = 0;\n                for (i = m - 1; i >= l; i--) {\n                    c3 = c2;\n                    c2 = c;\n                    s2 = s;\n                    g = c * e[i];\n                    h = c * p;\n                    r = hypotenuse(p, e[i]);\n                    e[i + 1] = s * r;\n                    s = e[i] / r;\n                    c = p / r;\n                    p = c * d[i] - s * g;\n                    d[i + 1] = h + s * (c * g + s * d[i]);\n\n                    for (k = 0; k < n; k++) {\n                        h = V[k][i + 1];\n                        V[k][i + 1] = s * V[k][i] + c * h;\n                        V[k][i] = c * V[k][i] - s * h;\n                    }\n                }\n\n                p = -s * s2 * c3 * el1 * e[l] / dl1;\n                e[l] = s * p;\n                d[l] = c * p;\n\n            }\n            while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n            if (d[j] < p) {\n                k = j;\n                p = d[j];\n            }\n        }\n\n        if (k !== i) {\n            d[k] = d[i];\n            d[i] = p;\n            for (j = 0; j < n; j++) {\n                p = V[j][i];\n                V[j][i] = V[j][k];\n                V[j][k] = p;\n            }\n        }\n    }\n}\n\nfunction orthes(n, H, ort, V) {\n\n    var low = 0,\n        high = n - 1,\n        f, g, h, i, j, m,\n        scale;\n\n    for (m = low + 1; m <= high - 1; m++) {\n        scale = 0;\n        for (i = m; i <= high; i++) {\n            scale = scale + Math.abs(H[i][m - 1]);\n        }\n\n        if (scale !== 0) {\n            h = 0;\n            for (i = high; i >= m; i--) {\n                ort[i] = H[i][m - 1] / scale;\n                h += ort[i] * ort[i];\n            }\n\n            g = Math.sqrt(h);\n            if (ort[m] > 0) {\n                g = -g;\n            }\n\n            h = h - ort[m] * g;\n            ort[m] = ort[m] - g;\n\n            for (j = m; j < n; j++) {\n                f = 0;\n                for (i = high; i >= m; i--) {\n                    f += ort[i] * H[i][j];\n                }\n\n                f = f / h;\n                for (i = m; i <= high; i++) {\n                    H[i][j] -= f * ort[i];\n                }\n            }\n\n            for (i = 0; i <= high; i++) {\n                f = 0;\n                for (j = high; j >= m; j--) {\n                    f += ort[j] * H[i][j];\n                }\n\n                f = f / h;\n                for (j = m; j <= high; j++) {\n                    H[i][j] -= f * ort[j];\n                }\n            }\n\n            ort[m] = scale * ort[m];\n            H[m][m - 1] = scale * g;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            V[i][j] = (i === j ? 1 : 0);\n        }\n    }\n\n    for (m = high - 1; m >= low + 1; m--) {\n        if (H[m][m - 1] !== 0) {\n            for (i = m + 1; i <= high; i++) {\n                ort[i] = H[i][m - 1];\n            }\n\n            for (j = m; j <= high; j++) {\n                g = 0;\n                for (i = m; i <= high; i++) {\n                    g += ort[i] * V[i][j];\n                }\n\n                g = (g / ort[m]) / H[m][m - 1];\n                for (i = m; i <= high; i++) {\n                    V[i][j] += g * ort[i];\n                }\n            }\n        }\n    }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n    var n = nn - 1,\n        low = 0,\n        high = nn - 1,\n        eps = Math.pow(2, -52),\n        exshift = 0,\n        norm = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n        s = 0,\n        z = 0,\n        iter = 0,\n        i, j, k, l, m, t, w, x, y,\n        ra, sa, vr, vi,\n        notlast, cdivres;\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            d[i] = H[i][i];\n            e[i] = 0;\n        }\n\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n            norm = norm + Math.abs(H[i][j]);\n        }\n    }\n\n    while (n >= low) {\n        l = n;\n        while (l > low) {\n            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n            if (s === 0) {\n                s = norm;\n            }\n            if (Math.abs(H[l][l - 1]) < eps * s) {\n                break;\n            }\n            l--;\n        }\n\n        if (l === n) {\n            H[n][n] = H[n][n] + exshift;\n            d[n] = H[n][n];\n            e[n] = 0;\n            n--;\n            iter = 0;\n        } else if (l === n - 1) {\n            w = H[n][n - 1] * H[n - 1][n];\n            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n            q = p * p + w;\n            z = Math.sqrt(Math.abs(q));\n            H[n][n] = H[n][n] + exshift;\n            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n            x = H[n][n];\n\n            if (q >= 0) {\n                z = (p >= 0) ? (p + z) : (p - z);\n                d[n - 1] = x + z;\n                d[n] = d[n - 1];\n                if (z !== 0) {\n                    d[n] = x - w / z;\n                }\n                e[n - 1] = 0;\n                e[n] = 0;\n                x = H[n][n - 1];\n                s = Math.abs(x) + Math.abs(z);\n                p = x / s;\n                q = z / s;\n                r = Math.sqrt(p * p + q * q);\n                p = p / r;\n                q = q / r;\n\n                for (j = n - 1; j < nn; j++) {\n                    z = H[n - 1][j];\n                    H[n - 1][j] = q * z + p * H[n][j];\n                    H[n][j] = q * H[n][j] - p * z;\n                }\n\n                for (i = 0; i <= n; i++) {\n                    z = H[i][n - 1];\n                    H[i][n - 1] = q * z + p * H[i][n];\n                    H[i][n] = q * H[i][n] - p * z;\n                }\n\n                for (i = low; i <= high; i++) {\n                    z = V[i][n - 1];\n                    V[i][n - 1] = q * z + p * V[i][n];\n                    V[i][n] = q * V[i][n] - p * z;\n                }\n            } else {\n                d[n - 1] = x + p;\n                d[n] = x + p;\n                e[n - 1] = z;\n                e[n] = -z;\n            }\n\n            n = n - 2;\n            iter = 0;\n        } else {\n            x = H[n][n];\n            y = 0;\n            w = 0;\n            if (l < n) {\n                y = H[n - 1][n - 1];\n                w = H[n][n - 1] * H[n - 1][n];\n            }\n\n            if (iter === 10) {\n                exshift += x;\n                for (i = low; i <= n; i++) {\n                    H[i][i] -= x;\n                }\n                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n                x = y = 0.75 * s;\n                w = -0.4375 * s * s;\n            }\n\n            if (iter === 30) {\n                s = (y - x) / 2;\n                s = s * s + w;\n                if (s > 0) {\n                    s = Math.sqrt(s);\n                    if (y < x) {\n                        s = -s;\n                    }\n                    s = x - w / ((y - x) / 2 + s);\n                    for (i = low; i <= n; i++) {\n                        H[i][i] -= s;\n                    }\n                    exshift += s;\n                    x = y = w = 0.964;\n                }\n            }\n\n            iter = iter + 1;\n\n            m = n - 2;\n            while (m >= l) {\n                z = H[m][m];\n                r = x - z;\n                s = y - z;\n                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n                q = H[m + 1][m + 1] - z - r - s;\n                r = H[m + 2][m + 1];\n                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                p = p / s;\n                q = q / s;\n                r = r / s;\n                if (m === l) {\n                    break;\n                }\n                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n                    break;\n                }\n                m--;\n            }\n\n            for (i = m + 2; i <= n; i++) {\n                H[i][i - 2] = 0;\n                if (i > m + 2) {\n                    H[i][i - 3] = 0;\n                }\n            }\n\n            for (k = m; k <= n - 1; k++) {\n                notlast = (k !== n - 1);\n                if (k !== m) {\n                    p = H[k][k - 1];\n                    q = H[k + 1][k - 1];\n                    r = (notlast ? H[k + 2][k - 1] : 0);\n                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                    if (x !== 0) {\n                        p = p / x;\n                        q = q / x;\n                        r = r / x;\n                    }\n                }\n\n                if (x === 0) {\n                    break;\n                }\n\n                s = Math.sqrt(p * p + q * q + r * r);\n                if (p < 0) {\n                    s = -s;\n                }\n\n                if (s !== 0) {\n                    if (k !== m) {\n                        H[k][k - 1] = -s * x;\n                    } else if (l !== m) {\n                        H[k][k - 1] = -H[k][k - 1];\n                    }\n\n                    p = p + s;\n                    x = p / s;\n                    y = q / s;\n                    z = r / s;\n                    q = q / p;\n                    r = r / p;\n\n                    for (j = k; j < nn; j++) {\n                        p = H[k][j] + q * H[k + 1][j];\n                        if (notlast) {\n                            p = p + r * H[k + 2][j];\n                            H[k + 2][j] = H[k + 2][j] - p * z;\n                        }\n\n                        H[k][j] = H[k][j] - p * x;\n                        H[k + 1][j] = H[k + 1][j] - p * y;\n                    }\n\n                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n                        p = x * H[i][k] + y * H[i][k + 1];\n                        if (notlast) {\n                            p = p + z * H[i][k + 2];\n                            H[i][k + 2] = H[i][k + 2] - p * r;\n                        }\n\n                        H[i][k] = H[i][k] - p;\n                        H[i][k + 1] = H[i][k + 1] - p * q;\n                    }\n\n                    for (i = low; i <= high; i++) {\n                        p = x * V[i][k] + y * V[i][k + 1];\n                        if (notlast) {\n                            p = p + z * V[i][k + 2];\n                            V[i][k + 2] = V[i][k + 2] - p * r;\n                        }\n\n                        V[i][k] = V[i][k] - p;\n                        V[i][k + 1] = V[i][k + 1] - p * q;\n                    }\n                }\n            }\n        }\n    }\n\n    if (norm === 0) {\n        return;\n    }\n\n    for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n\n        if (q === 0) {\n            l = n;\n            H[n][n] = 1;\n            for (i = n - 1; i >= 0; i--) {\n                w = H[i][i] - p;\n                r = 0;\n                for (j = l; j <= n; j++) {\n                    r = r + H[i][j] * H[j][n];\n                }\n\n                if (e[i] < 0) {\n                    z = w;\n                    s = r;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                        t = (x * s - z * r) / q;\n                        H[i][n] = t;\n                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n                    }\n\n                    t = Math.abs(H[i][n]);\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        } else if (q < 0) {\n            l = n - 1;\n\n            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n                H[n - 1][n - 1] = q / H[n][n - 1];\n                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n            } else {\n                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n                H[n - 1][n - 1] = cdivres[0];\n                H[n - 1][n] = cdivres[1];\n            }\n\n            H[n][n - 1] = 0;\n            H[n][n] = 1;\n            for (i = n - 2; i >= 0; i--) {\n                ra = 0;\n                sa = 0;\n                for (j = l; j <= n; j++) {\n                    ra = ra + H[i][j] * H[j][n - 1];\n                    sa = sa + H[i][j] * H[j][n];\n                }\n\n                w = H[i][i] - p;\n\n                if (e[i] < 0) {\n                    z = w;\n                    r = ra;\n                    s = sa;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        cdivres = cdiv(-ra, -sa, w, q);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                        vi = (d[i] - p) * 2 * q;\n                        if (vr === 0 && vi === 0) {\n                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                        }\n                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n                        } else {\n                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n                            H[i + 1][n - 1] = cdivres[0];\n                            H[i + 1][n] = cdivres[1];\n                        }\n                    }\n\n                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n - 1] = H[j][n - 1] / t;\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            for (j = i; j < nn; j++) {\n                V[i][j] = H[i][j];\n            }\n        }\n    }\n\n    for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n            z = 0;\n            for (k = low; k <= Math.min(j, high); k++) {\n                z = z + V[i][k] * H[k][j];\n            }\n            V[i][j] = z;\n        }\n    }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n    var r, d;\n    if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        return [(xr + r * xi) / d, (xi - r * xr) / d];\n    } else {\n        r = yr / yi;\n        d = yi + r * yr;\n        return [(r * xr + xi) / d, (r * xi - xr) / d];\n    }\n}\n\nmodule.exports = EigenvalueDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pls/node_modules/ml-matrix/src/dc/evd.js","'use strict';\n\nvar Matrix = require('../matrix').Matrix;\nvar hypotenuse = require('./util').hypotenuse;\n\n//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\nfunction QrDecomposition(value) {\n    if (!(this instanceof QrDecomposition)) {\n        return new QrDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n\n    var qr = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        rdiag = new Array(n),\n        i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) {\n            nrm = hypotenuse(nrm, qr[i][k]);\n        }\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) {\n                nrm = -nrm;\n            }\n            for (i = k; i < m; i++) {\n                qr[i][k] /= nrm;\n            }\n            qr[k][k] += 1;\n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * qr[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    qr[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n}\n\nQrDecomposition.prototype = {\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var qr = this.QR,\n            m = qr.rows;\n\n        if (value.rows !== m) {\n            throw new Error('Matrix row dimensions must agree');\n        }\n        if (!this.isFullRank()) {\n            throw new Error('Matrix is rank deficient');\n        }\n\n        var count = value.columns;\n        var X = value.clone();\n        var n = qr.columns;\n        var i, j, k, s;\n\n        for (k = 0; k < n; k++) {\n            for (j = 0; j < count; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * X[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    X[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        for (k = n - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= this.Rdiag[k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * qr[i][k];\n                }\n            }\n        }\n\n        return X.subMatrix(0, n - 1, 0, count - 1);\n    },\n    isFullRank: function () {\n        var columns = this.QR.columns;\n        for (var i = 0; i < columns; i++) {\n            if (this.Rdiag[i] === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n    get upperTriangularMatrix() {\n        var qr = this.QR,\n            n = qr.columns,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                if (i < j) {\n                    X[i][j] = qr[i][j];\n                } else if (i === j) {\n                    X[i][j] = this.Rdiag[i];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get orthogonalMatrix() {\n        var qr = this.QR,\n            rows = qr.rows,\n            columns = qr.columns,\n            X = new Matrix(rows, columns),\n            i, j, k, s;\n\n        for (k = columns - 1; k >= 0; k--) {\n            for (i = 0; i < rows; i++) {\n                X[i][k] = 0;\n            }\n            X[k][k] = 1;\n            for (j = k; j < columns; j++) {\n                if (qr[k][k] !== 0) {\n                    s = 0;\n                    for (i = k; i < rows; i++) {\n                        s += qr[i][k] * X[i][j];\n                    }\n\n                    s = -s / qr[k][k];\n\n                    for (i = k; i < rows; i++) {\n                        X[i][j] += s * qr[i][k];\n                    }\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = QrDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pls/node_modules/ml-matrix/src/dc/qr.js","'use strict';\n\nvar Matrix = require('../matrix').Matrix;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\nfunction CholeskyDecomposition(value) {\n    if (!(this instanceof CholeskyDecomposition)) {\n        return new CholeskyDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n    if (!value.isSymmetric()) {\n        throw new Error('Matrix is not symmetric');\n    }\n\n    var a = value,\n        dimension = a.rows,\n        l = new Matrix(dimension, dimension),\n        positiveDefinite = true,\n        i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n        var Lrowj = l[j];\n        var d = 0;\n        for (k = 0; k < j; k++) {\n            var Lrowk = l[k];\n            var s = 0;\n            for (i = 0; i < k; i++) {\n                s += Lrowk[i] * Lrowj[i];\n            }\n            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n            d = d + s * s;\n        }\n\n        d = a[j][j] - d;\n\n        positiveDefinite &= (d > 0);\n        l[j][j] = Math.sqrt(Math.max(d, 0));\n        for (k = j + 1; k < dimension; k++) {\n            l[j][k] = 0;\n        }\n    }\n\n    if (!positiveDefinite) {\n        throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n}\n\nCholeskyDecomposition.prototype = {\n    get lowerTriangularMatrix() {\n        return this.L;\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var l = this.L,\n            dimension = l.rows;\n\n        if (value.rows !== dimension) {\n            throw new Error('Matrix dimensions do not match');\n        }\n\n        var count = value.columns,\n            B = value.clone(),\n            i, j, k;\n\n        for (k = 0; k < dimension; k++) {\n            for (j = 0; j < count; j++) {\n                for (i = 0; i < k; i++) {\n                    B[k][j] -= B[i][j] * l[k][i];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        for (k = dimension - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                for (i = k + 1; i < dimension; i++) {\n                    B[k][j] -= B[i][j] * l[i][k];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        return B;\n    }\n};\n\nmodule.exports = CholeskyDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pls/node_modules/ml-matrix/src/dc/cholesky.js","'use strict';\n\nvar Matrix = require('ml-matrix');\nvar Utils = require('./utils');\n\nmodule.exports = OPLS;\n\nfunction OPLS(dataset, predictions, numberOSC) {\n    var X = new Matrix(dataset);\n    var y = new Matrix(predictions);\n\n    X = Utils.featureNormalize(X).result;\n    y = Utils.featureNormalize(y).result;\n\n    var rows = X.rows;\n    var columns = X.columns;\n\n    var sumOfSquaresX = X.clone().mul(X).sum();\n    var w = X.transpose().mmul(y);\n    w.div(Utils.norm(w));\n\n    var orthoW = new Array(numberOSC);\n    var orthoT = new Array(numberOSC);\n    var orthoP = new Array(numberOSC);\n    for (var i = 0; i < numberOSC; i++) {\n        var t = X.mmul(w);\n\n        var numerator = X.transpose().mmul(t);\n        var denominator = t.transpose().mmul(t)[0][0];\n        var p =  numerator.div(denominator);\n\n        numerator = w.transpose().mmul(p)[0][0];\n        denominator = w.transpose().mmul(w)[0][0];\n        var wOsc = p.sub(w.clone().mul(numerator / denominator));\n        wOsc.div(Utils.norm(wOsc));\n\n        var tOsc = X.mmul(wOsc);\n\n        numerator = X.transpose().mmul(tOsc);\n        denominator = tOsc.transpose().mmul(tOsc)[0][0];\n        var pOsc = numerator.div(denominator);\n\n        X.sub(tOsc.mmul(pOsc.transpose()));\n        orthoW[i] = wOsc.getColumn(0);\n        orthoT[i] = tOsc.getColumn(0);\n        orthoP[i] = pOsc.getColumn(0);\n    }\n\n    this.Xosc = X;\n\n    var sumOfSquaresXosx = this.Xosc.clone().mul(this.Xosc).sum();\n    this.R2X = 1 - sumOfSquaresXosx/sumOfSquaresX;\n\n    this.W = orthoW;\n    this.T = orthoT;\n    this.P = orthoP;\n    this.numberOSC = numberOSC;\n}\n\nOPLS.prototype.correctDataset = function (dataset) {\n    var X = new Matrix(dataset);\n\n    var sumOfSquaresX = X.clone().mul(X).sum();\n    for (var i = 0; i < this.numberOSC; i++) {\n        var currentW = this.W.getColumnVector(i);\n        var currentP = this.P.getColumnVector(i);\n\n        var t = X.mmul(currentW);\n        X.sub(t.mmul(currentP));\n    }\n    var sumOfSquaresXosx = X.clone().mul(X).sum();\n\n    var R2X = 1 - sumOfSquaresXosx / sumOfSquaresX;\n\n    return {\n        datasetOsc: X,\n        R2Dataset: R2X\n    };\n};\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-pls/src/opls.js","'use strict';\n\nconst utils = require('./utils');\nconst init = require('./initialization');\nconst KMeansResult = require('./KMeansResult');\nconst squaredDistance = require('ml-distance-euclidean').squared;\n\nconst defaultOptions = {\n    maxIterations: 100,\n    tolerance: 1e-6,\n    withIterations: false,\n    initialization: 'mostDistant',\n    distanceFunction: squaredDistance\n};\n\n/**\n * Each step operation for kmeans\n * @ignore\n * @param {Array<Array<Number>>} centers - the K centers in format [x,y,z,...]\n * @param {Array<Array<Number>>} data - the [x,y,z,...] points to cluster\n * @param {Array<Number>} clusterID - the cluster identifier for each data dot\n * @param {Number} K - Number of clusters\n * @param {Object} [options] - Option object\n * @param {Number} iterations - Current number of iterations\n * @return {KMeansResult}\n */\nfunction step(centers, data, clusterID, K, options, iterations) {\n    clusterID = utils.updateClusterID(data, centers, clusterID, options.distanceFunction);\n    var newCenters = utils.updateCenters(data, clusterID, K);\n    var converged = utils.converged(newCenters, centers, options.distanceFunction, options.tolerance);\n    return new KMeansResult(clusterID, newCenters, converged, iterations, options.distanceFunction);\n}\n\n/**\n * Generator version for the algorithm\n * @ignore\n * @param {Array<Array<Number>>} centers - the K centers in format [x,y,z,...]\n * @param {Array<Array<Number>>} data - the [x,y,z,...] points to cluster\n * @param {Array<Number>} clusterID - the cluster identifier for each data dot\n * @param {Number} K - Number of clusters\n * @param {Object} [options] - Option object\n */\nfunction* kmeansGenerator(centers, data, clusterID, K, options) {\n    var converged = false;\n    var stepNumber = 0;\n    var stepResult;\n    while (!converged && (stepNumber < options.maxIterations)) {\n        stepResult = step(centers, data, clusterID, K, options, ++stepNumber);\n        yield stepResult.computeInformation(data);\n        converged = stepResult.converged;\n        centers = stepResult.centroids;\n    }\n}\n\n/**\n * K-means algorithm\n * @param {Array<Array<Number>>} data - Points in the format to cluster [x,y,z,...]\n * @param {Number} K - Number of clusters\n * @param {Object} [options] - Option object\n * @param {Number} [options.maxIterations = 100] - Maximum of iterations allowed\n * @param {Number} [options.tolerance = 1e-6] - Error tolerance\n * @param {Boolean} [options.withIterations = false] - Store clusters and centroids for each iteration\n * @param {Function} [options.distanceFunction = squaredDistance] - Distance function to use between the points\n * @param {String|Array<Array<Number>>} [options.initialization = 'moreDistant'] - K centers in format [x,y,z,...] or a method for initialize the data:\n *  * `'random'` will choose K random different values.\n *  * `'mostDistant'` will choose the more distant points to a first random pick\n * @returns {KMeansResult} - Cluster identifier for each data dot and centroids with the following fields:\n *  * `'clusters'`: Array of indexes for the clusters.\n *  * `'centroids'`: Array with the resulting centroids.\n *  * `'iterations'`: Number of iterations that took to converge\n */\nfunction kmeans(data, K, options) {\n    options = Object.assign({}, defaultOptions, options);\n\n    if (K <= 0 || K > data.length || !Number.isInteger(K)) {\n        throw new Error('K should be a positive integer bigger than the number of points');\n    }\n\n    var centers;\n    if (Array.isArray(options.initialization)) {\n        if (options.initialization.length !== K) {\n            throw new Error('The initial centers should have the same length as K');\n        } else {\n            centers = options.initialization;\n        }\n    } else {\n        switch (options.initialization) {\n            case 'random':\n                centers = init.random(data, K);\n                break;\n            case 'mostDistant':\n                centers = init.mostDistant(data, K, utils.calculateDistanceMatrix(data, options.distanceFunction));\n                break;\n            default:\n                throw new Error('Unknown initialization method: \"' + options.initialization + '\"');\n        }\n    }\n\n    // infinite loop until convergence\n    if (options.maxIterations === 0) {\n        options.maxIterations = Number.MAX_VALUE;\n    }\n\n    var clusterID = new Array(data.length);\n    if (options.withIterations) {\n        return kmeansGenerator(centers, data, clusterID, K, options);\n    } else {\n        var converged = false;\n        var stepNumber = 0;\n        var stepResult;\n        while (!converged && (stepNumber < options.maxIterations)) {\n            stepResult = step(centers, data, clusterID, K, options, ++stepNumber);\n            converged = stepResult.converged;\n            centers = stepResult.centroids;\n        }\n        return stepResult.computeInformation(data);\n    }\n}\n\nmodule.exports = kmeans;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-kmeans/src/kmeans.js","'use strict';\n\nconst squaredDistance = require('ml-distance-euclidean').squared;\n\nconst defaultOptions = {\n    distanceFunction: squaredDistance,\n    similarityFunction: false,\n    returnVector: false\n};\n\n/**\n * Find the nearest vector in a list to a sample vector\n * @param {Array<Array<number>>} listVectors - List of vectors with same dimensions\n * @param {Array<number>} vector - Reference vector to \"classify\"\n * @param {object} [options] - Options object\n * @param {function} [options.distanceFunction = squaredDistance] - Function that receives two vectors and return their distance value as number\n * @param {function} [options.similarityFunction = undefined] - Function that receives two vectors and return their similarity value as number\n * @param {boolean} [options.returnVector = false] - Return the nearest vector instead of its index\n * @return {number|Array<number>} - The index or the content of the nearest vector\n */\nfunction nearestVector(listVectors, vector, options) {\n    options = options || defaultOptions;\n    const distanceFunction = options.distanceFunction || defaultOptions.distanceFunction;\n    const similarityFunction = options.similarityFunction || defaultOptions.similarityFunction;\n    const returnVector = options.returnVector || defaultOptions.returnVector;\n\n    var vectorIndex = -1;\n    if (typeof similarityFunction === 'function') {\n\n        // maximum similarity\n        var maxSim = Number.MIN_VALUE;\n        for (var j = 0; j < listVectors.length; j++) {\n            var sim = similarityFunction(vector, listVectors[j]);\n            if (sim > maxSim) {\n                maxSim = sim;\n                vectorIndex = j;\n            }\n        }\n    } else if (typeof distanceFunction === 'function') {\n\n        // minimum distance\n        var minDist = Number.MAX_VALUE;\n        for (var i = 0; i < listVectors.length; i++) {\n            var dist = distanceFunction(vector, listVectors[i]);\n            if (dist < minDist) {\n                minDist = dist;\n                vectorIndex = i;\n            }\n        }\n    } else {\n        throw new Error('A similarity or distance function it\\'s required');\n    }\n\n    if (returnVector) {\n        return listVectors[vectorIndex];\n    } else {\n        return vectorIndex;\n    }\n}\n\nmodule.exports = nearestVector;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-nearest-vector/src/index.js","'use strict';\n\nconst Picker = require('RandomSelection').Picker;\n\n/**\n * Choose K different random points from the original data\n * @ignore\n * @param {Array<Array<Number>>} data - Points in the format to cluster [x,y,z,...]\n * @param {Number} K - Number of clusters\n * @return {Array<Array<Number>>} - Initial random points\n */\nfunction random(data, K) {\n    const rand = new Picker(data);\n    var ans = new Array(K);\n\n    for (var i = 0; i < K; ++i) {\n        ans[i] = rand.pick();\n    }\n    return ans;\n}\n\n/**\n * Chooses the most distant points to a first random pick\n * @ignore\n * @param {Array<Array<Number>>} data - Points in the format to cluster [x,y,z,...]\n * @param {Number} K - Number of clusters\n * @param {Array<Array<Number>>} distanceMatrix - matrix with the distance values\n * @return {Array<Array<Number>>} - Initial random points\n */\nfunction mostDistant(data, K, distanceMatrix) {\n    var ans = new Array(K);\n\n    // chooses a random point as initial cluster\n    ans[0] = Math.floor(Math.random() * data.length);\n\n    if (K > 1) {\n        // chooses the more distant point\n        var maxDist = {dist: -1, index: -1};\n        for (var l = 0; l < data.length; ++l) {\n            if (distanceMatrix[ans[0]][l] > maxDist.dist) {\n                maxDist.dist = distanceMatrix[ans[0]][l];\n                maxDist.index = l;\n            }\n        }\n        ans[1] = maxDist.index;\n\n        if (K > 2) {\n            // chooses the set of points that maximises the min distance\n            for (var k = 2; k < K; ++k) {\n                var center = {dist: -1, index: -1};\n                for (var m = 0; m < data.length; ++m) {\n\n                    // minimum distance to centers\n                    var minDistCent = {dist: Number.MAX_VALUE, index: -1};\n                    for (var n = 0; n < k; ++n) {\n                        if (distanceMatrix[n][m] < minDistCent.dist && ans.indexOf(m) === -1) {\n                            minDistCent = {\n                                dist: distanceMatrix[n][m],\n                                index: m\n                            };\n                        }\n                    }\n\n                    if (minDistCent.dist !== Number.MAX_VALUE && minDistCent.dist > center.dist) {\n                        center = Object.assign({}, minDistCent);\n                    }\n                }\n\n                ans[k] = center.index;\n            }\n        }\n    }\n\n    return ans.map((index) => data[index]);\n}\n\nexports.random = random;\nexports.mostDistant = mostDistant;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-kmeans/src/initialization.js","(function(undefined) {\r\n  'use strict';\r\n\r\n  // Node.js usage:\r\n  //\r\n  // var Picker = require('RandomSelection').Picker;\r\n  // var greetingPicker = new Picker(['hello', 'hi', 'howdy']);\r\n  // var greeting = greetingPicker.pick();\r\n\r\n  // Our namespace. Exported members will be attached to this.\r\n  var ns;\r\n\r\n  // Set our namespace based on whether we are running in Node.js or the browser.\r\n  if (typeof module !== 'undefined' && module.exports) {\r\n    // We are running in Node.\r\n    ns = module.exports;\r\n  }\r\n  else {\r\n    // We are running in the browser.\r\n    // `this` is the `window`.\r\n    // Use window.RandomSelection as our namespace.\r\n    ns = this.RandomSelection = {};\r\n  }\r\n\r\n  // Gets a shallow copy of the given array.\r\n  function clone(arr) {\r\n  \tvar newArr = [];\r\n  \tfor (var i=0; i<arr.length; i++) {\r\n  \t\tnewArr.push(arr[i]);\r\n  \t}\r\n  \treturn newArr;\r\n  }\r\n\r\n  // Gets a random option until all options have been returns. Then cycles again.\r\n  function pick() {\r\n    if (this._remainingOptions.length === 0) {\r\n      this._remainingOptions = clone(this._originalOptions);\r\n    }\r\n\r\n    var index = Math.floor(Math.random() * this._remainingOptions.length);\r\n    return this._remainingOptions.splice(index, 1)[0];\r\n  }\r\n\r\n  // Export our Picker object.\r\n  ns.Picker = function(arrayOfOptions) {\r\n    this._originalOptions = arrayOfOptions;\r\n    this._remainingOptions = [];\r\n  };\r\n\r\n  ns.Picker.prototype = {\r\n    pick: pick\r\n  };\r\n\r\n}).call(this);\r\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/RandomSelection/lib/Picker.js","'use strict';\n\nconst utils = require('./utils');\nconst distanceSymbol = Symbol('distance');\n\n/**\n * Result of the kmeans algorithm\n * @param {Array<Number>} clusters - the cluster identifier for each data dot\n * @param {Array<Array<Object>>} centroids - the K centers in format [x,y,z,...], the error and size of the cluster\n * @param {Boolean} converged - Converge criteria satisfied\n * @param {Number} iterations - Current number of iterations\n * @param {Function} distance - (*Private*) Distance function to use between the points\n * @constructor\n */\nfunction KMeansResult(clusters, centroids, converged, iterations, distance) {\n    this.clusters = clusters;\n    this.centroids = centroids;\n    this.converged = converged;\n    this.iterations = iterations;\n    this[distanceSymbol] = distance;\n}\n\n/**\n * Allows to compute for a new array of points their cluster id\n * @param {Array<Array<Number>>} data - the [x,y,z,...] points to cluster\n * @return {Array<Number>} - cluster id for each point\n */\nKMeansResult.prototype.nearest = function (data) {\n    var clusterID = new Array(data.length);\n    var centroids = this.centroids.map(function (centroid) {\n        return centroid.centroid;\n    });\n    return utils.updateClusterID(data, centroids, clusterID, this[distanceSymbol]);\n};\n\n/**\n * Returns a KMeansResult with the error and size of the cluster\n * @ignore\n * @param {Array<Array<Number>>} data - the [x,y,z,...] points to cluster\n * @return {KMeansResult}\n */\nKMeansResult.prototype.computeInformation = function (data) {\n    var enrichedCentroids = this.centroids.map(function (centroid) {\n        return {\n            centroid: centroid,\n            error: 0,\n            size: 0\n        };\n    });\n\n    for (var i = 0; i < data.length; i++) {\n        enrichedCentroids[this.clusters[i]].error += this[distanceSymbol](data[i], this.centroids[this.clusters[i]]);\n        enrichedCentroids[this.clusters[i]].size++;\n    }\n\n    for (var j = 0; j < this.centroids.length; j++) {\n        enrichedCentroids[j].error /= enrichedCentroids[j].size;\n    }\n\n    return new KMeansResult(this.clusters, enrichedCentroids, this.converged, this.iterations, this[distanceSymbol]);\n};\n\nmodule.exports = KMeansResult;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-kmeans/src/KMeansResult.js","'use strict';\n\nexports.agnes = require('./agnes');\nexports.diana = require('./diana');\n//exports.birch = require('./birch');\n//exports.cure = require('./cure');\n//exports.chameleon = require('./chameleon');\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-hclust/src/index.js","'use strict';\n\nconst euclidean = require('ml-distance-euclidean');\nconst ClusterLeaf = require('./ClusterLeaf');\nconst Cluster = require('./Cluster');\nconst distanceMatrix = require('ml-distance-matrix');\n\n/**\n * @private\n * @param cluster1\n * @param cluster2\n * @param disFun\n * @returns {number}\n */\nfunction simpleLink(cluster1, cluster2, disFun) {\n    var m = 10e100;\n    for (var i = 0; i < cluster1.length; i++) {\n        for (var j = 0; j < cluster2.length; j++) {\n            var d = disFun[cluster1[i]][ cluster2[j]];\n            m = Math.min(d, m);\n        }\n    }\n    return m;\n}\n\n/**\n * @private\n * @param cluster1\n * @param cluster2\n * @param disFun\n * @returns {number}\n */\nfunction completeLink(cluster1, cluster2, disFun) {\n    var m = -1;\n    for (var i = 0; i < cluster1.length; i++) {\n        for (var j = 0; j < cluster2.length; j++) {\n            var d = disFun[cluster1[i]][ cluster2[j]];\n            m = Math.max(d, m);\n        }\n    }\n    return m;\n}\n\n/**\n * @private\n * @param cluster1\n * @param cluster2\n * @param disFun\n * @returns {number}\n */\nfunction averageLink(cluster1, cluster2, disFun) {\n    var m = 0;\n    for (var i = 0; i < cluster1.length; i++) {\n        for (var j = 0; j < cluster2.length; j++) {\n            m += disFun[cluster1[i]][ cluster2[j]];\n        }\n    }\n    return m / (cluster1.length * cluster2.length);\n}\n\n/**\n * @private\n * @param cluster1\n * @param cluster2\n * @param disFun\n * @returns {*}\n */\nfunction centroidLink(cluster1, cluster2, disFun) {\n    var dist = new Array(cluster1.length * cluster2.length);\n    for (var i = 0; i < cluster1.length; i++) {\n        for (var j = 0; j < cluster2.length; j++) {\n            dist[i * cluster2.length + j] = (disFun[cluster1[i]][ cluster2[j]]);\n        }\n    }\n    return median(dist);\n}\n\n/**\n * @private\n * @param cluster1\n * @param cluster2\n * @param disFun\n * @returns {number}\n */\nfunction wardLink(cluster1, cluster2, disFun) {\n    return centroidLink(cluster1, cluster2, disFun)\n        * cluster1.length * cluster2.length / (cluster1.length + cluster2.length);\n}\n\nfunction compareNumbers(a, b) {\n    return a - b;\n}\n\nfunction median(values, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = [].concat(values).sort(compareNumbers);\n    }\n    var l = values.length;\n    var half = Math.floor(l / 2);\n    if (l % 2 === 0) {\n        return (values[half - 1] + values[half]) * 0.5;\n    } else {\n        return values[half];\n    }\n}\n\nvar defaultOptions = {\n    disFunc: euclidean,\n    kind: 'single',\n    isDistanceMatrix: false\n\n};\n\n/**\n * Continuously merge nodes that have the least dissimilarity\n * @param {Array <Array <number>>} distance - Array of points to be clustered\n * @param {json} options\n * @option isDistanceMatrix: Is the input a distance matrix?\n * @constructor\n */\nfunction agnes(data, options) {\n    options = Object.assign({}, defaultOptions, options);\n    var len = data.length;\n    var distance = data;//If source\n    if (!options.isDistanceMatrix) {\n        distance = distanceMatrix(data, options.disFunc);\n    }\n\n\n    // allows to use a string or a given function\n    if (typeof options.kind === 'string') {\n        switch (options.kind) {\n            case 'single':\n                options.kind = simpleLink;\n                break;\n            case 'complete':\n                options.kind = completeLink;\n                break;\n            case 'average':\n                options.kind = averageLink;\n                break;\n            case 'centroid':\n                options.kind = centroidLink;\n                break;\n            case 'ward':\n                options.kind = wardLink;\n                break;\n            default:\n                throw new RangeError('Unknown kind of similarity');\n        }\n    } else if (typeof options.kind !== 'function') {\n        throw new TypeError('Undefined kind of similarity');\n    }\n\n    var list = new Array(len);\n    for (var i = 0; i < distance.length; i++) {\n        list[i] = new ClusterLeaf(i);\n    }\n    var min = 10e5,\n        d = {},\n        dis = 0;\n\n    while (list.length > 1) {\n        // calculates the minimum distance\n        d = {};\n        min = 10e5;\n        for (var j = 0; j < list.length; j++) {\n            for (var k = j + 1; k < list.length; k++) {\n                var fdistance, sdistance;\n                if (list[j] instanceof ClusterLeaf) {\n                    fdistance = [list[j].index];\n                } else {\n                    fdistance = new Array(list[j].index.length);\n                    for (var e = 0; e < fdistance.length; e++) {\n                        fdistance[e] = list[j].index[e].index;\n                    }\n                }\n                if (list[k] instanceof ClusterLeaf) {\n                    sdistance = [list[k].index];\n                } else {\n                    sdistance = new Array(list[k].index.length);\n                    for (var f = 0; f < sdistance.length; f++) {\n                        sdistance[f] = list[k].index[f].index;\n                    }\n                }\n                dis = options.kind(fdistance, sdistance, distance).toFixed(4);\n                if (dis in d) {\n                    d[dis].push([list[j], list[k]]);\n                } else {\n                    d[dis] = [[list[j], list[k]]];\n                }\n                min = Math.min(dis, min);\n            }\n        }\n        // cluster dots\n        var dmin = d[min.toFixed(4)];\n        var clustered = new Array(dmin.length);\n        var aux,\n            count = 0;\n        while (dmin.length > 0) {\n            aux = dmin.shift();\n            for (var q = 0; q < dmin.length; q++) {\n                var int = dmin[q].filter(function (n) {\n                    //noinspection JSReferencingMutableVariableFromClosure\n                    return aux.indexOf(n) !== -1;\n                });\n                if (int.length > 0) {\n                    var diff = dmin[q].filter(function (n) {\n                        //noinspection JSReferencingMutableVariableFromClosure\n                        return aux.indexOf(n) === -1;\n                    });\n                    aux = aux.concat(diff);\n                    dmin.splice(q--, 1);\n                }\n            }\n            clustered[count++] = aux;\n        }\n        clustered.length = count;\n\n        for (var ii = 0; ii < clustered.length; ii++) {\n            var obj = new Cluster();\n            obj.children = clustered[ii].concat();\n            obj.distance = min;\n            obj.index = new Array(len);\n            var indCount = 0;\n            for (var jj = 0; jj < clustered[ii].length; jj++) {\n                if (clustered[ii][jj] instanceof ClusterLeaf) {\n                    obj.index[indCount++] = clustered[ii][jj];\n                } else {\n                    indCount += clustered[ii][jj].index.length;\n                    obj.index = clustered[ii][jj].index.concat(obj.index);\n                }\n                list.splice((list.indexOf(clustered[ii][jj])), 1);\n            }\n            obj.index.length = indCount;\n            list.push(obj);\n        }\n    }\n    return list[0];\n}\n\nmodule.exports = agnes;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-hclust/src/agnes.js","module.exports = require('./lib/heap');\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/heap/index.js","// Generated by CoffeeScript 1.8.0\n(function() {\n  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n  floor = Math.floor, min = Math.min;\n\n\n  /*\n  Default comparison function to be used\n   */\n\n  defaultCmp = function(x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n\n  /*\n  Insert item x in list a, and keep it sorted assuming a is sorted.\n  \n  If x is already in a, insert it to the right of the rightmost x.\n  \n  Optional args lo (default 0) and hi (default a.length) bound the slice\n  of a to be searched.\n   */\n\n  insort = function(a, x, lo, hi, cmp) {\n    var mid;\n    if (lo == null) {\n      lo = 0;\n    }\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (lo < 0) {\n      throw new Error('lo must be non-negative');\n    }\n    if (hi == null) {\n      hi = a.length;\n    }\n    while (lo < hi) {\n      mid = floor((lo + hi) / 2);\n      if (cmp(x, a[mid]) < 0) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);\n  };\n\n\n  /*\n  Push item onto heap, maintaining the heap invariant.\n   */\n\n  heappush = function(array, item, cmp) {\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n  };\n\n\n  /*\n  Pop the smallest item off the heap, maintaining the heap invariant.\n   */\n\n  heappop = function(array, cmp) {\n    var lastelt, returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    lastelt = array.pop();\n    if (array.length) {\n      returnitem = array[0];\n      array[0] = lastelt;\n      _siftup(array, 0, cmp);\n    } else {\n      returnitem = lastelt;\n    }\n    return returnitem;\n  };\n\n\n  /*\n  Pop and return the current smallest value, and add the new item.\n  \n  This is more efficient than heappop() followed by heappush(), and can be\n  more appropriate when using a fixed size heap. Note that the value\n  returned may be larger than item! That constrains reasonable use of\n  this routine unless written as part of a conditional replacement:\n      if item > array[0]\n        item = heapreplace(array, item)\n   */\n\n  heapreplace = function(array, item, cmp) {\n    var returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    returnitem = array[0];\n    array[0] = item;\n    _siftup(array, 0, cmp);\n    return returnitem;\n  };\n\n\n  /*\n  Fast version of a heappush followed by a heappop.\n   */\n\n  heappushpop = function(array, item, cmp) {\n    var _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (array.length && cmp(array[0], item) < 0) {\n      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n      _siftup(array, 0, cmp);\n    }\n    return item;\n  };\n\n\n  /*\n  Transform list into a heap, in-place, in O(array.length) time.\n   */\n\n  heapify = function(array, cmp) {\n    var i, _i, _j, _len, _ref, _ref1, _results, _results1;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    _ref1 = (function() {\n      _results1 = [];\n      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }\n      return _results1;\n    }).apply(this).reverse();\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      i = _ref1[_i];\n      _results.push(_siftup(array, i, cmp));\n    }\n    return _results;\n  };\n\n\n  /*\n  Update the position of the given item in the heap.\n  This function should be called every time the item is being modified.\n   */\n\n  updateItem = function(array, item, cmp) {\n    var pos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    pos = array.indexOf(item);\n    if (pos === -1) {\n      return;\n    }\n    _siftdown(array, 0, pos, cmp);\n    return _siftup(array, pos, cmp);\n  };\n\n\n  /*\n  Find the n largest elements in a dataset.\n   */\n\n  nlargest = function(array, n, cmp) {\n    var elem, result, _i, _len, _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    result = array.slice(0, n);\n    if (!result.length) {\n      return result;\n    }\n    heapify(result, cmp);\n    _ref = array.slice(n);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      elem = _ref[_i];\n      heappushpop(result, elem, cmp);\n    }\n    return result.sort(cmp).reverse();\n  };\n\n\n  /*\n  Find the n smallest elements in a dataset.\n   */\n\n  nsmallest = function(array, n, cmp) {\n    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (n * 10 <= array.length) {\n      result = array.slice(0, n).sort(cmp);\n      if (!result.length) {\n        return result;\n      }\n      los = result[result.length - 1];\n      _ref = array.slice(n);\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elem = _ref[_i];\n        if (cmp(elem, los) < 0) {\n          insort(result, elem, 0, null, cmp);\n          result.pop();\n          los = result[result.length - 1];\n        }\n      }\n      return result;\n    }\n    heapify(array, cmp);\n    _results = [];\n    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n      _results.push(heappop(array, cmp));\n    }\n    return _results;\n  };\n\n  _siftdown = function(array, startpos, pos, cmp) {\n    var newitem, parent, parentpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    newitem = array[pos];\n    while (pos > startpos) {\n      parentpos = (pos - 1) >> 1;\n      parent = array[parentpos];\n      if (cmp(newitem, parent) < 0) {\n        array[pos] = parent;\n        pos = parentpos;\n        continue;\n      }\n      break;\n    }\n    return array[pos] = newitem;\n  };\n\n  _siftup = function(array, pos, cmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n      rightpos = childpos + 1;\n      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n        childpos = rightpos;\n      }\n      array[pos] = array[childpos];\n      pos = childpos;\n      childpos = 2 * pos + 1;\n    }\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n  };\n\n  Heap = (function() {\n    Heap.push = heappush;\n\n    Heap.pop = heappop;\n\n    Heap.replace = heapreplace;\n\n    Heap.pushpop = heappushpop;\n\n    Heap.heapify = heapify;\n\n    Heap.updateItem = updateItem;\n\n    Heap.nlargest = nlargest;\n\n    Heap.nsmallest = nsmallest;\n\n    function Heap(cmp) {\n      this.cmp = cmp != null ? cmp : defaultCmp;\n      this.nodes = [];\n    }\n\n    Heap.prototype.push = function(x) {\n      return heappush(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pop = function() {\n      return heappop(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.peek = function() {\n      return this.nodes[0];\n    };\n\n    Heap.prototype.contains = function(x) {\n      return this.nodes.indexOf(x) !== -1;\n    };\n\n    Heap.prototype.replace = function(x) {\n      return heapreplace(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pushpop = function(x) {\n      return heappushpop(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.heapify = function() {\n      return heapify(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.updateItem = function(x) {\n      return updateItem(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.clear = function() {\n      return this.nodes = [];\n    };\n\n    Heap.prototype.empty = function() {\n      return this.nodes.length === 0;\n    };\n\n    Heap.prototype.size = function() {\n      return this.nodes.length;\n    };\n\n    Heap.prototype.clone = function() {\n      var heap;\n      heap = new Heap();\n      heap.nodes = this.nodes.slice(0);\n      return heap;\n    };\n\n    Heap.prototype.toArray = function() {\n      return this.nodes.slice(0);\n    };\n\n    Heap.prototype.insert = Heap.prototype.push;\n\n    Heap.prototype.top = Heap.prototype.peek;\n\n    Heap.prototype.front = Heap.prototype.peek;\n\n    Heap.prototype.has = Heap.prototype.contains;\n\n    Heap.prototype.copy = Heap.prototype.clone;\n\n    return Heap;\n\n  })();\n\n  (function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      return define([], factory);\n    } else if (typeof exports === 'object') {\n      return module.exports = factory();\n    } else {\n      return root.Heap = factory();\n    }\n  })(this, function() {\n    return Heap;\n  });\n\n}).call(this);\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/heap/lib/heap.js","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/util/util.js","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n// WEBPACK FOOTER //\n// (webpack)/buildin/global.js","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/process/browser.js","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n\n\n// WEBPACK FOOTER //\n// ./node_modules/util/support/isBufferBrowser.js","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/util/node_modules/inherits/inherits_browser.js","'use strict';\n\nconst euclidean = require('ml-distance-euclidean');\nconst ClusterLeaf = require('./ClusterLeaf');\nconst Cluster = require('./Cluster');\n\n/**\n * @private\n * @param {Array <Array <number>>} cluster1\n * @param {Array <Array <number>>} cluster2\n * @param {function} disFun\n * @returns {number}\n */\nfunction simpleLink(cluster1, cluster2, disFun) {\n    var m = 10e100;\n    for (var i = 0; i < cluster1.length; i++) {\n        for (var j = i; j < cluster2.length; j++) {\n            var d = disFun(cluster1[i], cluster2[j]);\n            m = Math.min(d, m);\n        }\n    }\n    return m;\n}\n\n/**\n * @private\n * @param {Array <Array <number>>} cluster1\n * @param {Array <Array <number>>} cluster2\n * @param {function} disFun\n * @returns {number}\n */\nfunction completeLink(cluster1, cluster2, disFun) {\n    var m = -1;\n    for (var i = 0; i < cluster1.length; i++) {\n        for (var j = i; j < cluster2.length; j++) {\n            var d = disFun(cluster1[i], cluster2[j]);\n            m = Math.max(d, m);\n        }\n    }\n    return m;\n}\n\n/**\n * @private\n * @param {Array <Array <number>>} cluster1\n * @param {Array <Array <number>>} cluster2\n * @param {function} disFun\n * @returns {number}\n */\nfunction averageLink(cluster1, cluster2, disFun) {\n    var m = 0;\n    for (var i = 0; i < cluster1.length; i++) {\n        for (var j = 0; j < cluster2.length; j++) {\n            m += disFun(cluster1[i], cluster2[j]);\n        }\n    }\n    return m / (cluster1.length * cluster2.length);\n}\n\n/**\n * @private\n * @param {Array <Array <number>>} cluster1\n * @param {Array <Array <number>>} cluster2\n * @param {function} disFun\n * @returns {number}\n */\nfunction centroidLink(cluster1, cluster2, disFun) {\n    var x1 = 0,\n        y1 = 0,\n        x2 = 0,\n        y2 = 0;\n    for (var i = 0; i < cluster1.length; i++) {\n        x1 += cluster1[i][0];\n        y1 += cluster1[i][1];\n    }\n    for (var j = 0; j < cluster2.length; j++) {\n        x2 += cluster2[j][0];\n        y2 += cluster2[j][1];\n    }\n    x1 /= cluster1.length;\n    y1 /= cluster1.length;\n    x2 /= cluster2.length;\n    y2 /= cluster2.length;\n    return disFun([x1, y1], [x2, y2]);\n}\n\n/**\n * @private\n * @param {Array <Array <number>>} cluster1\n * @param {Array <Array <number>>} cluster2\n * @param {function} disFun\n * @returns {number}\n */\nfunction wardLink(cluster1, cluster2, disFun) {\n    var x1 = 0,\n        y1 = 0,\n        x2 = 0,\n        y2 = 0;\n    for (var i = 0; i < cluster1.length; i++) {\n        x1 += cluster1[i][0];\n        y1 += cluster1[i][1];\n    }\n    for (var j = 0; j < cluster2.length; j++) {\n        x2 += cluster2[j][0];\n        y2 += cluster2[j][1];\n    }\n    x1 /= cluster1.length;\n    y1 /= cluster1.length;\n    x2 /= cluster2.length;\n    y2 /= cluster2.length;\n    return disFun([x1, y1], [x2, y2]) * cluster1.length * cluster2.length / (cluster1.length + cluster2.length);\n}\n\n/**\n * @private\n * Returns the most distant point and his distance\n * @param {Array <Array <number>>} splitting - Clusters to split\n * @param {Array <Array <number>>} data - Original data\n * @param {function} disFun - Distance function\n * @returns {{d: number, p: number}} - d: maximum difference between points, p: the point more distant\n */\nfunction diff(splitting, data, disFun) {\n    var ans = {\n        d: 0,\n        p: 0\n    };\n\n    var Ci = new Array(splitting[0].length);\n    for (var e = 0; e < splitting[0].length; e++) {\n        Ci[e] = data[splitting[0][e]];\n    }\n    var Cj = new Array(splitting[1].length);\n    for (var f = 0; f < splitting[1].length; f++) {\n        Cj[f] = data[splitting[1][f]];\n    }\n\n    var dist, ndist;\n    for (var i = 0; i < Ci.length; i++) {\n        dist = 0;\n        for (var j = 0; j < Ci.length; j++) {\n            if (i !== j) {\n                dist += disFun(Ci[i], Ci[j]);\n            }\n        }\n        dist /= (Ci.length - 1);\n        ndist = 0;\n        for (var k = 0; k < Cj.length; k++) {\n            ndist += disFun(Ci[i], Cj[k]);\n        }\n        ndist /= Cj.length;\n        if ((dist - ndist) > ans.d) {\n            ans.d = (dist - ndist);\n            ans.p = i;\n        }\n    }\n    return ans;\n}\n\nvar defaultOptions = {\n    dist: euclidean,\n    kind: 'single'\n};\n\n/**\n * @private\n * Intra-cluster distance\n * @param {Array} index\n * @param {Array} data\n * @param {function} disFun\n * @returns {number}\n */\nfunction intrDist(index, data, disFun) {\n    var dist = 0,\n        count = 0;\n    for (var i = 0; i < index.length; i++) {\n        for (var j = i; j < index.length; j++) {\n            dist += disFun(data[index[i].index], data[index[j].index]);\n            count++;\n        }\n    }\n    return dist / count;\n}\n\n/**\n * Splits the higher level clusters\n * @param {Array <Array <number>>} data - Array of points to be clustered\n * @param {json} options\n * @constructor\n */\nfunction diana(data, options) {\n    options = Object.assign({}, defaultOptions, options);\n    if (typeof options.kind === 'string') {\n        switch (options.kind) {\n            case 'single':\n                options.kind = simpleLink;\n                break;\n            case 'complete':\n                options.kind = completeLink;\n                break;\n            case 'average':\n                options.kind = averageLink;\n                break;\n            case 'centroid':\n                options.kind = centroidLink;\n                break;\n            case 'ward':\n                options.kind = wardLink;\n                break;\n            default:\n                throw new RangeError('Unknown kind of similarity');\n        }\n    } else if (typeof options.kind !== 'function') {\n        throw new TypeError('Undefined kind of similarity');\n    }\n    var tree = new Cluster();\n    tree.children = new Array(data.length);\n    tree.index = new Array(data.length);\n    for (var ind = 0; ind < data.length; ind++) {\n        tree.children[ind] = new ClusterLeaf(ind);\n        tree.index[ind] = new ClusterLeaf(ind);\n    }\n\n    tree.distance = intrDist(tree.index, data, options.dist);\n    var m, M, clId,\n        dist, rebel;\n    var list = [tree];\n    while (list.length > 0) {\n        M = 0;\n        clId = 0;\n        for (var i = 0; i < list.length; i++) {\n            m = 0;\n            for (var j = 0; j < list[i].length; j++) {\n                for (var l = (j + 1); l < list[i].length; l++) {\n                    m = Math.max(options.dist(data[list[i].index[j].index], data[list[i].index[l].index]), m);\n                }\n            }\n            if (m > M) {\n                M = m;\n                clId = i;\n            }\n        }\n        M = 0;\n        if (list[clId].index.length === 2) {\n            list[clId].children = [list[clId].index[0], list[clId].index[1]];\n            list[clId].distance = options.dist(data[list[clId].index[0].index], data[list[clId].index[1].index]);\n        } else if (list[clId].index.length === 3) {\n            list[clId].children = [list[clId].index[0], list[clId].index[1], list[clId].index[2]];\n            var d = [\n                options.dist(data[list[clId].index[0].index], data[list[clId].index[1].index]),\n                options.dist(data[list[clId].index[1].index], data[list[clId].index[2].index])\n            ];\n            list[clId].distance = (d[0] + d[1]) / 2;\n        } else {\n            var C = new Cluster();\n            var sG = new Cluster();\n            var splitting = [new Array(list[clId].index.length), []];\n            for (var spl = 0; spl < splitting[0].length; spl++) {\n                splitting[0][spl] = spl;\n            }\n            for (var ii = 0; ii < splitting[0].length; ii++) {\n                dist = 0;\n                for (var jj = 0; jj < splitting[0].length; jj++) {\n                    if (ii !== jj) {\n                        dist += options.dist(data[list[clId].index[splitting[0][jj]].index], data[list[clId].index[splitting[0][ii]].index]);\n                    }\n                }\n                dist /= (splitting[0].length - 1);\n                if (dist > M) {\n                    M = dist;\n                    rebel = ii;\n                }\n            }\n            splitting[1] = [rebel];\n            splitting[0].splice(rebel, 1);\n            dist = diff(splitting, data, options.dist);\n            while (dist.d > 0) {\n                splitting[1].push(splitting[0][dist.p]);\n                splitting[0].splice(dist.p, 1);\n                dist = diff(splitting, data, options.dist);\n            }\n            var fData = new Array(splitting[0].length);\n            C.index = new Array(splitting[0].length);\n            for (var e = 0; e < fData.length; e++) {\n                fData[e] = data[list[clId].index[splitting[0][e]].index];\n                C.index[e] = list[clId].index[splitting[0][e]];\n                C.children[e] = list[clId].index[splitting[0][e]];\n            }\n            var sData = new Array(splitting[1].length);\n            sG.index = new Array(splitting[1].length);\n            for (var f = 0; f < sData.length; f++) {\n                sData[f] = data[list[clId].index[splitting[1][f]].index];\n                sG.index[f] = list[clId].index[splitting[1][f]];\n                sG.children[f] = list[clId].index[splitting[1][f]];\n            }\n            C.distance = intrDist(C.index, data, options.dist);\n            sG.distance = intrDist(sG.index, data, options.dist);\n            list.push(C);\n            list.push(sG);\n            list[clId].children = [C, sG];\n        }\n        list.splice(clId, 1);\n    }\n    return tree;\n}\n\nmodule.exports = diana;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-hclust/src/diana.js","'use strict';\n\nvar NodeSquare = require('./node-square'),\n    NodeHexagonal = require('./node-hexagonal');\n\nvar defaultOptions = {\n    fields: 3,\n    randomizer: Math.random,\n    distance: squareEuclidean,\n    iterations: 10,\n    learningRate: 0.1,\n    gridType: 'rect',\n    torus: true,\n    method: 'random'\n};\n\nfunction SOM(x, y, options, reload) {\n\n    this.x = x;\n    this.y = y;\n\n    options = options || {};\n    this.options = {};\n    for (var i in defaultOptions) {\n        if (options.hasOwnProperty(i)) {\n            this.options[i] = options[i];\n        } else {\n            this.options[i] = defaultOptions[i];\n        }\n    }\n\n    if (typeof this.options.fields === 'number') {\n        this.numWeights = this.options.fields;\n    } else if (Array.isArray(this.options.fields)) {\n        this.numWeights = this.options.fields.length;\n        var converters = getConverters(this.options.fields);\n        this.extractor = converters.extractor;\n        this.creator = converters.creator;\n    } else {\n        throw new Error('Invalid fields definition');\n    }\n\n    if (this.options.gridType === 'rect') {\n        this.nodeType = NodeSquare;\n        this.gridDim = {\n            x: x,\n            y: y\n        };\n    } else {\n        this.nodeType = NodeHexagonal;\n        var hx = this.x - Math.floor(this.y / 2);\n        this.gridDim = {\n            x: hx,\n            y: this.y,\n            z: -(0 - hx - this.y)\n        };\n    }\n\n    this.torus = this.options.torus;\n    this.distanceMethod = this.torus ? 'getDistanceTorus' : 'getDistance';\n\n    this.distance = this.options.distance;\n\n    this.maxDistance = getMaxDistance(this.distance, this.numWeights);\n\n    if (reload === true) { // For model loading\n        this.done = true;\n        return;\n    }\n    if (!(x > 0 && y > 0)) {\n        throw new Error('x and y must be positive');\n    }\n\n    this.times = {\n        findBMU: 0,\n        adjust: 0\n    };\n\n    this.randomizer = this.options.randomizer;\n\n    this.iterationCount = 0;\n    this.iterations = this.options.iterations;\n\n    this.startLearningRate = this.learningRate = this.options.learningRate;\n\n    this.mapRadius = Math.floor(Math.max(x, y) / 2);\n\n    this.algorithmMethod = this.options.method;\n\n    this._initNodes();\n\n    this.done = false;\n}\n\nSOM.load = function loadModel(model, distance) {\n    if (model.name === 'SOM') {\n        var x = model.data.length,\n            y = model.data[0].length;\n        if (distance) {\n            model.options.distance = distance;\n        } else if (model.options.distance) {\n            model.options.distance = eval('(' + model.options.distance + ')');\n        }\n        var som = new SOM(x, y, model.options, true);\n        som.nodes = new Array(x);\n        for (var i = 0; i < x; i++) {\n            som.nodes[i] = new Array(y);\n            for (var j = 0; j < y; j++) {\n                som.nodes[i][j] = new som.nodeType(i, j, model.data[i][j], som);\n            }\n        }\n        return som;\n    } else {\n        throw new Error('expecting a SOM model');\n    }\n};\n\nSOM.prototype.export = function exportModel(includeDistance) {\n    if (!this.done) {\n        throw new Error('model is not ready yet');\n    }\n    var model = {\n        name: 'SOM'\n    };\n    model.options = {\n        fields: this.options.fields,\n        gridType: this.options.gridType,\n        torus: this.options.torus\n    };\n    model.data = new Array(this.x);\n    for (var i = 0; i < this.x; i++) {\n        model.data[i] = new Array(this.y);\n        for (var j = 0; j < this.y; j++) {\n            model.data[i][j] = this.nodes[i][j].weights;\n        }\n    }\n    if (includeDistance) {\n        model.options.distance = this.distance.toString();\n    }\n    return model;\n};\n\nSOM.prototype._initNodes = function initNodes() {\n    var now = Date.now(),\n        i, j, k;\n    this.nodes = new Array(this.x);\n    for (i = 0; i < this.x; i++) {\n        this.nodes[i] = new Array(this.y);\n        for (j = 0; j < this.y; j++) {\n            var weights = new Array(this.numWeights);\n            for (k = 0; k < this.numWeights; k++) {\n                weights[k] = this.randomizer();\n            }\n            this.nodes[i][j] = new this.nodeType(i, j, weights, this);\n        }\n    }\n    this.times.initNodes = Date.now() - now;\n};\n\nSOM.prototype.setTraining = function setTraining(trainingSet) {\n    if (this.trainingSet) {\n        throw new Error('training set has already been set');\n    }\n    var now = Date.now();\n    var convertedSet = trainingSet;\n    var i, l = trainingSet.length;\n    if (this.extractor) {\n        convertedSet = new Array(l);\n        for (i = 0; i < l; i++) {\n            convertedSet[i] = this.extractor(trainingSet[i]);\n        }\n    }\n    this.numIterations = this.iterations * l;\n\n    if (this.algorithmMethod === 'random') {\n        this.timeConstant = this.numIterations / Math.log(this.mapRadius);\n    } else {\n        this.timeConstant = l / Math.log(this.mapRadius);\n    }\n    this.trainingSet = convertedSet;\n    this.times.setTraining = Date.now() - now;\n};\n\nSOM.prototype.trainOne = function trainOne() {\n    if (this.done) {\n\n        return false;\n\n    } else if (this.numIterations-- > 0) {\n\n        var neighbourhoodRadius,\n            trainingValue,\n            trainingSetFactor;\n\n        if (this.algorithmMethod === 'random') { // Pick a random value of the training set at each step\n            neighbourhoodRadius = this.mapRadius * Math.exp(-this.iterationCount / this.timeConstant);\n            trainingValue = getRandomValue(this.trainingSet, this.randomizer);\n            this._adjust(trainingValue, neighbourhoodRadius);\n            this.learningRate = this.startLearningRate * Math.exp(-this.iterationCount / this.numIterations);\n        } else { // Get next input vector\n            trainingSetFactor = -Math.floor(this.iterationCount / this.trainingSet.length);\n            neighbourhoodRadius = this.mapRadius * Math.exp(trainingSetFactor / this.timeConstant);\n            trainingValue = this.trainingSet[this.iterationCount % this.trainingSet.length];\n            this._adjust(trainingValue, neighbourhoodRadius);\n            if (((this.iterationCount + 1) % this.trainingSet.length) === 0) {\n                this.learningRate = this.startLearningRate * Math.exp(trainingSetFactor / Math.floor(this.numIterations / this.trainingSet.length));\n            }\n        }\n\n        this.iterationCount++;\n\n        return true;\n\n    } else {\n\n        this.done = true;\n        return false;\n\n    }\n};\n\nSOM.prototype._adjust = function adjust(trainingValue, neighbourhoodRadius) {\n    var now = Date.now(),\n        x, y, dist, influence;\n\n    var bmu = this._findBestMatchingUnit(trainingValue);\n\n    var now2 = Date.now();\n    this.times.findBMU += now2 - now;\n\n    var radiusLimit = Math.floor(neighbourhoodRadius);\n    var xMin = bmu.x - radiusLimit,\n        xMax = bmu.x + radiusLimit,\n        yMin = bmu.y - radiusLimit,\n        yMax = bmu.y + radiusLimit;\n\n    for (x = xMin; x <= xMax; x++) {\n        var theX = x;\n        if (x < 0) {\n            theX += this.x;\n        } else if (x >= this.x) {\n            theX -= this.x;\n        }\n        for (y = yMin; y <= yMax; y++) {\n            var theY = y;\n            if (y < 0) {\n                theY += this.y;\n            } else if (y >= this.y) {\n                theY -= this.y;\n            }\n\n            dist = bmu[this.distanceMethod](this.nodes[theX][theY]);\n\n            if (dist < neighbourhoodRadius) {\n                influence = Math.exp(-dist / (2 * neighbourhoodRadius));\n                this.nodes[theX][theY].adjustWeights(trainingValue, this.learningRate, influence);\n            }\n\n        }\n    }\n\n    this.times.adjust += (Date.now() - now2);\n\n};\n\nSOM.prototype.train = function train(trainingSet) {\n    if (!this.done) {\n        this.setTraining(trainingSet);\n        while (this.trainOne()) {\n        }\n    }\n};\n\nSOM.prototype.getConvertedNodes = function getConvertedNodes() {\n    var result = new Array(this.x);\n    for (var i = 0; i < this.x; i++) {\n        result[i] = new Array(this.y);\n        for (var j = 0; j < this.y; j++) {\n            var node = this.nodes[i][j];\n            result[i][j] = this.creator ? this.creator(node.weights) : node.weights;\n        }\n    }\n    return result;\n};\n\nSOM.prototype._findBestMatchingUnit = function findBestMatchingUnit(candidate) {\n\n    var bmu,\n        lowest = Infinity,\n        dist;\n\n    for (var i = 0; i < this.x; i++) {\n        for (var j = 0; j < this.y; j++) {\n            dist = this.distance(this.nodes[i][j].weights, candidate);\n            if (dist < lowest) {\n                lowest = dist;\n                bmu = this.nodes[i][j];\n            }\n        }\n    }\n\n    return bmu;\n\n};\n\nSOM.prototype.predict = function predict(data, computePosition) {\n    if (typeof data === 'boolean') {\n        computePosition = data;\n        data = null;\n    }\n    if (!data) {\n        data = this.trainingSet;\n    }\n    if (Array.isArray(data) && (Array.isArray(data[0]) || (typeof data[0] === 'object'))) { // predict a dataset\n        var self = this;\n        return data.map(function (element) {\n            return self._predict(element, computePosition);\n        });\n    } else { // predict a single element\n        return this._predict(data, computePosition);\n    }\n};\n\nSOM.prototype._predict = function _predict(element, computePosition) {\n    if (!Array.isArray(element)) {\n        element = this.extractor(element);\n    }\n    var bmu = this._findBestMatchingUnit(element);\n    var result = [bmu.x, bmu.y];\n    if (computePosition) {\n        result[2] = bmu.getPosition(element);\n    }\n    return result;\n};\n\n// As seen in http://www.scholarpedia.org/article/Kohonen_network\nSOM.prototype.getQuantizationError = function getQuantizationError() {\n    var fit = this.getFit(),\n        l = fit.length,\n        sum = 0;\n    for (var i = 0; i < l; i++) {\n        sum += fit[i];\n    }\n    return sum / l;\n};\n\nSOM.prototype.getFit = function getFit(dataset) {\n    if (!dataset) {\n        dataset = this.trainingSet;\n    }\n    var l = dataset.length,\n        bmu,\n        result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        bmu = this._findBestMatchingUnit(dataset[i]);\n        result[i] = Math.sqrt(this.distance(dataset[i], bmu.weights));\n    }\n    return result;\n};\n\nfunction getConverters(fields) {\n    var l = fields.length,\n        normalizers = new Array(l),\n        denormalizers = new Array(l);\n    for (var i = 0; i < l; i++) {\n        normalizers[i] = getNormalizer(fields[i].range);\n        denormalizers[i] = getDenormalizer(fields[i].range);\n    }\n    return {\n        extractor: function extractor(value) {\n            var result = new Array(l);\n            for (var i = 0; i < l; i++) {\n                result[i] = normalizers[i](value[fields[i].name]);\n            }\n            return result;\n        },\n        creator: function creator(value) {\n            var result = {};\n            for (var i = 0; i < l; i++) {\n                result[fields[i].name] = denormalizers[i](value[i]);\n            }\n            return result;\n        }\n    };\n}\n\nfunction getNormalizer(minMax) {\n    return function normalizer(value) {\n        return (value - minMax[0]) / (minMax[1] - minMax[0]);\n    };\n}\n\nfunction getDenormalizer(minMax) {\n    return function denormalizer(value) {\n        return (minMax[0] + value * (minMax[1] - minMax[0]));\n    };\n}\n\nfunction squareEuclidean(a, b) {\n    var d = 0;\n    for (var i = 0, ii = a.length; i < ii; i++) {\n        d += (a[i] - b[i]) * (a[i] - b[i]);\n    }\n    return d;\n}\n\nfunction getRandomValue(arr, randomizer) {\n    return arr[Math.floor(randomizer() * arr.length)];\n}\n\nfunction getMaxDistance(distance, numWeights) {\n    var zero = new Array(numWeights),\n        one = new Array(numWeights);\n    for (var i = 0; i < numWeights; i++) {\n        zero[i] = 0;\n        one[i] = 1;\n    }\n    return distance(zero, one);\n}\n\nmodule.exports = SOM;\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-som/src/index.js","var NodeSquare = require('./node-square');\n\nfunction NodeHexagonal(x, y, weights, som) {\n\n    NodeSquare.call(this, x, y, weights, som);\n\n    this.hX = x - Math.floor(y / 2);\n    this.z = 0 - this.hX - y;\n\n}\n\nNodeHexagonal.prototype = new NodeSquare;\nNodeHexagonal.prototype.constructor = NodeHexagonal;\n\nNodeHexagonal.prototype.getDistance = function getDistanceHexagonal(otherNode) {\n    return Math.max(Math.abs(this.hX - otherNode.hX), Math.abs(this.y - otherNode.y), Math.abs(this.z - otherNode.z));\n};\n\nNodeHexagonal.prototype.getDistanceTorus = function getDistanceTorus(otherNode) {\n    var distX = Math.abs(this.hX - otherNode.hX),\n        distY = Math.abs(this.y - otherNode.y),\n        distZ = Math.abs(this.z - otherNode.z);\n    return Math.max(Math.min(distX, this.som.gridDim.x - distX), Math.min(distY, this.som.gridDim.y - distY), Math.min(distZ, this.som.gridDim.z - distZ));\n};\n\nNodeHexagonal.prototype.getPosition = function getPosition() {\n    throw new Error('Unimplemented : cannot get position of the points for hexagonal grid');\n};\n\nmodule.exports = NodeHexagonal;\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-som/src/node-hexagonal.js","'use strict';\n\nconst Matrix = require('ml-matrix');\n\nconst Layer = require('./Layer');\nconst OutputLayer = require('./OutputLayer');\nconst Utils = require('./utils');\nconst ACTIVATION_FUNCTIONS = require('./activationFunctions');\n\nclass FeedForwardNeuralNetworks {\n\n    /**\n     * Create a new Feedforword neural network model.\n     * @param {object} options\n     * @param {Array} [options.hiddenLayers=[10]] - Array that contains the sizes of the hidden layers.\n     * @oaram {number} [options.iterations=50] - Number of iterations at the training step.\n     * @param {number} [options.learningRate=0.01] - Learning rate of the neural net (also known as epsilon).\n     * @poram {number} [options.regularization=0.01] - Regularization parameter af the neural net.\n     * @poram {string} [options.activation='tanh'] - activation function to be used. (options: 'tanh'(default),\n     * 'identity', 'logistic', 'arctan', 'softsign', 'relu', 'softplus', 'bent', 'sinusoid', 'sinc', 'gaussian').\n     * (single-parametric options: 'parametric-relu', 'exponential-relu', 'soft-exponential').\n     * @param {number} [options.activationParam=1] - if the selected activation function needs a parameter.\n     */\n    constructor(options) {\n        options = options || {};\n        if (options.model) {\n            // load network\n            this.hiddenLayers = options.hiddenLayers;\n            this.iterations = options.iterations;\n            this.learningRate = options.learningRate;\n            this.regularization = options.regularization;\n            this.dicts = options.dicts;\n            this.activation = options.activation;\n            this.activationParam = options.activationParam;\n            this.model = new Array(options.layers.length);\n\n            for (var i = 0; i < this.model.length - 1; ++i) {\n                this.model[i] = Layer.load(options.layers[i]);\n            }\n            this.model[this.model.length - 1] = OutputLayer.load(options.layers[this.model.length - 1]);\n        } else {\n            // default constructor\n            this.hiddenLayers = options.hiddenLayers === undefined ? [10] : options.hiddenLayers;\n            this.iterations = options.iterations === undefined ? 50 : options.iterations;\n\n            this.learningRate = options.learningRate === undefined ? 0.01 : options.learningRate;\n            //this.momentum = options.momentum === undefined ? 0.1 : options.momentum;\n            this.regularization = options.regularization === undefined ? 0.01 : options.regularization;\n\n            this.activation = options.activation === undefined ? 'tanh' : options.activation;\n            this.activationParam = options.activationParam === undefined ? 1 : options.activationParam;\n            if (!(this.activation in Object.keys(ACTIVATION_FUNCTIONS))) {\n                this.activation = 'tanh';\n            }\n        }\n    }\n\n    /**\n     * Function that build and initialize the neural net.\n     * @param {number} inputSize - total of features to fit.\n     * @param {number} outputSize - total of labels of the prediction set.\n     */\n    buildNetwork(inputSize, outputSize) {\n        var size = 2 + (this.hiddenLayers.length - 1);\n        this.model = new Array(size);\n\n        // input layer\n        this.model[0] = new Layer({\n            inputSize: inputSize,\n            outputSize: this.hiddenLayers[0],\n            activation: this.activation,\n            activationParam: this.activationParam,\n            regularization: this.regularization,\n            epsilon: this.learningRate\n        });\n\n        // hidden layers\n        for (var i = 1; i < this.hiddenLayers.length; ++i) {\n            this.model[i] = new Layer({\n                inputSize: this.hiddenLayers[i - 1],\n                outputSize: this.hiddenLayers[i],\n                activation: this.activation,\n                activationParam: this.activationParam,\n                regularization: this.regularization,\n                epsilon: this.learningRate\n            });\n        }\n\n        // output layer\n        this.model[size - 1] = new OutputLayer({\n            inputSize: this.hiddenLayers[this.hiddenLayers.length - 1],\n            outputSize: outputSize,\n            activation: this.activation,\n            activationParam: this.activationParam,\n            regularization: this.regularization,\n            epsilon: this.learningRate\n        });\n    }\n\n    /**\n     * Train the neural net with the given features and labels.\n     * @param {Matrix|Array} features\n     * @param {Matrix|Array} labels\n     */\n    train(features, labels) {\n        features = Matrix.checkMatrix(features);\n        this.dicts = Utils.dictOutputs(labels);\n\n        var inputSize = features.columns;\n        var outputSize = Object.keys(this.dicts.inputs).length;\n\n        this.buildNetwork(inputSize, outputSize);\n\n        for (var i = 0; i < this.iterations; ++i) {\n            var probabilities = this.propagate(features);\n            this.backpropagation(features, labels, probabilities);\n        }\n    }\n\n    /**\n     * Propagate the input(training set) and retrives the probabilities of each class.\n     * @param {Matrix} X\n     * @return {Matrix} probabilities of each class.\n     */\n    propagate(X) {\n        var input = X;\n        for (var i = 0; i < this.model.length; ++i) {\n            //console.log(i);\n            input = this.model[i].forward(input);\n        }\n\n        // get probabilities\n        return input.divColumnVector(Utils.sumRow(input));\n    }\n\n    /**\n     * Function that applies the backpropagation algorithm on each layer of the network\n     * in order to fit the features and labels.\n     * @param {Matrix} features\n     * @param {Array} labels\n     * @param {Matrix} probabilities - probabilities of each class of the feature set.\n     */\n    backpropagation(features, labels, probabilities) {\n        for (var i = 0; i < probabilities.length; ++i) {\n            probabilities[i][this.dicts.inputs[labels[i]]] -= 1;\n        }\n\n        // remember, the last delta doesn't matter\n        var delta = probabilities;\n        for (i = this.model.length - 1; i >= 0; --i) {\n            var a = i > 0 ? this.model[i - 1].a : features;\n            delta = this.model[i].backpropagation(delta, a);\n        }\n\n        for (i = 0; i < this.model.length; ++i) {\n            this.model[i].update();\n        }\n    }\n\n    /**\n     * Predict the output given the feature set.\n     * @param {Array|Matrix} features\n     * @return {Array}\n     */\n    predict(features) {\n        features = Matrix.checkMatrix(features);\n        var outputs = new Array(features.rows);\n        var probabilities = this.propagate(features);\n        for (var i = 0; i < features.rows; ++i) {\n            outputs[i] = this.dicts.outputs[probabilities.maxRowIndex(i)[1]];\n        }\n\n        return outputs;\n    }\n\n    /**\n     * Export the current model to JSOM.\n     * @return {object} model\n     */\n    toJSON() {\n        var model = {\n            model: 'FNN',\n            hiddenLayers: this.hiddenLayers,\n            iterations: this.iterations,\n            learningRate: this.learningRate,\n            regularization: this.regularization,\n            activation: this.activation,\n            activationParam: this.activationParam,\n            dicts: this.dicts,\n            layers: new Array(this.model.length)\n        };\n\n        for (var i = 0; i < this.model.length; ++i) {\n            model.layers[i] = this.model[i].toJSON();\n        }\n\n        return model;\n    }\n\n    /**\n     * Load a Feedforward Neural Network with the current model.\n     * @param {object} model\n     * @return {FeedForwardNeuralNetworks}\n     */\n    static load(model) {\n        if (model.model !== 'FNN') {\n            throw new RangeError('the current model is not a feed forward network');\n        }\n\n        return new FeedForwardNeuralNetworks(model);\n    }\n}\n\nmodule.exports = FeedForwardNeuralNetworks;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-fnn/src/FeedForwardNeuralNetwork.js","'use strict';\n\nif (!Symbol.species) {\n    Symbol.species = Symbol.for('@@species');\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-fnn/node_modules/ml-matrix/src/symbol-species.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixTransposeView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.columns, matrix.rows);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(columnIndex, rowIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(columnIndex, rowIndex);\n    }\n}\n\nmodule.exports = MatrixTransposeView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-fnn/node_modules/ml-matrix/src/views/transpose.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixRowView extends BaseView {\n    constructor(matrix, row) {\n        super(matrix, 1, matrix.columns);\n        this.row = row;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.row, columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.row, columnIndex);\n    }\n}\n\nmodule.exports = MatrixRowView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-fnn/node_modules/ml-matrix/src/views/row.js","'use strict';\n\nvar BaseView = require('./base');\nvar util = require('../util');\n\nclass MatrixSubView extends BaseView {\n    constructor(matrix, startRow, endRow, startColumn, endColumn) {\n        util.checkRange(matrix, startRow, endRow, startColumn, endColumn);\n        super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n        this.startRow = startRow;\n        this.startColumn = startColumn;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.startRow + rowIndex, this.startColumn + columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.startRow + rowIndex, this.startColumn + columnIndex);\n    }\n}\n\nmodule.exports = MatrixSubView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-fnn/node_modules/ml-matrix/src/views/sub.js","'use strict';\n\nvar BaseView = require('./base');\nvar util = require('../util');\n\nclass MatrixSelectionView extends BaseView {\n    constructor(matrix, rowIndices, columnIndices) {\n        var indices = util.checkIndices(matrix, rowIndices, columnIndices);\n        super(matrix, indices.row.length, indices.column.length);\n        this.rowIndices = indices.row;\n        this.columnIndices = indices.column;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.rowIndices[rowIndex], this.columnIndices[columnIndex], value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.rowIndices[rowIndex], this.columnIndices[columnIndex]);\n    }\n}\n\nmodule.exports = MatrixSelectionView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-fnn/node_modules/ml-matrix/src/views/selection.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixColumnView extends BaseView {\n    constructor(matrix, column) {\n        super(matrix, matrix.rows, 1);\n        this.column = column;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(rowIndex, this.column, value);\n        return this;\n    }\n\n    get(rowIndex) {\n        return this.matrix.get(rowIndex, this.column);\n    }\n}\n\nmodule.exports = MatrixColumnView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-fnn/node_modules/ml-matrix/src/views/column.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixFlipRowView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.rows, matrix.columns);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\n    }\n}\n\nmodule.exports = MatrixFlipRowView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-fnn/node_modules/ml-matrix/src/views/flipRow.js","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixFlipColumnView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.rows, matrix.columns);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\n    }\n}\n\nmodule.exports = MatrixFlipColumnView;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-fnn/node_modules/ml-matrix/src/views/flipColumn.js","'use strict';\n\nvar Matrix = require('./matrix').Matrix;\n\nvar SingularValueDecomposition = require('./dc/svd');\nvar EigenvalueDecomposition = require('./dc/evd');\nvar LuDecomposition = require('./dc/lu');\nvar QrDecomposition = require('./dc/qr');\nvar CholeskyDecomposition = require('./dc/cholesky');\n\nfunction inverse(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    return solve(matrix, Matrix.eye(matrix.rows));\n}\n\n/**\n * Returns the inverse\n * @memberOf Matrix\n * @static\n * @param {Matrix} matrix\n * @return {Matrix} matrix\n * @alias inv\n */\nMatrix.inverse = Matrix.inv = inverse;\n\n/**\n * Returns the inverse\n * @memberOf Matrix\n * @static\n * @param {Matrix} matrix\n * @return {Matrix} matrix\n * @alias inv\n */\nMatrix.prototype.inverse = Matrix.prototype.inv = function () {\n    return inverse(this);\n};\n\nfunction solve(leftHandSide, rightHandSide) {\n    leftHandSide = Matrix.checkMatrix(leftHandSide);\n    rightHandSide = Matrix.checkMatrix(rightHandSide);\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n}\n\nMatrix.solve = solve;\nMatrix.prototype.solve = function (other) {\n    return solve(this, other);\n};\n\nmodule.exports = {\n    SingularValueDecomposition: SingularValueDecomposition,\n    SVD: SingularValueDecomposition,\n    EigenvalueDecomposition: EigenvalueDecomposition,\n    EVD: EigenvalueDecomposition,\n    LuDecomposition: LuDecomposition,\n    LU: LuDecomposition,\n    QrDecomposition: QrDecomposition,\n    QR: QrDecomposition,\n    CholeskyDecomposition: CholeskyDecomposition,\n    CHO: CholeskyDecomposition,\n    inverse: inverse,\n    solve: solve\n};\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-fnn/node_modules/ml-matrix/src/decompositions.js","'use strict';\n\nconst Matrix = require('../matrix').Matrix;\nconst util = require('./util');\nconst hypotenuse = util.hypotenuse;\nconst getFilled2DArray = util.getFilled2DArray;\n\nconst defaultOptions = {\n    assumeSymmetric: false\n};\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\nfunction EigenvalueDecomposition(matrix, options) {\n    options = Object.assign({}, defaultOptions, options);\n    if (!(this instanceof EigenvalueDecomposition)) {\n        return new EigenvalueDecomposition(matrix, options);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n        throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns,\n        V = getFilled2DArray(n, n, 0),\n        d = new Array(n),\n        e = new Array(n),\n        value = matrix,\n        i, j;\n\n    var isSymmetric = false;\n    if (options.assumeSymmetric) {\n        isSymmetric = true;\n    } else {\n        isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                V[i][j] = value.get(i, j);\n            }\n        }\n        tred2(n, e, d, V);\n        tql2(n, e, d, V);\n    } else {\n        var H = getFilled2DArray(n, n, 0),\n            ort = new Array(n);\n        for (j = 0; j < n; j++) {\n            for (i = 0; i < n; i++) {\n                H[i][j] = value.get(i, j);\n            }\n        }\n        orthes(n, H, ort, V);\n        hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n}\n\nEigenvalueDecomposition.prototype = {\n    get realEigenvalues() {\n        return this.d;\n    },\n    get imaginaryEigenvalues() {\n        return this.e;\n    },\n    get eigenvectorMatrix() {\n        if (!Matrix.isMatrix(this.V)) {\n            this.V = new Matrix(this.V);\n        }\n        return this.V;\n    },\n    get diagonalMatrix() {\n        var n = this.n,\n            e = this.e,\n            d = this.d,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                X[i][j] = 0;\n            }\n            X[i][i] = d[i];\n            if (e[i] > 0) {\n                X[i][i + 1] = e[i];\n            } else if (e[i] < 0) {\n                X[i][i - 1] = e[i];\n            }\n        }\n        return X;\n    }\n};\n\nfunction tred2(n, e, d, V) {\n\n    var f, g, h, i, j, k,\n        hh, scale;\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n    }\n\n    for (i = n - 1; i > 0; i--) {\n        scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n            scale = scale + Math.abs(d[k]);\n        }\n\n        if (scale === 0) {\n            e[i] = d[i - 1];\n            for (j = 0; j < i; j++) {\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n                V[j][i] = 0;\n            }\n        } else {\n            for (k = 0; k < i; k++) {\n                d[k] /= scale;\n                h += d[k] * d[k];\n            }\n\n            f = d[i - 1];\n            g = Math.sqrt(h);\n            if (f > 0) {\n                g = -g;\n            }\n\n            e[i] = scale * g;\n            h = h - f * g;\n            d[i - 1] = f - g;\n            for (j = 0; j < i; j++) {\n                e[j] = 0;\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                V[j][i] = f;\n                g = e[j] + V[j][j] * f;\n                for (k = j + 1; k <= i - 1; k++) {\n                    g += V[k][j] * d[k];\n                    e[k] += V[k][j] * f;\n                }\n                e[j] = g;\n            }\n\n            f = 0;\n            for (j = 0; j < i; j++) {\n                e[j] /= h;\n                f += e[j] * d[j];\n            }\n\n            hh = f / (h + h);\n            for (j = 0; j < i; j++) {\n                e[j] -= hh * d[j];\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                g = e[j];\n                for (k = j; k <= i - 1; k++) {\n                    V[k][j] -= (f * e[k] + g * d[k]);\n                }\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n            }\n        }\n        d[i] = h;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        V[n - 1][i] = V[i][i];\n        V[i][i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n            for (k = 0; k <= i; k++) {\n                d[k] = V[k][i + 1] / h;\n            }\n\n            for (j = 0; j <= i; j++) {\n                g = 0;\n                for (k = 0; k <= i; k++) {\n                    g += V[k][i + 1] * V[k][j];\n                }\n                for (k = 0; k <= i; k++) {\n                    V[k][j] -= g * d[k];\n                }\n            }\n        }\n\n        for (k = 0; k <= i; k++) {\n            V[k][i + 1] = 0;\n        }\n    }\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n        V[n - 1][j] = 0;\n    }\n\n    V[n - 1][n - 1] = 1;\n    e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n\n    var g, h, i, j, k, l, m, p, r,\n        dl1, c, c2, c3, el1, s, s2,\n        iter;\n\n    for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n    }\n\n    e[n - 1] = 0;\n\n    var f = 0,\n        tst1 = 0,\n        eps = Math.pow(2, -52);\n\n    for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        m = l;\n        while (m < n) {\n            if (Math.abs(e[m]) <= eps * tst1) {\n                break;\n            }\n            m++;\n        }\n\n        if (m > l) {\n            iter = 0;\n            do {\n                iter = iter + 1;\n\n                g = d[l];\n                p = (d[l + 1] - g) / (2 * e[l]);\n                r = hypotenuse(p, 1);\n                if (p < 0) {\n                    r = -r;\n                }\n\n                d[l] = e[l] / (p + r);\n                d[l + 1] = e[l] * (p + r);\n                dl1 = d[l + 1];\n                h = g - d[l];\n                for (i = l + 2; i < n; i++) {\n                    d[i] -= h;\n                }\n\n                f = f + h;\n\n                p = d[m];\n                c = 1;\n                c2 = c;\n                c3 = c;\n                el1 = e[l + 1];\n                s = 0;\n                s2 = 0;\n                for (i = m - 1; i >= l; i--) {\n                    c3 = c2;\n                    c2 = c;\n                    s2 = s;\n                    g = c * e[i];\n                    h = c * p;\n                    r = hypotenuse(p, e[i]);\n                    e[i + 1] = s * r;\n                    s = e[i] / r;\n                    c = p / r;\n                    p = c * d[i] - s * g;\n                    d[i + 1] = h + s * (c * g + s * d[i]);\n\n                    for (k = 0; k < n; k++) {\n                        h = V[k][i + 1];\n                        V[k][i + 1] = s * V[k][i] + c * h;\n                        V[k][i] = c * V[k][i] - s * h;\n                    }\n                }\n\n                p = -s * s2 * c3 * el1 * e[l] / dl1;\n                e[l] = s * p;\n                d[l] = c * p;\n\n            }\n            while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n            if (d[j] < p) {\n                k = j;\n                p = d[j];\n            }\n        }\n\n        if (k !== i) {\n            d[k] = d[i];\n            d[i] = p;\n            for (j = 0; j < n; j++) {\n                p = V[j][i];\n                V[j][i] = V[j][k];\n                V[j][k] = p;\n            }\n        }\n    }\n}\n\nfunction orthes(n, H, ort, V) {\n\n    var low = 0,\n        high = n - 1,\n        f, g, h, i, j, m,\n        scale;\n\n    for (m = low + 1; m <= high - 1; m++) {\n        scale = 0;\n        for (i = m; i <= high; i++) {\n            scale = scale + Math.abs(H[i][m - 1]);\n        }\n\n        if (scale !== 0) {\n            h = 0;\n            for (i = high; i >= m; i--) {\n                ort[i] = H[i][m - 1] / scale;\n                h += ort[i] * ort[i];\n            }\n\n            g = Math.sqrt(h);\n            if (ort[m] > 0) {\n                g = -g;\n            }\n\n            h = h - ort[m] * g;\n            ort[m] = ort[m] - g;\n\n            for (j = m; j < n; j++) {\n                f = 0;\n                for (i = high; i >= m; i--) {\n                    f += ort[i] * H[i][j];\n                }\n\n                f = f / h;\n                for (i = m; i <= high; i++) {\n                    H[i][j] -= f * ort[i];\n                }\n            }\n\n            for (i = 0; i <= high; i++) {\n                f = 0;\n                for (j = high; j >= m; j--) {\n                    f += ort[j] * H[i][j];\n                }\n\n                f = f / h;\n                for (j = m; j <= high; j++) {\n                    H[i][j] -= f * ort[j];\n                }\n            }\n\n            ort[m] = scale * ort[m];\n            H[m][m - 1] = scale * g;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            V[i][j] = (i === j ? 1 : 0);\n        }\n    }\n\n    for (m = high - 1; m >= low + 1; m--) {\n        if (H[m][m - 1] !== 0) {\n            for (i = m + 1; i <= high; i++) {\n                ort[i] = H[i][m - 1];\n            }\n\n            for (j = m; j <= high; j++) {\n                g = 0;\n                for (i = m; i <= high; i++) {\n                    g += ort[i] * V[i][j];\n                }\n\n                g = (g / ort[m]) / H[m][m - 1];\n                for (i = m; i <= high; i++) {\n                    V[i][j] += g * ort[i];\n                }\n            }\n        }\n    }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n    var n = nn - 1,\n        low = 0,\n        high = nn - 1,\n        eps = Math.pow(2, -52),\n        exshift = 0,\n        norm = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n        s = 0,\n        z = 0,\n        iter = 0,\n        i, j, k, l, m, t, w, x, y,\n        ra, sa, vr, vi,\n        notlast, cdivres;\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            d[i] = H[i][i];\n            e[i] = 0;\n        }\n\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n            norm = norm + Math.abs(H[i][j]);\n        }\n    }\n\n    while (n >= low) {\n        l = n;\n        while (l > low) {\n            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n            if (s === 0) {\n                s = norm;\n            }\n            if (Math.abs(H[l][l - 1]) < eps * s) {\n                break;\n            }\n            l--;\n        }\n\n        if (l === n) {\n            H[n][n] = H[n][n] + exshift;\n            d[n] = H[n][n];\n            e[n] = 0;\n            n--;\n            iter = 0;\n        } else if (l === n - 1) {\n            w = H[n][n - 1] * H[n - 1][n];\n            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n            q = p * p + w;\n            z = Math.sqrt(Math.abs(q));\n            H[n][n] = H[n][n] + exshift;\n            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n            x = H[n][n];\n\n            if (q >= 0) {\n                z = (p >= 0) ? (p + z) : (p - z);\n                d[n - 1] = x + z;\n                d[n] = d[n - 1];\n                if (z !== 0) {\n                    d[n] = x - w / z;\n                }\n                e[n - 1] = 0;\n                e[n] = 0;\n                x = H[n][n - 1];\n                s = Math.abs(x) + Math.abs(z);\n                p = x / s;\n                q = z / s;\n                r = Math.sqrt(p * p + q * q);\n                p = p / r;\n                q = q / r;\n\n                for (j = n - 1; j < nn; j++) {\n                    z = H[n - 1][j];\n                    H[n - 1][j] = q * z + p * H[n][j];\n                    H[n][j] = q * H[n][j] - p * z;\n                }\n\n                for (i = 0; i <= n; i++) {\n                    z = H[i][n - 1];\n                    H[i][n - 1] = q * z + p * H[i][n];\n                    H[i][n] = q * H[i][n] - p * z;\n                }\n\n                for (i = low; i <= high; i++) {\n                    z = V[i][n - 1];\n                    V[i][n - 1] = q * z + p * V[i][n];\n                    V[i][n] = q * V[i][n] - p * z;\n                }\n            } else {\n                d[n - 1] = x + p;\n                d[n] = x + p;\n                e[n - 1] = z;\n                e[n] = -z;\n            }\n\n            n = n - 2;\n            iter = 0;\n        } else {\n            x = H[n][n];\n            y = 0;\n            w = 0;\n            if (l < n) {\n                y = H[n - 1][n - 1];\n                w = H[n][n - 1] * H[n - 1][n];\n            }\n\n            if (iter === 10) {\n                exshift += x;\n                for (i = low; i <= n; i++) {\n                    H[i][i] -= x;\n                }\n                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n                x = y = 0.75 * s;\n                w = -0.4375 * s * s;\n            }\n\n            if (iter === 30) {\n                s = (y - x) / 2;\n                s = s * s + w;\n                if (s > 0) {\n                    s = Math.sqrt(s);\n                    if (y < x) {\n                        s = -s;\n                    }\n                    s = x - w / ((y - x) / 2 + s);\n                    for (i = low; i <= n; i++) {\n                        H[i][i] -= s;\n                    }\n                    exshift += s;\n                    x = y = w = 0.964;\n                }\n            }\n\n            iter = iter + 1;\n\n            m = n - 2;\n            while (m >= l) {\n                z = H[m][m];\n                r = x - z;\n                s = y - z;\n                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n                q = H[m + 1][m + 1] - z - r - s;\n                r = H[m + 2][m + 1];\n                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                p = p / s;\n                q = q / s;\n                r = r / s;\n                if (m === l) {\n                    break;\n                }\n                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n                    break;\n                }\n                m--;\n            }\n\n            for (i = m + 2; i <= n; i++) {\n                H[i][i - 2] = 0;\n                if (i > m + 2) {\n                    H[i][i - 3] = 0;\n                }\n            }\n\n            for (k = m; k <= n - 1; k++) {\n                notlast = (k !== n - 1);\n                if (k !== m) {\n                    p = H[k][k - 1];\n                    q = H[k + 1][k - 1];\n                    r = (notlast ? H[k + 2][k - 1] : 0);\n                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                    if (x !== 0) {\n                        p = p / x;\n                        q = q / x;\n                        r = r / x;\n                    }\n                }\n\n                if (x === 0) {\n                    break;\n                }\n\n                s = Math.sqrt(p * p + q * q + r * r);\n                if (p < 0) {\n                    s = -s;\n                }\n\n                if (s !== 0) {\n                    if (k !== m) {\n                        H[k][k - 1] = -s * x;\n                    } else if (l !== m) {\n                        H[k][k - 1] = -H[k][k - 1];\n                    }\n\n                    p = p + s;\n                    x = p / s;\n                    y = q / s;\n                    z = r / s;\n                    q = q / p;\n                    r = r / p;\n\n                    for (j = k; j < nn; j++) {\n                        p = H[k][j] + q * H[k + 1][j];\n                        if (notlast) {\n                            p = p + r * H[k + 2][j];\n                            H[k + 2][j] = H[k + 2][j] - p * z;\n                        }\n\n                        H[k][j] = H[k][j] - p * x;\n                        H[k + 1][j] = H[k + 1][j] - p * y;\n                    }\n\n                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n                        p = x * H[i][k] + y * H[i][k + 1];\n                        if (notlast) {\n                            p = p + z * H[i][k + 2];\n                            H[i][k + 2] = H[i][k + 2] - p * r;\n                        }\n\n                        H[i][k] = H[i][k] - p;\n                        H[i][k + 1] = H[i][k + 1] - p * q;\n                    }\n\n                    for (i = low; i <= high; i++) {\n                        p = x * V[i][k] + y * V[i][k + 1];\n                        if (notlast) {\n                            p = p + z * V[i][k + 2];\n                            V[i][k + 2] = V[i][k + 2] - p * r;\n                        }\n\n                        V[i][k] = V[i][k] - p;\n                        V[i][k + 1] = V[i][k + 1] - p * q;\n                    }\n                }\n            }\n        }\n    }\n\n    if (norm === 0) {\n        return;\n    }\n\n    for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n\n        if (q === 0) {\n            l = n;\n            H[n][n] = 1;\n            for (i = n - 1; i >= 0; i--) {\n                w = H[i][i] - p;\n                r = 0;\n                for (j = l; j <= n; j++) {\n                    r = r + H[i][j] * H[j][n];\n                }\n\n                if (e[i] < 0) {\n                    z = w;\n                    s = r;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                        t = (x * s - z * r) / q;\n                        H[i][n] = t;\n                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n                    }\n\n                    t = Math.abs(H[i][n]);\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        } else if (q < 0) {\n            l = n - 1;\n\n            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n                H[n - 1][n - 1] = q / H[n][n - 1];\n                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n            } else {\n                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n                H[n - 1][n - 1] = cdivres[0];\n                H[n - 1][n] = cdivres[1];\n            }\n\n            H[n][n - 1] = 0;\n            H[n][n] = 1;\n            for (i = n - 2; i >= 0; i--) {\n                ra = 0;\n                sa = 0;\n                for (j = l; j <= n; j++) {\n                    ra = ra + H[i][j] * H[j][n - 1];\n                    sa = sa + H[i][j] * H[j][n];\n                }\n\n                w = H[i][i] - p;\n\n                if (e[i] < 0) {\n                    z = w;\n                    r = ra;\n                    s = sa;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        cdivres = cdiv(-ra, -sa, w, q);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                        vi = (d[i] - p) * 2 * q;\n                        if (vr === 0 && vi === 0) {\n                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                        }\n                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n                        } else {\n                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n                            H[i + 1][n - 1] = cdivres[0];\n                            H[i + 1][n] = cdivres[1];\n                        }\n                    }\n\n                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n - 1] = H[j][n - 1] / t;\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            for (j = i; j < nn; j++) {\n                V[i][j] = H[i][j];\n            }\n        }\n    }\n\n    for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n            z = 0;\n            for (k = low; k <= Math.min(j, high); k++) {\n                z = z + V[i][k] * H[k][j];\n            }\n            V[i][j] = z;\n        }\n    }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n    var r, d;\n    if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        return [(xr + r * xi) / d, (xi - r * xr) / d];\n    } else {\n        r = yr / yi;\n        d = yi + r * yr;\n        return [(r * xr + xi) / d, (r * xi - xr) / d];\n    }\n}\n\nmodule.exports = EigenvalueDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-fnn/node_modules/ml-matrix/src/dc/evd.js","'use strict';\n\nvar Matrix = require('../matrix').Matrix;\nvar hypotenuse = require('./util').hypotenuse;\n\n//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\nfunction QrDecomposition(value) {\n    if (!(this instanceof QrDecomposition)) {\n        return new QrDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n\n    var qr = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        rdiag = new Array(n),\n        i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) {\n            nrm = hypotenuse(nrm, qr[i][k]);\n        }\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) {\n                nrm = -nrm;\n            }\n            for (i = k; i < m; i++) {\n                qr[i][k] /= nrm;\n            }\n            qr[k][k] += 1;\n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * qr[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    qr[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n}\n\nQrDecomposition.prototype = {\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var qr = this.QR,\n            m = qr.rows;\n\n        if (value.rows !== m) {\n            throw new Error('Matrix row dimensions must agree');\n        }\n        if (!this.isFullRank()) {\n            throw new Error('Matrix is rank deficient');\n        }\n\n        var count = value.columns;\n        var X = value.clone();\n        var n = qr.columns;\n        var i, j, k, s;\n\n        for (k = 0; k < n; k++) {\n            for (j = 0; j < count; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * X[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    X[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        for (k = n - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= this.Rdiag[k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * qr[i][k];\n                }\n            }\n        }\n\n        return X.subMatrix(0, n - 1, 0, count - 1);\n    },\n    isFullRank: function () {\n        var columns = this.QR.columns;\n        for (var i = 0; i < columns; i++) {\n            if (this.Rdiag[i] === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n    get upperTriangularMatrix() {\n        var qr = this.QR,\n            n = qr.columns,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                if (i < j) {\n                    X[i][j] = qr[i][j];\n                } else if (i === j) {\n                    X[i][j] = this.Rdiag[i];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get orthogonalMatrix() {\n        var qr = this.QR,\n            rows = qr.rows,\n            columns = qr.columns,\n            X = new Matrix(rows, columns),\n            i, j, k, s;\n\n        for (k = columns - 1; k >= 0; k--) {\n            for (i = 0; i < rows; i++) {\n                X[i][k] = 0;\n            }\n            X[k][k] = 1;\n            for (j = k; j < columns; j++) {\n                if (qr[k][k] !== 0) {\n                    s = 0;\n                    for (i = k; i < rows; i++) {\n                        s += qr[i][k] * X[i][j];\n                    }\n\n                    s = -s / qr[k][k];\n\n                    for (i = k; i < rows; i++) {\n                        X[i][j] += s * qr[i][k];\n                    }\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = QrDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-fnn/node_modules/ml-matrix/src/dc/qr.js","'use strict';\n\nvar Matrix = require('../matrix').Matrix;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\nfunction CholeskyDecomposition(value) {\n    if (!(this instanceof CholeskyDecomposition)) {\n        return new CholeskyDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n    if (!value.isSymmetric()) {\n        throw new Error('Matrix is not symmetric');\n    }\n\n    var a = value,\n        dimension = a.rows,\n        l = new Matrix(dimension, dimension),\n        positiveDefinite = true,\n        i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n        var Lrowj = l[j];\n        var d = 0;\n        for (k = 0; k < j; k++) {\n            var Lrowk = l[k];\n            var s = 0;\n            for (i = 0; i < k; i++) {\n                s += Lrowk[i] * Lrowj[i];\n            }\n            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n            d = d + s * s;\n        }\n\n        d = a[j][j] - d;\n\n        positiveDefinite &= (d > 0);\n        l[j][j] = Math.sqrt(Math.max(d, 0));\n        for (k = j + 1; k < dimension; k++) {\n            l[j][k] = 0;\n        }\n    }\n\n    if (!positiveDefinite) {\n        throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n}\n\nCholeskyDecomposition.prototype = {\n    get lowerTriangularMatrix() {\n        return this.L;\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var l = this.L,\n            dimension = l.rows;\n\n        if (value.rows !== dimension) {\n            throw new Error('Matrix dimensions do not match');\n        }\n\n        var count = value.columns,\n            B = value.clone(),\n            i, j, k;\n\n        for (k = 0; k < dimension; k++) {\n            for (j = 0; j < count; j++) {\n                for (i = 0; i < k; i++) {\n                    B[k][j] -= B[i][j] * l[k][i];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        for (k = dimension - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                for (i = k + 1; i < dimension; i++) {\n                    B[k][j] -= B[i][j] * l[i][k];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        return B;\n    }\n};\n\nmodule.exports = CholeskyDecomposition;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-fnn/node_modules/ml-matrix/src/dc/cholesky.js","'use strict';\n\nvar Layer = require('./Layer');\n\nclass OutputLayer extends Layer {\n    constructor(options) {\n        super(options);\n\n        this.activationFunction = function (i, j) {\n            this[i][j] = Math.exp(this[i][j]);\n        };\n    }\n\n    static load(model) {\n        if (model.model !== 'Layer') {\n            throw new RangeError('the current model is not a Layer model');\n        }\n\n        return new OutputLayer(model);\n    }\n}\n\nmodule.exports = OutputLayer;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/ml-fnn/src/OutputLayer.js"],"sourceRoot":""}