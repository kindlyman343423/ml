{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///ml.min.js","webpack:///webpack/bootstrap fe15bac5956506682770","webpack:///./src/index.js","webpack:///./~/ml-array-utils/src/index.js","webpack:///./~/ml-array-utils/src/ArrayUtils.js","webpack:///./~/ml-array-utils/src/getEquallySpaced.js","webpack:///./~/ml-array-utils/src/snv.js","webpack:///./~/ml-stat/index.js","webpack:///./~/ml-stat/array.js","webpack:///./~/ml-stat/matrix.js","webpack:///./~/ml-array-utils/~/ml-matrix/src/index.js","webpack:///./~/ml-array-utils/~/ml-matrix/src/matrix.js","webpack:///./~/ml-array-utils/~/ml-matrix/src/decompositions.js","webpack:///./~/ml-array-utils/~/ml-matrix/src/dc/svd.js","webpack:///./~/ml-array-utils/~/ml-matrix/src/dc/util.js","webpack:///./~/ml-array-utils/~/ml-matrix/src/dc/evd.js","webpack:///./~/ml-array-utils/~/ml-matrix/src/dc/lu.js","webpack:///./~/ml-array-utils/~/ml-matrix/src/dc/qr.js","webpack:///./~/ml-array-utils/~/ml-matrix/src/dc/cholesky.js","webpack:///./~/ml-bit-array/src/index.js","webpack:///./~/ml-bit-array/src/creator.js","webpack:///./~/ml-matrix/src/index.js","webpack:///./~/ml-matrix/src/matrix.js","webpack:///./~/ml-matrix/src/decompositions.js","webpack:///./~/ml-matrix/src/dc/svd.js","webpack:///./~/ml-matrix/src/dc/util.js","webpack:///./~/ml-matrix/src/dc/evd.js","webpack:///./~/ml-matrix/src/dc/lu.js","webpack:///./~/ml-matrix/src/dc/qr.js","webpack:///./~/ml-matrix/src/dc/cholesky.js","webpack:///./~/ml-distance/src/index.js","webpack:///./~/ml-distance/src/distances.js","webpack:///./~/ml-distance/src/distances/additiveSymmetric.js","webpack:///./~/ml-distance/src/distances/avg.js","webpack:///./~/ml-distance/src/distances/bhattacharyya.js","webpack:///./~/ml-distance/src/distances/canberra.js","webpack:///./~/ml-distance/src/distances/chebyshev.js","webpack:///./~/ml-distance/src/distances/clark.js","webpack:///./~/ml-distance/src/distances/czekanowski.js","webpack:///./~/ml-distance/src/distances/dice.js","webpack:///./~/ml-distance/src/distances/divergence.js","webpack:///./~/ml-distance/~/ml-euclidean-distance/euclidean.js","webpack:///./~/ml-distance/src/distances/fidelity.js","webpack:///./~/ml-distance/src/distances/gower.js","webpack:///./~/ml-distance/src/distances/harmonicMean.js","webpack:///./~/ml-distance/src/distances/hellinger.js","webpack:///./~/ml-distance/src/distances/innerProduct.js","webpack:///./~/ml-distance/src/distances/intersection.js","webpack:///./~/ml-distance/src/distances/jaccard.js","webpack:///./~/ml-distance/src/distances/jeffreys.js","webpack:///./~/ml-distance/src/distances/jensenDifference.js","webpack:///./~/ml-distance/src/distances/jensenShannon.js","webpack:///./~/ml-distance/src/distances/kdivergence.js","webpack:///./~/ml-distance/src/distances/kulczynski.js","webpack:///./~/ml-distance/src/distances/kullbackLeibler.js","webpack:///./~/ml-distance/src/distances/kumarHassebrook.js","webpack:///./~/ml-distance/src/distances/kumarJohnson.js","webpack:///./~/ml-distance/src/distances/lorentzian.js","webpack:///./~/ml-distance/src/distances/manhattan.js","webpack:///./~/ml-distance/src/distances/matusita.js","webpack:///./~/ml-distance/src/distances/minkowski.js","webpack:///./~/ml-distance/src/distances/motyka.js","webpack:///./~/ml-distance/src/distances/neyman.js","webpack:///./~/ml-distance/src/distances/pearson.js","webpack:///./~/ml-distance/src/distances/probabilisticSymmetric.js","webpack:///./~/ml-distance/src/distances/ruzicka.js","webpack:///./~/ml-distance/src/distances/soergel.js","webpack:///./~/ml-distance/src/distances/sorensen.js","webpack:///./~/ml-distance/src/distances/squared.js","webpack:///./~/ml-distance/src/distances/squaredChord.js","webpack:///./~/ml-distance/src/distances/taneja.js","webpack:///./~/ml-distance/src/distances/tanimoto.js","webpack:///./~/ml-distance/src/similarities/tanimoto.js","webpack:///./~/ml-distance/src/distances/topsoe.js","webpack:///./~/ml-distance/~/ml-tree-similarity/src/index.js","webpack:///./~/ml-distance/src/distances/waveHedges.js","webpack:///./~/ml-distance/src/similarities.js","webpack:///./~/ml-distance/src/similarities/cosine.js","webpack:///./~/ml-distance/src/similarities/czekanowski.js","webpack:///./~/ml-distance/src/similarities/dice.js","webpack:///./~/ml-distance/src/similarities/intersection.js","webpack:///./~/ml-distance/src/similarities/jaccard.js","webpack:///./~/ml-distance/src/similarities/kulczynski.js","webpack:///./~/ml-distance/src/similarities/motyka.js","webpack:///./~/ml-distance/src/similarities/pearson.js","webpack:///./~/ml-distance/src/similarities/squaredChord.js","webpack:///./~/ml-savitzky-golay/src/index.js","webpack:///./~/ml-savitzky-golay/~/numeric/numeric-1.2.6.js","webpack:///./~/ml-pca/src/index.js","webpack:///./~/ml-pca/src/pca.js","webpack:///./~/ml-pca/~/ml-matrix/src/index.js","webpack:///./~/ml-pca/~/ml-matrix/src/matrix.js","webpack:///./~/ml-pca/~/ml-matrix/src/decompositions.js","webpack:///./~/ml-pca/~/ml-matrix/src/dc/svd.js","webpack:///./~/ml-pca/~/ml-matrix/src/dc/util.js","webpack:///./~/ml-pca/~/ml-matrix/src/dc/evd.js","webpack:///./~/ml-pca/~/ml-matrix/src/dc/lu.js","webpack:///./~/ml-pca/~/ml-matrix/src/dc/qr.js","webpack:///./~/ml-pca/~/ml-matrix/src/dc/cholesky.js","webpack:///./~/ml-xsadd/xsadd-es5.js","webpack:///./~/ml-svm/src/index.js","webpack:///./~/ml-svm/src/svm.js","webpack:///./~/ml-svm/src/kernel.js","webpack:///./~/ml-knn/src/index.js","webpack:///./~/ml-knn/src/knn.js","webpack:///./~/ml-knn/src/kdtree.js","webpack:///./~/ml-naivebayes/src/index.js","webpack:///./~/ml-naivebayes/src/naiveBayes.js","webpack:///./~/ml-naivebayes/~/ml-matrix/src/index.js","webpack:///./~/ml-naivebayes/~/ml-matrix/src/matrix.js","webpack:///./~/ml-naivebayes/~/ml-matrix/src/decompositions.js","webpack:///./~/ml-naivebayes/~/ml-matrix/src/dc/svd.js","webpack:///./~/ml-naivebayes/~/ml-matrix/src/dc/util.js","webpack:///./~/ml-naivebayes/~/ml-matrix/src/dc/evd.js","webpack:///./~/ml-naivebayes/~/ml-matrix/src/dc/lu.js","webpack:///./~/ml-naivebayes/~/ml-matrix/src/dc/qr.js","webpack:///./~/ml-naivebayes/~/ml-matrix/src/dc/cholesky.js","webpack:///./~/ml-pls/src/index.js","webpack:///./~/ml-pls/src/pls.js","webpack:///./~/ml-pls/~/ml-matrix/src/index.js","webpack:///./~/ml-pls/~/ml-matrix/src/matrix.js","webpack:///./~/ml-pls/~/ml-matrix/src/decompositions.js","webpack:///./~/ml-pls/~/ml-matrix/src/dc/svd.js","webpack:///./~/ml-pls/~/ml-matrix/src/dc/util.js","webpack:///./~/ml-pls/~/ml-matrix/src/dc/evd.js","webpack:///./~/ml-pls/~/ml-matrix/src/dc/lu.js","webpack:///./~/ml-pls/~/ml-matrix/src/dc/qr.js","webpack:///./~/ml-pls/~/ml-matrix/src/dc/cholesky.js","webpack:///./~/ml-pls/src/utils.js","webpack:///./~/ml-pls/src/opls.js","webpack:///./~/ml-kmeans/src/index.js","webpack:///./~/ml-kmeans/src/kmeans.js","webpack:///./~/ml-hclust/src/index.js","webpack:///./~/ml-hclust/src/agnes.js","webpack:///./~/ml-hclust/~/ml-euclidean-distance/euclidean.js","webpack:///./~/ml-hclust/src/ClusterLeaf.js","webpack:///./~/ml-hclust/src/Cluster.js","webpack:///(webpack)/~/node-libs-browser/~/util/util.js","webpack:///(webpack)/~/node-libs-browser/~/process/browser.js","webpack:///(webpack)/~/node-libs-browser/~/util/support/isBufferBrowser.js","webpack:///(webpack)/~/node-libs-browser/~/util/~/inherits/inherits_browser.js","webpack:///./~/ml-hclust/src/diana.js","webpack:///./~/ml-som/src/index.js","webpack:///./~/ml-som/src/node-square.js","webpack:///./~/ml-som/src/node-hexagonal.js","webpack:///./~/ml-fnn/src/index.js","webpack:///./~/ml-fnn/src/feedforwardNeuralNetwork.js","webpack:///./~/ml-fnn/src/layer.js","webpack:///./~/ml-fnn/~/ml-matrix/src/index.js","webpack:///./~/ml-fnn/~/ml-matrix/src/matrix.js","webpack:///./~/ml-fnn/~/ml-matrix/src/decompositions.js","webpack:///./~/ml-fnn/~/ml-matrix/src/dc/svd.js","webpack:///./~/ml-fnn/~/ml-matrix/src/dc/util.js","webpack:///./~/ml-fnn/~/ml-matrix/src/dc/evd.js","webpack:///./~/ml-fnn/~/ml-matrix/src/dc/lu.js","webpack:///./~/ml-fnn/~/ml-matrix/src/dc/qr.js","webpack:///./~/ml-fnn/~/ml-matrix/src/dc/cholesky.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","ArrayUtils","AU","BitArray","Matrix","Math","distance","Distance","Similarity","similarity","SG","Stat","array","matrix","PCA","RNG","XSadd","SL","SVM","KNN","NaiveBayes","PLS","Clust","kmeans","hclust","NN","nn","SOM","FNN","getEquallySpacedData","SNV","coordArrayToPoints","dimensions","length","RangeError","pointsArr","Array","k","i","point","j","coordArrayToCoordMatrix","coordinatesArray","points","currentPoint","floor","coordMatrixToCoordArray","coordMatrix","coodinatesArray","transpose","resultMatrix","pointsToCoordArray","applyDotProduct","firstVector","secondVector","largestVector","smallestVector","difference","dotProductApplied","sum","coordMatrixToPoints","pointsToCoordMatrix","x","y","options","xLength","undefined","from","isNaN","isFinite","to","reverse","temp","numberOfPoints","algorithm","variant","output","getEquallySpacedSlot","getEquallySpacedSmooth","getSlope","x0","y0","x1","y1","step","halfStep","start","initialOriginalStep","lastOriginalStep","min","max","previousX","Number","MAX_VALUE","previousY","nextX","nextY","currentValue","slope","intercept","sumAtMin","sumAtMax","main","add","integral","lastStep","frontOutsideSpectra","backOutsideSpectra","currentPoints","data","mean","std","standardDeviation","clone","sub","div","getRow","values","Infinity","l","minMax","geometricMean","pow","logGeometricMean","lnsum","log","grandMean","means","samples","n","truncatedMean","percent","inPlace","slice","sort","contraHarmonicMean","order","r1","r2","unbiased","sqrt","variance","standardError","median","alreadySorted","half","quartiles","quart","q1","ceil","q2","q3","theMean","theVariance","pooledStandardDeviation","pooledVariance","vari","mode","itemCount","itemArray","count","index","indexOf","maxValue","maxIndex","covariance","vector1","vector2","mean1","mean2","cov","skewness","s2","s3","dev","m2","m3","g","a","b","kurtosis","s4","m4","v","entropy","eps","weightedMean","weights","weightedStandardDeviation","weightedVariance","z","w","center","result","standardize","standardDev","cumulativeSum","l1","l2","dimension","N","rows","cols","Error","sum1","sum2","medians","modes","skew","kurt","standardDeviations","standardErrors","sqrtN","scatter","divisor","s","correlation","scores","zScores","cor","jj","row","resultRow","sourceRow","ii","weightSum","weightedCovariance","s1","factor","weightedScatter","vector","Decompositions","DC","arr","nRows","nColumns","newInstance","isArray","TypeError","Object","defineProperty","writable","value","__proto__","prototype","Asplice","splice","Aconcat","concat","from1DArray","newRows","newColumns","newData","rowVector","columnVector","empty","columns","zeros","fill","ones","rand","random","eye","diag","indices","stack","arg1","isMatrix","arguments","r","current","setRow","expand","base","expansion","push","checkMatrix","klass","get","checkRowIndex","checkColumnIndex","checkDimensions","otherMatrix","apply","callback","to2DArray","to1DArray","copy","isRowVector","isColumnVector","isVector","isSquare","isSymmetric","set","rowIndex","columnIndex","neg","mulS","addS","addM","subS","subM","mul","mulM","divS","divM","getRowVector","removeRow","addRow","swapRows","row1","row2","getColumn","column","getColumnVector","setColumn","removeColumn","addColumn","swapColumns","column1","column2","checkRowVector","checkColumnVector","addRowVector","subRowVector","mulRowVector","divRowVector","addColumnVector","subColumnVector","mulColumnVector","divColumnVector","mulRow","mulColumn","idx","minIndex","maxRow","maxRowIndex","minRow","minRowIndex","maxColumn","maxColumnIndex","minColumn","minColumnIndex","size","prod","dot","other","mmul","console","warn","Bcolj","Arowi","sortRows","compareFunction","sortColumns","subMatrix","startRow","endRow","startColumn","endColumn","newMatrix","subMatrixRow","X","subMatrixColumn","trace","abs","inverse","solve","leftHandSide","rightHandSide","LuDecomposition","QrDecomposition","SingularValueDecomposition","EigenvalueDecomposition","CholeskyDecomposition","SVD","EVD","LU","QR","CHO","nu","wantu","wantv","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","swapped","aux","t","ks","f","cs","sn","kase","scale","sp","spm1","epm1","sk","ek","shift","U","V","e","work","nct","nrt","hypotenuse","pp","iter","tmp",{"end":{"file":"ml.min.js","comments_before":[],"nlb":false,"endpos":95967,"endcol":18,"endline":3412,"pos":95958,"col":9,"line":3412,"value":"condition","type":"name","_comments_dumped":true},"start":{"file":"ml.min.js","comments_before":[],"nlb":false,"endpos":95967,"endcol":18,"endline":3412,"pos":95958,"col":9,"line":3412,"value":"condition","type":"name","_comments_dumped":true},"name":"condition"},"condition","norm2","rank","tol","diagonal","threshold","leftSingularVectors","rightSingularVectors","diagonalMatrix","Y","scols","Ls","VL","vrows","urows","VLU","solveForDiagonal","vcols","ucols","d","tred2","tql2","H","ort","orthes","hqr2","h","hh","dl1","c2","c3","el1","tst1","low","high","ra","sa","vr","vi","notlast","cdivres","exshift","norm","q","cdiv","xr","xi","yr","yi","realEigenvalues","imaginaryEigenvalues","eigenvectorMatrix","LUrowi","LUcolj","kmax","lu","pivotVector","pivotSign","isSingular","col","determinant","lowerTriangularFactor","upperTriangularFactor","pivotPermutationVector","qr","rdiag","nrm","Rdiag","isFullRank","orthogonalFactor","positiveDefinite","Lrowj","Lrowk","L","leftTriangularFactor","B","eightBits","and","arr1","arr2","ans","or","xor","not","getBit","mask","Boolean","setBit","val","toBinaryString","str","obj","toString","substr","parseBinaryString","len","parseInt","toHexString","parseHexString","toDebug","binary","num","additiveSymmetric","avg","bhattacharyya","canberra","chebyshev","clark","czekanowski","dice","divergence","euclidean","fidelity","gower","harmonicMean","hellinger","innerProduct","intersection","jaccard","jeffreys","jensenDifference","jensenShannon","kdivergence","kulczynski","kullbackLeibler","kumarHassebrook","kumarJohnson","lorentzian","manhattan","matusita","minkowski","motyka","neyman","pearson","probabilisticSymmetric","ruzicka","soergel","sorensen","squared","squaredChord","squaredEuclidean","taneja","tanimoto","topsoe","tree","waveHedges","up","down","p1","p2","tanimotoS","bitvector","inter","union","createTree","minWindow","left","right","S","alpha","beta","gamma","C","exp","A","o","defaultOptions","hasOwnProperty","Atree","Btree","calc","cosine","czekanowskiD","diceD","intersectionD","jaccardD","kulczynskiD","motykaD","stat","avgA","avgB","newA","newB","squaredChordD","SavitzkyGolay","dx","numeric","windSize","deriv","pol","J","inic","inv","global","version","bench","interval","t1","t2","Date","_myIndexOf","myIndexOf","Function","precision","largeArray","prettyPrint","fmtnum","normalized","basic","toPrecision","parseFloat","foo","ret","join","flag","parseDate","parse","replace","parseCSV","split","pat","patnum","stripper","baz","bar","match","test","toCSV","dim","getURL","url","client","XMLHttpRequest","open","send","imageURL","img","base64","key","charAt","crc32Array","table","crc","adler32","crc32","stream","round","_dim","mapreduce","body","init","mapreduce2","setup","same","rep","dotMMsmall","woo","i0","_getCol","dotMMbig","xj","gc","VV","dotVV","dotMV","dotVM","i1","mulVS","mulSV","Ai","getDiag","identity","pointwise","params","fun","avec","thevec","haveret","substring","pointwise2","_biforeach","_biforeach2","_foreach","_foreach2","ops2","mod","eq","neq","lt","gt","leq","geq","band","bor","bxor","lshift","rshift","rrshift","opseq","addeq","subeq","muleq","diveq","modeq","lshifteq","rshifteq","rrshifteq","bandeq","boreq","bxoreq","mathfuns","mathfuns2","ops1","bnot","mapreducers","any","all","norm2Squared","norminf","norm1","sup","inf","code","codeeq","truncVV","truncVS","truncSV","trunc","Aj","Ii","Ij","I","v0","det","k1","A0","A1","Bj","negtranspose","_random","rnd","linspace","getBlock","setBlock","getRange","Bi","AI","blockMatrix","M","Xij","Z","ZI","Xijk","tensor","T","Tbinop","rr","rc","cr","cc","reciprocal","transjugate","Tunop","conj","sin","cos","Aix","Aiy","Ajx","Ajy","Rix","Riy","Rjx","Rjy","d1","ax","ay","bx","by","Rx","Ry","Ax","Ay","ik","vx","vy","getRows","ry","rx","setRows","eig","house","toUpperHessenberg","me","Ci","Qi","Q","epsilon","QRFrancis","maxiter","tr","Hloc","Hi","QH1","QH2","Q0","disc","n1","n2","QH","QB","R","E","Rk","Rj","lambda","ccsSparse","counts","Av","ccsFull","j0","j1","ccsDim","ccsTSolve","bj","dfs","ccsDFS","Pinv","km","k11","ccsLPSolve","Bv","ccsLUP1","Li","Lj","Lv","Ui","Uj","Uv","sol","P","ccsDFS0","ccsLPSolve0","ccsLUP0","ccsLUP","ccsGetBlock","jq","ip","flags","q0","ccsDot","sA","sB","Cj","Cv","ccsLUPSolve","LUP","Xi","Xj","Xv","ccsbinop","eval","ccsScatter","Ri","Rv","Aii","ptr","ccsGather","sdim","sclone","sdiag","sidentity","stranspose","sLUP","sdotMM","BTk","accum","reti","BT","sdotMV","sdotVM","sdotVV","sdot","sscatter","Vij","sgather","gather","pop","cLU","countL","countU","cLUsolve","cgrid","shape","cdelsq","dir","cdotMV","Spline","yl","kl","kr","_at","at","mid","diff","dy","zl","zr","pl","pr","roots","sqr","ai","bi","ci","di","ri","k0","D","cx","stops","z0","z1","zm","t0","tm","side","spline","kn","fftpow2","xe","ye","xo","yo","si","_ifftpow2","ifftpow2","convpow2","axi","bxi","ayi","byi","fft","log2","cy","ifft","gradient","f0","f1","f2","errest","d2","it","uncmin","maxit","grad","df0","g0","g1","Hy","ys","nstep","H1","Hinv","ten","isfinite","msg","solution","invHessian","iterations","message","Dopri","ymid","events","xh","yh","xs","dopri","event","k2","k3","k4","k5","k6","k7","er","erinf","e0","e1","ev","A2","A3","A4","A5","A6","bm","xl","en","ei","sl","sr","fast","absAjk","Akk","Ak","Pk","LUsolve","Pi","LUi","echelonize","__solveLP","unbounded","svd","dotcc","a1","Ag","_solveLP","c0","b0","NaN","solveLP","Aeq","beq","Aeq2","b4","c1","c4","x2","MPStoLP","MPS","err","states","state","String","name","sign","rl","vars","nv","w0","seedrandom","pool","math","width","chunks","significance","overflow","startdenom","ARC4","u","keylen","lowbits","flatten","depth","prop","typ","mixkey","seed","smear","charCodeAt","fromCharCode","use_entropy","arc4","getTime","window","base0to1","base1to0","dpori","lda","kp1","dposl","kb","dpofa","info","jm1","qpgen2","dmat","dvec","fddmat","crval","amat","bvec","fdamat","meq","iact","nact","ierr","fn_goto_50","iwsv","vsmall","nvl","iwnbv","fn_goto_55","iwzv","t1inf","iwrm","iwrv","it1","iwuv","tt","t2min","gs","fn_goto_797","fn_goto_798","fn_goto_799","tmpa","tmpb","go","solveQP","Dmat","Amat","factorized","unconstrained_solution","pythag","prec","tolerance","itmax","iteration","test_convergence","dataset","reload","model","normalization","featureNormalize","normalizedDataset","covarianceMatrix","target","load","modelName","project","getExplainedVariance","reduce","previous","map","getEigenvectors","getEigenvalues","_classCallCheck","instance","Constructor","multiply_uint32","nlo","nhi","period_certification","xsadd","next_state","sh1","sh2","sh3","_createClass","defineProperties","props","descriptor","enumerable","configurable","protoProps","staticProps","LOOP","FLOAT_MUL","now","Uint32Array","getUint32","getFloat","bind","kernel","par","getKernel","max_passes","train","b1","b2","Ei","Ej","aj","eta","numChange","W","alphas","svm","getAlphas","getThreshold","predict","func","kernelLineal","kernelPolynomial","kernelRadial","rest","lineal","polynomial","radial","kdtree","classes","KDTree","kdTree","Distances","trainingSet","trainingLabels","exist","features","predictions","getSinglePrediction","currentCase","nearestPoints","nearest","pointsPerClass","predictedClass","maxPoints","lastElement","currentClass","Node","parent","metric","buildTree","node","loadTree","restoreParent","self","toJSON","src","dest","insert","innerSearch","newNode","insertPosition","remove","nodeSearch","removeNode","findMin","own","nextNode","nextObj","pDimension","maxNodes","maxDistance","nearestSearch","saveNode","bestNodes","bestChild","linearDistance","otherChild","ownDistance","linearPoint","peek","BinaryHeap","content","balanceFactor","height","scoreFunction","element","bubbleUp","end","sinkDown","parentN","elemScore","child2N","child1N","swap","child1","child1Score","child2","child2Score","separateClasses","calculateProbabilities","getCurrentClass","maxProbability","currentProbability","calculateLogProbability","C1","C2","totalPerClasses","separatedClasses","currentIndex","PI","logPriorProbability","currentStd","Utils","OPLS","getColSum","maxSumColIndex","maxSum","currentSum","F","ssqYcal","R2X","ymean","ystd","PBQ","latentVectors","resultY","ssqXcal","sumOfSquaresY","transposeX","transposeY","tIndex","uIndex","den","pnorm","pow2array","numberOSC","sumOfSquaresX","orthoW","orthoT","orthoP","numerator","denominator","wOsc","tOsc","pOsc","Xosc","sumOfSquaresXosx","correctDataset","currentW","currentP","datasetOsc","R2Dataset","squaredDistance","vec1","vec2","computeSSE","centers","clusterID","sse","nData","updateClusterID","updateCenters","K","nDim","cluster","maxIter","withIter","lastDistance","curDistance","clusters","centroids","agnes","diana","simpleLink","cluster1","cluster2","disFun","completeLink","averageLink","centroidLink","y2","wardLink","kind","list","ClusterLeaf","dis","fData","sData","disFunc","toFixed","dmin","clustered","int","filter","Cluster","children","indCount","util","inherits","cut","group","minGroups","process","inspect","opts","ctx","seen","stylize","stylizeNoColor","colors","isBoolean","showHidden","_extend","isUndefined","customInspect","stylizeWithColor","formatValue","styleType","style","styles","arrayToHash","hash","forEach","recurseTimes","isFunction","constructor","isString","primitive","formatPrimitive","keys","visibleKeys","getOwnPropertyNames","isError","formatError","isRegExp","RegExp","isDate","braces","toUTCString","formatArray","formatProperty","reduceToSingleString","simple","JSON","stringify","isNumber","isNull","desc","getOwnPropertyDescriptor","line","numLinesEst","prev","cur","ar","arg","isNullOrUndefined","isSymbol","re","isObject","objectToString","isPrimitive","pad","timestamp","time","getHours","getMinutes","getSeconds","getDate","months","getMonth","formatRegExp","format","objects","args","_","deprecate","fn","deprecated","warned","throwDeprecation","traceDeprecation","error","noDeprecation","debugEnviron","debugs","debuglog","env","NODE_DEBUG","toUpperCase","pid","bold","italic","underline","white","grey","black","blue","cyan","green","magenta","red","yellow","special","number","boolean","null","string","date","regexp","isBuffer","origin","cleanUpNextTick","draining","currentQueue","queue","queueIndex","drainQueue","timeout","setTimeout","run","clearTimeout","Item","noop","nextTick","title","browser","argv","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","cwd","chdir","umask","readUInt8","create","ctor","superCtor","super_","TempCtor","splitting","dist","ndist","intrDist","ind","clId","rebel","sG","spl","fields","numWeights","converters","getConverters","extractor","creator","gridType","nodeType","NodeSquare","gridDim","NodeHexagonal","hx","torus","distanceMethod","getMaxDistance","done","times","findBMU","adjust","randomizer","iterationCount","startLearningRate","learningRate","mapRadius","algorithmMethod","method","_initNodes","normalizers","denormalizers","getNormalizer","range","getDenormalizer","squareEuclidean","getRandomValue","zero","one","loadModel","som","nodes","includeDistance","initNodes","setTraining","convertedSet","numIterations","timeConstant","trainOne","neighbourhoodRadius","trainingValue","trainingSetFactor","_adjust","influence","bmu","_findBestMatchingUnit","now2","radiusLimit","xMin","xMax","yMin","yMax","theX","theY","adjustWeights","getConvertedNodes","candidate","lowest","computePosition","_predict","getPosition","getQuantizationError","fit","getFit","neighbors","getDistance","otherNode","getDistanceTorus","distX","distY","getNeighbors","xy","getPos","bestNeighbor","direction","dist1","dist2","simA","simB","hX","distZ","randomIntegerFromInterval","FeedforwardNeuralNetwork","layers","inputSize","outputSize","Layer","buildNetwork","layersSize","inSize","isSigmoid","forwardNN","input","results","forward","prediction","momentum","forwardResult","lengthLayers","hiddenLayers","randomInitialzeWeights","numberOfWeights","sigmoid","sigmoidGradient","deltaWeights","offs","nextError","delta","deltaWeight"],"mappings":"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","file":"ml.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ML\"] = factory();\n\telse\n\t\troot[\"ML\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ML\"] = factory();\n\telse\n\t\troot[\"ML\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\t// Root packages\n\texports.ArrayUtils = exports.AU = __webpack_require__(1);\n\texports.BitArray = __webpack_require__(17);\n\texports.Matrix = __webpack_require__(19);\n\t\n\t\n\tvar Math = exports.Math = {};\n\t\n\tvar distance = __webpack_require__(28)\n\tMath.Distance = distance.distance;\n\tMath.Similarity = distance.similarity;\n\tMath.SG = __webpack_require__(84);\n\t\n\t\n\tvar Stat = exports.Stat = {};\n\t\n\tStat.array = __webpack_require__(6);\n\tStat.matrix = __webpack_require__(7);\n\tStat.PCA = __webpack_require__(86);\n\t\n\t\n\t// Random number generation\n\tvar RNG = exports.RNG = {};\n\tRNG.XSadd = __webpack_require__(97);\n\t\n\t\n\t// Supervised learning\n\tvar SL = exports.SL = {};\n\t\n\tSL.SVM = __webpack_require__(98);\n\tSL.KNN = __webpack_require__(101);\n\tSL.NaiveBayes = __webpack_require__(104);\n\tSL.PLS = __webpack_require__(115);\n\t\n\t\n\t// Clustering\n\tvar Clust = exports.Clust = {};\n\t\n\tClust.kmeans = __webpack_require__(128);\n\tClust.hclust = __webpack_require__(130);\n\t\n\t\n\t// Neural networks\n\tvar NN = exports.NN = exports.nn = {};\n\t\n\tNN.SOM = __webpack_require__(140);\n\tNN.FNN = __webpack_require__(143);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = exports = __webpack_require__(2);\n\texports.getEquallySpacedData = __webpack_require__(3).getEquallySpacedData;\n\texports.SNV = __webpack_require__(4).SNV;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Function that returns an array of points given 1D array as follows:\n\t *\n\t * [x1, y1, .. , x2, y2, ..]\n\t *\n\t * And receive the number of dimensions of each point.\n\t * @param array\n\t * @param dimensions\n\t * @returns {Array} - Array of points.\n\t */\n\tfunction coordArrayToPoints(array, dimensions) {\n\t    if(array.length % dimensions !== 0) {\n\t        throw new RangeError('Dimensions number must be accordance with the size of the array.');\n\t    }\n\t\n\t    var length = array.length / dimensions;\n\t    var pointsArr = new Array(length);\n\t\n\t    var k = 0;\n\t    for(var i = 0; i < array.length; i += dimensions) {\n\t        var point = new Array(dimensions);\n\t        for(var j = 0; j < dimensions; ++j) {\n\t            point[j] = array[i + j];\n\t        }\n\t\n\t        pointsArr[k] = point;\n\t        k++;\n\t    }\n\t\n\t    return pointsArr;\n\t}\n\t\n\t\n\t/**\n\t * Function that given an array as follows:\n\t * [x1, y1, .. , x2, y2, ..]\n\t *\n\t * Returns an array as follows:\n\t * [[x1, x2, ..], [y1, y2, ..], [ .. ]]\n\t *\n\t * And receives the number of dimensions of each coordinate.\n\t * @param array\n\t * @param dimensions\n\t * @returns {Array} - Matrix of coordinates\n\t */\n\tfunction coordArrayToCoordMatrix(array, dimensions) {\n\t    if(array.length % dimensions !== 0) {\n\t        throw new RangeError('Dimensions number must be accordance with the size of the array.');\n\t    }\n\t\n\t    var coordinatesArray = new Array(dimensions);\n\t    var points = array.length / dimensions;\n\t    for (var i = 0; i < coordinatesArray.length; i++) {\n\t        coordinatesArray[i] = new Array(points);\n\t    }\n\t\n\t    for(i = 0; i < array.length; i += dimensions) {\n\t        for(var j = 0; j < dimensions; ++j) {\n\t            var currentPoint = Math.floor(i / dimensions);\n\t            coordinatesArray[j][currentPoint] = array[i + j];\n\t        }\n\t    }\n\t\n\t    return coordinatesArray;\n\t}\n\t\n\t/**\n\t * Function that receives a coordinate matrix as follows:\n\t * [[x1, x2, ..], [y1, y2, ..], [ .. ]]\n\t *\n\t * Returns an array of coordinates as follows:\n\t * [x1, y1, .. , x2, y2, ..]\n\t *\n\t * @param coordMatrix\n\t * @returns {Array}\n\t */\n\tfunction coordMatrixToCoordArray(coordMatrix) {\n\t    var coodinatesArray = new Array(coordMatrix.length * coordMatrix[0].length);\n\t    var k = 0;\n\t    for(var i = 0; i < coordMatrix[0].length; ++i) {\n\t        for(var j = 0; j < coordMatrix.length; ++j) {\n\t            coodinatesArray[k] = coordMatrix[j][i];\n\t            ++k;\n\t        }\n\t    }\n\t\n\t    return coodinatesArray;\n\t}\n\t\n\t/**\n\t * Tranpose a matrix, this method is for coordMatrixToPoints and\n\t * pointsToCoordMatrix, that because only transposing the matrix\n\t * you can change your representation.\n\t *\n\t * @param matrix\n\t * @returns {Array}\n\t */\n\tfunction transpose(matrix) {\n\t    var resultMatrix = new Array(matrix[0].length);\n\t    for(var i = 0; i < resultMatrix.length; ++i) {\n\t        resultMatrix[i] = new Array(matrix.length);\n\t    }\n\t\n\t    for (i = 0; i < matrix.length; ++i) {\n\t        for(var j = 0; j < matrix[0].length; ++j) {\n\t            resultMatrix[j][i] = matrix[i][j];\n\t        }\n\t    }\n\t\n\t    return resultMatrix;\n\t}\n\t\n\t/**\n\t * Function that transform an array of points into a coordinates array\n\t * as follows:\n\t * [x1, y1, .. , x2, y2, ..]\n\t *\n\t * @param points\n\t * @returns {Array}\n\t */\n\tfunction pointsToCoordArray(points) {\n\t    var coodinatesArray = new Array(points.length * points[0].length);\n\t    var k = 0;\n\t    for(var i = 0; i < points.length; ++i) {\n\t        for(var j = 0; j < points[0].length; ++j) {\n\t            coodinatesArray[k] = points[i][j];\n\t            ++k;\n\t        }\n\t    }\n\t\n\t    return coodinatesArray;\n\t}\n\t\n\t/**\n\t * Apply the dot product between the smaller vector and a subsets of the\n\t * largest one.\n\t *\n\t * @param firstVector\n\t * @param secondVector\n\t * @returns {Array} each dot product of size of the difference between the\n\t *                  larger and the smallest one.\n\t */\n\tfunction applyDotProduct(firstVector, secondVector) {\n\t    var largestVector, smallestVector;\n\t    if(firstVector.length <= secondVector.length) {\n\t        smallestVector = firstVector;\n\t        largestVector = secondVector;\n\t    } else {\n\t        smallestVector = secondVector;\n\t        largestVector = firstVector;\n\t    }\n\t\n\t    var difference = largestVector.length - smallestVector.length + 1;\n\t    var dotProductApplied = new Array(difference);\n\t\n\t    for (var i = 0; i < difference; ++i) {\n\t        var sum = 0;\n\t        for (var j = 0; j < smallestVector.length; ++j) {\n\t            sum += smallestVector[j] * largestVector[i + j];\n\t        }\n\t        dotProductApplied[i] = sum;\n\t    }\n\t\n\t    return dotProductApplied;\n\t}\n\t\n\tmodule.exports = {\n\t    coordArrayToPoints: coordArrayToPoints,\n\t    coordArrayToCoordMatrix: coordArrayToCoordMatrix,\n\t    coordMatrixToCoordArray: coordMatrixToCoordArray,\n\t    coordMatrixToPoints: transpose,\n\t    pointsToCoordArray: pointsToCoordArray,\n\t    pointsToCoordMatrix: transpose,\n\t    applyDotProduct: applyDotProduct\n\t};\n\t\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t *\n\t * Function that returns a Number array of equally spaced numberOfPoints\n\t * containing a representation of intensities of the spectra arguments x\n\t * and y.\n\t *\n\t * The options parameter contains an object in the following form:\n\t * from: starting point\n\t * to: last point\n\t * numberOfPoints: number of points between from and to\n\t * variant: \"slot\" or \"smooth\" - smooth is the default option\n\t *\n\t * The slot variant consist that each point in the new array is calculated\n\t * averaging the existing points between the slot that belongs to the current\n\t * value. The smooth variant is the same but takes the integral of the range\n\t * of the slot and divide by the step size between two points in the new array.\n\t *\n\t * @param x\n\t * @param y\n\t * @param options\n\t * @returns {Array} new array with the equally spaced data.\n\t *\n\t */\n\tfunction getEquallySpacedData(x, y, options) {\n\t\n\t    var xLength = x.length;\n\t    if(xLength !== y.length)\n\t        throw new RangeError(\"the x and y vector doesn't have the same size.\");\n\t\n\t    if (options === undefined) options = {};\n\t\n\t    var from = options.from === undefined ? x[0] : options.from\n\t    if (isNaN(from) || !isFinite(from)) {\n\t        throw new RangeError(\"'From' value must be a number\");\n\t    }\n\t    var to = options.to === undefined ? x[x.length - 1] : options.to;\n\t    if (isNaN(to) || !isFinite(to)) {\n\t        throw new RangeError(\"'To' value must be a number\");\n\t    }\n\t\n\t    var reverse = from > to;\n\t    if(reverse) {\n\t        var temp = from;\n\t        from = to;\n\t        to = temp;\n\t    }\n\t\n\t    var numberOfPoints = options.numberOfPoints === undefined ? 100 : options.numberOfPoints;\n\t    if (isNaN(numberOfPoints) || !isFinite(numberOfPoints)) {\n\t        throw new RangeError(\"'Number of points' value must be a number\");\n\t    }\n\t    if(numberOfPoints < 1)\n\t        throw new RangeError(\"the number of point must be higher than 1\");\n\t\n\t    var algorithm = options.variant === \"slot\" ? \"slot\" : \"smooth\"; // default value: smooth\n\t\n\t    var output = algorithm === \"slot\" ? getEquallySpacedSlot(x, y, from, to, numberOfPoints) : getEquallySpacedSmooth(x, y, from, to, numberOfPoints);\n\t\n\t    return reverse ? output.reverse() : output;\n\t}\n\t\n\t/**\n\t * function that retrieves the getEquallySpacedData with the variant \"smooth\"\n\t *\n\t * @param x\n\t * @param y\n\t * @param from - Initial point\n\t * @param to - Final point\n\t * @param numberOfPoints\n\t * @returns {Array} - Array of y's equally spaced with the variant \"smooth\"\n\t */\n\tfunction getEquallySpacedSmooth(x, y, from, to, numberOfPoints) {\n\t    var xLength = x.length;\n\t\n\t    var step = (to - from) / (numberOfPoints - 1);\n\t    var halfStep = step / 2;\n\t\n\t    var start = from - halfStep;\n\t    var output = new Array(numberOfPoints);\n\t\n\t    var initialOriginalStep = x[1] - x[0];\n\t    var lastOriginalStep = x[x.length - 1] - x[x.length - 2];\n\t\n\t    // Init main variables\n\t    var min = start;\n\t    var max = start + step;\n\t\n\t    var previousX = -Number.MAX_VALUE;\n\t    var previousY = 0;\n\t    var nextX = x[0] - initialOriginalStep;\n\t    var nextY = 0;\n\t\n\t    var currentValue = 0;\n\t    var slope = 0;\n\t    var intercept = 0;\n\t    var sumAtMin = 0;\n\t    var sumAtMax = 0;\n\t\n\t    var i = 0; // index of input\n\t    var j = 0; // index of output\n\t\n\t    function getSlope(x0, y0, x1, y1) {\n\t        return (y1 - y0) / (x1 - x0);\n\t    }\n\t\n\t    main: while(true) {\n\t        while (nextX - max >= 0) {\n\t            // no overlap with original point, just consume current value\n\t            var add = integral(0, max - previousX, slope, previousY);\n\t            sumAtMax = currentValue + add;\n\t\n\t            output[j] = (sumAtMax - sumAtMin) / step;\n\t            j++;\n\t\n\t            if (j === numberOfPoints)\n\t                break main;\n\t\n\t            min = max;\n\t            max += step;\n\t            sumAtMin = sumAtMax;\n\t        }\n\t\n\t        if(previousX <= min && min <= nextX) {\n\t            add = integral(0, min - previousX, slope, previousY);\n\t            sumAtMin = currentValue + add;\n\t        }\n\t\n\t        currentValue += integral(previousX, nextX, slope, intercept);\n\t\n\t        previousX = nextX;\n\t        previousY = nextY;\n\t\n\t        if (i < xLength) {\n\t            nextX = x[i];\n\t            nextY = y[i];\n\t            i++;\n\t        } else if (i === xLength) {\n\t            nextX += lastOriginalStep;\n\t            nextY = 0;\n\t        }\n\t        // updating parameters\n\t        slope = getSlope(previousX, previousY, nextX, nextY);\n\t        intercept = -slope*previousX + previousY;\n\t    }\n\t\n\t    return output;\n\t}\n\t\n\t/**\n\t * function that retrieves the getEquallySpacedData with the variant \"slot\"\n\t *\n\t * @param x\n\t * @param y\n\t * @param from - Initial point\n\t * @param to - Final point\n\t * @param numberOfPoints\n\t * @returns {Array} - Array of y's equally spaced with the variant \"slot\"\n\t */\n\tfunction getEquallySpacedSlot(x, y, from, to, numberOfPoints) {\n\t    var xLength = x.length;\n\t\n\t    var step = (to - from) / (numberOfPoints - 1);\n\t    var halfStep = step / 2;\n\t    var lastStep = x[x.length - 1] - x[x.length - 2];\n\t\n\t    var start = from - halfStep;\n\t    var output = new Array(numberOfPoints);\n\t\n\t    // Init main variables\n\t    var min = start;\n\t    var max = start + step;\n\t\n\t    var previousX = -Number.MAX_VALUE;\n\t    var previousY = 0;\n\t    var nextX = x[0];\n\t    var nextY = y[0];\n\t    var frontOutsideSpectra = 0;\n\t    var backOutsideSpectra = true;\n\t\n\t    var currentValue = 0;\n\t\n\t    // for slot algorithm\n\t    var currentPoints = 0;\n\t\n\t    var i = 1; // index of input\n\t    var j = 0; // index of output\n\t\n\t    main: while(true) {\n\t        while (previousX - max > 0) {\n\t            // no overlap with original point, just consume current value\n\t            if(backOutsideSpectra) {\n\t                currentPoints++;\n\t                backOutsideSpectra = false;\n\t            }\n\t\n\t            output[j] = currentPoints <= 0 ? 0 : currentValue / currentPoints;\n\t            j++;\n\t\n\t            if (j === numberOfPoints)\n\t                break main;\n\t\n\t            min = max;\n\t            max += step;\n\t            currentValue = 0;\n\t            currentPoints = 0;\n\t        }\n\t\n\t        if(previousX > min) {\n\t            currentValue += previousY;\n\t            currentPoints++;\n\t        }\n\t\n\t        if(previousX === -Number.MAX_VALUE || frontOutsideSpectra > 1)\n\t            currentPoints--;\n\t\n\t        previousX = nextX;\n\t        previousY = nextY;\n\t\n\t        if (i < xLength) {\n\t            nextX = x[i];\n\t            nextY = y[i];\n\t            i++;\n\t        } else {\n\t            nextX += lastStep;\n\t            nextY = 0;\n\t            frontOutsideSpectra++;\n\t        }\n\t    }\n\t\n\t    return output;\n\t}\n\t/**\n\t * Function that calculates the integral of the line between two\n\t * x-coordinates, given the slope and intercept of the line.\n\t *\n\t * @param x0\n\t * @param x1\n\t * @param slope\n\t * @param intercept\n\t * @returns {number} integral value.\n\t */\n\tfunction integral(x0, x1, slope, intercept) {\n\t    return (0.5 * slope * x1 * x1 + intercept * x1) - (0.5 * slope * x0 * x0 + intercept * x0);\n\t}\n\t\n\texports.getEquallySpacedData = getEquallySpacedData;\n\texports.integral = integral;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.SNV = SNV;\n\tvar Stat = __webpack_require__(5);\n\tvar Matrix = __webpack_require__(8);\n\t\n\t/**\n\t * Function that applies the standard normal variate (SNV) to an array of values.\n\t *\n\t * @param data - Array of values.\n\t * @returns {Array} - applied the SNV.\n\t */\n\tfunction SNV(data) {\n\t    var mean = Stat.array.mean(data);\n\t    var std = Stat.array.standardDeviation(data);\n\t\n\t    return new Matrix([data]).clone().sub(mean).div(std).getRow(0);\n\t}\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\texports.array = __webpack_require__(6);\n\texports.matrix = __webpack_require__(7);\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t// https://github.com/accord-net/framework/blob/development/Sources/Accord.Statistics/Tools.cs\n\t\n\tfunction max(values) {\n\t    var max = -Infinity, l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] > max) max = values[i];\n\t    }\n\t    return max;\n\t}\n\t\n\tfunction min(values) {\n\t    var min = Infinity, l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] < min) min = values[i];\n\t    }\n\t    return min;\n\t}\n\t\n\tfunction minMax(values) {\n\t    var min = Infinity,\n\t        max = -Infinity,\n\t        l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] < min) min = values[i];\n\t        if (values[i] > max) max = values[i];\n\t    }\n\t    return {\n\t        min: min,\n\t        max: max\n\t    };\n\t}\n\t\n\tfunction mean(values) {\n\t    var sum = 0, l = values.length;\n\t    for (var i = 0; i < l; i++)\n\t        sum += values[i];\n\t    return sum / l;\n\t}\n\t\n\tfunction geometricMean(values) {\n\t    var sum = 0, l = values.length;\n\t    for (var i = 0; i < l; i++)\n\t        sum *= values[i];\n\t    return Math.pow(sum, 1 / l);\n\t}\n\t\n\tfunction logGeometricMean(values) {\n\t    var lnsum = 0, l = values.length;\n\t    for (var i = 0; i < l; i++)\n\t        lnsum += Math.log(values[i]);\n\t    return lnsum / l;\n\t}\n\t\n\tfunction grandMean(means, samples) {\n\t    var sum = 0, n = 0, l = means.length;\n\t    for (var i = 0; i < l; i++) {\n\t        sum += samples[i] * means[i];\n\t        n += samples[i];\n\t    }\n\t    return sum / n;\n\t}\n\t\n\tfunction truncatedMean(values, percent, inPlace) {\n\t    if (typeof(inPlace) === 'undefined') inPlace = false;\n\t\n\t    values = inPlace ? values : values.slice();\n\t    values.sort();\n\t\n\t    var l = values.length;\n\t    var k = Math.floor(l * percent);\n\t\n\t    var sum = 0;\n\t    for (var i = k; i < l - k; i++)\n\t        sum += values[i];\n\t\n\t    return sum / (l - 2 * k);\n\t}\n\t\n\tfunction contraHarmonicMean(values, order) {\n\t    if (typeof(order) === 'undefined') order = 1;\n\t    var r1 = 0, r2 = 0, l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        r1 += Math.pow(values[i], order + 1);\n\t        r2 += Math.pow(values[i], order);\n\t    }\n\t    return r1 / r2;\n\t}\n\t\n\tfunction standardDeviation(values, unbiased) {\n\t    return Math.sqrt(variance(values, unbiased));\n\t}\n\t\n\tfunction standardError(values) {\n\t    return standardDeviation(values) / Math.sqrt(values.length);\n\t}\n\t\n\tfunction median(values, alreadySorted) {\n\t    if (typeof(alreadySorted) === 'undefined') alreadySorted = false;\n\t    if (!alreadySorted) {\n\t        values = values.slice();\n\t        values.sort();\n\t    }\n\t\n\t    var l = values.length;\n\t    var half = Math.floor(l / 2);\n\t    if (l % 2 === 0)\n\t        return (values[half - 1] + values[half]) * 0.5;\n\t    return values[half];\n\t}\n\t\n\tfunction quartiles(values, alreadySorted) {\n\t    if (typeof(alreadySorted) === 'undefined') alreadySorted = false;\n\t    if (!alreadySorted) {\n\t        values = values.slice();\n\t        values.sort();\n\t    }\n\t\n\t    var quart = values.length / 4;\n\t    var q1 = values[Math.ceil(quart) - 1];\n\t    var q2 = median(values, true);\n\t    var q3 = values[Math.ceil(quart * 3) - 1];\n\t\n\t    return {q1: q1, q2: q2, q3: q3};\n\t}\n\t\n\tfunction variance(values, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var theMean = mean(values);\n\t    var theVariance = 0, l = values.length;\n\t\n\t    for (var i = 0; i < l; i++) {\n\t        var x = values[i] - theMean;\n\t        theVariance += x * x;\n\t    }\n\t\n\t    if (unbiased)\n\t        return theVariance / (l - 1);\n\t    else\n\t        return theVariance / l;\n\t}\n\t\n\tfunction pooledStandardDeviation(samples, unbiased) {\n\t    return Math.sqrt(pooledVariance(samples, unbiased));\n\t}\n\t\n\tfunction pooledVariance(samples, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var sum = 0;\n\t    var length = 0, l = samples.length;\n\t    for (var i = 0; i < l; i++) {\n\t        var values = samples[i];\n\t        var vari = variance(values);\n\t\n\t        sum += (values.length - 1) * vari;\n\t\n\t        if (unbiased)\n\t            length += values.length - 1;\n\t        else\n\t            length += values.length;\n\t    }\n\t    return sum / length;\n\t}\n\t\n\tfunction mode(values) {\n\t    var l = values.length,\n\t        itemCount = new Array(l),\n\t        i;\n\t    for (i = 0; i < l; i++) {\n\t        itemCount[i] = 0;\n\t    }\n\t    var itemArray = new Array(l);\n\t    var count = 0;\n\t\n\t    for (i = 0; i < l; i++) {\n\t        var index = itemArray.indexOf(values[i]);\n\t        if (index >= 0)\n\t            itemCount[index]++;\n\t        else {\n\t            itemArray[count] = values[i];\n\t            itemCount[count] = 1;\n\t            count++;\n\t        }\n\t    }\n\t\n\t    var maxValue = 0, maxIndex = 0;\n\t    for (i = 0; i < count; i++) {\n\t        if (itemCount[i] > maxValue) {\n\t            maxValue = itemCount[i];\n\t            maxIndex = i;\n\t        }\n\t    }\n\t\n\t    return itemArray[maxIndex];\n\t}\n\t\n\tfunction covariance(vector1, vector2, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var mean1 = mean(vector1);\n\t    var mean2 = mean(vector2);\n\t\n\t    if (vector1.length !== vector2.length)\n\t        throw \"Vectors do not have the same dimensions\";\n\t\n\t    var cov = 0, l = vector1.length;\n\t    for (var i = 0; i < l; i++) {\n\t        var x = vector1[i] - mean1;\n\t        var y = vector2[i] - mean2;\n\t        cov += x * y;\n\t    }\n\t\n\t    if (unbiased)\n\t        return cov / (l - 1);\n\t    else\n\t        return cov / l;\n\t}\n\t\n\tfunction skewness(values, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var theMean = mean(values);\n\t\n\t    var s2 = 0, s3 = 0, l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        var dev = values[i] - theMean;\n\t        s2 += dev * dev;\n\t        s3 += dev * dev * dev;\n\t    }\n\t    var m2 = s2 / l;\n\t    var m3 = s3 / l;\n\t\n\t    var g = m3 / (Math.pow(m2, 3 / 2.0));\n\t    if (unbiased) {\n\t        var a = Math.sqrt(l * (l - 1));\n\t        var b = l - 2;\n\t        return (a / b) * g;\n\t    }\n\t    else {\n\t        return g;\n\t    }\n\t}\n\t\n\tfunction kurtosis(values, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var theMean = mean(values);\n\t    var n = values.length, s2 = 0, s4 = 0;\n\t\n\t    for (var i = 0; i < n; i++) {\n\t        var dev = values[i] - theMean;\n\t        s2 += dev * dev;\n\t        s4 += dev * dev * dev * dev;\n\t    }\n\t    var m2 = s2 / n;\n\t    var m4 = s4 / n;\n\t\n\t    if (unbiased) {\n\t        var v = s2 / (n - 1);\n\t        var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n\t        var b = s4 / (v * v);\n\t        var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\t\n\t        return a * b - 3 * c;\n\t    }\n\t    else {\n\t        return m4 / (m2 * m2) - 3;\n\t    }\n\t}\n\t\n\tfunction entropy(values, eps) {\n\t    if (typeof(eps) === 'undefined') eps = 0;\n\t    var sum = 0, l = values.length;\n\t    for (var i = 0; i < l; i++)\n\t        sum += values[i] * Math.log(values[i] + eps);\n\t    return -sum;\n\t}\n\t\n\tfunction weightedMean(values, weights) {\n\t    var sum = 0, l = values.length;\n\t    for (var i = 0; i < l; i++)\n\t        sum += values[i] * weights[i];\n\t    return sum;\n\t}\n\t\n\tfunction weightedStandardDeviation(values, weights) {\n\t    return Math.sqrt(weightedVariance(values, weights));\n\t}\n\t\n\tfunction weightedVariance(values, weights) {\n\t    var theMean = weightedMean(values, weights);\n\t    var vari = 0, l = values.length;\n\t    var a = 0, b = 0;\n\t\n\t    for (var i = 0; i < l; i++) {\n\t        var z = values[i] - theMean;\n\t        var w = weights[i];\n\t\n\t        vari += w * (z * z);\n\t        b += w;\n\t        a += w * w;\n\t    }\n\t\n\t    return vari * (b / (b * b - a));\n\t}\n\t\n\tfunction center(values, inPlace) {\n\t    if (typeof(inPlace) === 'undefined') inPlace = false;\n\t\n\t    var result = values;\n\t    if (!inPlace)\n\t        result = values.slice();\n\t\n\t    var theMean = mean(result), l = result.length;\n\t    for (var i = 0; i < l; i++)\n\t        result[i] -= theMean;\n\t}\n\t\n\tfunction standardize(values, standardDev, inPlace) {\n\t    if (typeof(standardDev) === 'undefined') standardDev = standardDeviation(values);\n\t    if (typeof(inPlace) === 'undefined') inPlace = false;\n\t    var l = values.length;\n\t    var result = inPlace ? values : new Array(l);\n\t    for (var i = 0; i < l; i++)\n\t        result[i] = values[i] / standardDev;\n\t    return result;\n\t}\n\t\n\tfunction cumulativeSum(array) {\n\t    var l = array.length;\n\t    var result = new Array(l);\n\t    result[0] = array[0];\n\t    for (var i = 1; i < l; i++)\n\t        result[i] = result[i - 1] + array[i];\n\t    return result;\n\t}\n\t\n\tmodule.exports = {\n\t    min: min,\n\t    max: max,\n\t    minMax: minMax,\n\t    mean: mean,\n\t    geometricMean: geometricMean,\n\t    logGeometricMean: logGeometricMean,\n\t    grandMean: grandMean,\n\t    truncatedMean: truncatedMean,\n\t    contraHarmonicMean: contraHarmonicMean,\n\t    standardDeviation: standardDeviation,\n\t    standardError: standardError,\n\t    median: median,\n\t    quartiles: quartiles,\n\t    variance: variance,\n\t    pooledStandardDeviation: pooledStandardDeviation,\n\t    pooledVariance: pooledVariance,\n\t    mode: mode,\n\t    covariance: covariance,\n\t    skewness: skewness,\n\t    kurtosis: kurtosis,\n\t    entropy: entropy,\n\t    weightedMean: weightedMean,\n\t    weightedStandardDeviation: weightedStandardDeviation,\n\t    weightedVariance: weightedVariance,\n\t    center: center,\n\t    standardize: standardize,\n\t    cumulativeSum: cumulativeSum\n\t};\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t// https://github.com/accord-net/framework/blob/development/Sources/Accord.Statistics/Tools.cs\n\t\n\tfunction entropy(matrix, eps) {\n\t    if (typeof(eps) === 'undefined') {\n\t        eps = 0;\n\t    }\n\t    var sum = 0,\n\t        l1 = matrix.length,\n\t        l2 = matrix[0].length;\n\t    for (var i = 0; i < l1; i++) {\n\t        for (var j = 0; j < l2; j++) {\n\t            sum += matrix[i][j] * Math.log(matrix[i][j] + eps);\n\t        }\n\t    }\n\t    return -sum;\n\t}\n\t\n\tfunction mean(matrix, dimension) {\n\t    if (typeof(dimension) === 'undefined') {\n\t        dimension = 0;\n\t    }\n\t    var rows = matrix.length,\n\t        cols = matrix[0].length,\n\t        theMean, N, i, j;\n\t\n\t    if (dimension === -1) {\n\t        theMean = [0];\n\t        N = rows * cols;\n\t        for (i = 0; i < rows; i++) {\n\t            for (j = 0; j < cols; j++) {\n\t                theMean[0] += matrix[i][j];\n\t            }\n\t        }\n\t        theMean[0] /= N;\n\t    } else if (dimension === 0) {\n\t        theMean = new Array(cols);\n\t        N = rows;\n\t        for (j = 0; j < cols; j++) {\n\t            theMean[j] = 0;\n\t            for (i = 0; i < rows; i++) {\n\t                theMean[j] += matrix[i][j];\n\t            }\n\t            theMean[j] /= N;\n\t        }\n\t    } else if (dimension === 1) {\n\t        theMean = new Array(rows);\n\t        N = cols;\n\t        for (j = 0; j < rows; j++) {\n\t            theMean[j] = 0;\n\t            for (i = 0; i < cols; i++) {\n\t                theMean[j] += matrix[j][i];\n\t            }\n\t            theMean[j] /= N;\n\t        }\n\t    } else {\n\t        throw new Error('Invalid dimension');\n\t    }\n\t    return theMean;\n\t}\n\t\n\tfunction standardDeviation(matrix, means, unbiased) {\n\t    var vari = variance(matrix, means, unbiased), l = vari.length;\n\t    for (var i = 0; i < l; i++) {\n\t        vari[i] = Math.sqrt(vari[i]);\n\t    }\n\t    return vari;\n\t}\n\t\n\tfunction variance(matrix, means, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') {\n\t        unbiased = true;\n\t    }\n\t    means = means || mean(matrix);\n\t    var rows = matrix.length;\n\t    if (rows === 0) return [];\n\t    var cols = matrix[0].length;\n\t    var vari = new Array(cols);\n\t\n\t    for (var j = 0; j < cols; j++) {\n\t        var sum1 = 0, sum2 = 0, x = 0;\n\t        for (var i = 0; i < rows; i++) {\n\t            x = matrix[i][j] - means[j];\n\t            sum1 += x;\n\t            sum2 += x * x;\n\t        }\n\t        if (unbiased) {\n\t            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / (rows - 1);\n\t        } else {\n\t            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / rows;\n\t        }\n\t    }\n\t    return vari;\n\t}\n\t\n\tfunction median(matrix) {\n\t    var rows = matrix.length, cols = matrix[0].length;\n\t    var medians = new Array(cols);\n\t\n\t    for (var i = 0; i < cols; i++) {\n\t        var data = new Array(rows);\n\t        for (var j = 0; j < rows; j++) {\n\t            data[j] = matrix[j][i];\n\t        }\n\t        data.sort();\n\t        var N = data.length;\n\t        if (N % 2 === 0) {\n\t            medians[i] = (data[N / 2] + data[(N / 2) - 1]) * 0.5;\n\t        } else {\n\t            medians[i] = data[Math.floor(N / 2)];\n\t        }\n\t    }\n\t    return medians;\n\t}\n\t\n\tfunction mode(matrix) {\n\t    var rows = matrix.length,\n\t        cols = matrix[0].length,\n\t        modes = new Array(cols),\n\t        i, j;\n\t    for (i = 0; i < cols; i++) {\n\t        var itemCount = new Array(rows);\n\t        for (var k = 0; k < rows; k++) {\n\t            itemCount[k] = 0;\n\t        }\n\t        var itemArray = new Array(rows);\n\t        var count = 0;\n\t\n\t        for (j = 0; j < rows; j++) {\n\t            var index = itemArray.indexOf(matrix[j][i]);\n\t            if (index >= 0) {\n\t                itemCount[index]++;\n\t            } else {\n\t                itemArray[count] = matrix[j][i];\n\t                itemCount[count] = 1;\n\t                count++;\n\t            }\n\t        }\n\t\n\t        var maxValue = 0, maxIndex = 0;\n\t        for (j = 0; j < count; j++) {\n\t            if (itemCount[j] > maxValue) {\n\t                maxValue = itemCount[j];\n\t                maxIndex = j;\n\t            }\n\t        }\n\t\n\t        modes[i] = itemArray[maxIndex];\n\t    }\n\t    return modes;\n\t}\n\t\n\tfunction skewness(matrix, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var means = mean(matrix);\n\t    var n = matrix.length, l = means.length;\n\t    var skew = new Array(l);\n\t\n\t    for (var j = 0; j < l; j++) {\n\t        var s2 = 0, s3 = 0;\n\t        for (var i = 0; i < n; i++) {\n\t            var dev = matrix[i][j] - means[j];\n\t            s2 += dev * dev;\n\t            s3 += dev * dev * dev;\n\t        }\n\t\n\t        var m2 = s2 / n;\n\t        var m3 = s3 / n;\n\t        var g = m3 / Math.pow(m2, 3 / 2);\n\t\n\t        if (unbiased) {\n\t            var a = Math.sqrt(n * (n - 1));\n\t            var b = n - 2;\n\t            skew[j] = (a / b) * g;\n\t        } else {\n\t            skew[j] = g;\n\t        }\n\t    }\n\t    return skew;\n\t}\n\t\n\tfunction kurtosis(matrix, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var means = mean(matrix);\n\t    var n = matrix.length, m = matrix[0].length;\n\t    var kurt = new Array(m);\n\t\n\t    for (var j = 0; j < m; j++) {\n\t        var s2 = 0, s4 = 0;\n\t        for (var i = 0; i < n; i++) {\n\t            var dev = matrix[i][j] - means[j];\n\t            s2 += dev * dev;\n\t            s4 += dev * dev * dev * dev;\n\t        }\n\t        var m2 = s2 / n;\n\t        var m4 = s4 / n;\n\t\n\t        if (unbiased) {\n\t            var v = s2 / (n - 1);\n\t            var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n\t            var b = s4 / (v * v);\n\t            var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\t            kurt[j] = a * b - 3 * c;\n\t        } else {\n\t            kurt[j] = m4 / (m2 * m2) - 3;\n\t        }\n\t    }\n\t    return kurt;\n\t}\n\t\n\tfunction standardError(matrix) {\n\t    var samples = matrix.length;\n\t    var standardDeviations = standardDeviation(matrix), l = standardDeviations.length;\n\t    var standardErrors = new Array(l);\n\t    var sqrtN = Math.sqrt(samples);\n\t\n\t    for (var i = 0; i < l; i++) {\n\t        standardErrors[i] = standardDeviations[i] / sqrtN;\n\t    }\n\t    return standardErrors;\n\t}\n\t\n\tfunction covariance(matrix, dimension) {\n\t    return scatter(matrix, undefined, dimension);\n\t}\n\t\n\tfunction scatter(matrix, divisor, dimension) {\n\t    if (typeof(dimension) === 'undefined') {\n\t        dimension = 0;\n\t    }\n\t    if (typeof(divisor) === 'undefined') {\n\t        if (dimension === 0) {\n\t            divisor = matrix.length - 1;\n\t        } else if (dimension === 1) {\n\t            divisor = matrix[0].length - 1;\n\t        }\n\t    }\n\t    var means = mean(matrix, dimension),\n\t        rows = matrix.length;\n\t    if (rows === 0) {\n\t        return [[]];\n\t    }\n\t    var cols = matrix[0].length,\n\t        cov, i, j, s, k;\n\t\n\t    if (dimension === 0) {\n\t        cov = new Array(cols);\n\t        for (i = 0; i < cols; i++) {\n\t            cov[i] = new Array(cols);\n\t        }\n\t        for (i = 0; i < cols; i++) {\n\t            for (j = i; j < cols; j++) {\n\t                s = 0;\n\t                for (k = 0; k < rows; k++) {\n\t                    s += (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n\t                }\n\t                s /= divisor;\n\t                cov[i][j] = s;\n\t                cov[j][i] = s;\n\t            }\n\t        }\n\t    } else if (dimension === 1) {\n\t        cov = new Array(rows);\n\t        for (i = 0; i < rows; i++) {\n\t            cov[i] = new Array(rows);\n\t        }\n\t        for (i = 0; i < rows; i++) {\n\t            for (j = i; j < rows; j++) {\n\t                s = 0;\n\t                for (k = 0; k < cols; k++) {\n\t                    s += (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n\t                }\n\t                s /= divisor;\n\t                cov[i][j] = s;\n\t                cov[j][i] = s;\n\t            }\n\t        }\n\t    } else {\n\t        throw new Error('Invalid dimension');\n\t    }\n\t\n\t    return cov;\n\t}\n\t\n\tfunction correlation(matrix) {\n\t    var means = mean(matrix),\n\t        standardDeviations = standardDeviation(matrix, true, means),\n\t        scores = zScores(matrix, means, standardDeviations),\n\t        rows = matrix.length,\n\t        cols = matrix[0].length,\n\t        i, j;\n\t\n\t    var cor = new Array(cols);\n\t    for (i = 0; i < cols; i++) {\n\t        cor[i] = new Array(cols);\n\t    }\n\t    for (i = 0; i < cols; i++) {\n\t        for (j = i; j < cols; j++) {\n\t            var c = 0;\n\t            for (var k = 0, l = scores.length; k < l; k++) {\n\t                c += scores[k][j] * scores[k][i];\n\t            }\n\t            c /= rows - 1;\n\t            cor[i][j] = c;\n\t            cor[j][i] = c;\n\t        }\n\t    }\n\t    return cor;\n\t}\n\t\n\tfunction zScores(matrix, means, standardDeviations) {\n\t    means = means || mean(matrix);\n\t    if (typeof(standardDeviations) === 'undefined') standardDeviations = standardDeviation(matrix, true, means);\n\t    return standardize(center(matrix, means, false), standardDeviations, true);\n\t}\n\t\n\tfunction center(matrix, means, inPlace) {\n\t    means = means || mean(matrix);\n\t    var result = matrix,\n\t        l = matrix.length,\n\t        i, j, jj;\n\t\n\t    if (!inPlace) {\n\t        result = new Array(l);\n\t        for (i = 0; i < l; i++) {\n\t            result[i] = new Array(matrix[i].length);\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < l; i++) {\n\t        var row = result[i];\n\t        for (j = 0, jj = row.length; j < jj; j++) {\n\t            row[j] = matrix[i][j] - means[j];\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction standardize(matrix, standardDeviations, inPlace) {\n\t    if (typeof(standardDeviations) === 'undefined') standardDeviations = standardDeviation(matrix);\n\t    var result = matrix,\n\t        l = matrix.length,\n\t        i, j, jj;\n\t\n\t    if (!inPlace) {\n\t        result = new Array(l);\n\t        for (i = 0; i < l; i++) {\n\t            result[i] = new Array(matrix[i].length);\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < l; i++) {\n\t        var resultRow = result[i];\n\t        var sourceRow = matrix[i];\n\t        for (j = 0, jj = resultRow.length; j < jj; j++) {\n\t            if (standardDeviations[j] !== 0 && !isNaN(standardDeviations[j])) {\n\t                resultRow[j] = sourceRow[j] / standardDeviations[j];\n\t            }\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction weightedVariance(matrix, weights) {\n\t    var means = mean(matrix);\n\t    var rows = matrix.length;\n\t    if (rows === 0) return [];\n\t    var cols = matrix[0].length;\n\t    var vari = new Array(cols);\n\t\n\t    for (var j = 0; j < cols; j++) {\n\t        var sum = 0;\n\t        var a = 0, b = 0;\n\t\n\t        for (var i = 0; i < rows; i++) {\n\t            var z = matrix[i][j] - means[j];\n\t            var w = weights[i];\n\t\n\t            sum += w * (z * z);\n\t            b += w;\n\t            a += w * w;\n\t        }\n\t\n\t        vari[j] = sum * (b / (b * b - a));\n\t    }\n\t\n\t    return vari;\n\t}\n\t\n\tfunction weightedMean(matrix, weights, dimension) {\n\t    if (typeof(dimension) === 'undefined') {\n\t        dimension = 0;\n\t    }\n\t    var rows = matrix.length;\n\t    if (rows === 0) return [];\n\t    var cols = matrix[0].length,\n\t        means, i, ii, j, w, row;\n\t\n\t    if (dimension === 0) {\n\t        means = new Array(cols);\n\t        for (i = 0; i < cols; i++) {\n\t            means[i] = 0;\n\t        }\n\t        for (i = 0; i < rows; i++) {\n\t            row = matrix[i];\n\t            w = weights[i];\n\t            for (j = 0; j < cols; j++) {\n\t                means[j] += row[j] * w;\n\t            }\n\t        }\n\t    } else if (dimension === 1) {\n\t        means = new Array(rows);\n\t        for (i = 0; i < rows; i++) {\n\t            means[i] = 0;\n\t        }\n\t        for (j = 0; j < rows; j++) {\n\t            row = matrix[j];\n\t            w = weights[j];\n\t            for (i = 0; i < cols; i++) {\n\t                means[j] += row[i] * w;\n\t            }\n\t        }\n\t    } else {\n\t        throw new Error('Invalid dimension');\n\t    }\n\t\n\t    var weightSum = sum(weights);\n\t    if (weightSum !== 0) {\n\t        for (i = 0, ii = means.length; i < ii; i++) {\n\t            means[i] /= weightSum;\n\t        }\n\t    }\n\t    return means;\n\t}\n\t\n\tfunction weightedCovariance(matrix, weights, means, dimension) {\n\t    dimension = dimension || 0;\n\t    means = means || weightedMean(matrix, weights, dimension);\n\t    var s1 = 0, s2 = 0;\n\t    for (var i = 0, ii = weights.length; i < ii; i++) {\n\t        s1 += weights[i];\n\t        s2 += weights[i] * weights[i];\n\t    }\n\t    var factor = s1 / (s1 * s1 - s2);\n\t    return weightedScatter(matrix, weights, means, factor, dimension);\n\t}\n\t\n\tfunction weightedScatter(matrix, weights, means, factor, dimension) {\n\t    dimension = dimension || 0;\n\t    means = means || weightedMean(matrix, weights, dimension);\n\t    if (typeof(factor) === 'undefined') {\n\t        factor = 1;\n\t    }\n\t    var rows = matrix.length;\n\t    if (rows === 0) {\n\t        return [[]];\n\t    }\n\t    var cols = matrix[0].length,\n\t        cov, i, j, k, s;\n\t\n\t    if (dimension === 0) {\n\t        cov = new Array(cols);\n\t        for (i = 0; i < cols; i++) {\n\t            cov[i] = new Array(cols);\n\t        }\n\t        for (i = 0; i < cols; i++) {\n\t            for (j = i; j < cols; j++) {\n\t                s = 0;\n\t                for (k = 0; k < rows; k++) {\n\t                    s += weights[k] * (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n\t                }\n\t                cov[i][j] = s * factor;\n\t                cov[j][i] = s * factor;\n\t            }\n\t        }\n\t    } else if (dimension === 1) {\n\t        cov = new Array(rows);\n\t        for (i = 0; i < rows; i++) {\n\t            cov[i] = new Array(rows);\n\t        }\n\t        for (i = 0; i < rows; i++) {\n\t            for (j = i; j < rows; j++) {\n\t                s = 0;\n\t                for (k = 0; k < cols; k++) {\n\t                    s += weights[k] * (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n\t                }\n\t                cov[i][j] = s * factor;\n\t                cov[j][i] = s * factor;\n\t            }\n\t        }\n\t    } else {\n\t        throw new Error('Invalid dimension');\n\t    }\n\t\n\t    return cov;\n\t}\n\t\n\t// private\n\tfunction sum(vector) {\n\t    var sum = 0, l = vector.length;\n\t    for (var i = 0; i < l; i++) {\n\t        sum += vector[i];\n\t    }\n\t    return sum;\n\t}\n\t\n\tmodule.exports = {\n\t    entropy: entropy,\n\t    mean: mean,\n\t    standardDeviation: standardDeviation,\n\t    variance: variance,\n\t    median: median,\n\t    mode: mode,\n\t    skewness: skewness,\n\t    kurtosis: kurtosis,\n\t    standardError: standardError,\n\t    covariance: covariance,\n\t    scatter: scatter,\n\t    correlation: correlation,\n\t    zScores: zScores,\n\t    center: center,\n\t    standardize: standardize,\n\t    weightedVariance: weightedVariance,\n\t    weightedMean: weightedMean,\n\t    weightedCovariance: weightedCovariance,\n\t    weightedScatter: weightedScatter\n\t};\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(9);\n\tmodule.exports.Decompositions = module.exports.DC = __webpack_require__(10);\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar Asplice = Array.prototype.splice,\n\t    Aconcat = Array.prototype.concat;\n\t\n\t// For performance : http://jsperf.com/clone-array-slice-vs-while-vs-for\n\tfunction slice(arr) {\n\t    var i = 0,\n\t        ii = arr.length,\n\t        result = new Array(ii);\n\t    for (; i < ii; i++) {\n\t        result[i] = arr[i];\n\t    }\n\t    return result;\n\t}\n\t\n\t/**\n\t * Real matrix.\n\t * @constructor\n\t * @param {number|Array} nRows - Number of rows of the new matrix or a 2D array containing the data.\n\t * @param {number|boolean} [nColumns] - Number of columns of the new matrix or a boolean specifying if the input array should be cloned\n\t */\n\tfunction Matrix(nRows, nColumns) {\n\t    var i = 0, rows, columns, matrix, newInstance;\n\t    if (Array.isArray(nRows)) {\n\t        newInstance = nColumns;\n\t        matrix = newInstance ? slice(nRows) : nRows;\n\t        nRows = matrix.length;\n\t        nColumns = matrix[0].length;\n\t        if (typeof nColumns === 'undefined') {\n\t            throw new TypeError('Data must be a 2D array');\n\t        }\n\t        if (nRows > 0 && nColumns > 0) {\n\t            for (; i < nRows; i++) {\n\t                if (matrix[i].length !== nColumns) {\n\t                    throw new RangeError('Inconsistent array dimensions');\n\t                } else if (newInstance) {\n\t                    matrix[i] = slice(matrix[i]);\n\t                }\n\t            }\n\t        } else {\n\t            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n\t        }\n\t    } else if (typeof nRows === 'number') { // Create empty matrix\n\t        if (nRows > 0 && nColumns > 0) {\n\t            matrix = new Array(nRows);\n\t            for (; i < nRows; i++) {\n\t                matrix[i] = new Array(nColumns);\n\t            }\n\t        } else {\n\t            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n\t        }\n\t    } else {\n\t        throw new TypeError('Invalid arguments');\n\t    }\n\t\n\t    Object.defineProperty(matrix, 'rows', {writable: true, value: nRows});\n\t    Object.defineProperty(matrix, 'columns', {writable: true, value: nColumns});\n\t\n\t    matrix.__proto__ = Matrix.prototype;\n\t\n\t    return matrix;\n\t}\n\t\n\t/**\n\t * Constructs a Matrix with the chosen dimensions from a 1D array.\n\t * @param {number} newRows - Number of rows\n\t * @param {number} newColumns - Number of columns\n\t * @param {Array} newData - A 1D array containing data for the matrix\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.from1DArray = function from1DArray(newRows, newColumns, newData) {\n\t    var length, data, i = 0;\n\t\n\t    length = newRows * newColumns;\n\t    if (length !== newData.length)\n\t        throw new RangeError('Data length does not match given dimensions');\n\t\n\t    data = new Array(newRows);\n\t    for (; i < newRows; i++) {\n\t        data[i] = newData.slice(i * newColumns, (i + 1) * newColumns);\n\t    }\n\t    return new Matrix(data);\n\t};\n\t\n\t/**\n\t * Creates a row vector, a matrix with only one row.\n\t * @param {Array} newData - A 1D array containing data for the vector\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.rowVector = function rowVector(newData) {\n\t    return new Matrix([newData]);\n\t};\n\t\n\t/**\n\t * Creates a column vector, a matrix with only one column.\n\t * @param {Array} newData - A 1D array containing data for the vector\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.columnVector = function columnVector(newData) {\n\t    var l = newData.length, vector = new Array(l);\n\t    for (var i = 0; i < l; i++)\n\t        vector[i] = [newData[i]];\n\t    return new Matrix(vector);\n\t};\n\t\n\t/**\n\t * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.empty = function empty(rows, columns) {\n\t    return new Matrix(rows, columns);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be set to zero.\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.zeros = function zeros(rows, columns) {\n\t    return Matrix.empty(rows, columns).fill(0);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be set to one.\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.ones = function ones(rows, columns) {\n\t    return Matrix.empty(rows, columns).fill(1);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be randomly set using Math.random().\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} The new matrix\n\t */\n\tMatrix.rand = function rand(rows, columns) {\n\t    var matrix = Matrix.empty(rows, columns);\n\t    for (var i = 0, ii = matrix.rows; i < ii; i++) {\n\t        for (var j = 0, jj = matrix.columns; j < jj; j++) {\n\t            matrix[i][j] = Math.random();\n\t        }\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and other will be 0.\n\t * @param {number} n - Number of rows and columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.eye = function eye(n) {\n\t    var matrix = Matrix.zeros(n, n), l = matrix.rows;\n\t    for (var i = 0; i < l; i++) {\n\t        matrix[i][i] = 1;\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates a diagonal matrix based on the given array.\n\t * @param {Array} data - Array containing the data for the diagonal\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.diag = function diag(data) {\n\t    var l = data.length, matrix = Matrix.zeros(l, l);\n\t    for (var i = 0; i < l; i++) {\n\t        matrix[i][i] = data[i];\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates an array of indices between two values\n\t * @param {number} from\n\t * @param {number} to\n\t * @returns {Array}\n\t */\n\tMatrix.indices = function indices(from, to) {\n\t    var vector = new Array(to - from);\n\t    for (var i = 0; i < vector.length; i++)\n\t        vector[i] = from++;\n\t    return vector;\n\t};\n\t\n\t// TODO DOC\n\tMatrix.stack = function stack(arg1) {\n\t    var i, j, k;\n\t    if (Matrix.isMatrix(arg1)) {\n\t        var rows = 0,\n\t            cols = 0;\n\t        for (i = 0; i < arguments.length; i++) {\n\t            rows += arguments[i].rows;\n\t            if (arguments[i].columns > cols)\n\t                cols = arguments[i].columns;\n\t        }\n\t\n\t        var r = Matrix.zeros(rows, cols);\n\t        var c = 0;\n\t        for (i = 0; i < arguments.length; i++) {\n\t            var current = arguments[i];\n\t            for (j = 0; j < current.rows; j++) {\n\t                for (k = 0; k < current.columns; k++)\n\t                    r[c][k] = current[j][k];\n\t                c++;\n\t            }\n\t        }\n\t        return r;\n\t    }\n\t    else if (Array.isArray(arg1)) {\n\t        var matrix = Matrix.empty(arguments.length, arg1.length);\n\t        for (i = 0; i < arguments.length; i++)\n\t            matrix.setRow(i, arguments[i]);\n\t        return matrix;\n\t    }\n\t};\n\t\n\t// TODO DOC\n\tMatrix.expand = function expand(base, count) {\n\t    var expansion = [];\n\t    for (var i = 0; i < count.length; i++)\n\t        for (var j = 0; j < count[i]; j++)\n\t            expansion.push(base[i]);\n\t    return new Matrix(expansion);\n\t};\n\t\n\t/**\n\t * Check that the provided value is a Matrix and tries to instantiate one if not\n\t * @param value - The value to check\n\t * @returns {Matrix}\n\t * @throws {TypeError}\n\t */\n\tMatrix.checkMatrix = function checkMatrix(value) {\n\t    if (!value) {\n\t        throw new TypeError('Argument has to be a matrix');\n\t    }\n\t    if (value.klass !== 'Matrix') {\n\t        value = new Matrix(value);\n\t    }\n\t    return value;\n\t};\n\t\n\t/**\n\t * Returns true if the argument is a Matrix, false otherwise\n\t * @param value - The value to check\n\t * @returns {boolean}\n\t */\n\tMatrix.isMatrix = function isMatrix(value) {\n\t    return value ? value.klass === 'Matrix' : false;\n\t};\n\t\n\t/**\n\t * @property {string} - The name of this class.\n\t */\n\tObject.defineProperty(Matrix.prototype, 'klass', {\n\t    get: function klass() {\n\t        return 'Matrix';\n\t    }\n\t});\n\t\n\t/**\n\t * @property {number} - The number of elements in the matrix.\n\t */\n\tObject.defineProperty(Matrix.prototype, 'size', {\n\t    get: function size() {\n\t        return this.rows * this.columns;\n\t    }\n\t});\n\t\n\t/**\n\t * @private\n\t * Internal check that a row index is not out of bounds\n\t * @param {number} index\n\t */\n\tMatrix.prototype.checkRowIndex = function checkRowIndex(index) {\n\t    if (index < 0 || index > this.rows - 1)\n\t        throw new RangeError('Row index out of range.');\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that a column index is not out of bounds\n\t * @param {number} index\n\t */\n\tMatrix.prototype.checkColumnIndex = function checkColumnIndex(index) {\n\t    if (index < 0 || index > this.columns - 1)\n\t        throw new RangeError('Column index out of range.');\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that two matrices have the same dimensions\n\t * @param {Matrix} otherMatrix\n\t */\n\tMatrix.prototype.checkDimensions = function checkDimensions(otherMatrix) {\n\t    if ((this.rows !== otherMatrix.rows) || (this.columns !== otherMatrix.columns))\n\t        throw new RangeError('Matrices dimensions must be equal.');\n\t};\n\t\n\t/**\n\t * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n\t * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.apply = function apply(callback) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            callback.call(this, i, j);\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Creates an exact and independent copy of the matrix\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.clone = function clone() {\n\t    return new Matrix(this.to2DArray());\n\t};\n\t\n\t/**\n\t * Returns a new 1D array filled row by row with the matrix values\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.to1DArray = function to1DArray() {\n\t    return Aconcat.apply([], this);\n\t};\n\t\n\t/**\n\t * Returns a 2D array containing a copy of the data\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.to2DArray = function to2DArray() {\n\t    var l = this.rows, copy = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        copy[i] = slice(this[i]);\n\t    }\n\t    return copy;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one row\n\t */\n\tMatrix.prototype.isRowVector = function isRowVector() {\n\t    return this.rows === 1;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one column\n\t */\n\tMatrix.prototype.isColumnVector = function isColumnVector() {\n\t    return this.columns === 1;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one row or one column\n\t */\n\tMatrix.prototype.isVector = function isVector() {\n\t    return (this.rows === 1) || (this.columns === 1);\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has the same number of rows and columns\n\t */\n\tMatrix.prototype.isSquare = function isSquare() {\n\t    return this.rows === this.columns;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n\t */\n\tMatrix.prototype.isSymmetric = function isSymmetric() {\n\t    if (this.isSquare()) {\n\t        var l = this.rows;\n\t        for (var i = 0; i < l; i++) {\n\t            for (var j = 0; j <= i; j++) {\n\t                if (this[i][j] !== this[j][i]) {\n\t                    return false;\n\t                }\n\t            }\n\t        }\n\t        return true;\n\t    }\n\t    return false;\n\t};\n\t\n\t/**\n\t * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n\t * @param {number} rowIndex - Index of the row\n\t * @param {number} columnIndex - Index of the column\n\t * @param {number} value - The new value for the element\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.set = function set(rowIndex, columnIndex, value) {\n\t    this[rowIndex][columnIndex] = value;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n\t * @param {number} rowIndex - Index of the row\n\t * @param {number} columnIndex - Index of the column\n\t * @returns {number}\n\t */\n\tMatrix.prototype.get = function get(rowIndex, columnIndex) {\n\t    return this[rowIndex][columnIndex];\n\t};\n\t\n\t/**\n\t * Fills the matrix with a given value. All elements will be set to this value.\n\t * @param {number} value - New value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.fill = function fill(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] = value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Negates the matrix. All elements will be multiplied by (-1)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.neg = function neg() {\n\t    return this.mulS(-1);\n\t};\n\t\n\t/**\n\t * Adds a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.add = function add(value) {\n\t    if (typeof value === 'number')\n\t        return this.addS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.addM(value);\n\t};\n\t\n\t/**\n\t * Adds a scalar to each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addS = function addS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds the value of each element of matrix to the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addM = function addM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sub = function sub(value) {\n\t    if (typeof value === 'number')\n\t        return this.subS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.subM(value);\n\t};\n\t\n\t/**\n\t * Subtracts a scalar from each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subS = function subS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the value of each element of matrix from the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subM = function subM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mul = function mul(value) {\n\t    if (typeof value === 'number')\n\t        return this.mulS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.mulM(value);\n\t};\n\t\n\t/**\n\t * Multiplies a scalar with each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulS = function mulS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the value of each element of matrix with the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulM = function mulM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides by a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.div = function div(value) {\n\t    if (typeof value === 'number')\n\t        return this.divS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.divM(value);\n\t};\n\t\n\t/**\n\t * Divides each element of the matrix by a scalar\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divS = function divS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides each element of this by the corresponding element of matrix\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divM = function divM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns a new array from the given row index\n\t * @param {number} index - Row index\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.getRow = function getRow(index) {\n\t    this.checkRowIndex(index);\n\t    return slice(this[index]);\n\t};\n\t\n\t/**\n\t * Returns a new row vector from the given row index\n\t * @param {number} index - Row index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.getRowVector = function getRowVector(index) {\n\t    return Matrix.rowVector(this.getRow(index));\n\t};\n\t\n\t/**\n\t * Sets a row at the given index\n\t * @param {number} index - Row index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.setRow = function setRow(index, array) {\n\t    this.checkRowIndex(index);\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    if (array.length !== this.columns)\n\t        throw new RangeError('Invalid row size');\n\t    this[index] = slice(array);\n\t    return this;\n\t};\n\t\n\t/**\n\t * Removes a row from the given index\n\t * @param {number} index - Row index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.removeRow = function removeRow(index) {\n\t    this.checkRowIndex(index);\n\t    if (this.rows === 1)\n\t        throw new RangeError('A matrix cannot have less than one row');\n\t    Asplice.call(this, index, 1);\n\t    this.rows -= 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds a row at the given index\n\t * @param {number} [index = this.rows] - Row index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addRow = function addRow(index, array) {\n\t    if (typeof array === 'undefined') {\n\t        array = index;\n\t        index = this.rows;\n\t    }\n\t    if (index < 0 || index > this.rows)\n\t        throw new RangeError('Row index out of range.');\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    if (array.length !== this.columns)\n\t        throw new RangeError('Invalid row size');\n\t    Asplice.call(this, index, 0, slice(array));\n\t    this.rows += 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Swaps two rows\n\t * @param {number} row1 - First row index\n\t * @param {number} row2 - Second row index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.swapRows = function swapRows(row1, row2) {\n\t    this.checkRowIndex(row1);\n\t    this.checkRowIndex(row2);\n\t    var temp = this[row1];\n\t    this[row1] = this[row2];\n\t    this[row2] = temp;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns a new array from the given column index\n\t * @param {number} index - Column index\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.getColumn = function getColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var l = this.rows, column = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        column[i] = this[i][index];\n\t    }\n\t    return column;\n\t};\n\t\n\t/**\n\t * Returns a new column vector from the given column index\n\t * @param {number} index - Column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.getColumnVector = function getColumnVector(index) {\n\t    return Matrix.columnVector(this.getColumn(index));\n\t};\n\t\n\t/**\n\t * Sets a column at the given index\n\t * @param {number} index - Column index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.setColumn = function setColumn(index, array) {\n\t    this.checkColumnIndex(index);\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    var l = this.rows;\n\t    if (array.length !== l)\n\t        throw new RangeError('Invalid column size');\n\t    for (var i = 0; i < l; i++) {\n\t        this[i][index] = array[i];\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Removes a column from the given index\n\t * @param {number} index - Column index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.removeColumn = function removeColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    if (this.columns === 1)\n\t        throw new RangeError('A matrix cannot have less than one column');\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        this[i].splice(index, 1);\n\t    }\n\t    this.columns -= 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds a column at the given index\n\t * @param {number} [index = this.columns] - Column index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addColumn = function addColumn(index, array) {\n\t    if (typeof array === 'undefined') {\n\t        array = index;\n\t        index = this.columns;\n\t    }\n\t    if (index < 0 || index > this.columns)\n\t        throw new RangeError('Column index out of range.');\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    var l = this.rows;\n\t    if (array.length !== l)\n\t        throw new RangeError('Invalid column size');\n\t    for (var i = 0; i < l; i++) {\n\t        this[i].splice(index, 0, array[i]);\n\t    }\n\t    this.columns += 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Swaps two columns\n\t * @param {number} column1 - First column index\n\t * @param {number} column2 - Second column index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.swapColumns = function swapColumns(column1, column2) {\n\t    this.checkRowIndex(column1);\n\t    this.checkRowIndex(column2);\n\t    var l = this.rows, temp, row;\n\t    for (var i = 0; i < l; i++) {\n\t        row = this[i];\n\t        temp = row[column1];\n\t        row[column1] = row[column2];\n\t        row[column2] = temp;\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that the provided vector is an array with the right length\n\t * @param {Array|Matrix} vector\n\t * @returns {Array}\n\t * @throws {RangeError}\n\t */\n\tMatrix.prototype.checkRowVector = function checkRowVector(vector) {\n\t    if (Matrix.isMatrix(vector))\n\t        vector = vector.to1DArray();\n\t    if (vector.length !== this.columns)\n\t        throw new RangeError('vector size must be the same as the number of columns');\n\t    return vector;\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that the provided vector is an array with the right length\n\t * @param {Array|Matrix} vector\n\t * @returns {Array}\n\t * @throws {RangeError}\n\t */\n\tMatrix.prototype.checkColumnVector = function checkColumnVector(vector) {\n\t    if (Matrix.isMatrix(vector))\n\t        vector = vector.to1DArray();\n\t    if (vector.length !== this.rows)\n\t        throw new RangeError('vector size must be the same as the number of rows');\n\t    return vector;\n\t};\n\t\n\t/**\n\t * Adds the values of a vector to each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addRowVector = function addRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the values of a vector from each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subRowVector = function subRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a vector with each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulRowVector = function mulRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides the values of each row by those of a vector\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divRowVector = function divRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds the values of a vector to each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addColumnVector = function addColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the values of a vector from each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subColumnVector = function subColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a vector with each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulColumnVector = function mulColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides the values of each column by those of a vector\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divColumnVector = function divColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a row with a scalar\n\t * @param {number} index - Row index\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulRow = function mulRow(index, value) {\n\t    this.checkRowIndex(index);\n\t    var i = 0, l = this.columns;\n\t    for (; i < l; i++) {\n\t        this[index][i] *= value;\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a column with a scalar\n\t * @param {number} index - Column index\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulColumn = function mulColumn(index, value) {\n\t    this.checkColumnIndex(index);\n\t    var i = 0, l = this.rows;\n\t    for (; i < l; i++) {\n\t        this[i][index] *= value;\n\t    }\n\t};\n\t\n\t/**\n\t * A matrix index\n\t * @typedef {Object} MatrixIndex\n\t * @property {number} row\n\t * @property {number} column\n\t */\n\t\n\t/**\n\t * Returns the maximum value of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.max = function max() {\n\t    var v = -Infinity;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] > v) {\n\t                v = this[i][j];\n\t            }\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxIndex = function maxIndex() {\n\t    var v = -Infinity;\n\t    var idx = {};\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] > v) {\n\t                v = this[i][j];\n\t                idx.row = i;\n\t                idx.column = j;\n\t            }\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.min = function min() {\n\t    var v = Infinity;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] < v) {\n\t                v = this[i][j];\n\t            }\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the minimum value\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minIndex = function minIndex() {\n\t    var v = Infinity;\n\t    var idx = {};\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] < v) {\n\t                v = this[i][j];\n\t                idx.row = i;\n\t                idx.column = j;\n\t            }\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.maxRow = function maxRow(index) {\n\t    this.checkRowIndex(index);\n\t    var v = -Infinity;\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] > v) {\n\t            v = this[index][i];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxRowIndex = function maxRowIndex(index) {\n\t    this.checkRowIndex(index);\n\t    var v = -Infinity;\n\t    var idx = {\n\t            row: index\n\t        };\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] > v) {\n\t            v = this[index][i];\n\t            idx.column = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of one row\n\t * @param {number} index - Row index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.minRow = function minRow(index) {\n\t    this.checkRowIndex(index);\n\t    var v = Infinity;\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] < v) {\n\t            v = this[index][i];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minRowIndex = function minRowIndex(index) {\n\t    this.checkRowIndex(index);\n\t    var v = Infinity;\n\t    var idx = {\n\t        row: index,\n\t        column: 0\n\t    };\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] < v) {\n\t            v = this[index][i];\n\t            idx.column = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the maximum value of one column\n\t * @param {number} index - Column index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.maxColumn = function maxColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = -Infinity;\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] > v) {\n\t            v = this[i][index];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one column\n\t * @param {number} index - Column index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxColumnIndex = function maxColumnIndex(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = -Infinity;\n\t    var idx = {\n\t        row: 0,\n\t        column: index\n\t    };\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] > v) {\n\t            v = this[i][index];\n\t            idx.row = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of one column\n\t * @param {number} index - Column index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.minColumn = function minColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = Infinity;\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] < v) {\n\t            v = this[i][index];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the minimum value of one column\n\t * @param {number} index - Column index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minColumnIndex = function minColumnIndex(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = Infinity;\n\t    var idx = {\n\t        row: 0,\n\t        column: index\n\t    };\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] < v) {\n\t            v = this[i][index];\n\t            idx.row = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns an array containing the diagonal values of the matrix\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.diag = function diag() {\n\t    if (!this.isSquare())\n\t        throw new TypeError('Only square matrices have a diagonal.');\n\t    var diag = new Array(this.rows);\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        diag[i] = this[i][i];\n\t    }\n\t    return diag;\n\t};\n\t\n\t/**\n\t * Returns the sum of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.sum = function sum() {\n\t    var v = 0;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            v += this[i][j];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the mean of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.mean = function mean() {\n\t    return this.sum() / this.size;\n\t};\n\t\n\t/**\n\t * Returns the product of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.prod = function prod() {\n\t    var prod = 1;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            prod *= this[i][j];\n\t        }\n\t    }\n\t    return prod;\n\t};\n\t\n\t/**\n\t * Computes the cumulative sum of the matrix elements (in place, row by row)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.cumulativeSum = function cumulativeSum() {\n\t    var sum = 0;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            sum += this[i][j];\n\t            this[i][j] = sum;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Computes the dot (scalar) product between the matrix and another\n\t * @param {Matrix} other vector\n\t * @returns {number}\n\t */\n\tMatrix.prototype.dot = function dot(other) {\n\t    if (this.size !== other.size)\n\t        throw new RangeError('vectors do not have the same size');\n\t    var vector1 = this.to1DArray();\n\t    var vector2 = other.to1DArray();\n\t    var dot = 0, l = vector1.length;\n\t    for (var i = 0; i < l; i++) {\n\t        dot += vector1[i] * vector2[i];\n\t    }\n\t    return dot;\n\t};\n\t\n\t/**\n\t * Returns the matrix product between this and other\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.mmul = function mmul(other) {\n\t    if (!Matrix.isMatrix(other))\n\t        throw new TypeError('parameter \"other\" must be a matrix');\n\t    if (this.columns !== other.rows)\n\t        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n\t\n\t    var m = this.rows, n = this.columns, p = other.columns;\n\t    var result = new Matrix(m, p);\n\t\n\t    var Bcolj = new Array(n);\n\t    var i, j, k;\n\t    for (j = 0; j < p; j++) {\n\t        for (k = 0; k < n; k++)\n\t            Bcolj[k] = other[k][j];\n\t\n\t        for (i = 0; i < m; i++) {\n\t            var Arowi = this[i];\n\t\n\t            var s = 0;\n\t            for (k = 0; k < n; k++)\n\t                s += Arowi[k] * Bcolj[k];\n\t\n\t            result[i][j] = s;\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Sorts the rows (in place)\n\t * @param {function} compareFunction - usual Array.prototype.sort comparison function\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sortRows = function sortRows(compareFunction) {\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        this[i].sort(compareFunction);\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Sorts the columns (in place)\n\t * @param {function} compareFunction - usual Array.prototype.sort comparison function\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sortColumns = function sortColumns(compareFunction) {\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Transposes the matrix and returns a new one containing the result\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.transpose = function transpose() {\n\t    var result = new Matrix(this.columns, this.rows);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[j][i] = this[i][j];\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix\n\t * @param {number} startRow - First row index\n\t * @param {number} endRow - Last row index\n\t * @param {number} startColumn - First column index\n\t * @param {number} endColumn - Last column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrix = function subMatrix(startRow, endRow, startColumn, endColumn) {\n\t    if ((startRow > endRow) || (startColumn > endColumn) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n\t        throw new RangeError('Argument out of range');\n\t    var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n\t    for (var i = startRow; i <= endRow; i++) {\n\t        for (var j = startColumn; j <= endColumn; j++) {\n\t            newMatrix[i - startRow][j - startColumn] = this[i][j];\n\t        }\n\t    }\n\t    return newMatrix;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix based on an array of row indices\n\t * @param {Array} indices - Array containing the row indices\n\t * @param {number} [startColumn = 0] - First column index\n\t * @param {number} [endColumn = this.columns-1] - Last column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrixRow = function subMatrixRow(indices, startColumn, endColumn) {\n\t    if (typeof startColumn === 'undefined') {\n\t        startColumn = 0;\n\t        endColumn = this.columns - 1;\n\t    } else if (typeof endColumn === 'undefined') {\n\t        endColumn = this.columns - 1;\n\t    }\n\t    if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n\t        throw new RangeError('Argument out of range.');\n\t    var l = indices.length, rows = this.rows,\n\t        X = new Matrix(l, endColumn - startColumn + 1);\n\t    for (var i = 0; i < l; i++) {\n\t        for (var j = startColumn; j <= endColumn; j++) {\n\t            if ((indices[i] < 0) || (indices[i] >= rows))\n\t                throw new RangeError('Argument out of range.');\n\t            X[i][j - startColumn] = this[indices[i]][j];\n\t        }\n\t    }\n\t    return X;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix based on an array of column indices\n\t * @param {Array} indices - Array containing the column indices\n\t * @param {number} [startRow = 0] - First row index\n\t * @param {number} [endRow = this.rows-1] - Last row index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrixColumn = function subMatrixColumn(indices, startRow, endRow) {\n\t    if (typeof startRow === 'undefined') {\n\t        startRow = 0;\n\t        endRow = this.rows - 1;\n\t    } else if (typeof endRow === 'undefined') {\n\t        endRow = this.rows - 1;\n\t    }\n\t    if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows))\n\t        throw new RangeError('Argument out of range.');\n\t    var l = indices.length, columns = this.columns,\n\t        X = new Matrix(endRow - startRow + 1, l);\n\t    for (var i = 0; i < l; i++) {\n\t        for (var j = startRow; j <= endRow; j++) {\n\t            if ((indices[i] < 0) || (indices[i] >= columns))\n\t                throw new RangeError('Argument out of range.');\n\t            X[j - startRow][i] = this[j][indices[i]];\n\t        }\n\t    }\n\t    return X;\n\t};\n\t\n\t/**\n\t * Returns the trace of the matrix (sum of the diagonal elements)\n\t * @returns {number}\n\t */\n\tMatrix.prototype.trace = function trace() {\n\t    if (!this.isSquare())\n\t        throw new TypeError('The matrix is not square');\n\t    var trace = 0, i = 0, l = this.rows;\n\t    for (; i < l; i++) {\n\t        trace += this[i][i];\n\t    }\n\t    return trace;\n\t};\n\t\n\t/**\n\t * Sets each element of the matrix to its absolute value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.abs = function abs() {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] = Math.abs(this[i][j]);\n\t        }\n\t    }\n\t};\n\t\n\tmodule.exports = Matrix;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(9);\n\t\n\tvar SingularValueDecomposition = __webpack_require__(11);\n\tvar EigenvalueDecomposition = __webpack_require__(13);\n\tvar LuDecomposition = __webpack_require__(14);\n\tvar QrDecomposition = __webpack_require__(15);\n\tvar CholeskyDecomposition = __webpack_require__(16);\n\t\n\tfunction inverse(matrix) {\n\t    return solve(matrix, Matrix.eye(matrix.rows));\n\t}\n\t\n\tMatrix.prototype.inverse = function () {\n\t    return inverse(this);\n\t};\n\t\n\tfunction solve(leftHandSide, rightHandSide) {\n\t    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n\t}\n\t\n\tMatrix.prototype.solve = function (other) {\n\t    return solve(this, other);\n\t};\n\t\n\tmodule.exports = {\n\t    SingularValueDecomposition: SingularValueDecomposition,\n\t    SVD: SingularValueDecomposition,\n\t    EigenvalueDecomposition: EigenvalueDecomposition,\n\t    EVD: EigenvalueDecomposition,\n\t    LuDecomposition: LuDecomposition,\n\t    LU: LuDecomposition,\n\t    QrDecomposition: QrDecomposition,\n\t    QR: QrDecomposition,\n\t    CholeskyDecomposition: CholeskyDecomposition,\n\t    CHO: CholeskyDecomposition,\n\t    inverse: inverse,\n\t    solve: solve\n\t};\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(9);\n\tvar hypotenuse = __webpack_require__(12).hypotenuse;\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\n\tfunction SingularValueDecomposition(value, options) {\n\t    if (!(this instanceof SingularValueDecomposition)) {\n\t        return new SingularValueDecomposition(value, options);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t\n\t    options = options || {};\n\t\n\t    var a = value.clone(),\n\t        m = value.rows,\n\t        n = value.columns,\n\t        nu = Math.min(m, n);\n\t\n\t    var wantu = true, wantv = true;\n\t    if (options.computeLeftSingularVectors === false)\n\t        wantu = false;\n\t    if (options.computeRightSingularVectors === false)\n\t        wantv = false;\n\t    var autoTranspose = options.autoTranspose === true;\n\t\n\t    var swapped = false;\n\t    if (m < n) {\n\t        if (!autoTranspose) {\n\t            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n\t        } else {\n\t            a = a.transpose();\n\t            m = a.rows;\n\t            n = a.columns;\n\t            swapped = true;\n\t            var aux = wantu;\n\t            wantu = wantv;\n\t            wantv = aux;\n\t        }\n\t    }\n\t\n\t    var s = new Array(Math.min(m + 1, n)),\n\t        U = Matrix.zeros(m, nu),\n\t        V = Matrix.zeros(n, n),\n\t        e = new Array(n),\n\t        work = new Array(m);\n\t\n\t    var nct = Math.min(m - 1, n);\n\t    var nrt = Math.max(0, Math.min(n - 2, m));\n\t\n\t    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n\t        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\t\n\t    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n\t        if (k < nct) {\n\t            s[k] = 0;\n\t            for (i = k; i < m; i++) {\n\t                s[k] = hypotenuse(s[k], a[i][k]);\n\t            }\n\t            if (s[k] !== 0) {\n\t                if (a[k][k] < 0) {\n\t                    s[k] = -s[k];\n\t                }\n\t                for (i = k; i < m; i++) {\n\t                    a[i][k] /= s[k];\n\t                }\n\t                a[k][k] += 1;\n\t            }\n\t            s[k] = -s[k];\n\t        }\n\t\n\t        for (j = k + 1; j < n; j++) {\n\t            if ((k < nct) && (s[k] !== 0)) {\n\t                t = 0;\n\t                for (i = k; i < m; i++) {\n\t                    t += a[i][k] * a[i][j];\n\t                }\n\t                t = -t / a[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    a[i][j] += t * a[i][k];\n\t                }\n\t            }\n\t            e[j] = a[k][j];\n\t        }\n\t\n\t        if (wantu && (k < nct)) {\n\t            for (i = k; i < m; i++) {\n\t                U[i][k] = a[i][k];\n\t            }\n\t        }\n\t\n\t        if (k < nrt) {\n\t            e[k] = 0;\n\t            for (i = k + 1; i < n; i++) {\n\t                e[k] = hypotenuse(e[k], e[i]);\n\t            }\n\t            if (e[k] !== 0) {\n\t                if (e[k + 1] < 0)\n\t                    e[k] = -e[k];\n\t                for (i = k + 1; i < n; i++) {\n\t                    e[i] /= e[k];\n\t                }\n\t                e[k + 1] += 1;\n\t            }\n\t            e[k] = -e[k];\n\t            if ((k + 1 < m) && (e[k] !== 0)) {\n\t                for (i = k + 1; i < m; i++) {\n\t                    work[i] = 0;\n\t                }\n\t                for (j = k + 1; j < n; j++) {\n\t                    for (i = k + 1; i < m; i++) {\n\t                        work[i] += e[j] * a[i][j];\n\t                    }\n\t                }\n\t                for (j = k + 1; j < n; j++) {\n\t                    t = -e[j] / e[k + 1];\n\t                    for (i = k + 1; i < m; i++) {\n\t                        a[i][j] += t * work[i];\n\t                    }\n\t                }\n\t            }\n\t            if (wantv) {\n\t                for (i = k + 1; i < n; i++) {\n\t                    V[i][k] = e[i];\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    p = Math.min(n, m + 1);\n\t    if (nct < n) {\n\t        s[nct] = a[nct][nct];\n\t    }\n\t    if (m < p) {\n\t        s[p - 1] = 0;\n\t    }\n\t    if (nrt + 1 < p) {\n\t        e[nrt] = a[nrt][p - 1];\n\t    }\n\t    e[p - 1] = 0;\n\t\n\t    if (wantu) {\n\t        for (j = nct; j < nu; j++) {\n\t            for (i = 0; i < m; i++) {\n\t                U[i][j] = 0;\n\t            }\n\t            U[j][j] = 1;\n\t        }\n\t        for (k = nct - 1; k >= 0; k--) {\n\t            if (s[k] !== 0) {\n\t                for (j = k + 1; j < nu; j++) {\n\t                    t = 0;\n\t                    for (i = k; i < m; i++) {\n\t                        t += U[i][k] * U[i][j];\n\t                    }\n\t                    t = -t / U[k][k];\n\t                    for (i = k; i < m; i++) {\n\t                        U[i][j] += t * U[i][k];\n\t                    }\n\t                }\n\t                for (i = k; i < m; i++) {\n\t                    U[i][k] = -U[i][k];\n\t                }\n\t                U[k][k] = 1 + U[k][k];\n\t                for (i = 0; i < k - 1; i++) {\n\t                    U[i][k] = 0;\n\t                }\n\t            } else {\n\t                for (i = 0; i < m; i++) {\n\t                    U[i][k] = 0;\n\t                }\n\t                U[k][k] = 1;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (wantv) {\n\t        for (k = n - 1; k >= 0; k--) {\n\t            if ((k < nrt) && (e[k] !== 0)) {\n\t                for (j = k + 1; j < n; j++) {\n\t                    t = 0;\n\t                    for (i = k + 1; i < n; i++) {\n\t                        t += V[i][k] * V[i][j];\n\t                    }\n\t                    t = -t / V[k + 1][k];\n\t                    for (i = k + 1; i < n; i++) {\n\t                        V[i][j] += t * V[i][k];\n\t                    }\n\t                }\n\t            }\n\t            for (i = 0; i < n; i++) {\n\t                V[i][k] = 0;\n\t            }\n\t            V[k][k] = 1;\n\t        }\n\t    }\n\t\n\t    var pp = p - 1,\n\t        iter = 0,\n\t        eps = Math.pow(2, -52);\n\t    while (p > 0) {\n\t        for (k = p - 2; k >= -1; k--) {\n\t            if (k === -1) {\n\t                break;\n\t            }\n\t            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n\t                e[k] = 0;\n\t                break;\n\t            }\n\t        }\n\t        if (k === p - 2) {\n\t            kase = 4;\n\t        } else {\n\t            for (ks = p - 1; ks >= k; ks--) {\n\t                if (ks === k) {\n\t                    break;\n\t                }\n\t                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n\t                if (Math.abs(s[ks]) <= eps * t) {\n\t                    s[ks] = 0;\n\t                    break;\n\t                }\n\t            }\n\t            if (ks === k) {\n\t                kase = 3;\n\t            } else if (ks === p - 1) {\n\t                kase = 1;\n\t            } else {\n\t                kase = 2;\n\t                k = ks;\n\t            }\n\t        }\n\t\n\t        k++;\n\t\n\t        switch (kase) {\n\t            case 1: {\n\t                f = e[p - 2];\n\t                e[p - 2] = 0;\n\t                for (j = p - 2; j >= k; j--) {\n\t                    t = hypotenuse(s[j], f);\n\t                    cs = s[j] / t;\n\t                    sn = f / t;\n\t                    s[j] = t;\n\t                    if (j !== k) {\n\t                        f = -sn * e[j - 1];\n\t                        e[j - 1] = cs * e[j - 1];\n\t                    }\n\t                    if (wantv) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = cs * V[i][j] + sn * V[i][p - 1];\n\t                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n\t                            V[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t            case 2 : {\n\t                f = e[k - 1];\n\t                e[k - 1] = 0;\n\t                for (j = k; j < p; j++) {\n\t                    t = hypotenuse(s[j], f);\n\t                    cs = s[j] / t;\n\t                    sn = f / t;\n\t                    s[j] = t;\n\t                    f = -sn * e[j];\n\t                    e[j] = cs * e[j];\n\t                    if (wantu) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = cs * U[i][j] + sn * U[i][k - 1];\n\t                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n\t                            U[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t            case 3 : {\n\t                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n\t                sp = s[p - 1] / scale;\n\t                spm1 = s[p - 2] / scale;\n\t                epm1 = e[p - 2] / scale;\n\t                sk = s[k] / scale;\n\t                ek = e[k] / scale;\n\t                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n\t                c = (sp * epm1) * (sp * epm1);\n\t                shift = 0;\n\t                if ((b !== 0) || (c !== 0)) {\n\t                    shift = Math.sqrt(b * b + c);\n\t                    if (b < 0) {\n\t                        shift = -shift;\n\t                    }\n\t                    shift = c / (b + shift);\n\t                }\n\t                f = (sk + sp) * (sk - sp) + shift;\n\t                g = sk * ek;\n\t                for (j = k; j < p - 1; j++) {\n\t                    t = hypotenuse(f, g);\n\t                    cs = f / t;\n\t                    sn = g / t;\n\t                    if (j !== k) {\n\t                        e[j - 1] = t;\n\t                    }\n\t                    f = cs * s[j] + sn * e[j];\n\t                    e[j] = cs * e[j] - sn * s[j];\n\t                    g = sn * s[j + 1];\n\t                    s[j + 1] = cs * s[j + 1];\n\t                    if (wantv) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = cs * V[i][j] + sn * V[i][j + 1];\n\t                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n\t                            V[i][j] = t;\n\t                        }\n\t                    }\n\t                    t = hypotenuse(f, g);\n\t                    cs = f / t;\n\t                    sn = g / t;\n\t                    s[j] = t;\n\t                    f = cs * e[j] + sn * s[j + 1];\n\t                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n\t                    g = sn * e[j + 1];\n\t                    e[j + 1] = cs * e[j + 1];\n\t                    if (wantu && (j < m - 1)) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = cs * U[i][j] + sn * U[i][j + 1];\n\t                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n\t                            U[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                e[p - 2] = f;\n\t                iter = iter + 1;\n\t                break;\n\t            }\n\t            case 4: {\n\t                if (s[k] <= 0) {\n\t                    s[k] = (s[k] < 0 ? -s[k] : 0);\n\t                    if (wantv) {\n\t                        for (i = 0; i <= pp; i++) {\n\t                            V[i][k] = -V[i][k];\n\t                        }\n\t                    }\n\t                }\n\t                while (k < pp) {\n\t                    if (s[k] >= s[k + 1]) {\n\t                        break;\n\t                    }\n\t                    t = s[k];\n\t                    s[k] = s[k + 1];\n\t                    s[k + 1] = t;\n\t                    if (wantv && (k < n - 1)) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = V[i][k + 1];\n\t                            V[i][k + 1] = V[i][k];\n\t                            V[i][k] = t;\n\t                        }\n\t                    }\n\t                    if (wantu && (k < m - 1)) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = U[i][k + 1];\n\t                            U[i][k + 1] = U[i][k];\n\t                            U[i][k] = t;\n\t                        }\n\t                    }\n\t                    k++;\n\t                }\n\t                iter = 0;\n\t                p--;\n\t                break;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (swapped) {\n\t        var tmp = V;\n\t        V = U;\n\t        U = tmp;\n\t    }\n\t\n\t    this.m = m;\n\t    this.n = n;\n\t    this.s = s;\n\t    this.U = U;\n\t    this.V = V;\n\t}\n\t\n\tSingularValueDecomposition.prototype = {\n\t    get condition() {\n\t        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n\t    },\n\t    get norm2() {\n\t        return this.s[0];\n\t    },\n\t    get rank() {\n\t        var eps = Math.pow(2, -52),\n\t            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n\t            r = 0,\n\t            s = this.s;\n\t        for (var i = 0, ii = s.length; i < ii; i++) {\n\t            if (s[i] > tol) {\n\t                r++;\n\t            }\n\t        }\n\t        return r;\n\t    },\n\t    get diagonal() {\n\t        return this.s;\n\t    },\n\t    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n\t    get threshold() {\n\t        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n\t    },\n\t    get leftSingularVectors() {\n\t        return this.U;\n\t    },\n\t    get rightSingularVectors() {\n\t        return this.V;\n\t    },\n\t    get diagonalMatrix() {\n\t        return Matrix.diag(this.s);\n\t    },\n\t    solve: function (value) {\n\t\n\t        var Y = value,\n\t            e = this.threshold,\n\t            scols = this.s.length,\n\t            Ls = Matrix.zeros(scols, scols),\n\t            i;\n\t\n\t        for (i = 0; i < scols; i++) {\n\t            if (Math.abs(this.s[i]) <= e) {\n\t                Ls[i][i] = 0;\n\t            } else {\n\t                Ls[i][i] = 1 / this.s[i];\n\t            }\n\t        }\n\t\n\t\n\t        var VL = this.V.mmul(Ls),\n\t            vrows = this.V.rows,\n\t            urows = this.U.rows,\n\t            VLU = Matrix.zeros(vrows, urows),\n\t            j, k, sum;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < urows; j++) {\n\t                sum = 0;\n\t                for (k = 0; k < scols; k++) {\n\t                    sum += VL[i][k] * this.U[j][k];\n\t                }\n\t                VLU[i][j] = sum;\n\t            }\n\t        }\n\t\n\t        return VLU.mmul(Y);\n\t    },\n\t    solveForDiagonal: function (value) {\n\t        return this.solve(Matrix.diag(value));\n\t    },\n\t    inverse: function () {\n\t        var e = this.threshold,\n\t            vrows = this.V.rows,\n\t            vcols = this.V.columns,\n\t            X = new Matrix(vrows, this.s.length),\n\t            i, j;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < vcols; j++) {\n\t                if (Math.abs(this.s[j]) > e) {\n\t                    X[i][j] = this.V[i][j] / this.s[j];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t\n\t        var urows = this.U.rows,\n\t            ucols = this.U.columns,\n\t            Y = new Matrix(vrows, urows),\n\t            k, sum;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < urows; j++) {\n\t                sum = 0;\n\t                for (k = 0; k < ucols; k++) {\n\t                    sum += X[i][k] * this.U[j][k];\n\t                }\n\t                Y[i][j] = sum;\n\t            }\n\t        }\n\t\n\t        return Y;\n\t    }\n\t};\n\t\n\tmodule.exports = SingularValueDecomposition;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.hypotenuse = function hypotenuse(a, b) {\n\t    var r;\n\t    if (Math.abs(a) > Math.abs(b)) {\n\t        r = b / a;\n\t        return Math.abs(a) * Math.sqrt(1 + r * r);\n\t    }\n\t    if (b !== 0) {\n\t        r = a / b;\n\t        return Math.abs(b) * Math.sqrt(1 + r * r);\n\t    }\n\t    return 0;\n\t};\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(9);\n\tvar hypotenuse = __webpack_require__(12).hypotenuse;\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\n\tfunction EigenvalueDecomposition(matrix) {\n\t    if (!(this instanceof EigenvalueDecomposition)) {\n\t        return new EigenvalueDecomposition(matrix);\n\t    }\n\t    matrix = Matrix.checkMatrix(matrix);\n\t    if (!matrix.isSquare()) {\n\t        throw new Error('Matrix is not a square matrix');\n\t    }\n\t\n\t    var n = matrix.columns,\n\t        V = Matrix.zeros(n, n),\n\t        d = new Array(n),\n\t        e = new Array(n),\n\t        value = matrix,\n\t        i, j;\n\t\n\t    if (matrix.isSymmetric()) {\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                V[i][j] = value[i][j];\n\t            }\n\t        }\n\t        tred2(n, e, d, V);\n\t        tql2(n, e, d, V);\n\t    }\n\t    else {\n\t        var H = Matrix.zeros(n, n),\n\t            ort = new Array(n);\n\t        for (j = 0; j < n; j++) {\n\t            for (i = 0; i < n; i++) {\n\t                H[i][j] = value[i][j];\n\t            }\n\t        }\n\t        orthes(n, H, ort, V);\n\t        hqr2(n, e, d, V, H);\n\t    }\n\t\n\t    this.n = n;\n\t    this.e = e;\n\t    this.d = d;\n\t    this.V = V;\n\t}\n\t\n\tEigenvalueDecomposition.prototype = {\n\t    get realEigenvalues() {\n\t        return this.d;\n\t    },\n\t    get imaginaryEigenvalues() {\n\t        return this.e;\n\t    },\n\t    get eigenvectorMatrix() {\n\t        return this.V;\n\t    },\n\t    get diagonalMatrix() {\n\t        var n = this.n,\n\t            e = this.e,\n\t            d = this.d,\n\t            X = new Matrix(n, n),\n\t            i, j;\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                X[i][j] = 0;\n\t            }\n\t            X[i][i] = d[i];\n\t            if (e[i] > 0) {\n\t                X[i][i + 1] = e[i];\n\t            }\n\t            else if (e[i] < 0) {\n\t                X[i][i - 1] = e[i];\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tfunction tred2(n, e, d, V) {\n\t\n\t    var f, g, h, i, j, k,\n\t        hh, scale;\n\t\n\t    for (j = 0; j < n; j++) {\n\t        d[j] = V[n - 1][j];\n\t    }\n\t\n\t    for (i = n - 1; i > 0; i--) {\n\t        scale = 0;\n\t        h = 0;\n\t        for (k = 0; k < i; k++) {\n\t            scale = scale + Math.abs(d[k]);\n\t        }\n\t\n\t        if (scale === 0) {\n\t            e[i] = d[i - 1];\n\t            for (j = 0; j < i; j++) {\n\t                d[j] = V[i - 1][j];\n\t                V[i][j] = 0;\n\t                V[j][i] = 0;\n\t            }\n\t        } else {\n\t            for (k = 0; k < i; k++) {\n\t                d[k] /= scale;\n\t                h += d[k] * d[k];\n\t            }\n\t\n\t            f = d[i - 1];\n\t            g = Math.sqrt(h);\n\t            if (f > 0) {\n\t                g = -g;\n\t            }\n\t\n\t            e[i] = scale * g;\n\t            h = h - f * g;\n\t            d[i - 1] = f - g;\n\t            for (j = 0; j < i; j++) {\n\t                e[j] = 0;\n\t            }\n\t\n\t            for (j = 0; j < i; j++) {\n\t                f = d[j];\n\t                V[j][i] = f;\n\t                g = e[j] + V[j][j] * f;\n\t                for (k = j + 1; k <= i - 1; k++) {\n\t                    g += V[k][j] * d[k];\n\t                    e[k] += V[k][j] * f;\n\t                }\n\t                e[j] = g;\n\t            }\n\t\n\t            f = 0;\n\t            for (j = 0; j < i; j++) {\n\t                e[j] /= h;\n\t                f += e[j] * d[j];\n\t            }\n\t\n\t            hh = f / (h + h);\n\t            for (j = 0; j < i; j++) {\n\t                e[j] -= hh * d[j];\n\t            }\n\t\n\t            for (j = 0; j < i; j++) {\n\t                f = d[j];\n\t                g = e[j];\n\t                for (k = j; k <= i - 1; k++) {\n\t                    V[k][j] -= (f * e[k] + g * d[k]);\n\t                }\n\t                d[j] = V[i - 1][j];\n\t                V[i][j] = 0;\n\t            }\n\t        }\n\t        d[i] = h;\n\t    }\n\t\n\t    for (i = 0; i < n - 1; i++) {\n\t        V[n - 1][i] = V[i][i];\n\t        V[i][i] = 1;\n\t        h = d[i + 1];\n\t        if (h !== 0) {\n\t            for (k = 0; k <= i; k++) {\n\t                d[k] = V[k][i + 1] / h;\n\t            }\n\t\n\t            for (j = 0; j <= i; j++) {\n\t                g = 0;\n\t                for (k = 0; k <= i; k++) {\n\t                    g += V[k][i + 1] * V[k][j];\n\t                }\n\t                for (k = 0; k <= i; k++) {\n\t                    V[k][j] -= g * d[k];\n\t                }\n\t            }\n\t        }\n\t\n\t        for (k = 0; k <= i; k++) {\n\t            V[k][i + 1] = 0;\n\t        }\n\t    }\n\t\n\t    for (j = 0; j < n; j++) {\n\t        d[j] = V[n - 1][j];\n\t        V[n - 1][j] = 0;\n\t    }\n\t\n\t    V[n - 1][n - 1] = 1;\n\t    e[0] = 0;\n\t}\n\t\n\tfunction tql2(n, e, d, V) {\n\t\n\t    var g, h, i, j, k, l, m, p, r,\n\t        dl1, c, c2, c3, el1, s, s2,\n\t        iter;\n\t\n\t    for (i = 1; i < n; i++) {\n\t        e[i - 1] = e[i];\n\t    }\n\t\n\t    e[n - 1] = 0;\n\t\n\t    var f = 0,\n\t        tst1 = 0,\n\t        eps = Math.pow(2, -52);\n\t\n\t    for (l = 0; l < n; l++) {\n\t        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n\t        m = l;\n\t        while (m < n) {\n\t            if (Math.abs(e[m]) <= eps * tst1) {\n\t                break;\n\t            }\n\t            m++;\n\t        }\n\t\n\t        if (m > l) {\n\t            iter = 0;\n\t            do {\n\t                iter = iter + 1;\n\t\n\t                g = d[l];\n\t                p = (d[l + 1] - g) / (2 * e[l]);\n\t                r = hypotenuse(p, 1);\n\t                if (p < 0) {\n\t                    r = -r;\n\t                }\n\t\n\t                d[l] = e[l] / (p + r);\n\t                d[l + 1] = e[l] * (p + r);\n\t                dl1 = d[l + 1];\n\t                h = g - d[l];\n\t                for (i = l + 2; i < n; i++) {\n\t                    d[i] -= h;\n\t                }\n\t\n\t                f = f + h;\n\t\n\t                p = d[m];\n\t                c = 1;\n\t                c2 = c;\n\t                c3 = c;\n\t                el1 = e[l + 1];\n\t                s = 0;\n\t                s2 = 0;\n\t                for (i = m - 1; i >= l; i--) {\n\t                    c3 = c2;\n\t                    c2 = c;\n\t                    s2 = s;\n\t                    g = c * e[i];\n\t                    h = c * p;\n\t                    r = hypotenuse(p, e[i]);\n\t                    e[i + 1] = s * r;\n\t                    s = e[i] / r;\n\t                    c = p / r;\n\t                    p = c * d[i] - s * g;\n\t                    d[i + 1] = h + s * (c * g + s * d[i]);\n\t\n\t                    for (k = 0; k < n; k++) {\n\t                        h = V[k][i + 1];\n\t                        V[k][i + 1] = s * V[k][i] + c * h;\n\t                        V[k][i] = c * V[k][i] - s * h;\n\t                    }\n\t                }\n\t\n\t                p = -s * s2 * c3 * el1 * e[l] / dl1;\n\t                e[l] = s * p;\n\t                d[l] = c * p;\n\t\n\t            }\n\t            while (Math.abs(e[l]) > eps * tst1);\n\t        }\n\t        d[l] = d[l] + f;\n\t        e[l] = 0;\n\t    }\n\t\n\t    for (i = 0; i < n - 1; i++) {\n\t        k = i;\n\t        p = d[i];\n\t        for (j = i + 1; j < n; j++) {\n\t            if (d[j] < p) {\n\t                k = j;\n\t                p = d[j];\n\t            }\n\t        }\n\t\n\t        if (k !== i) {\n\t            d[k] = d[i];\n\t            d[i] = p;\n\t            for (j = 0; j < n; j++) {\n\t                p = V[j][i];\n\t                V[j][i] = V[j][k];\n\t                V[j][k] = p;\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction orthes(n, H, ort, V) {\n\t\n\t    var low = 0,\n\t        high = n - 1,\n\t        f, g, h, i, j, m,\n\t        scale;\n\t\n\t    for (m = low + 1; m <= high - 1; m++) {\n\t        scale = 0;\n\t        for (i = m; i <= high; i++) {\n\t            scale = scale + Math.abs(H[i][m - 1]);\n\t        }\n\t\n\t        if (scale !== 0) {\n\t            h = 0;\n\t            for (i = high; i >= m; i--) {\n\t                ort[i] = H[i][m - 1] / scale;\n\t                h += ort[i] * ort[i];\n\t            }\n\t\n\t            g = Math.sqrt(h);\n\t            if (ort[m] > 0) {\n\t                g = -g;\n\t            }\n\t\n\t            h = h - ort[m] * g;\n\t            ort[m] = ort[m] - g;\n\t\n\t            for (j = m; j < n; j++) {\n\t                f = 0;\n\t                for (i = high; i >= m; i--) {\n\t                    f += ort[i] * H[i][j];\n\t                }\n\t\n\t                f = f / h;\n\t                for (i = m; i <= high; i++) {\n\t                    H[i][j] -= f * ort[i];\n\t                }\n\t            }\n\t\n\t            for (i = 0; i <= high; i++) {\n\t                f = 0;\n\t                for (j = high; j >= m; j--) {\n\t                    f += ort[j] * H[i][j];\n\t                }\n\t\n\t                f = f / h;\n\t                for (j = m; j <= high; j++) {\n\t                    H[i][j] -= f * ort[j];\n\t                }\n\t            }\n\t\n\t            ort[m] = scale * ort[m];\n\t            H[m][m - 1] = scale * g;\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < n; i++) {\n\t        for (j = 0; j < n; j++) {\n\t            V[i][j] = (i === j ? 1 : 0);\n\t        }\n\t    }\n\t\n\t    for (m = high - 1; m >= low + 1; m--) {\n\t        if (H[m][m - 1] !== 0) {\n\t            for (i = m + 1; i <= high; i++) {\n\t                ort[i] = H[i][m - 1];\n\t            }\n\t\n\t            for (j = m; j <= high; j++) {\n\t                g = 0;\n\t                for (i = m; i <= high; i++) {\n\t                    g += ort[i] * V[i][j];\n\t                }\n\t\n\t                g = (g / ort[m]) / H[m][m - 1];\n\t                for (i = m; i <= high; i++) {\n\t                    V[i][j] += g * ort[i];\n\t                }\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction hqr2(nn, e, d, V, H) {\n\t    var n = nn - 1,\n\t        low = 0,\n\t        high = nn - 1,\n\t        eps = Math.pow(2, -52),\n\t        exshift = 0,\n\t        norm = 0,\n\t        p = 0,\n\t        q = 0,\n\t        r = 0,\n\t        s = 0,\n\t        z = 0,\n\t        iter = 0,\n\t        i, j, k, l, m, t, w, x, y,\n\t        ra, sa, vr, vi,\n\t        notlast, cdivres;\n\t\n\t    for (i = 0; i < nn; i++) {\n\t        if (i < low || i > high) {\n\t            d[i] = H[i][i];\n\t            e[i] = 0;\n\t        }\n\t\n\t        for (j = Math.max(i - 1, 0); j < nn; j++) {\n\t            norm = norm + Math.abs(H[i][j]);\n\t        }\n\t    }\n\t\n\t    while (n >= low) {\n\t        l = n;\n\t        while (l > low) {\n\t            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n\t            if (s === 0) {\n\t                s = norm;\n\t            }\n\t            if (Math.abs(H[l][l - 1]) < eps * s) {\n\t                break;\n\t            }\n\t            l--;\n\t        }\n\t\n\t        if (l === n) {\n\t            H[n][n] = H[n][n] + exshift;\n\t            d[n] = H[n][n];\n\t            e[n] = 0;\n\t            n--;\n\t            iter = 0;\n\t        } else if (l === n - 1) {\n\t            w = H[n][n - 1] * H[n - 1][n];\n\t            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n\t            q = p * p + w;\n\t            z = Math.sqrt(Math.abs(q));\n\t            H[n][n] = H[n][n] + exshift;\n\t            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n\t            x = H[n][n];\n\t\n\t            if (q >= 0) {\n\t                z = (p >= 0) ? (p + z) : (p - z);\n\t                d[n - 1] = x + z;\n\t                d[n] = d[n - 1];\n\t                if (z !== 0) {\n\t                    d[n] = x - w / z;\n\t                }\n\t                e[n - 1] = 0;\n\t                e[n] = 0;\n\t                x = H[n][n - 1];\n\t                s = Math.abs(x) + Math.abs(z);\n\t                p = x / s;\n\t                q = z / s;\n\t                r = Math.sqrt(p * p + q * q);\n\t                p = p / r;\n\t                q = q / r;\n\t\n\t                for (j = n - 1; j < nn; j++) {\n\t                    z = H[n - 1][j];\n\t                    H[n - 1][j] = q * z + p * H[n][j];\n\t                    H[n][j] = q * H[n][j] - p * z;\n\t                }\n\t\n\t                for (i = 0; i <= n; i++) {\n\t                    z = H[i][n - 1];\n\t                    H[i][n - 1] = q * z + p * H[i][n];\n\t                    H[i][n] = q * H[i][n] - p * z;\n\t                }\n\t\n\t                for (i = low; i <= high; i++) {\n\t                    z = V[i][n - 1];\n\t                    V[i][n - 1] = q * z + p * V[i][n];\n\t                    V[i][n] = q * V[i][n] - p * z;\n\t                }\n\t            } else {\n\t                d[n - 1] = x + p;\n\t                d[n] = x + p;\n\t                e[n - 1] = z;\n\t                e[n] = -z;\n\t            }\n\t\n\t            n = n - 2;\n\t            iter = 0;\n\t        } else {\n\t            x = H[n][n];\n\t            y = 0;\n\t            w = 0;\n\t            if (l < n) {\n\t                y = H[n - 1][n - 1];\n\t                w = H[n][n - 1] * H[n - 1][n];\n\t            }\n\t\n\t            if (iter === 10) {\n\t                exshift += x;\n\t                for (i = low; i <= n; i++) {\n\t                    H[i][i] -= x;\n\t                }\n\t                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n\t                x = y = 0.75 * s;\n\t                w = -0.4375 * s * s;\n\t            }\n\t\n\t            if (iter === 30) {\n\t                s = (y - x) / 2;\n\t                s = s * s + w;\n\t                if (s > 0) {\n\t                    s = Math.sqrt(s);\n\t                    if (y < x) {\n\t                        s = -s;\n\t                    }\n\t                    s = x - w / ((y - x) / 2 + s);\n\t                    for (i = low; i <= n; i++) {\n\t                        H[i][i] -= s;\n\t                    }\n\t                    exshift += s;\n\t                    x = y = w = 0.964;\n\t                }\n\t            }\n\t\n\t            iter = iter + 1;\n\t\n\t            m = n - 2;\n\t            while (m >= l) {\n\t                z = H[m][m];\n\t                r = x - z;\n\t                s = y - z;\n\t                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n\t                q = H[m + 1][m + 1] - z - r - s;\n\t                r = H[m + 2][m + 1];\n\t                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n\t                p = p / s;\n\t                q = q / s;\n\t                r = r / s;\n\t                if (m === l) {\n\t                    break;\n\t                }\n\t                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n\t                    break;\n\t                }\n\t                m--;\n\t            }\n\t\n\t            for (i = m + 2; i <= n; i++) {\n\t                H[i][i - 2] = 0;\n\t                if (i > m + 2) {\n\t                    H[i][i - 3] = 0;\n\t                }\n\t            }\n\t\n\t            for (k = m; k <= n - 1; k++) {\n\t                notlast = (k !== n - 1);\n\t                if (k !== m) {\n\t                    p = H[k][k - 1];\n\t                    q = H[k + 1][k - 1];\n\t                    r = (notlast ? H[k + 2][k - 1] : 0);\n\t                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n\t                    if (x !== 0) {\n\t                        p = p / x;\n\t                        q = q / x;\n\t                        r = r / x;\n\t                    }\n\t                }\n\t\n\t                if (x === 0) {\n\t                    break;\n\t                }\n\t\n\t                s = Math.sqrt(p * p + q * q + r * r);\n\t                if (p < 0) {\n\t                    s = -s;\n\t                }\n\t\n\t                if (s !== 0) {\n\t                    if (k !== m) {\n\t                        H[k][k - 1] = -s * x;\n\t                    } else if (l !== m) {\n\t                        H[k][k - 1] = -H[k][k - 1];\n\t                    }\n\t\n\t                    p = p + s;\n\t                    x = p / s;\n\t                    y = q / s;\n\t                    z = r / s;\n\t                    q = q / p;\n\t                    r = r / p;\n\t\n\t                    for (j = k; j < nn; j++) {\n\t                        p = H[k][j] + q * H[k + 1][j];\n\t                        if (notlast) {\n\t                            p = p + r * H[k + 2][j];\n\t                            H[k + 2][j] = H[k + 2][j] - p * z;\n\t                        }\n\t\n\t                        H[k][j] = H[k][j] - p * x;\n\t                        H[k + 1][j] = H[k + 1][j] - p * y;\n\t                    }\n\t\n\t                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n\t                        p = x * H[i][k] + y * H[i][k + 1];\n\t                        if (notlast) {\n\t                            p = p + z * H[i][k + 2];\n\t                            H[i][k + 2] = H[i][k + 2] - p * r;\n\t                        }\n\t\n\t                        H[i][k] = H[i][k] - p;\n\t                        H[i][k + 1] = H[i][k + 1] - p * q;\n\t                    }\n\t\n\t                    for (i = low; i <= high; i++) {\n\t                        p = x * V[i][k] + y * V[i][k + 1];\n\t                        if (notlast) {\n\t                            p = p + z * V[i][k + 2];\n\t                            V[i][k + 2] = V[i][k + 2] - p * r;\n\t                        }\n\t\n\t                        V[i][k] = V[i][k] - p;\n\t                        V[i][k + 1] = V[i][k + 1] - p * q;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    if (norm === 0) {\n\t        return;\n\t    }\n\t\n\t    for (n = nn - 1; n >= 0; n--) {\n\t        p = d[n];\n\t        q = e[n];\n\t\n\t        if (q === 0) {\n\t            l = n;\n\t            H[n][n] = 1;\n\t            for (i = n - 1; i >= 0; i--) {\n\t                w = H[i][i] - p;\n\t                r = 0;\n\t                for (j = l; j <= n; j++) {\n\t                    r = r + H[i][j] * H[j][n];\n\t                }\n\t\n\t                if (e[i] < 0) {\n\t                    z = w;\n\t                    s = r;\n\t                } else {\n\t                    l = i;\n\t                    if (e[i] === 0) {\n\t                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n\t                    } else {\n\t                        x = H[i][i + 1];\n\t                        y = H[i + 1][i];\n\t                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n\t                        t = (x * s - z * r) / q;\n\t                        H[i][n] = t;\n\t                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n\t                    }\n\t\n\t                    t = Math.abs(H[i][n]);\n\t                    if ((eps * t) * t > 1) {\n\t                        for (j = i; j <= n; j++) {\n\t                            H[j][n] = H[j][n] / t;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        } else if (q < 0) {\n\t            l = n - 1;\n\t\n\t            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n\t                H[n - 1][n - 1] = q / H[n][n - 1];\n\t                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n\t            } else {\n\t                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n\t                H[n - 1][n - 1] = cdivres[0];\n\t                H[n - 1][n] = cdivres[1];\n\t            }\n\t\n\t            H[n][n - 1] = 0;\n\t            H[n][n] = 1;\n\t            for (i = n - 2; i >= 0; i--) {\n\t                ra = 0;\n\t                sa = 0;\n\t                for (j = l; j <= n; j++) {\n\t                    ra = ra + H[i][j] * H[j][n - 1];\n\t                    sa = sa + H[i][j] * H[j][n];\n\t                }\n\t\n\t                w = H[i][i] - p;\n\t\n\t                if (e[i] < 0) {\n\t                    z = w;\n\t                    r = ra;\n\t                    s = sa;\n\t                } else {\n\t                    l = i;\n\t                    if (e[i] === 0) {\n\t                        cdivres = cdiv(-ra, -sa, w, q);\n\t                        H[i][n - 1] = cdivres[0];\n\t                        H[i][n] = cdivres[1];\n\t                    } else {\n\t                        x = H[i][i + 1];\n\t                        y = H[i + 1][i];\n\t                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n\t                        vi = (d[i] - p) * 2 * q;\n\t                        if (vr === 0 && vi === 0) {\n\t                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n\t                        }\n\t                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n\t                        H[i][n - 1] = cdivres[0];\n\t                        H[i][n] = cdivres[1];\n\t                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n\t                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n\t                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n\t                        } else {\n\t                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n\t                            H[i + 1][n - 1] = cdivres[0];\n\t                            H[i + 1][n] = cdivres[1];\n\t                        }\n\t                    }\n\t\n\t                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n\t                    if ((eps * t) * t > 1) {\n\t                        for (j = i; j <= n; j++) {\n\t                            H[j][n - 1] = H[j][n - 1] / t;\n\t                            H[j][n] = H[j][n] / t;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < nn; i++) {\n\t        if (i < low || i > high) {\n\t            for (j = i; j < nn; j++) {\n\t                V[i][j] = H[i][j];\n\t            }\n\t        }\n\t    }\n\t\n\t    for (j = nn - 1; j >= low; j--) {\n\t        for (i = low; i <= high; i++) {\n\t            z = 0;\n\t            for (k = low; k <= Math.min(j, high); k++) {\n\t                z = z + V[i][k] * H[k][j];\n\t            }\n\t            V[i][j] = z;\n\t        }\n\t    }\n\t}\n\t\n\tfunction cdiv(xr, xi, yr, yi) {\n\t    var r, d;\n\t    if (Math.abs(yr) > Math.abs(yi)) {\n\t        r = yi / yr;\n\t        d = yr + r * yi;\n\t        return [(xr + r * xi) / d, (xi - r * xr) / d];\n\t    }\n\t    else {\n\t        r = yr / yi;\n\t        d = yi + r * yr;\n\t        return [(r * xr + xi) / d, (r * xi - xr) / d];\n\t    }\n\t}\n\t\n\tmodule.exports = EigenvalueDecomposition;\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(9);\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\n\tfunction LuDecomposition(matrix) {\n\t    if (!(this instanceof LuDecomposition)) {\n\t        return new LuDecomposition(matrix);\n\t    }\n\t    matrix = Matrix.checkMatrix(matrix);\n\t\n\t    var lu = matrix.clone(),\n\t        rows = lu.rows,\n\t        columns = lu.columns,\n\t        pivotVector = new Array(rows),\n\t        pivotSign = 1,\n\t        i, j, k, p, s, t, v,\n\t        LUrowi, LUcolj, kmax;\n\t\n\t    for (i = 0; i < rows; i++) {\n\t        pivotVector[i] = i;\n\t    }\n\t\n\t    LUcolj = new Array(rows);\n\t\n\t    for (j = 0; j < columns; j++) {\n\t\n\t        for (i = 0; i < rows; i++) {\n\t            LUcolj[i] = lu[i][j];\n\t        }\n\t\n\t        for (i = 0; i < rows; i++) {\n\t            LUrowi = lu[i];\n\t            kmax = Math.min(i, j);\n\t            s = 0;\n\t            for (k = 0; k < kmax; k++) {\n\t                s += LUrowi[k] * LUcolj[k];\n\t            }\n\t            LUrowi[j] = LUcolj[i] -= s;\n\t        }\n\t\n\t        p = j;\n\t        for (i = j + 1; i < rows; i++) {\n\t            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n\t                p = i;\n\t            }\n\t        }\n\t\n\t        if (p !== j) {\n\t            for (k = 0; k < columns; k++) {\n\t                t = lu[p][k];\n\t                lu[p][k] = lu[j][k];\n\t                lu[j][k] = t;\n\t            }\n\t\n\t            v = pivotVector[p];\n\t            pivotVector[p] = pivotVector[j];\n\t            pivotVector[j] = v;\n\t\n\t            pivotSign = -pivotSign;\n\t        }\n\t\n\t        if (j < rows && lu[j][j] !== 0) {\n\t            for (i = j + 1; i < rows; i++) {\n\t                lu[i][j] /= lu[j][j];\n\t            }\n\t        }\n\t    }\n\t\n\t    this.LU = lu;\n\t    this.pivotVector = pivotVector;\n\t    this.pivotSign = pivotSign;\n\t}\n\t\n\tLuDecomposition.prototype = {\n\t    isSingular: function () {\n\t        var data = this.LU,\n\t            col = data.columns;\n\t        for (var j = 0; j < col; j++) {\n\t            if (data[j][j] === 0) {\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    },\n\t    get determinant() {\n\t        var data = this.LU;\n\t        if (!data.isSquare())\n\t            throw new Error('Matrix must be square');\n\t        var determinant = this.pivotSign, col = data.columns;\n\t        for (var j = 0; j < col; j++)\n\t            determinant *= data[j][j];\n\t        return determinant;\n\t    },\n\t    get lowerTriangularFactor() {\n\t        var data = this.LU,\n\t            rows = data.rows,\n\t            columns = data.columns,\n\t            X = new Matrix(rows, columns);\n\t        for (var i = 0; i < rows; i++) {\n\t            for (var j = 0; j < columns; j++) {\n\t                if (i > j) {\n\t                    X[i][j] = data[i][j];\n\t                } else if (i === j) {\n\t                    X[i][j] = 1;\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get upperTriangularFactor() {\n\t        var data = this.LU,\n\t            rows = data.rows,\n\t            columns = data.columns,\n\t            X = new Matrix(rows, columns);\n\t        for (var i = 0; i < rows; i++) {\n\t            for (var j = 0; j < columns; j++) {\n\t                if (i <= j) {\n\t                    X[i][j] = data[i][j];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get pivotPermutationVector() {\n\t        return this.pivotVector.slice();\n\t    },\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var lu = this.LU,\n\t            rows = lu.rows;\n\t\n\t        if (rows !== value.rows)\n\t            throw new Error('Invalid matrix dimensions');\n\t        if (this.isSingular())\n\t            throw new Error('LU matrix is singular');\n\t\n\t        var count = value.columns,\n\t            X = value.subMatrixRow(this.pivotVector, 0, count - 1),\n\t            columns = lu.columns,\n\t            i, j, k;\n\t\n\t        for (k = 0; k < columns; k++) {\n\t            for (i = k + 1; i < columns; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * lu[i][k];\n\t                }\n\t            }\n\t        }\n\t        for (k = columns - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                X[k][j] /= lu[k][k];\n\t            }\n\t            for (i = 0; i < k; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * lu[i][k];\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tmodule.exports = LuDecomposition;\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(9);\n\tvar hypotenuse = __webpack_require__(12).hypotenuse;\n\t\n\t//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\n\tfunction QrDecomposition(value) {\n\t    if (!(this instanceof QrDecomposition)) {\n\t        return new QrDecomposition(value);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t\n\t    var qr = value.clone(),\n\t        m = value.rows,\n\t        n = value.columns,\n\t        rdiag = new Array(n),\n\t        i, j, k, s;\n\t\n\t    for (k = 0; k < n; k++) {\n\t        var nrm = 0;\n\t        for (i = k; i < m; i++) {\n\t            nrm = hypotenuse(nrm, qr[i][k]);\n\t        }\n\t        if (nrm !== 0) {\n\t            if (qr[k][k] < 0) {\n\t                nrm = -nrm;\n\t            }\n\t            for (i = k; i < m; i++) {\n\t                qr[i][k] /= nrm;\n\t            }\n\t            qr[k][k] += 1;\n\t            for (j = k + 1; j < n; j++) {\n\t                s = 0;\n\t                for (i = k; i < m; i++) {\n\t                    s += qr[i][k] * qr[i][j];\n\t                }\n\t                s = -s / qr[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    qr[i][j] += s * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t        rdiag[k] = -nrm;\n\t    }\n\t\n\t    this.QR = qr;\n\t    this.Rdiag = rdiag;\n\t}\n\t\n\tQrDecomposition.prototype = {\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var qr = this.QR,\n\t            m = qr.rows;\n\t\n\t        if (value.rows !== m)\n\t            throw new Error('Matrix row dimensions must agree');\n\t        if (!this.isFullRank())\n\t            throw new Error('Matrix is rank deficient');\n\t\n\t        var count = value.columns,\n\t            X = value.clone(),\n\t            n = qr.columns,\n\t            i, j, k, s;\n\t\n\t        for (k = 0; k < n; k++) {\n\t            for (j = 0; j < count; j++) {\n\t                s = 0;\n\t                for (i = k; i < m; i++) {\n\t                    s += qr[i][k] * X[i][j];\n\t                }\n\t                s = -s / qr[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    X[i][j] += s * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t        for (k = n - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                X[k][j] /= this.Rdiag[k];\n\t            }\n\t            for (i = 0; i < k; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t\n\t        return X.subMatrix(0, n - 1, 0, count - 1);\n\t    },\n\t    isFullRank: function () {\n\t        var columns = this.QR.columns;\n\t        for (var i = 0; i < columns; i++) {\n\t            if (this.Rdiag[i] === 0) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    },\n\t    get upperTriangularFactor() {\n\t        var qr = this.QR,\n\t            n = qr.columns,\n\t            X = new Matrix(n, n),\n\t            i, j;\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                if (i < j) {\n\t                    X[i][j] = qr[i][j];\n\t                } else if (i === j) {\n\t                    X[i][j] = this.Rdiag[i];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get orthogonalFactor() {\n\t        var qr = this.QR,\n\t            rows = qr.rows,\n\t            columns = qr.columns,\n\t            X = new Matrix(rows, columns),\n\t            i, j, k, s;\n\t\n\t        for (k = columns - 1; k >= 0; k--) {\n\t            for (i = 0; i < rows; i++) {\n\t                X[i][k] = 0;\n\t            }\n\t            X[k][k] = 1;\n\t            for (j = k; j < columns; j++) {\n\t                if (qr[k][k] !== 0) {\n\t                    s = 0;\n\t                    for (i = k; i < rows; i++) {\n\t                        s += qr[i][k] * X[i][j];\n\t                    }\n\t\n\t                    s = -s / qr[k][k];\n\t\n\t                    for (i = k; i < rows; i++) {\n\t                        X[i][j] += s * qr[i][k];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tmodule.exports = QrDecomposition;\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(9);\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\n\tfunction CholeskyDecomposition(value) {\n\t    if (!(this instanceof CholeskyDecomposition)) {\n\t        return new CholeskyDecomposition(value);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t    if (!value.isSymmetric())\n\t        throw new Error('Matrix is not symmetric');\n\t\n\t    var a = value,\n\t        dimension = a.rows,\n\t        l = new Matrix(dimension, dimension),\n\t        positiveDefinite = true,\n\t        i, j, k;\n\t\n\t    for (j = 0; j < dimension; j++) {\n\t        var Lrowj = l[j];\n\t        var d = 0;\n\t        for (k = 0; k < j; k++) {\n\t            var Lrowk = l[k];\n\t            var s = 0;\n\t            for (i = 0; i < k; i++) {\n\t                s += Lrowk[i] * Lrowj[i];\n\t            }\n\t            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n\t            d = d + s * s;\n\t        }\n\t\n\t        d = a[j][j] - d;\n\t\n\t        positiveDefinite &= (d > 0);\n\t        l[j][j] = Math.sqrt(Math.max(d, 0));\n\t        for (k = j + 1; k < dimension; k++) {\n\t            l[j][k] = 0;\n\t        }\n\t    }\n\t\n\t    if (!positiveDefinite) {\n\t        throw new Error('Matrix is not positive definite');\n\t    }\n\t\n\t    this.L = l;\n\t}\n\t\n\tCholeskyDecomposition.prototype = {\n\t    get leftTriangularFactor() {\n\t        return this.L;\n\t    },\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var l = this.L,\n\t            dimension = l.rows;\n\t\n\t        if (value.rows !== dimension) {\n\t            throw new Error('Matrix dimensions do not match');\n\t        }\n\t\n\t        var count = value.columns,\n\t            B = value.clone(),\n\t            i, j, k;\n\t\n\t        for (k = 0; k < dimension; k++) {\n\t            for (j = 0; j < count; j++) {\n\t                for (i = 0; i < k; i++) {\n\t                    B[k][j] -= B[i][j] * l[k][i];\n\t                }\n\t                B[k][j] /= l[k][k];\n\t            }\n\t        }\n\t\n\t        for (k = dimension - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                for (i = k + 1; i < dimension; i++) {\n\t                    B[k][j] -= B[i][j] * l[i][k];\n\t                }\n\t                B[k][j] /= l[k][k];\n\t            }\n\t        }\n\t\n\t        return B;\n\t    }\n\t};\n\t\n\tmodule.exports = CholeskyDecomposition;\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar eightBits = __webpack_require__(18);\n\t\n\t/**\n\t * Count the number of true values in an array\n\t * @param {Array} arr\n\t * @return {number}\n\t */\n\tfunction count(arr) {\n\t    var c = 0;\n\t    for (var i = 0; i < arr.length; i++) {\n\t        c += eightBits[arr[i] & 0xff] + eightBits[(arr[i] >> 8) & 0xff] + eightBits[(arr[i] >> 16) & 0xff] + eightBits[(arr[i] >> 24) & 0xff];\n\t    }\n\t    return c;\n\t}\n\t\n\t/**\n\t * Logical AND operation\n\t * @param {Array} arr1\n\t * @param {Array} arr2\n\t * @return {Array}\n\t */\n\tfunction and(arr1, arr2) {\n\t    var ans = new Array(arr1.length);\n\t    for (var i = 0; i < arr1.length; i++)\n\t        ans[i] = arr1[i] & arr2[i];\n\t    return ans;\n\t}\n\t\n\t/**\n\t * Logical OR operation\n\t * @param {Array} arr1\n\t * @param {Array} arr2\n\t * @return {Array}\n\t */\n\tfunction or(arr1, arr2) {\n\t    var ans = new Array(arr1.length);\n\t    for (var i = 0; i < arr1.length; i++)\n\t        ans[i] = arr1[i] | arr2[i];\n\t    return ans;\n\t}\n\t\n\t/**\n\t * Logical XOR operation\n\t * @param {Array} arr1\n\t * @param {Array} arr2\n\t * @return {Array}\n\t */\n\tfunction xor(arr1, arr2) {\n\t    var ans = new Array(arr1.length);\n\t    for (var i = 0; i < arr1.length; i++)\n\t        ans[i] = arr1[i] ^ arr2[i];\n\t    return ans;\n\t}\n\t\n\t/**\n\t * Logical NOT operation\n\t * @param {Array} arr\n\t * @return {Array}\n\t */\n\tfunction not(arr) {\n\t    var ans = new Array(arr.length);\n\t    for (var i = 0; i < ans.length; i++)\n\t        ans[i] = ~arr[i];\n\t    return ans;\n\t}\n\t\n\t/**\n\t * Gets the n value of array arr\n\t * @param {Array} arr\n\t * @param {number} n\n\t * @return {boolean}\n\t */\n\tfunction getBit(arr, n) {\n\t    var index = n >> 5; // Same as Math.floor(n/32)\n\t    var mask = 1 << (31 - n % 32);\n\t    return Boolean(arr[index] & mask);\n\t}\n\t\n\t/**\n\t * Sets the n value of array arr to the value val\n\t * @param {Array} arr\n\t * @param {number} n\n\t * @param {boolean} val\n\t * @return {Array}\n\t */\n\tfunction setBit(arr, n, val) {\n\t    var index = n >> 5; // Same as Math.floor(n/32)\n\t    var mask = 1 << (31 - n % 32);\n\t    if (val)\n\t        arr[index] = mask | arr[index];\n\t    else\n\t        arr[index] = ~mask & arr[index];\n\t    return arr;\n\t}\n\t\n\t/**\n\t * Translates an array of numbers to a string of bits\n\t * @param {Array} arr\n\t * @returns {string}\n\t */\n\tfunction toBinaryString(arr) {\n\t    var str = '';\n\t    for (var i = 0; i < arr.length; i++) {\n\t        var obj = (arr[i] >>> 0).toString(2);\n\t        str += '00000000000000000000000000000000'.substr(obj.length) + obj;\n\t    }\n\t    return str;\n\t}\n\t\n\t/**\n\t * Creates an array of numbers based on a string of bits\n\t * @param {string} str\n\t * @returns {Array}\n\t */\n\tfunction parseBinaryString(str) {\n\t    var len = str.length / 32;\n\t    var ans = new Array(len);\n\t    for (var i = 0; i < len; i++) {\n\t        ans[i] = parseInt(str.substr(i*32, 32), 2) | 0;\n\t    }\n\t    return ans;\n\t}\n\t\n\t/**\n\t * Translates an array of numbers to a hex string\n\t * @param {Array} arr\n\t * @returns {string}\n\t */\n\tfunction toHexString(arr) {\n\t    var str = '';\n\t    for (var i = 0; i < arr.length; i++) {\n\t        var obj = (arr[i] >>> 0).toString(16);\n\t        str += '00000000'.substr(obj.length) + obj;\n\t    }\n\t    return str;\n\t}\n\t\n\t/**\n\t * Creates an array of numbers based on a hex string\n\t * @param {string} str\n\t * @returns {Array}\n\t */\n\tfunction parseHexString(str) {\n\t    var len = str.length / 8;\n\t    var ans = new Array(len);\n\t    for (var i = 0; i < len; i++) {\n\t        ans[i] = parseInt(str.substr(i*8, 8), 16) | 0;\n\t    }\n\t    return ans;\n\t}\n\t\n\t/**\n\t * Creates a human readable string of the array\n\t * @param {Array} arr\n\t * @returns {string}\n\t */\n\tfunction toDebug(arr) {\n\t    var binary = toBinaryString(arr);\n\t    var str = '';\n\t    for (var i = 0; i < arr.length; i++) {\n\t        str += '0000'.substr((i * 32).toString(16).length) + (i * 32).toString(16) + ':';\n\t        for (var j = 0; j < 32; j += 4) {\n\t            str += ' ' + binary.substr(i * 32 + j, 4);\n\t        }\n\t        if (i < arr.length - 1) str += '\\n';\n\t    }\n\t    return str\n\t}\n\t\n\tmodule.exports = {\n\t    count: count,\n\t    and: and,\n\t    or: or,\n\t    xor: xor,\n\t    not: not,\n\t    getBit: getBit,\n\t    setBit: setBit,\n\t    toBinaryString: toBinaryString,\n\t    parseBinaryString: parseBinaryString,\n\t    toHexString: toHexString,\n\t    parseHexString: parseHexString,\n\t    toDebug: toDebug\n\t};\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports) {\n\n\t// auxiliary file to create the 256 look at table elements\n\t\n\tvar ans = new Array(256);\n\tfor (var i = 0; i < 256; i++) {\n\t    var num = i;\n\t    var c = 0;\n\t    while (num) {\n\t        num = num & (num - 1);\n\t        c++;\n\t    }\n\t    ans[i] = c;\n\t}\n\t\n\tmodule.exports = ans;\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(20);\n\tmodule.exports.Decompositions = module.exports.DC = __webpack_require__(21);\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar Asplice = Array.prototype.splice,\n\t    Aconcat = Array.prototype.concat;\n\t\n\t// For performance : http://jsperf.com/clone-array-slice-vs-while-vs-for\n\tfunction slice(arr) {\n\t    var i = 0,\n\t        ii = arr.length,\n\t        result = new Array(ii);\n\t    for (; i < ii; i++) {\n\t        result[i] = arr[i];\n\t    }\n\t    return result;\n\t}\n\t\n\t/**\n\t * Real matrix.\n\t * @constructor\n\t * @param {number|Array} nRows - Number of rows of the new matrix or a 2D array containing the data.\n\t * @param {number|boolean} [nColumns] - Number of columns of the new matrix or a boolean specifying if the input array should be cloned\n\t */\n\tfunction Matrix(nRows, nColumns) {\n\t    var i = 0, rows, columns, matrix, newInstance;\n\t    if (Array.isArray(nRows)) {\n\t        newInstance = nColumns;\n\t        matrix = newInstance ? slice(nRows) : nRows;\n\t        nRows = matrix.length;\n\t        nColumns = matrix[0].length;\n\t        if (typeof nColumns === 'undefined') {\n\t            throw new TypeError('Data must be a 2D array');\n\t        }\n\t        if (nRows > 0 && nColumns > 0) {\n\t            for (; i < nRows; i++) {\n\t                if (matrix[i].length !== nColumns) {\n\t                    throw new RangeError('Inconsistent array dimensions');\n\t                } else if (newInstance) {\n\t                    matrix[i] = slice(matrix[i]);\n\t                }\n\t            }\n\t        } else {\n\t            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n\t        }\n\t    } else if (typeof nRows === 'number') { // Create empty matrix\n\t        if (nRows > 0 && nColumns > 0) {\n\t            matrix = new Array(nRows);\n\t            for (; i < nRows; i++) {\n\t                matrix[i] = new Array(nColumns);\n\t            }\n\t        } else {\n\t            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n\t        }\n\t    } else {\n\t        throw new TypeError('Invalid arguments');\n\t    }\n\t\n\t    Object.defineProperty(matrix, 'rows', {writable: true, value: nRows});\n\t    Object.defineProperty(matrix, 'columns', {writable: true, value: nColumns});\n\t\n\t    matrix.__proto__ = Matrix.prototype;\n\t\n\t    return matrix;\n\t}\n\t\n\t/**\n\t * Constructs a Matrix with the chosen dimensions from a 1D array.\n\t * @param {number} newRows - Number of rows\n\t * @param {number} newColumns - Number of columns\n\t * @param {Array} newData - A 1D array containing data for the matrix\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.from1DArray = function from1DArray(newRows, newColumns, newData) {\n\t    var length, data, i = 0;\n\t\n\t    length = newRows * newColumns;\n\t    if (length !== newData.length)\n\t        throw new RangeError('Data length does not match given dimensions');\n\t\n\t    data = new Array(newRows);\n\t    for (; i < newRows; i++) {\n\t        data[i] = newData.slice(i * newColumns, (i + 1) * newColumns);\n\t    }\n\t    return new Matrix(data);\n\t};\n\t\n\t/**\n\t * Creates a row vector, a matrix with only one row.\n\t * @param {Array} newData - A 1D array containing data for the vector\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.rowVector = function rowVector(newData) {\n\t    return new Matrix([newData]);\n\t};\n\t\n\t/**\n\t * Creates a column vector, a matrix with only one column.\n\t * @param {Array} newData - A 1D array containing data for the vector\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.columnVector = function columnVector(newData) {\n\t    var l = newData.length, vector = new Array(l);\n\t    for (var i = 0; i < l; i++)\n\t        vector[i] = [newData[i]];\n\t    return new Matrix(vector);\n\t};\n\t\n\t/**\n\t * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.empty = function empty(rows, columns) {\n\t    return new Matrix(rows, columns);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be set to zero.\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.zeros = function zeros(rows, columns) {\n\t    return Matrix.empty(rows, columns).fill(0);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be set to one.\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.ones = function ones(rows, columns) {\n\t    return Matrix.empty(rows, columns).fill(1);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be randomly set using Math.random().\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} The new matrix\n\t */\n\tMatrix.rand = function rand(rows, columns) {\n\t    var matrix = Matrix.empty(rows, columns);\n\t    for (var i = 0, ii = matrix.rows; i < ii; i++) {\n\t        for (var j = 0, jj = matrix.columns; j < jj; j++) {\n\t            matrix[i][j] = Math.random();\n\t        }\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and other will be 0.\n\t * @param {number} n - Number of rows and columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.eye = function eye(n) {\n\t    var matrix = Matrix.zeros(n, n), l = matrix.rows;\n\t    for (var i = 0; i < l; i++) {\n\t        matrix[i][i] = 1;\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates a diagonal matrix based on the given array.\n\t * @param {Array} data - Array containing the data for the diagonal\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.diag = function diag(data) {\n\t    var l = data.length, matrix = Matrix.zeros(l, l);\n\t    for (var i = 0; i < l; i++) {\n\t        matrix[i][i] = data[i];\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates an array of indices between two values\n\t * @param {number} from\n\t * @param {number} to\n\t * @returns {Array}\n\t */\n\tMatrix.indices = function indices(from, to) {\n\t    var vector = new Array(to - from);\n\t    for (var i = 0; i < vector.length; i++)\n\t        vector[i] = from++;\n\t    return vector;\n\t};\n\t\n\t// TODO DOC\n\tMatrix.stack = function stack(arg1) {\n\t    var i, j, k;\n\t    if (Matrix.isMatrix(arg1)) {\n\t        var rows = 0,\n\t            cols = 0;\n\t        for (i = 0; i < arguments.length; i++) {\n\t            rows += arguments[i].rows;\n\t            if (arguments[i].columns > cols)\n\t                cols = arguments[i].columns;\n\t        }\n\t\n\t        var r = Matrix.zeros(rows, cols);\n\t        var c = 0;\n\t        for (i = 0; i < arguments.length; i++) {\n\t            var current = arguments[i];\n\t            for (j = 0; j < current.rows; j++) {\n\t                for (k = 0; k < current.columns; k++)\n\t                    r[c][k] = current[j][k];\n\t                c++;\n\t            }\n\t        }\n\t        return r;\n\t    }\n\t    else if (Array.isArray(arg1)) {\n\t        var matrix = Matrix.empty(arguments.length, arg1.length);\n\t        for (i = 0; i < arguments.length; i++)\n\t            matrix.setRow(i, arguments[i]);\n\t        return matrix;\n\t    }\n\t};\n\t\n\t// TODO DOC\n\tMatrix.expand = function expand(base, count) {\n\t    var expansion = [];\n\t    for (var i = 0; i < count.length; i++)\n\t        for (var j = 0; j < count[i]; j++)\n\t            expansion.push(base[i]);\n\t    return new Matrix(expansion);\n\t};\n\t\n\t/**\n\t * Check that the provided value is a Matrix and tries to instantiate one if not\n\t * @param value - The value to check\n\t * @returns {Matrix}\n\t * @throws {TypeError}\n\t */\n\tMatrix.checkMatrix = function checkMatrix(value) {\n\t    if (!value) {\n\t        throw new TypeError('Argument has to be a matrix');\n\t    }\n\t    if (value.klass !== 'Matrix') {\n\t        value = new Matrix(value);\n\t    }\n\t    return value;\n\t};\n\t\n\t/**\n\t * Returns true if the argument is a Matrix, false otherwise\n\t * @param value - The value to check\n\t * @returns {boolean}\n\t */\n\tMatrix.isMatrix = function isMatrix(value) {\n\t    return value ? value.klass === 'Matrix' : false;\n\t};\n\t\n\t/**\n\t * @property {string} - The name of this class.\n\t */\n\tObject.defineProperty(Matrix.prototype, 'klass', {\n\t    get: function klass() {\n\t        return 'Matrix';\n\t    }\n\t});\n\t\n\t/**\n\t * @property {number} - The number of elements in the matrix.\n\t */\n\tObject.defineProperty(Matrix.prototype, 'size', {\n\t    get: function size() {\n\t        return this.rows * this.columns;\n\t    }\n\t});\n\t\n\t/**\n\t * @private\n\t * Internal check that a row index is not out of bounds\n\t * @param {number} index\n\t */\n\tMatrix.prototype.checkRowIndex = function checkRowIndex(index) {\n\t    if (index < 0 || index > this.rows - 1)\n\t        throw new RangeError('Row index out of range.');\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that a column index is not out of bounds\n\t * @param {number} index\n\t */\n\tMatrix.prototype.checkColumnIndex = function checkColumnIndex(index) {\n\t    if (index < 0 || index > this.columns - 1)\n\t        throw new RangeError('Column index out of range.');\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that two matrices have the same dimensions\n\t * @param {Matrix} otherMatrix\n\t */\n\tMatrix.prototype.checkDimensions = function checkDimensions(otherMatrix) {\n\t    if ((this.rows !== otherMatrix.rows) || (this.columns !== otherMatrix.columns))\n\t        throw new RangeError('Matrices dimensions must be equal.');\n\t};\n\t\n\t/**\n\t * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n\t * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.apply = function apply(callback) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            callback.call(this, i, j);\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Creates an exact and independent copy of the matrix\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.clone = function clone() {\n\t    return new Matrix(this.to2DArray());\n\t};\n\t\n\t/**\n\t * Returns a new 1D array filled row by row with the matrix values\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.to1DArray = function to1DArray() {\n\t    return Aconcat.apply([], this);\n\t};\n\t\n\t/**\n\t * Returns a 2D array containing a copy of the data\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.to2DArray = function to2DArray() {\n\t    var l = this.rows, copy = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        copy[i] = slice(this[i]);\n\t    }\n\t    return copy;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one row\n\t */\n\tMatrix.prototype.isRowVector = function isRowVector() {\n\t    return this.rows === 1;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one column\n\t */\n\tMatrix.prototype.isColumnVector = function isColumnVector() {\n\t    return this.columns === 1;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one row or one column\n\t */\n\tMatrix.prototype.isVector = function isVector() {\n\t    return (this.rows === 1) || (this.columns === 1);\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has the same number of rows and columns\n\t */\n\tMatrix.prototype.isSquare = function isSquare() {\n\t    return this.rows === this.columns;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n\t */\n\tMatrix.prototype.isSymmetric = function isSymmetric() {\n\t    if (this.isSquare()) {\n\t        var l = this.rows;\n\t        for (var i = 0; i < l; i++) {\n\t            for (var j = 0; j <= i; j++) {\n\t                if (this[i][j] !== this[j][i]) {\n\t                    return false;\n\t                }\n\t            }\n\t        }\n\t        return true;\n\t    }\n\t    return false;\n\t};\n\t\n\t/**\n\t * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n\t * @param {number} rowIndex - Index of the row\n\t * @param {number} columnIndex - Index of the column\n\t * @param {number} value - The new value for the element\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.set = function set(rowIndex, columnIndex, value) {\n\t    this[rowIndex][columnIndex] = value;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n\t * @param {number} rowIndex - Index of the row\n\t * @param {number} columnIndex - Index of the column\n\t * @returns {number}\n\t */\n\tMatrix.prototype.get = function get(rowIndex, columnIndex) {\n\t    return this[rowIndex][columnIndex];\n\t};\n\t\n\t/**\n\t * Fills the matrix with a given value. All elements will be set to this value.\n\t * @param {number} value - New value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.fill = function fill(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] = value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Negates the matrix. All elements will be multiplied by (-1)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.neg = function neg() {\n\t    return this.mulS(-1);\n\t};\n\t\n\t/**\n\t * Adds a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.add = function add(value) {\n\t    if (typeof value === 'number')\n\t        return this.addS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.addM(value);\n\t};\n\t\n\t/**\n\t * Adds a scalar to each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addS = function addS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds the value of each element of matrix to the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addM = function addM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sub = function sub(value) {\n\t    if (typeof value === 'number')\n\t        return this.subS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.subM(value);\n\t};\n\t\n\t/**\n\t * Subtracts a scalar from each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subS = function subS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the value of each element of matrix from the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subM = function subM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mul = function mul(value) {\n\t    if (typeof value === 'number')\n\t        return this.mulS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.mulM(value);\n\t};\n\t\n\t/**\n\t * Multiplies a scalar with each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulS = function mulS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the value of each element of matrix with the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulM = function mulM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides by a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.div = function div(value) {\n\t    if (typeof value === 'number')\n\t        return this.divS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.divM(value);\n\t};\n\t\n\t/**\n\t * Divides each element of the matrix by a scalar\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divS = function divS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides each element of this by the corresponding element of matrix\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divM = function divM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns a new array from the given row index\n\t * @param {number} index - Row index\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.getRow = function getRow(index) {\n\t    this.checkRowIndex(index);\n\t    return slice(this[index]);\n\t};\n\t\n\t/**\n\t * Returns a new row vector from the given row index\n\t * @param {number} index - Row index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.getRowVector = function getRowVector(index) {\n\t    return Matrix.rowVector(this.getRow(index));\n\t};\n\t\n\t/**\n\t * Sets a row at the given index\n\t * @param {number} index - Row index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.setRow = function setRow(index, array) {\n\t    this.checkRowIndex(index);\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    if (array.length !== this.columns)\n\t        throw new RangeError('Invalid row size');\n\t    this[index] = slice(array);\n\t    return this;\n\t};\n\t\n\t/**\n\t * Removes a row from the given index\n\t * @param {number} index - Row index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.removeRow = function removeRow(index) {\n\t    this.checkRowIndex(index);\n\t    if (this.rows === 1)\n\t        throw new RangeError('A matrix cannot have less than one row');\n\t    Asplice.call(this, index, 1);\n\t    this.rows -= 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds a row at the given index\n\t * @param {number} [index = this.rows] - Row index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addRow = function addRow(index, array) {\n\t    if (typeof array === 'undefined') {\n\t        array = index;\n\t        index = this.rows;\n\t    }\n\t    if (index < 0 || index > this.rows)\n\t        throw new RangeError('Row index out of range.');\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    if (array.length !== this.columns)\n\t        throw new RangeError('Invalid row size');\n\t    Asplice.call(this, index, 0, slice(array));\n\t    this.rows += 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Swaps two rows\n\t * @param {number} row1 - First row index\n\t * @param {number} row2 - Second row index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.swapRows = function swapRows(row1, row2) {\n\t    this.checkRowIndex(row1);\n\t    this.checkRowIndex(row2);\n\t    var temp = this[row1];\n\t    this[row1] = this[row2];\n\t    this[row2] = temp;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns a new array from the given column index\n\t * @param {number} index - Column index\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.getColumn = function getColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var l = this.rows, column = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        column[i] = this[i][index];\n\t    }\n\t    return column;\n\t};\n\t\n\t/**\n\t * Returns a new column vector from the given column index\n\t * @param {number} index - Column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.getColumnVector = function getColumnVector(index) {\n\t    return Matrix.columnVector(this.getColumn(index));\n\t};\n\t\n\t/**\n\t * Sets a column at the given index\n\t * @param {number} index - Column index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.setColumn = function setColumn(index, array) {\n\t    this.checkColumnIndex(index);\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    var l = this.rows;\n\t    if (array.length !== l)\n\t        throw new RangeError('Invalid column size');\n\t    for (var i = 0; i < l; i++) {\n\t        this[i][index] = array[i];\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Removes a column from the given index\n\t * @param {number} index - Column index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.removeColumn = function removeColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    if (this.columns === 1)\n\t        throw new RangeError('A matrix cannot have less than one column');\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        this[i].splice(index, 1);\n\t    }\n\t    this.columns -= 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds a column at the given index\n\t * @param {number} [index = this.columns] - Column index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addColumn = function addColumn(index, array) {\n\t    if (typeof array === 'undefined') {\n\t        array = index;\n\t        index = this.columns;\n\t    }\n\t    if (index < 0 || index > this.columns)\n\t        throw new RangeError('Column index out of range.');\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    var l = this.rows;\n\t    if (array.length !== l)\n\t        throw new RangeError('Invalid column size');\n\t    for (var i = 0; i < l; i++) {\n\t        this[i].splice(index, 0, array[i]);\n\t    }\n\t    this.columns += 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Swaps two columns\n\t * @param {number} column1 - First column index\n\t * @param {number} column2 - Second column index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.swapColumns = function swapColumns(column1, column2) {\n\t    this.checkRowIndex(column1);\n\t    this.checkRowIndex(column2);\n\t    var l = this.rows, temp, row;\n\t    for (var i = 0; i < l; i++) {\n\t        row = this[i];\n\t        temp = row[column1];\n\t        row[column1] = row[column2];\n\t        row[column2] = temp;\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that the provided vector is an array with the right length\n\t * @param {Array|Matrix} vector\n\t * @returns {Array}\n\t * @throws {RangeError}\n\t */\n\tMatrix.prototype.checkRowVector = function checkRowVector(vector) {\n\t    if (Matrix.isMatrix(vector))\n\t        vector = vector.to1DArray();\n\t    if (vector.length !== this.columns)\n\t        throw new RangeError('vector size must be the same as the number of columns');\n\t    return vector;\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that the provided vector is an array with the right length\n\t * @param {Array|Matrix} vector\n\t * @returns {Array}\n\t * @throws {RangeError}\n\t */\n\tMatrix.prototype.checkColumnVector = function checkColumnVector(vector) {\n\t    if (Matrix.isMatrix(vector))\n\t        vector = vector.to1DArray();\n\t    if (vector.length !== this.rows)\n\t        throw new RangeError('vector size must be the same as the number of rows');\n\t    return vector;\n\t};\n\t\n\t/**\n\t * Adds the values of a vector to each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addRowVector = function addRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the values of a vector from each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subRowVector = function subRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a vector with each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulRowVector = function mulRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides the values of each row by those of a vector\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divRowVector = function divRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds the values of a vector to each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addColumnVector = function addColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the values of a vector from each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subColumnVector = function subColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a vector with each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulColumnVector = function mulColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides the values of each column by those of a vector\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divColumnVector = function divColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a row with a scalar\n\t * @param {number} index - Row index\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulRow = function mulRow(index, value) {\n\t    this.checkRowIndex(index);\n\t    var i = 0, l = this.columns;\n\t    for (; i < l; i++) {\n\t        this[index][i] *= value;\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a column with a scalar\n\t * @param {number} index - Column index\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulColumn = function mulColumn(index, value) {\n\t    this.checkColumnIndex(index);\n\t    var i = 0, l = this.rows;\n\t    for (; i < l; i++) {\n\t        this[i][index] *= value;\n\t    }\n\t};\n\t\n\t/**\n\t * A matrix index\n\t * @typedef {Object} MatrixIndex\n\t * @property {number} row\n\t * @property {number} column\n\t */\n\t\n\t/**\n\t * Returns the maximum value of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.max = function max() {\n\t    var v = -Infinity;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] > v) {\n\t                v = this[i][j];\n\t            }\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxIndex = function maxIndex() {\n\t    var v = -Infinity;\n\t    var idx = {};\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] > v) {\n\t                v = this[i][j];\n\t                idx.row = i;\n\t                idx.column = j;\n\t            }\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.min = function min() {\n\t    var v = Infinity;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] < v) {\n\t                v = this[i][j];\n\t            }\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the minimum value\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minIndex = function minIndex() {\n\t    var v = Infinity;\n\t    var idx = {};\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] < v) {\n\t                v = this[i][j];\n\t                idx.row = i;\n\t                idx.column = j;\n\t            }\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.maxRow = function maxRow(index) {\n\t    this.checkRowIndex(index);\n\t    var v = -Infinity;\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] > v) {\n\t            v = this[index][i];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxRowIndex = function maxRowIndex(index) {\n\t    this.checkRowIndex(index);\n\t    var v = -Infinity;\n\t    var idx = {\n\t            row: index\n\t        };\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] > v) {\n\t            v = this[index][i];\n\t            idx.column = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of one row\n\t * @param {number} index - Row index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.minRow = function minRow(index) {\n\t    this.checkRowIndex(index);\n\t    var v = Infinity;\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] < v) {\n\t            v = this[index][i];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minRowIndex = function minRowIndex(index) {\n\t    this.checkRowIndex(index);\n\t    var v = Infinity;\n\t    var idx = {\n\t        row: index,\n\t        column: 0\n\t    };\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] < v) {\n\t            v = this[index][i];\n\t            idx.column = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the maximum value of one column\n\t * @param {number} index - Column index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.maxColumn = function maxColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = -Infinity;\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] > v) {\n\t            v = this[i][index];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one column\n\t * @param {number} index - Column index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxColumnIndex = function maxColumnIndex(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = -Infinity;\n\t    var idx = {\n\t        row: 0,\n\t        column: index\n\t    };\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] > v) {\n\t            v = this[i][index];\n\t            idx.row = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of one column\n\t * @param {number} index - Column index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.minColumn = function minColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = Infinity;\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] < v) {\n\t            v = this[i][index];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the minimum value of one column\n\t * @param {number} index - Column index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minColumnIndex = function minColumnIndex(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = Infinity;\n\t    var idx = {\n\t        row: 0,\n\t        column: index\n\t    };\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] < v) {\n\t            v = this[i][index];\n\t            idx.row = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns an array containing the diagonal values of the matrix\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.diag = function diag() {\n\t    if (!this.isSquare())\n\t        throw new TypeError('Only square matrices have a diagonal.');\n\t    var diag = new Array(this.rows);\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        diag[i] = this[i][i];\n\t    }\n\t    return diag;\n\t};\n\t\n\t/**\n\t * Returns the sum of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.sum = function sum() {\n\t    var v = 0;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            v += this[i][j];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the mean of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.mean = function mean() {\n\t    return this.sum() / this.size;\n\t};\n\t\n\t/**\n\t * Returns the product of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.prod = function prod() {\n\t    var prod = 1;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            prod *= this[i][j];\n\t        }\n\t    }\n\t    return prod;\n\t};\n\t\n\t/**\n\t * Computes the cumulative sum of the matrix elements (in place, row by row)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.cumulativeSum = function cumulativeSum() {\n\t    var sum = 0;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            sum += this[i][j];\n\t            this[i][j] = sum;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Computes the dot (scalar) product between the matrix and another\n\t * @param {Matrix} other vector\n\t * @returns {number}\n\t */\n\tMatrix.prototype.dot = function dot(other) {\n\t    if (this.size !== other.size)\n\t        throw new RangeError('vectors do not have the same size');\n\t    var vector1 = this.to1DArray();\n\t    var vector2 = other.to1DArray();\n\t    var dot = 0, l = vector1.length;\n\t    for (var i = 0; i < l; i++) {\n\t        dot += vector1[i] * vector2[i];\n\t    }\n\t    return dot;\n\t};\n\t\n\t/**\n\t * Returns the matrix product between this and other\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.mmul = function mmul(other) {\n\t    if (!Matrix.isMatrix(other))\n\t        throw new TypeError('parameter \"other\" must be a matrix');\n\t    if (this.columns !== other.rows)\n\t        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n\t\n\t    var m = this.rows, n = this.columns, p = other.columns;\n\t    var result = new Matrix(m, p);\n\t\n\t    var Bcolj = new Array(n);\n\t    var i, j, k;\n\t    for (j = 0; j < p; j++) {\n\t        for (k = 0; k < n; k++)\n\t            Bcolj[k] = other[k][j];\n\t\n\t        for (i = 0; i < m; i++) {\n\t            var Arowi = this[i];\n\t\n\t            var s = 0;\n\t            for (k = 0; k < n; k++)\n\t                s += Arowi[k] * Bcolj[k];\n\t\n\t            result[i][j] = s;\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Sorts the rows (in place)\n\t * @param {function} compareFunction - usual Array.prototype.sort comparison function\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sortRows = function sortRows(compareFunction) {\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        this[i].sort(compareFunction);\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Sorts the columns (in place)\n\t * @param {function} compareFunction - usual Array.prototype.sort comparison function\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sortColumns = function sortColumns(compareFunction) {\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Transposes the matrix and returns a new one containing the result\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.transpose = function transpose() {\n\t    var result = new Matrix(this.columns, this.rows);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[j][i] = this[i][j];\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix\n\t * @param {number} startRow - First row index\n\t * @param {number} endRow - Last row index\n\t * @param {number} startColumn - First column index\n\t * @param {number} endColumn - Last column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrix = function subMatrix(startRow, endRow, startColumn, endColumn) {\n\t    if ((startRow > endRow) || (startColumn > endColumn) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n\t        throw new RangeError('Argument out of range');\n\t    var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n\t    for (var i = startRow; i <= endRow; i++) {\n\t        for (var j = startColumn; j <= endColumn; j++) {\n\t            newMatrix[i - startRow][j - startColumn] = this[i][j];\n\t        }\n\t    }\n\t    return newMatrix;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix based on an array of row indices\n\t * @param {Array} indices - Array containing the row indices\n\t * @param {number} [startColumn = 0] - First column index\n\t * @param {number} [endColumn = this.columns-1] - Last column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrixRow = function subMatrixRow(indices, startColumn, endColumn) {\n\t    if (typeof startColumn === 'undefined') {\n\t        startColumn = 0;\n\t        endColumn = this.columns - 1;\n\t    } else if (typeof endColumn === 'undefined') {\n\t        endColumn = this.columns - 1;\n\t    }\n\t    if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n\t        throw new RangeError('Argument out of range.');\n\t    var l = indices.length, rows = this.rows,\n\t        X = new Matrix(l, endColumn - startColumn + 1);\n\t    for (var i = 0; i < l; i++) {\n\t        for (var j = startColumn; j <= endColumn; j++) {\n\t            if ((indices[i] < 0) || (indices[i] >= rows))\n\t                throw new RangeError('Argument out of range.');\n\t            X[i][j - startColumn] = this[indices[i]][j];\n\t        }\n\t    }\n\t    return X;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix based on an array of column indices\n\t * @param {Array} indices - Array containing the column indices\n\t * @param {number} [startRow = 0] - First row index\n\t * @param {number} [endRow = this.rows-1] - Last row index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrixColumn = function subMatrixColumn(indices, startRow, endRow) {\n\t    if (typeof startRow === 'undefined') {\n\t        startRow = 0;\n\t        endRow = this.rows - 1;\n\t    } else if (typeof endRow === 'undefined') {\n\t        endRow = this.rows - 1;\n\t    }\n\t    if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows))\n\t        throw new RangeError('Argument out of range.');\n\t    var l = indices.length, columns = this.columns,\n\t        X = new Matrix(endRow - startRow + 1, l);\n\t    for (var i = 0; i < l; i++) {\n\t        for (var j = startRow; j <= endRow; j++) {\n\t            if ((indices[i] < 0) || (indices[i] >= columns))\n\t                throw new RangeError('Argument out of range.');\n\t            X[j - startRow][i] = this[j][indices[i]];\n\t        }\n\t    }\n\t    return X;\n\t};\n\t\n\t/**\n\t * Returns the trace of the matrix (sum of the diagonal elements)\n\t * @returns {number}\n\t */\n\tMatrix.prototype.trace = function trace() {\n\t    if (!this.isSquare())\n\t        throw new TypeError('The matrix is not square');\n\t    var trace = 0, i = 0, l = this.rows;\n\t    for (; i < l; i++) {\n\t        trace += this[i][i];\n\t    }\n\t    return trace;\n\t};\n\t\n\t/**\n\t * Sets each element of the matrix to its absolute value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.abs = function abs() {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] = Math.abs(this[i][j]);\n\t        }\n\t    }\n\t};\n\t\n\tmodule.exports = Matrix;\n\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(20);\n\t\n\tvar SingularValueDecomposition = __webpack_require__(22);\n\tvar EigenvalueDecomposition = __webpack_require__(24);\n\tvar LuDecomposition = __webpack_require__(25);\n\tvar QrDecomposition = __webpack_require__(26);\n\tvar CholeskyDecomposition = __webpack_require__(27);\n\t\n\tfunction inverse(matrix) {\n\t    return solve(matrix, Matrix.eye(matrix.rows));\n\t}\n\t\n\tMatrix.prototype.inverse = function () {\n\t    return inverse(this);\n\t};\n\t\n\tfunction solve(leftHandSide, rightHandSide) {\n\t    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n\t}\n\t\n\tMatrix.prototype.solve = function (other) {\n\t    return solve(this, other);\n\t};\n\t\n\tmodule.exports = {\n\t    SingularValueDecomposition: SingularValueDecomposition,\n\t    SVD: SingularValueDecomposition,\n\t    EigenvalueDecomposition: EigenvalueDecomposition,\n\t    EVD: EigenvalueDecomposition,\n\t    LuDecomposition: LuDecomposition,\n\t    LU: LuDecomposition,\n\t    QrDecomposition: QrDecomposition,\n\t    QR: QrDecomposition,\n\t    CholeskyDecomposition: CholeskyDecomposition,\n\t    CHO: CholeskyDecomposition,\n\t    inverse: inverse,\n\t    solve: solve\n\t};\n\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(20);\n\tvar hypotenuse = __webpack_require__(23).hypotenuse;\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\n\tfunction SingularValueDecomposition(value, options) {\n\t    if (!(this instanceof SingularValueDecomposition)) {\n\t        return new SingularValueDecomposition(value, options);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t\n\t    options = options || {};\n\t\n\t    var a = value.clone(),\n\t        m = value.rows,\n\t        n = value.columns,\n\t        nu = Math.min(m, n);\n\t\n\t    var wantu = true, wantv = true;\n\t    if (options.computeLeftSingularVectors === false)\n\t        wantu = false;\n\t    if (options.computeRightSingularVectors === false)\n\t        wantv = false;\n\t    var autoTranspose = options.autoTranspose === true;\n\t\n\t    var swapped = false;\n\t    if (m < n) {\n\t        if (!autoTranspose) {\n\t            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n\t        } else {\n\t            a = a.transpose();\n\t            m = a.rows;\n\t            n = a.columns;\n\t            swapped = true;\n\t            var aux = wantu;\n\t            wantu = wantv;\n\t            wantv = aux;\n\t        }\n\t    }\n\t\n\t    var s = new Array(Math.min(m + 1, n)),\n\t        U = Matrix.zeros(m, nu),\n\t        V = Matrix.zeros(n, n),\n\t        e = new Array(n),\n\t        work = new Array(m);\n\t\n\t    var nct = Math.min(m - 1, n);\n\t    var nrt = Math.max(0, Math.min(n - 2, m));\n\t\n\t    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n\t        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\t\n\t    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n\t        if (k < nct) {\n\t            s[k] = 0;\n\t            for (i = k; i < m; i++) {\n\t                s[k] = hypotenuse(s[k], a[i][k]);\n\t            }\n\t            if (s[k] !== 0) {\n\t                if (a[k][k] < 0) {\n\t                    s[k] = -s[k];\n\t                }\n\t                for (i = k; i < m; i++) {\n\t                    a[i][k] /= s[k];\n\t                }\n\t                a[k][k] += 1;\n\t            }\n\t            s[k] = -s[k];\n\t        }\n\t\n\t        for (j = k + 1; j < n; j++) {\n\t            if ((k < nct) && (s[k] !== 0)) {\n\t                t = 0;\n\t                for (i = k; i < m; i++) {\n\t                    t += a[i][k] * a[i][j];\n\t                }\n\t                t = -t / a[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    a[i][j] += t * a[i][k];\n\t                }\n\t            }\n\t            e[j] = a[k][j];\n\t        }\n\t\n\t        if (wantu && (k < nct)) {\n\t            for (i = k; i < m; i++) {\n\t                U[i][k] = a[i][k];\n\t            }\n\t        }\n\t\n\t        if (k < nrt) {\n\t            e[k] = 0;\n\t            for (i = k + 1; i < n; i++) {\n\t                e[k] = hypotenuse(e[k], e[i]);\n\t            }\n\t            if (e[k] !== 0) {\n\t                if (e[k + 1] < 0)\n\t                    e[k] = -e[k];\n\t                for (i = k + 1; i < n; i++) {\n\t                    e[i] /= e[k];\n\t                }\n\t                e[k + 1] += 1;\n\t            }\n\t            e[k] = -e[k];\n\t            if ((k + 1 < m) && (e[k] !== 0)) {\n\t                for (i = k + 1; i < m; i++) {\n\t                    work[i] = 0;\n\t                }\n\t                for (j = k + 1; j < n; j++) {\n\t                    for (i = k + 1; i < m; i++) {\n\t                        work[i] += e[j] * a[i][j];\n\t                    }\n\t                }\n\t                for (j = k + 1; j < n; j++) {\n\t                    t = -e[j] / e[k + 1];\n\t                    for (i = k + 1; i < m; i++) {\n\t                        a[i][j] += t * work[i];\n\t                    }\n\t                }\n\t            }\n\t            if (wantv) {\n\t                for (i = k + 1; i < n; i++) {\n\t                    V[i][k] = e[i];\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    p = Math.min(n, m + 1);\n\t    if (nct < n) {\n\t        s[nct] = a[nct][nct];\n\t    }\n\t    if (m < p) {\n\t        s[p - 1] = 0;\n\t    }\n\t    if (nrt + 1 < p) {\n\t        e[nrt] = a[nrt][p - 1];\n\t    }\n\t    e[p - 1] = 0;\n\t\n\t    if (wantu) {\n\t        for (j = nct; j < nu; j++) {\n\t            for (i = 0; i < m; i++) {\n\t                U[i][j] = 0;\n\t            }\n\t            U[j][j] = 1;\n\t        }\n\t        for (k = nct - 1; k >= 0; k--) {\n\t            if (s[k] !== 0) {\n\t                for (j = k + 1; j < nu; j++) {\n\t                    t = 0;\n\t                    for (i = k; i < m; i++) {\n\t                        t += U[i][k] * U[i][j];\n\t                    }\n\t                    t = -t / U[k][k];\n\t                    for (i = k; i < m; i++) {\n\t                        U[i][j] += t * U[i][k];\n\t                    }\n\t                }\n\t                for (i = k; i < m; i++) {\n\t                    U[i][k] = -U[i][k];\n\t                }\n\t                U[k][k] = 1 + U[k][k];\n\t                for (i = 0; i < k - 1; i++) {\n\t                    U[i][k] = 0;\n\t                }\n\t            } else {\n\t                for (i = 0; i < m; i++) {\n\t                    U[i][k] = 0;\n\t                }\n\t                U[k][k] = 1;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (wantv) {\n\t        for (k = n - 1; k >= 0; k--) {\n\t            if ((k < nrt) && (e[k] !== 0)) {\n\t                for (j = k + 1; j < n; j++) {\n\t                    t = 0;\n\t                    for (i = k + 1; i < n; i++) {\n\t                        t += V[i][k] * V[i][j];\n\t                    }\n\t                    t = -t / V[k + 1][k];\n\t                    for (i = k + 1; i < n; i++) {\n\t                        V[i][j] += t * V[i][k];\n\t                    }\n\t                }\n\t            }\n\t            for (i = 0; i < n; i++) {\n\t                V[i][k] = 0;\n\t            }\n\t            V[k][k] = 1;\n\t        }\n\t    }\n\t\n\t    var pp = p - 1,\n\t        iter = 0,\n\t        eps = Math.pow(2, -52);\n\t    while (p > 0) {\n\t        for (k = p - 2; k >= -1; k--) {\n\t            if (k === -1) {\n\t                break;\n\t            }\n\t            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n\t                e[k] = 0;\n\t                break;\n\t            }\n\t        }\n\t        if (k === p - 2) {\n\t            kase = 4;\n\t        } else {\n\t            for (ks = p - 1; ks >= k; ks--) {\n\t                if (ks === k) {\n\t                    break;\n\t                }\n\t                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n\t                if (Math.abs(s[ks]) <= eps * t) {\n\t                    s[ks] = 0;\n\t                    break;\n\t                }\n\t            }\n\t            if (ks === k) {\n\t                kase = 3;\n\t            } else if (ks === p - 1) {\n\t                kase = 1;\n\t            } else {\n\t                kase = 2;\n\t                k = ks;\n\t            }\n\t        }\n\t\n\t        k++;\n\t\n\t        switch (kase) {\n\t            case 1: {\n\t                f = e[p - 2];\n\t                e[p - 2] = 0;\n\t                for (j = p - 2; j >= k; j--) {\n\t                    t = hypotenuse(s[j], f);\n\t                    cs = s[j] / t;\n\t                    sn = f / t;\n\t                    s[j] = t;\n\t                    if (j !== k) {\n\t                        f = -sn * e[j - 1];\n\t                        e[j - 1] = cs * e[j - 1];\n\t                    }\n\t                    if (wantv) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = cs * V[i][j] + sn * V[i][p - 1];\n\t                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n\t                            V[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t            case 2 : {\n\t                f = e[k - 1];\n\t                e[k - 1] = 0;\n\t                for (j = k; j < p; j++) {\n\t                    t = hypotenuse(s[j], f);\n\t                    cs = s[j] / t;\n\t                    sn = f / t;\n\t                    s[j] = t;\n\t                    f = -sn * e[j];\n\t                    e[j] = cs * e[j];\n\t                    if (wantu) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = cs * U[i][j] + sn * U[i][k - 1];\n\t                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n\t                            U[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t            case 3 : {\n\t                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n\t                sp = s[p - 1] / scale;\n\t                spm1 = s[p - 2] / scale;\n\t                epm1 = e[p - 2] / scale;\n\t                sk = s[k] / scale;\n\t                ek = e[k] / scale;\n\t                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n\t                c = (sp * epm1) * (sp * epm1);\n\t                shift = 0;\n\t                if ((b !== 0) || (c !== 0)) {\n\t                    shift = Math.sqrt(b * b + c);\n\t                    if (b < 0) {\n\t                        shift = -shift;\n\t                    }\n\t                    shift = c / (b + shift);\n\t                }\n\t                f = (sk + sp) * (sk - sp) + shift;\n\t                g = sk * ek;\n\t                for (j = k; j < p - 1; j++) {\n\t                    t = hypotenuse(f, g);\n\t                    cs = f / t;\n\t                    sn = g / t;\n\t                    if (j !== k) {\n\t                        e[j - 1] = t;\n\t                    }\n\t                    f = cs * s[j] + sn * e[j];\n\t                    e[j] = cs * e[j] - sn * s[j];\n\t                    g = sn * s[j + 1];\n\t                    s[j + 1] = cs * s[j + 1];\n\t                    if (wantv) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = cs * V[i][j] + sn * V[i][j + 1];\n\t                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n\t                            V[i][j] = t;\n\t                        }\n\t                    }\n\t                    t = hypotenuse(f, g);\n\t                    cs = f / t;\n\t                    sn = g / t;\n\t                    s[j] = t;\n\t                    f = cs * e[j] + sn * s[j + 1];\n\t                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n\t                    g = sn * e[j + 1];\n\t                    e[j + 1] = cs * e[j + 1];\n\t                    if (wantu && (j < m - 1)) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = cs * U[i][j] + sn * U[i][j + 1];\n\t                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n\t                            U[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                e[p - 2] = f;\n\t                iter = iter + 1;\n\t                break;\n\t            }\n\t            case 4: {\n\t                if (s[k] <= 0) {\n\t                    s[k] = (s[k] < 0 ? -s[k] : 0);\n\t                    if (wantv) {\n\t                        for (i = 0; i <= pp; i++) {\n\t                            V[i][k] = -V[i][k];\n\t                        }\n\t                    }\n\t                }\n\t                while (k < pp) {\n\t                    if (s[k] >= s[k + 1]) {\n\t                        break;\n\t                    }\n\t                    t = s[k];\n\t                    s[k] = s[k + 1];\n\t                    s[k + 1] = t;\n\t                    if (wantv && (k < n - 1)) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = V[i][k + 1];\n\t                            V[i][k + 1] = V[i][k];\n\t                            V[i][k] = t;\n\t                        }\n\t                    }\n\t                    if (wantu && (k < m - 1)) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = U[i][k + 1];\n\t                            U[i][k + 1] = U[i][k];\n\t                            U[i][k] = t;\n\t                        }\n\t                    }\n\t                    k++;\n\t                }\n\t                iter = 0;\n\t                p--;\n\t                break;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (swapped) {\n\t        var tmp = V;\n\t        V = U;\n\t        U = tmp;\n\t    }\n\t\n\t    this.m = m;\n\t    this.n = n;\n\t    this.s = s;\n\t    this.U = U;\n\t    this.V = V;\n\t}\n\t\n\tSingularValueDecomposition.prototype = {\n\t    get condition() {\n\t        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n\t    },\n\t    get norm2() {\n\t        return this.s[0];\n\t    },\n\t    get rank() {\n\t        var eps = Math.pow(2, -52),\n\t            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n\t            r = 0,\n\t            s = this.s;\n\t        for (var i = 0, ii = s.length; i < ii; i++) {\n\t            if (s[i] > tol) {\n\t                r++;\n\t            }\n\t        }\n\t        return r;\n\t    },\n\t    get diagonal() {\n\t        return this.s;\n\t    },\n\t    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n\t    get threshold() {\n\t        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n\t    },\n\t    get leftSingularVectors() {\n\t        return this.U;\n\t    },\n\t    get rightSingularVectors() {\n\t        return this.V;\n\t    },\n\t    get diagonalMatrix() {\n\t        return Matrix.diag(this.s);\n\t    },\n\t    solve: function (value) {\n\t\n\t        var Y = value,\n\t            e = this.threshold,\n\t            scols = this.s.length,\n\t            Ls = Matrix.zeros(scols, scols),\n\t            i;\n\t\n\t        for (i = 0; i < scols; i++) {\n\t            if (Math.abs(this.s[i]) <= e) {\n\t                Ls[i][i] = 0;\n\t            } else {\n\t                Ls[i][i] = 1 / this.s[i];\n\t            }\n\t        }\n\t\n\t\n\t        var VL = this.V.mmul(Ls),\n\t            vrows = this.V.rows,\n\t            urows = this.U.rows,\n\t            VLU = Matrix.zeros(vrows, urows),\n\t            j, k, sum;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < urows; j++) {\n\t                sum = 0;\n\t                for (k = 0; k < scols; k++) {\n\t                    sum += VL[i][k] * this.U[j][k];\n\t                }\n\t                VLU[i][j] = sum;\n\t            }\n\t        }\n\t\n\t        return VLU.mmul(Y);\n\t    },\n\t    solveForDiagonal: function (value) {\n\t        return this.solve(Matrix.diag(value));\n\t    },\n\t    inverse: function () {\n\t        var e = this.threshold,\n\t            vrows = this.V.rows,\n\t            vcols = this.V.columns,\n\t            X = new Matrix(vrows, this.s.length),\n\t            i, j;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < vcols; j++) {\n\t                if (Math.abs(this.s[j]) > e) {\n\t                    X[i][j] = this.V[i][j] / this.s[j];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t\n\t        var urows = this.U.rows,\n\t            ucols = this.U.columns,\n\t            Y = new Matrix(vrows, urows),\n\t            k, sum;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < urows; j++) {\n\t                sum = 0;\n\t                for (k = 0; k < ucols; k++) {\n\t                    sum += X[i][k] * this.U[j][k];\n\t                }\n\t                Y[i][j] = sum;\n\t            }\n\t        }\n\t\n\t        return Y;\n\t    }\n\t};\n\t\n\tmodule.exports = SingularValueDecomposition;\n\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.hypotenuse = function hypotenuse(a, b) {\n\t    var r;\n\t    if (Math.abs(a) > Math.abs(b)) {\n\t        r = b / a;\n\t        return Math.abs(a) * Math.sqrt(1 + r * r);\n\t    }\n\t    if (b !== 0) {\n\t        r = a / b;\n\t        return Math.abs(b) * Math.sqrt(1 + r * r);\n\t    }\n\t    return 0;\n\t};\n\n\n/***/ },\n/* 24 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(20);\n\tvar hypotenuse = __webpack_require__(23).hypotenuse;\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\n\tfunction EigenvalueDecomposition(matrix) {\n\t    if (!(this instanceof EigenvalueDecomposition)) {\n\t        return new EigenvalueDecomposition(matrix);\n\t    }\n\t    matrix = Matrix.checkMatrix(matrix);\n\t    if (!matrix.isSquare()) {\n\t        throw new Error('Matrix is not a square matrix');\n\t    }\n\t\n\t    var n = matrix.columns,\n\t        V = Matrix.zeros(n, n),\n\t        d = new Array(n),\n\t        e = new Array(n),\n\t        value = matrix,\n\t        i, j;\n\t\n\t    if (matrix.isSymmetric()) {\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                V[i][j] = value[i][j];\n\t            }\n\t        }\n\t        tred2(n, e, d, V);\n\t        tql2(n, e, d, V);\n\t    }\n\t    else {\n\t        var H = Matrix.zeros(n, n),\n\t            ort = new Array(n);\n\t        for (j = 0; j < n; j++) {\n\t            for (i = 0; i < n; i++) {\n\t                H[i][j] = value[i][j];\n\t            }\n\t        }\n\t        orthes(n, H, ort, V);\n\t        hqr2(n, e, d, V, H);\n\t    }\n\t\n\t    this.n = n;\n\t    this.e = e;\n\t    this.d = d;\n\t    this.V = V;\n\t}\n\t\n\tEigenvalueDecomposition.prototype = {\n\t    get realEigenvalues() {\n\t        return this.d;\n\t    },\n\t    get imaginaryEigenvalues() {\n\t        return this.e;\n\t    },\n\t    get eigenvectorMatrix() {\n\t        return this.V;\n\t    },\n\t    get diagonalMatrix() {\n\t        var n = this.n,\n\t            e = this.e,\n\t            d = this.d,\n\t            X = new Matrix(n, n),\n\t            i, j;\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                X[i][j] = 0;\n\t            }\n\t            X[i][i] = d[i];\n\t            if (e[i] > 0) {\n\t                X[i][i + 1] = e[i];\n\t            }\n\t            else if (e[i] < 0) {\n\t                X[i][i - 1] = e[i];\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tfunction tred2(n, e, d, V) {\n\t\n\t    var f, g, h, i, j, k,\n\t        hh, scale;\n\t\n\t    for (j = 0; j < n; j++) {\n\t        d[j] = V[n - 1][j];\n\t    }\n\t\n\t    for (i = n - 1; i > 0; i--) {\n\t        scale = 0;\n\t        h = 0;\n\t        for (k = 0; k < i; k++) {\n\t            scale = scale + Math.abs(d[k]);\n\t        }\n\t\n\t        if (scale === 0) {\n\t            e[i] = d[i - 1];\n\t            for (j = 0; j < i; j++) {\n\t                d[j] = V[i - 1][j];\n\t                V[i][j] = 0;\n\t                V[j][i] = 0;\n\t            }\n\t        } else {\n\t            for (k = 0; k < i; k++) {\n\t                d[k] /= scale;\n\t                h += d[k] * d[k];\n\t            }\n\t\n\t            f = d[i - 1];\n\t            g = Math.sqrt(h);\n\t            if (f > 0) {\n\t                g = -g;\n\t            }\n\t\n\t            e[i] = scale * g;\n\t            h = h - f * g;\n\t            d[i - 1] = f - g;\n\t            for (j = 0; j < i; j++) {\n\t                e[j] = 0;\n\t            }\n\t\n\t            for (j = 0; j < i; j++) {\n\t                f = d[j];\n\t                V[j][i] = f;\n\t                g = e[j] + V[j][j] * f;\n\t                for (k = j + 1; k <= i - 1; k++) {\n\t                    g += V[k][j] * d[k];\n\t                    e[k] += V[k][j] * f;\n\t                }\n\t                e[j] = g;\n\t            }\n\t\n\t            f = 0;\n\t            for (j = 0; j < i; j++) {\n\t                e[j] /= h;\n\t                f += e[j] * d[j];\n\t            }\n\t\n\t            hh = f / (h + h);\n\t            for (j = 0; j < i; j++) {\n\t                e[j] -= hh * d[j];\n\t            }\n\t\n\t            for (j = 0; j < i; j++) {\n\t                f = d[j];\n\t                g = e[j];\n\t                for (k = j; k <= i - 1; k++) {\n\t                    V[k][j] -= (f * e[k] + g * d[k]);\n\t                }\n\t                d[j] = V[i - 1][j];\n\t                V[i][j] = 0;\n\t            }\n\t        }\n\t        d[i] = h;\n\t    }\n\t\n\t    for (i = 0; i < n - 1; i++) {\n\t        V[n - 1][i] = V[i][i];\n\t        V[i][i] = 1;\n\t        h = d[i + 1];\n\t        if (h !== 0) {\n\t            for (k = 0; k <= i; k++) {\n\t                d[k] = V[k][i + 1] / h;\n\t            }\n\t\n\t            for (j = 0; j <= i; j++) {\n\t                g = 0;\n\t                for (k = 0; k <= i; k++) {\n\t                    g += V[k][i + 1] * V[k][j];\n\t                }\n\t                for (k = 0; k <= i; k++) {\n\t                    V[k][j] -= g * d[k];\n\t                }\n\t            }\n\t        }\n\t\n\t        for (k = 0; k <= i; k++) {\n\t            V[k][i + 1] = 0;\n\t        }\n\t    }\n\t\n\t    for (j = 0; j < n; j++) {\n\t        d[j] = V[n - 1][j];\n\t        V[n - 1][j] = 0;\n\t    }\n\t\n\t    V[n - 1][n - 1] = 1;\n\t    e[0] = 0;\n\t}\n\t\n\tfunction tql2(n, e, d, V) {\n\t\n\t    var g, h, i, j, k, l, m, p, r,\n\t        dl1, c, c2, c3, el1, s, s2,\n\t        iter;\n\t\n\t    for (i = 1; i < n; i++) {\n\t        e[i - 1] = e[i];\n\t    }\n\t\n\t    e[n - 1] = 0;\n\t\n\t    var f = 0,\n\t        tst1 = 0,\n\t        eps = Math.pow(2, -52);\n\t\n\t    for (l = 0; l < n; l++) {\n\t        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n\t        m = l;\n\t        while (m < n) {\n\t            if (Math.abs(e[m]) <= eps * tst1) {\n\t                break;\n\t            }\n\t            m++;\n\t        }\n\t\n\t        if (m > l) {\n\t            iter = 0;\n\t            do {\n\t                iter = iter + 1;\n\t\n\t                g = d[l];\n\t                p = (d[l + 1] - g) / (2 * e[l]);\n\t                r = hypotenuse(p, 1);\n\t                if (p < 0) {\n\t                    r = -r;\n\t                }\n\t\n\t                d[l] = e[l] / (p + r);\n\t                d[l + 1] = e[l] * (p + r);\n\t                dl1 = d[l + 1];\n\t                h = g - d[l];\n\t                for (i = l + 2; i < n; i++) {\n\t                    d[i] -= h;\n\t                }\n\t\n\t                f = f + h;\n\t\n\t                p = d[m];\n\t                c = 1;\n\t                c2 = c;\n\t                c3 = c;\n\t                el1 = e[l + 1];\n\t                s = 0;\n\t                s2 = 0;\n\t                for (i = m - 1; i >= l; i--) {\n\t                    c3 = c2;\n\t                    c2 = c;\n\t                    s2 = s;\n\t                    g = c * e[i];\n\t                    h = c * p;\n\t                    r = hypotenuse(p, e[i]);\n\t                    e[i + 1] = s * r;\n\t                    s = e[i] / r;\n\t                    c = p / r;\n\t                    p = c * d[i] - s * g;\n\t                    d[i + 1] = h + s * (c * g + s * d[i]);\n\t\n\t                    for (k = 0; k < n; k++) {\n\t                        h = V[k][i + 1];\n\t                        V[k][i + 1] = s * V[k][i] + c * h;\n\t                        V[k][i] = c * V[k][i] - s * h;\n\t                    }\n\t                }\n\t\n\t                p = -s * s2 * c3 * el1 * e[l] / dl1;\n\t                e[l] = s * p;\n\t                d[l] = c * p;\n\t\n\t            }\n\t            while (Math.abs(e[l]) > eps * tst1);\n\t        }\n\t        d[l] = d[l] + f;\n\t        e[l] = 0;\n\t    }\n\t\n\t    for (i = 0; i < n - 1; i++) {\n\t        k = i;\n\t        p = d[i];\n\t        for (j = i + 1; j < n; j++) {\n\t            if (d[j] < p) {\n\t                k = j;\n\t                p = d[j];\n\t            }\n\t        }\n\t\n\t        if (k !== i) {\n\t            d[k] = d[i];\n\t            d[i] = p;\n\t            for (j = 0; j < n; j++) {\n\t                p = V[j][i];\n\t                V[j][i] = V[j][k];\n\t                V[j][k] = p;\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction orthes(n, H, ort, V) {\n\t\n\t    var low = 0,\n\t        high = n - 1,\n\t        f, g, h, i, j, m,\n\t        scale;\n\t\n\t    for (m = low + 1; m <= high - 1; m++) {\n\t        scale = 0;\n\t        for (i = m; i <= high; i++) {\n\t            scale = scale + Math.abs(H[i][m - 1]);\n\t        }\n\t\n\t        if (scale !== 0) {\n\t            h = 0;\n\t            for (i = high; i >= m; i--) {\n\t                ort[i] = H[i][m - 1] / scale;\n\t                h += ort[i] * ort[i];\n\t            }\n\t\n\t            g = Math.sqrt(h);\n\t            if (ort[m] > 0) {\n\t                g = -g;\n\t            }\n\t\n\t            h = h - ort[m] * g;\n\t            ort[m] = ort[m] - g;\n\t\n\t            for (j = m; j < n; j++) {\n\t                f = 0;\n\t                for (i = high; i >= m; i--) {\n\t                    f += ort[i] * H[i][j];\n\t                }\n\t\n\t                f = f / h;\n\t                for (i = m; i <= high; i++) {\n\t                    H[i][j] -= f * ort[i];\n\t                }\n\t            }\n\t\n\t            for (i = 0; i <= high; i++) {\n\t                f = 0;\n\t                for (j = high; j >= m; j--) {\n\t                    f += ort[j] * H[i][j];\n\t                }\n\t\n\t                f = f / h;\n\t                for (j = m; j <= high; j++) {\n\t                    H[i][j] -= f * ort[j];\n\t                }\n\t            }\n\t\n\t            ort[m] = scale * ort[m];\n\t            H[m][m - 1] = scale * g;\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < n; i++) {\n\t        for (j = 0; j < n; j++) {\n\t            V[i][j] = (i === j ? 1 : 0);\n\t        }\n\t    }\n\t\n\t    for (m = high - 1; m >= low + 1; m--) {\n\t        if (H[m][m - 1] !== 0) {\n\t            for (i = m + 1; i <= high; i++) {\n\t                ort[i] = H[i][m - 1];\n\t            }\n\t\n\t            for (j = m; j <= high; j++) {\n\t                g = 0;\n\t                for (i = m; i <= high; i++) {\n\t                    g += ort[i] * V[i][j];\n\t                }\n\t\n\t                g = (g / ort[m]) / H[m][m - 1];\n\t                for (i = m; i <= high; i++) {\n\t                    V[i][j] += g * ort[i];\n\t                }\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction hqr2(nn, e, d, V, H) {\n\t    var n = nn - 1,\n\t        low = 0,\n\t        high = nn - 1,\n\t        eps = Math.pow(2, -52),\n\t        exshift = 0,\n\t        norm = 0,\n\t        p = 0,\n\t        q = 0,\n\t        r = 0,\n\t        s = 0,\n\t        z = 0,\n\t        iter = 0,\n\t        i, j, k, l, m, t, w, x, y,\n\t        ra, sa, vr, vi,\n\t        notlast, cdivres;\n\t\n\t    for (i = 0; i < nn; i++) {\n\t        if (i < low || i > high) {\n\t            d[i] = H[i][i];\n\t            e[i] = 0;\n\t        }\n\t\n\t        for (j = Math.max(i - 1, 0); j < nn; j++) {\n\t            norm = norm + Math.abs(H[i][j]);\n\t        }\n\t    }\n\t\n\t    while (n >= low) {\n\t        l = n;\n\t        while (l > low) {\n\t            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n\t            if (s === 0) {\n\t                s = norm;\n\t            }\n\t            if (Math.abs(H[l][l - 1]) < eps * s) {\n\t                break;\n\t            }\n\t            l--;\n\t        }\n\t\n\t        if (l === n) {\n\t            H[n][n] = H[n][n] + exshift;\n\t            d[n] = H[n][n];\n\t            e[n] = 0;\n\t            n--;\n\t            iter = 0;\n\t        } else if (l === n - 1) {\n\t            w = H[n][n - 1] * H[n - 1][n];\n\t            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n\t            q = p * p + w;\n\t            z = Math.sqrt(Math.abs(q));\n\t            H[n][n] = H[n][n] + exshift;\n\t            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n\t            x = H[n][n];\n\t\n\t            if (q >= 0) {\n\t                z = (p >= 0) ? (p + z) : (p - z);\n\t                d[n - 1] = x + z;\n\t                d[n] = d[n - 1];\n\t                if (z !== 0) {\n\t                    d[n] = x - w / z;\n\t                }\n\t                e[n - 1] = 0;\n\t                e[n] = 0;\n\t                x = H[n][n - 1];\n\t                s = Math.abs(x) + Math.abs(z);\n\t                p = x / s;\n\t                q = z / s;\n\t                r = Math.sqrt(p * p + q * q);\n\t                p = p / r;\n\t                q = q / r;\n\t\n\t                for (j = n - 1; j < nn; j++) {\n\t                    z = H[n - 1][j];\n\t                    H[n - 1][j] = q * z + p * H[n][j];\n\t                    H[n][j] = q * H[n][j] - p * z;\n\t                }\n\t\n\t                for (i = 0; i <= n; i++) {\n\t                    z = H[i][n - 1];\n\t                    H[i][n - 1] = q * z + p * H[i][n];\n\t                    H[i][n] = q * H[i][n] - p * z;\n\t                }\n\t\n\t                for (i = low; i <= high; i++) {\n\t                    z = V[i][n - 1];\n\t                    V[i][n - 1] = q * z + p * V[i][n];\n\t                    V[i][n] = q * V[i][n] - p * z;\n\t                }\n\t            } else {\n\t                d[n - 1] = x + p;\n\t                d[n] = x + p;\n\t                e[n - 1] = z;\n\t                e[n] = -z;\n\t            }\n\t\n\t            n = n - 2;\n\t            iter = 0;\n\t        } else {\n\t            x = H[n][n];\n\t            y = 0;\n\t            w = 0;\n\t            if (l < n) {\n\t                y = H[n - 1][n - 1];\n\t                w = H[n][n - 1] * H[n - 1][n];\n\t            }\n\t\n\t            if (iter === 10) {\n\t                exshift += x;\n\t                for (i = low; i <= n; i++) {\n\t                    H[i][i] -= x;\n\t                }\n\t                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n\t                x = y = 0.75 * s;\n\t                w = -0.4375 * s * s;\n\t            }\n\t\n\t            if (iter === 30) {\n\t                s = (y - x) / 2;\n\t                s = s * s + w;\n\t                if (s > 0) {\n\t                    s = Math.sqrt(s);\n\t                    if (y < x) {\n\t                        s = -s;\n\t                    }\n\t                    s = x - w / ((y - x) / 2 + s);\n\t                    for (i = low; i <= n; i++) {\n\t                        H[i][i] -= s;\n\t                    }\n\t                    exshift += s;\n\t                    x = y = w = 0.964;\n\t                }\n\t            }\n\t\n\t            iter = iter + 1;\n\t\n\t            m = n - 2;\n\t            while (m >= l) {\n\t                z = H[m][m];\n\t                r = x - z;\n\t                s = y - z;\n\t                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n\t                q = H[m + 1][m + 1] - z - r - s;\n\t                r = H[m + 2][m + 1];\n\t                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n\t                p = p / s;\n\t                q = q / s;\n\t                r = r / s;\n\t                if (m === l) {\n\t                    break;\n\t                }\n\t                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n\t                    break;\n\t                }\n\t                m--;\n\t            }\n\t\n\t            for (i = m + 2; i <= n; i++) {\n\t                H[i][i - 2] = 0;\n\t                if (i > m + 2) {\n\t                    H[i][i - 3] = 0;\n\t                }\n\t            }\n\t\n\t            for (k = m; k <= n - 1; k++) {\n\t                notlast = (k !== n - 1);\n\t                if (k !== m) {\n\t                    p = H[k][k - 1];\n\t                    q = H[k + 1][k - 1];\n\t                    r = (notlast ? H[k + 2][k - 1] : 0);\n\t                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n\t                    if (x !== 0) {\n\t                        p = p / x;\n\t                        q = q / x;\n\t                        r = r / x;\n\t                    }\n\t                }\n\t\n\t                if (x === 0) {\n\t                    break;\n\t                }\n\t\n\t                s = Math.sqrt(p * p + q * q + r * r);\n\t                if (p < 0) {\n\t                    s = -s;\n\t                }\n\t\n\t                if (s !== 0) {\n\t                    if (k !== m) {\n\t                        H[k][k - 1] = -s * x;\n\t                    } else if (l !== m) {\n\t                        H[k][k - 1] = -H[k][k - 1];\n\t                    }\n\t\n\t                    p = p + s;\n\t                    x = p / s;\n\t                    y = q / s;\n\t                    z = r / s;\n\t                    q = q / p;\n\t                    r = r / p;\n\t\n\t                    for (j = k; j < nn; j++) {\n\t                        p = H[k][j] + q * H[k + 1][j];\n\t                        if (notlast) {\n\t                            p = p + r * H[k + 2][j];\n\t                            H[k + 2][j] = H[k + 2][j] - p * z;\n\t                        }\n\t\n\t                        H[k][j] = H[k][j] - p * x;\n\t                        H[k + 1][j] = H[k + 1][j] - p * y;\n\t                    }\n\t\n\t                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n\t                        p = x * H[i][k] + y * H[i][k + 1];\n\t                        if (notlast) {\n\t                            p = p + z * H[i][k + 2];\n\t                            H[i][k + 2] = H[i][k + 2] - p * r;\n\t                        }\n\t\n\t                        H[i][k] = H[i][k] - p;\n\t                        H[i][k + 1] = H[i][k + 1] - p * q;\n\t                    }\n\t\n\t                    for (i = low; i <= high; i++) {\n\t                        p = x * V[i][k] + y * V[i][k + 1];\n\t                        if (notlast) {\n\t                            p = p + z * V[i][k + 2];\n\t                            V[i][k + 2] = V[i][k + 2] - p * r;\n\t                        }\n\t\n\t                        V[i][k] = V[i][k] - p;\n\t                        V[i][k + 1] = V[i][k + 1] - p * q;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    if (norm === 0) {\n\t        return;\n\t    }\n\t\n\t    for (n = nn - 1; n >= 0; n--) {\n\t        p = d[n];\n\t        q = e[n];\n\t\n\t        if (q === 0) {\n\t            l = n;\n\t            H[n][n] = 1;\n\t            for (i = n - 1; i >= 0; i--) {\n\t                w = H[i][i] - p;\n\t                r = 0;\n\t                for (j = l; j <= n; j++) {\n\t                    r = r + H[i][j] * H[j][n];\n\t                }\n\t\n\t                if (e[i] < 0) {\n\t                    z = w;\n\t                    s = r;\n\t                } else {\n\t                    l = i;\n\t                    if (e[i] === 0) {\n\t                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n\t                    } else {\n\t                        x = H[i][i + 1];\n\t                        y = H[i + 1][i];\n\t                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n\t                        t = (x * s - z * r) / q;\n\t                        H[i][n] = t;\n\t                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n\t                    }\n\t\n\t                    t = Math.abs(H[i][n]);\n\t                    if ((eps * t) * t > 1) {\n\t                        for (j = i; j <= n; j++) {\n\t                            H[j][n] = H[j][n] / t;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        } else if (q < 0) {\n\t            l = n - 1;\n\t\n\t            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n\t                H[n - 1][n - 1] = q / H[n][n - 1];\n\t                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n\t            } else {\n\t                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n\t                H[n - 1][n - 1] = cdivres[0];\n\t                H[n - 1][n] = cdivres[1];\n\t            }\n\t\n\t            H[n][n - 1] = 0;\n\t            H[n][n] = 1;\n\t            for (i = n - 2; i >= 0; i--) {\n\t                ra = 0;\n\t                sa = 0;\n\t                for (j = l; j <= n; j++) {\n\t                    ra = ra + H[i][j] * H[j][n - 1];\n\t                    sa = sa + H[i][j] * H[j][n];\n\t                }\n\t\n\t                w = H[i][i] - p;\n\t\n\t                if (e[i] < 0) {\n\t                    z = w;\n\t                    r = ra;\n\t                    s = sa;\n\t                } else {\n\t                    l = i;\n\t                    if (e[i] === 0) {\n\t                        cdivres = cdiv(-ra, -sa, w, q);\n\t                        H[i][n - 1] = cdivres[0];\n\t                        H[i][n] = cdivres[1];\n\t                    } else {\n\t                        x = H[i][i + 1];\n\t                        y = H[i + 1][i];\n\t                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n\t                        vi = (d[i] - p) * 2 * q;\n\t                        if (vr === 0 && vi === 0) {\n\t                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n\t                        }\n\t                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n\t                        H[i][n - 1] = cdivres[0];\n\t                        H[i][n] = cdivres[1];\n\t                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n\t                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n\t                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n\t                        } else {\n\t                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n\t                            H[i + 1][n - 1] = cdivres[0];\n\t                            H[i + 1][n] = cdivres[1];\n\t                        }\n\t                    }\n\t\n\t                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n\t                    if ((eps * t) * t > 1) {\n\t                        for (j = i; j <= n; j++) {\n\t                            H[j][n - 1] = H[j][n - 1] / t;\n\t                            H[j][n] = H[j][n] / t;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < nn; i++) {\n\t        if (i < low || i > high) {\n\t            for (j = i; j < nn; j++) {\n\t                V[i][j] = H[i][j];\n\t            }\n\t        }\n\t    }\n\t\n\t    for (j = nn - 1; j >= low; j--) {\n\t        for (i = low; i <= high; i++) {\n\t            z = 0;\n\t            for (k = low; k <= Math.min(j, high); k++) {\n\t                z = z + V[i][k] * H[k][j];\n\t            }\n\t            V[i][j] = z;\n\t        }\n\t    }\n\t}\n\t\n\tfunction cdiv(xr, xi, yr, yi) {\n\t    var r, d;\n\t    if (Math.abs(yr) > Math.abs(yi)) {\n\t        r = yi / yr;\n\t        d = yr + r * yi;\n\t        return [(xr + r * xi) / d, (xi - r * xr) / d];\n\t    }\n\t    else {\n\t        r = yr / yi;\n\t        d = yi + r * yr;\n\t        return [(r * xr + xi) / d, (r * xi - xr) / d];\n\t    }\n\t}\n\t\n\tmodule.exports = EigenvalueDecomposition;\n\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(20);\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\n\tfunction LuDecomposition(matrix) {\n\t    if (!(this instanceof LuDecomposition)) {\n\t        return new LuDecomposition(matrix);\n\t    }\n\t    matrix = Matrix.checkMatrix(matrix);\n\t\n\t    var lu = matrix.clone(),\n\t        rows = lu.rows,\n\t        columns = lu.columns,\n\t        pivotVector = new Array(rows),\n\t        pivotSign = 1,\n\t        i, j, k, p, s, t, v,\n\t        LUrowi, LUcolj, kmax;\n\t\n\t    for (i = 0; i < rows; i++) {\n\t        pivotVector[i] = i;\n\t    }\n\t\n\t    LUcolj = new Array(rows);\n\t\n\t    for (j = 0; j < columns; j++) {\n\t\n\t        for (i = 0; i < rows; i++) {\n\t            LUcolj[i] = lu[i][j];\n\t        }\n\t\n\t        for (i = 0; i < rows; i++) {\n\t            LUrowi = lu[i];\n\t            kmax = Math.min(i, j);\n\t            s = 0;\n\t            for (k = 0; k < kmax; k++) {\n\t                s += LUrowi[k] * LUcolj[k];\n\t            }\n\t            LUrowi[j] = LUcolj[i] -= s;\n\t        }\n\t\n\t        p = j;\n\t        for (i = j + 1; i < rows; i++) {\n\t            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n\t                p = i;\n\t            }\n\t        }\n\t\n\t        if (p !== j) {\n\t            for (k = 0; k < columns; k++) {\n\t                t = lu[p][k];\n\t                lu[p][k] = lu[j][k];\n\t                lu[j][k] = t;\n\t            }\n\t\n\t            v = pivotVector[p];\n\t            pivotVector[p] = pivotVector[j];\n\t            pivotVector[j] = v;\n\t\n\t            pivotSign = -pivotSign;\n\t        }\n\t\n\t        if (j < rows && lu[j][j] !== 0) {\n\t            for (i = j + 1; i < rows; i++) {\n\t                lu[i][j] /= lu[j][j];\n\t            }\n\t        }\n\t    }\n\t\n\t    this.LU = lu;\n\t    this.pivotVector = pivotVector;\n\t    this.pivotSign = pivotSign;\n\t}\n\t\n\tLuDecomposition.prototype = {\n\t    isSingular: function () {\n\t        var data = this.LU,\n\t            col = data.columns;\n\t        for (var j = 0; j < col; j++) {\n\t            if (data[j][j] === 0) {\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    },\n\t    get determinant() {\n\t        var data = this.LU;\n\t        if (!data.isSquare())\n\t            throw new Error('Matrix must be square');\n\t        var determinant = this.pivotSign, col = data.columns;\n\t        for (var j = 0; j < col; j++)\n\t            determinant *= data[j][j];\n\t        return determinant;\n\t    },\n\t    get lowerTriangularFactor() {\n\t        var data = this.LU,\n\t            rows = data.rows,\n\t            columns = data.columns,\n\t            X = new Matrix(rows, columns);\n\t        for (var i = 0; i < rows; i++) {\n\t            for (var j = 0; j < columns; j++) {\n\t                if (i > j) {\n\t                    X[i][j] = data[i][j];\n\t                } else if (i === j) {\n\t                    X[i][j] = 1;\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get upperTriangularFactor() {\n\t        var data = this.LU,\n\t            rows = data.rows,\n\t            columns = data.columns,\n\t            X = new Matrix(rows, columns);\n\t        for (var i = 0; i < rows; i++) {\n\t            for (var j = 0; j < columns; j++) {\n\t                if (i <= j) {\n\t                    X[i][j] = data[i][j];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get pivotPermutationVector() {\n\t        return this.pivotVector.slice();\n\t    },\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var lu = this.LU,\n\t            rows = lu.rows;\n\t\n\t        if (rows !== value.rows)\n\t            throw new Error('Invalid matrix dimensions');\n\t        if (this.isSingular())\n\t            throw new Error('LU matrix is singular');\n\t\n\t        var count = value.columns,\n\t            X = value.subMatrixRow(this.pivotVector, 0, count - 1),\n\t            columns = lu.columns,\n\t            i, j, k;\n\t\n\t        for (k = 0; k < columns; k++) {\n\t            for (i = k + 1; i < columns; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * lu[i][k];\n\t                }\n\t            }\n\t        }\n\t        for (k = columns - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                X[k][j] /= lu[k][k];\n\t            }\n\t            for (i = 0; i < k; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * lu[i][k];\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tmodule.exports = LuDecomposition;\n\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(20);\n\tvar hypotenuse = __webpack_require__(23).hypotenuse;\n\t\n\t//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\n\tfunction QrDecomposition(value) {\n\t    if (!(this instanceof QrDecomposition)) {\n\t        return new QrDecomposition(value);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t\n\t    var qr = value.clone(),\n\t        m = value.rows,\n\t        n = value.columns,\n\t        rdiag = new Array(n),\n\t        i, j, k, s;\n\t\n\t    for (k = 0; k < n; k++) {\n\t        var nrm = 0;\n\t        for (i = k; i < m; i++) {\n\t            nrm = hypotenuse(nrm, qr[i][k]);\n\t        }\n\t        if (nrm !== 0) {\n\t            if (qr[k][k] < 0) {\n\t                nrm = -nrm;\n\t            }\n\t            for (i = k; i < m; i++) {\n\t                qr[i][k] /= nrm;\n\t            }\n\t            qr[k][k] += 1;\n\t            for (j = k + 1; j < n; j++) {\n\t                s = 0;\n\t                for (i = k; i < m; i++) {\n\t                    s += qr[i][k] * qr[i][j];\n\t                }\n\t                s = -s / qr[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    qr[i][j] += s * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t        rdiag[k] = -nrm;\n\t    }\n\t\n\t    this.QR = qr;\n\t    this.Rdiag = rdiag;\n\t}\n\t\n\tQrDecomposition.prototype = {\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var qr = this.QR,\n\t            m = qr.rows;\n\t\n\t        if (value.rows !== m)\n\t            throw new Error('Matrix row dimensions must agree');\n\t        if (!this.isFullRank())\n\t            throw new Error('Matrix is rank deficient');\n\t\n\t        var count = value.columns,\n\t            X = value.clone(),\n\t            n = qr.columns,\n\t            i, j, k, s;\n\t\n\t        for (k = 0; k < n; k++) {\n\t            for (j = 0; j < count; j++) {\n\t                s = 0;\n\t                for (i = k; i < m; i++) {\n\t                    s += qr[i][k] * X[i][j];\n\t                }\n\t                s = -s / qr[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    X[i][j] += s * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t        for (k = n - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                X[k][j] /= this.Rdiag[k];\n\t            }\n\t            for (i = 0; i < k; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t\n\t        return X.subMatrix(0, n - 1, 0, count - 1);\n\t    },\n\t    isFullRank: function () {\n\t        var columns = this.QR.columns;\n\t        for (var i = 0; i < columns; i++) {\n\t            if (this.Rdiag[i] === 0) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    },\n\t    get upperTriangularFactor() {\n\t        var qr = this.QR,\n\t            n = qr.columns,\n\t            X = new Matrix(n, n),\n\t            i, j;\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                if (i < j) {\n\t                    X[i][j] = qr[i][j];\n\t                } else if (i === j) {\n\t                    X[i][j] = this.Rdiag[i];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get orthogonalFactor() {\n\t        var qr = this.QR,\n\t            rows = qr.rows,\n\t            columns = qr.columns,\n\t            X = new Matrix(rows, columns),\n\t            i, j, k, s;\n\t\n\t        for (k = columns - 1; k >= 0; k--) {\n\t            for (i = 0; i < rows; i++) {\n\t                X[i][k] = 0;\n\t            }\n\t            X[k][k] = 1;\n\t            for (j = k; j < columns; j++) {\n\t                if (qr[k][k] !== 0) {\n\t                    s = 0;\n\t                    for (i = k; i < rows; i++) {\n\t                        s += qr[i][k] * X[i][j];\n\t                    }\n\t\n\t                    s = -s / qr[k][k];\n\t\n\t                    for (i = k; i < rows; i++) {\n\t                        X[i][j] += s * qr[i][k];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tmodule.exports = QrDecomposition;\n\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(20);\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\n\tfunction CholeskyDecomposition(value) {\n\t    if (!(this instanceof CholeskyDecomposition)) {\n\t        return new CholeskyDecomposition(value);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t    if (!value.isSymmetric())\n\t        throw new Error('Matrix is not symmetric');\n\t\n\t    var a = value,\n\t        dimension = a.rows,\n\t        l = new Matrix(dimension, dimension),\n\t        positiveDefinite = true,\n\t        i, j, k;\n\t\n\t    for (j = 0; j < dimension; j++) {\n\t        var Lrowj = l[j];\n\t        var d = 0;\n\t        for (k = 0; k < j; k++) {\n\t            var Lrowk = l[k];\n\t            var s = 0;\n\t            for (i = 0; i < k; i++) {\n\t                s += Lrowk[i] * Lrowj[i];\n\t            }\n\t            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n\t            d = d + s * s;\n\t        }\n\t\n\t        d = a[j][j] - d;\n\t\n\t        positiveDefinite &= (d > 0);\n\t        l[j][j] = Math.sqrt(Math.max(d, 0));\n\t        for (k = j + 1; k < dimension; k++) {\n\t            l[j][k] = 0;\n\t        }\n\t    }\n\t\n\t    if (!positiveDefinite) {\n\t        throw new Error('Matrix is not positive definite');\n\t    }\n\t\n\t    this.L = l;\n\t}\n\t\n\tCholeskyDecomposition.prototype = {\n\t    get leftTriangularFactor() {\n\t        return this.L;\n\t    },\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var l = this.L,\n\t            dimension = l.rows;\n\t\n\t        if (value.rows !== dimension) {\n\t            throw new Error('Matrix dimensions do not match');\n\t        }\n\t\n\t        var count = value.columns,\n\t            B = value.clone(),\n\t            i, j, k;\n\t\n\t        for (k = 0; k < dimension; k++) {\n\t            for (j = 0; j < count; j++) {\n\t                for (i = 0; i < k; i++) {\n\t                    B[k][j] -= B[i][j] * l[k][i];\n\t                }\n\t                B[k][j] /= l[k][k];\n\t            }\n\t        }\n\t\n\t        for (k = dimension - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                for (i = k + 1; i < dimension; i++) {\n\t                    B[k][j] -= B[i][j] * l[i][k];\n\t                }\n\t                B[k][j] /= l[k][k];\n\t            }\n\t        }\n\t\n\t        return B;\n\t    }\n\t};\n\t\n\tmodule.exports = CholeskyDecomposition;\n\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.distance = __webpack_require__(29);\n\texports.similarity = __webpack_require__(74);\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\texports.additiveSymmetric = __webpack_require__(30);\n\texports.avg = __webpack_require__(31);\n\texports.bhattacharyya = __webpack_require__(32);\n\texports.canberra = __webpack_require__(33);\n\texports.chebyshev = __webpack_require__(34);\n\texports.clark = __webpack_require__(35);\n\texports.czekanowski = __webpack_require__(36);\n\texports.dice = __webpack_require__(37);\n\texports.divergence = __webpack_require__(38);\n\texports.euclidean = __webpack_require__(39);\n\texports.fidelity = __webpack_require__(40);\n\texports.gower = __webpack_require__(41);\n\texports.harmonicMean = __webpack_require__(42);\n\texports.hellinger = __webpack_require__(43);\n\texports.innerProduct = __webpack_require__(44);\n\texports.intersection = __webpack_require__(45);\n\texports.jaccard = __webpack_require__(46);\n\texports.jeffreys = __webpack_require__(47);\n\texports.jensenDifference = __webpack_require__(48);\n\texports.jensenShannon = __webpack_require__(49);\n\texports.kdivergence = __webpack_require__(50);\n\texports.kulczynski = __webpack_require__(51);\n\texports.kullbackLeibler = __webpack_require__(52);\n\texports.kumarHassebrook = __webpack_require__(53);\n\texports.kumarJohnson = __webpack_require__(54);\n\texports.lorentzian = __webpack_require__(55);\n\texports.manhattan = __webpack_require__(56);\n\texports.matusita = __webpack_require__(57);\n\texports.minkowski = __webpack_require__(58);\n\texports.motyka = __webpack_require__(59);\n\texports.neyman = __webpack_require__(60);\n\texports.pearson = __webpack_require__(61);\n\texports.probabilisticSymmetric = __webpack_require__(62);\n\texports.ruzicka = __webpack_require__(63);\n\texports.soergel = __webpack_require__(64);\n\texports.sorensen = __webpack_require__(65);\n\texports.squared = __webpack_require__(66);\n\texports.squaredChord = __webpack_require__(67);\n\texports.squaredEuclidean = __webpack_require__(39).squared;\n\texports.taneja = __webpack_require__(68);\n\texports.tanimoto = __webpack_require__(69);\n\texports.topsoe = __webpack_require__(71);\n\texports.tree = __webpack_require__(72);\n\texports.waveHedges = __webpack_require__(73);\n\n\n/***/ },\n/* 30 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function additiveSymmetric(a, b) {\n\t    var i = 0,\n\t        ii = a.length,\n\t        d = 0;\n\t    for (; i < ii; i++) {\n\t        d += ((a[i] - b[i]) * (a[i] - b[i]) * (a[i] + b[i])) / (a[i] * b[i]);\n\t    }\n\t    return 2 * d;\n\t};\n\n\n/***/ },\n/* 31 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function avg(a, b) {\n\t    var ii = a.length,\n\t        max = 0,\n\t        ans = 0,\n\t        aux = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        aux = Math.abs(a[i] - b[i]);\n\t        ans += aux;\n\t        if (max < aux) {\n\t            max = aux;\n\t        }\n\t    }\n\t    return (max + ans) / 2;\n\t};\n\n\n/***/ },\n/* 32 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function bhattacharyya(a, b) {\n\t    var ii = a.length,\n\t        ans = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        ans += Math.sqrt(a[i] * b[i]);\n\t    }\n\t    return - Math.log(ans);\n\t};\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function canberra(a, b) {\n\t    var ii = a.length,\n\t        ans = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        ans += Math.abs(a[i] - b[i]) / (a[i] + b[i]);\n\t    }\n\t    return ans;\n\t};\n\n\n/***/ },\n/* 34 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function chebyshev(a, b) {\n\t    var ii = a.length,\n\t        max = 0,\n\t        aux = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        aux = Math.abs(a[i] - b[i]);\n\t        if (max < aux) {\n\t            max = aux;\n\t        }\n\t    }\n\t    return max;\n\t};\n\n\n/***/ },\n/* 35 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function clark(a, b) {\n\t    var i = 0,\n\t        ii = a.length,\n\t        d = 0;\n\t    for (; i < ii; i++) {\n\t        d += Math.sqrt(((a[i] - b[i]) * (a[i] - b[i])) / ((a[i] + b[i]) * (a[i] + b[i])));\n\t    }\n\t    return 2 * d;\n\t};\n\n\n/***/ },\n/* 36 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function czekanowski(a, b) {\n\t    var ii = a.length,\n\t        up = 0,\n\t        down = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        up += Math.min(a[i], b[i]);\n\t        down += a[i] + b[i];\n\t    }\n\t    return 1 - (2 * up / down);\n\t};\n\n\n/***/ },\n/* 37 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function dice(a, b) {\n\t    var ii = a.length,\n\t        p = 0,\n\t        q1 = 0,\n\t        q2 = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        p += a[i] * a[i];\n\t        q1 += b[i] * b[i];\n\t        q2 += (a[i] - b[i]) * (a[i] - b[i]);\n\t    }\n\t    return q2 / (p + q1);\n\t};\n\n\n/***/ },\n/* 38 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function divergence(a, b) {\n\t    var i = 0,\n\t        ii = a.length,\n\t        d = 0;\n\t    for (; i < ii; i++) {\n\t        d += ((a[i] - b[i]) * (a[i] - b[i])) / ((a[i] + b[i]) * (a[i] + b[i]));\n\t    }\n\t    return 2 * d;\n\t};\n\n\n/***/ },\n/* 39 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tfunction squaredEuclidean(p, q) {\n\t    var d = 0;\n\t    for (var i = 0; i < p.length; i++) {\n\t        d += (p[i] - q[i]) * (p[i] - q[i]);\n\t    }\n\t    return d;\n\t}\n\t\n\tfunction euclidean(p, q) {\n\t    return Math.sqrt(squaredEuclidean(p, q));\n\t}\n\t\n\tmodule.exports = euclidean;\n\teuclidean.squared = squaredEuclidean;\n\n\n/***/ },\n/* 40 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function fidelity(a, b) {\n\t    var ii = a.length,\n\t        ans = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        ans += Math.sqrt(a[i] * b[i]);\n\t    }\n\t    return ans;\n\t};\n\n\n/***/ },\n/* 41 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function gower(a, b) {\n\t    var ii = a.length,\n\t        ans = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        ans += Math.abs(a[i] - b[i]);\n\t    }\n\t    return ans / ii;\n\t};\n\n\n/***/ },\n/* 42 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function harmonicMean(a, b) {\n\t    var ii = a.length,\n\t        ans = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        ans += (a[i] * b[i]) / (a[i] + b[i]);\n\t    }\n\t    return 2 * ans;\n\t};\n\n\n/***/ },\n/* 43 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function hellinger(a, b) {\n\t    var ii = a.length,\n\t        ans = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        ans += Math.sqrt(a[i] * b[i]);\n\t    }\n\t    return 2 * Math.sqrt(1 - ans);\n\t};\n\n\n/***/ },\n/* 44 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function innerProduct(a, b) {\n\t    var ii = a.length,\n\t        ans = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        ans += a[i] * b[i];\n\t    }\n\t    return ans;\n\t};\n\n\n/***/ },\n/* 45 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function intersection(a, b) {\n\t    var ii = a.length,\n\t        ans = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        ans += Math.min(a[i], b[i]);\n\t    }\n\t    return 1 - ans;\n\t};\n\n\n/***/ },\n/* 46 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function jaccard(a, b) {\n\t    var ii = a.length,\n\t        p1 = 0,\n\t        p2 = 0,\n\t        q1 = 0,\n\t        q2 = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        p1 += a[i] * b[i];\n\t        p2 += a[i] * a[i];\n\t        q1 += b[i] * b[i];\n\t        q2 += (a[i] - b[i]) * (a[i] - b[i]);\n\t    }\n\t    return q2 / (p2 + q1 - p1);\n\t};\n\n\n/***/ },\n/* 47 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function jeffreys(a, b) {\n\t    var ii = a.length,\n\t        ans = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        ans += (a[i] - b[i]) * Math.log(a[i] / b[i]);\n\t    }\n\t    return ans;\n\t};\n\n\n/***/ },\n/* 48 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function jensenDifference(a, b) {\n\t    var ii = a.length,\n\t        ans = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        ans += ((a[i] * Math.log(a[i]) + b[i] * Math.log(b[i])) / 2) - ((a[i] + b[i]) / 2) * Math.log((a[i] + b[i]) / 2);\n\t    }\n\t    return ans;\n\t};\n\n\n/***/ },\n/* 49 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function jensenShannon(a, b) {\n\t    var ii = a.length,\n\t        p = 0,\n\t        q = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        p += a[i] * Math.log(2 * a[i] / (a[i] + b[i]));\n\t        q += b[i] * Math.log(2 * b[i] / (a[i] + b[i]));\n\t    }\n\t    return (p + q) / 2;\n\t};\n\n\n/***/ },\n/* 50 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function kdivergence(a, b) {\n\t    var ii = a.length,\n\t        ans = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        ans += a[i] * Math.log(2 * a[i] / (a[i] + b[i]));\n\t    }\n\t    return ans;\n\t};\n\n\n/***/ },\n/* 51 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function kulczynski(a, b) {\n\t    var ii = a.length,\n\t        up = 0,\n\t        down = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        up += Math.abs(a[i] - b[i]);\n\t        down += Math.min(a[i],b[i]);\n\t    }\n\t    return up / down;\n\t};\n\n\n/***/ },\n/* 52 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function kullbackLeibler(a, b) {\n\t    var ii = a.length,\n\t        ans = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        ans += a[i] * Math.log(a[i] / b[i]);\n\t    }\n\t    return ans;\n\t};\n\n\n/***/ },\n/* 53 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function kumarHassebrook(a, b) {\n\t    var ii = a.length,\n\t        p = 0,\n\t        p2 = 0,\n\t        q2 = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        p += a[i] * b[i];\n\t        p2 += a[i] * a[i];\n\t        q2 += b[i] * b[i];\n\t    }\n\t    return p / (p2 + q2 - p);\n\t};\n\n\n/***/ },\n/* 54 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function kumarJohnson(a, b) {\n\t    var ii = a.length,\n\t        ans = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        ans += Math.pow(a[i] * a[i] - b[i] * b[i],2) / (2 * Math.pow(a[i] * b[i],1.5));\n\t    }\n\t    return ans;\n\t};\n\n\n/***/ },\n/* 55 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function lorentzian(a, b) {\n\t    var ii = a.length,\n\t        ans = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        ans += Math.log(Math.abs(a[i] - b[i]) + 1);\n\t    }\n\t    return ans;\n\t};\n\n\n/***/ },\n/* 56 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function manhattan(a, b) {\n\t    var i = 0,\n\t        ii = a.length,\n\t        d = 0;\n\t    for (; i < ii; i++) {\n\t        d += Math.abs(a[i] - b[i]);\n\t    }\n\t    return d;\n\t};\n\n\n/***/ },\n/* 57 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function matusita(a, b) {\n\t    var ii = a.length,\n\t        ans = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        ans += Math.sqrt(a[i] * b[i]);\n\t    }\n\t    return Math.sqrt(2 - 2 * ans);\n\t};\n\n\n/***/ },\n/* 58 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function minkowski(a, b, p) {\n\t    var i = 0,\n\t        ii = a.length,\n\t        d = 0;\n\t    for (; i < ii; i++) {\n\t        d += Math.pow(Math.abs(a[i] - b[i]),p);\n\t    }\n\t    return Math.pow(d,(1/p));\n\t};\n\n\n/***/ },\n/* 59 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function motyka(a, b) {\n\t    var ii = a.length,\n\t        up = 0,\n\t        down = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        up += Math.min(a[i], b[i]);\n\t        down += a[i] + b[i];\n\t    }\n\t    return 1 - (up / down);\n\t};\n\n\n/***/ },\n/* 60 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function pearson(a, b) {\n\t    var i = 0,\n\t        ii = a.length,\n\t        d = 0;\n\t    for (; i < ii; i++) {\n\t        d += ((a[i] - b[i]) * (a[i] - b[i])) / a[i];\n\t    }\n\t    return d;\n\t};\n\n\n/***/ },\n/* 61 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function pearson(a, b) {\n\t    var i = 0,\n\t        ii = a.length,\n\t        d = 0;\n\t    for (; i < ii; i++) {\n\t        d += ((a[i] - b[i]) * (a[i] - b[i])) / b[i];\n\t    }\n\t    return d;\n\t};\n\n\n/***/ },\n/* 62 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function probabilisticSymmetric(a, b) {\n\t    var i = 0,\n\t        ii = a.length,\n\t        d = 0;\n\t    for (; i < ii; i++) {\n\t        d += ((a[i] - b[i]) * (a[i] - b[i])) / (a[i] + b[i]);\n\t    }\n\t    return 2 * d;\n\t};\n\n\n/***/ },\n/* 63 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function ruzicka(a, b) {\n\t    var ii = a.length,\n\t        up = 0,\n\t        down = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        up += Math.min(a[i],b[i]);\n\t        down += Math.max(a[i],b[i]);\n\t    }\n\t    return up / down;\n\t};\n\n\n/***/ },\n/* 64 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function soergel(a, b) {\n\t    var ii = a.length,\n\t        up = 0,\n\t        down = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        up += Math.abs(a[i] - b[i]);\n\t        down += Math.max(a[i],b[i]);\n\t    }\n\t    return up / down;\n\t};\n\n\n/***/ },\n/* 65 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function sorensen(a, b) {\n\t    var ii = a.length,\n\t        up = 0,\n\t        down = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        up += Math.abs(a[i] - b[i]);\n\t        down += a[i] + b[i];\n\t    }\n\t    return up / down;\n\t};\n\n\n/***/ },\n/* 66 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function squared(a, b) {\n\t    var i = 0,\n\t        ii = a.length,\n\t        d = 0;\n\t    for (; i < ii; i++) {\n\t        d += ((a[i] - b[i]) * (a[i] - b[i])) / (a[i] + b[i]);\n\t    }\n\t    return d;\n\t};\n\n\n/***/ },\n/* 67 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function squaredChord(a, b) {\n\t    var ii = a.length,\n\t        ans = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        ans += (Math.sqrt(a[i]) - Math.sqrt(b[i])) * (Math.sqrt(a[i]) - Math.sqrt(b[i]));\n\t    }\n\t    return ans;\n\t};\n\n\n/***/ },\n/* 68 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function taneja(a, b) {\n\t    var ii = a.length,\n\t        ans = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        ans += (a[i] + b[i]) / 2 * Math.log((a[i] + b[i]) / (2 * Math.sqrt(a[i] * b[i])));\n\t    }\n\t    return ans;\n\t};\n\n\n/***/ },\n/* 69 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar tanimotoS = __webpack_require__(70);\n\t\n\tmodule.exports = function tanimoto(a, b, bitvector) {\n\t    if (bitvector)\n\t        return 1 - tanimotoS(a, b, bitvector);\n\t    else {\n\t        var ii = a.length,\n\t            p = 0,\n\t            q = 0,\n\t            m = 0;\n\t        for (var i = 0; i < ii ; i++) {\n\t            p += a[i];\n\t            q += b[i];\n\t            m += Math.min(a[i],b[i]);\n\t        }\n\t        return (p + q - 2 * m) / (p + q - m);\n\t    }\n\t};\n\n\n/***/ },\n/* 70 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function tanimoto(a, b, bitvector) {\n\t    if (bitvector) {\n\t        var inter = 0,\n\t            union = 0;\n\t        for (var j = 0; j < a.length; j++) {\n\t            inter += a[j] && b[j];\n\t            union += a[j] || b[j];\n\t        }\n\t        if (union === 0)\n\t            return 1;\n\t        return inter / union;\n\t    }\n\t    else {\n\t        var ii = a.length,\n\t            p = 0,\n\t            q = 0,\n\t            m = 0;\n\t        for (var i = 0; i < ii ; i++) {\n\t            p += a[i];\n\t            q += b[i];\n\t            m += Math.min(a[i],b[i]);\n\t        }\n\t        return 1 - (p + q - 2 * m) / (p + q - m);\n\t    }\n\t};\n\n\n/***/ },\n/* 71 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function topsoe(a, b) {\n\t    var ii = a.length,\n\t        ans = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        ans += a[i] * Math.log(2 * a[i] / (a[i] + b[i])) + b[i] * Math.log(2 * b[i] / (a[i] + b[i]));\n\t    }\n\t    return ans;\n\t};\n\n\n/***/ },\n/* 72 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\t/**\n\t * Function that creates the tree\n\t * @param {Array <number>} X - chemical shifts of the signal\n\t * @param {Array <number>} Y - intensity of the signal\n\t * @param {number} from - the low limit of x\n\t * @param {number} to - the top limit of x\n\t * @param {number} minWindow - smallest range to accept in x\n\t * @param {number} threshold - smallest range to accept in y\n\t * @returns {{sum: number, center: number, left: {json}, right: {json}}}\n\t * left and right have the same structure than the parent, or have a\n\t * undefined value if are leafs\n\t */\n\tfunction createTree (X, Y, from, to, minWindow, threshold) {\n\t    minWindow = minWindow || 0.16;\n\t    threshold = threshold || 0.01;\n\t    if ((to - from) < minWindow)\n\t        return undefined;\n\t    var sum = 0;\n\t    for (var i = 0; X[i] < to; i++) {\n\t        if (X[i] > from)\n\t            sum += Y[i];\n\t    }\n\t    if (sum < threshold) {\n\t        return undefined;\n\t    }\n\t    var center = 0;\n\t    for (var j = 0; X[j] < to; j++) {\n\t        if (X[i] > from)\n\t            center += X[j] * Y[j];\n\t    }\n\t    center = center / sum;\n\t    if (((center - from) < 10e-6) || ((to - center) < 10e-6)) return undefined;\n\t    if ((center - from) < (minWindow /4)) {\n\t        return createTree(X, Y, center, to, minWindow, threshold);\n\t    }\n\t    else {\n\t        if ((to - center) < (minWindow / 4)) {\n\t            return createTree(X, Y, from, center, minWindow, threshold);\n\t        }\n\t        else {\n\t            return {\n\t                'sum': sum,\n\t                'center': center,\n\t                'left': createTree(X, Y, from, center, minWindow, threshold),\n\t                'right': createTree(X, Y, center, to, minWindow, threshold)\n\t            };\n\t        }\n\t    }\n\t}\n\t\n\t/**\n\t * Similarity between two nodes\n\t * @param {{sum: number, center: number, left: {json}, right: {json}}} a - tree A node\n\t * @param {{sum: number, center: number, left: {json}, right: {json}}} b - tree B node\n\t * @param {number} alpha - weights the relative importance of intensity vs. shift match\n\t * @param {number} beta - weights the relative importance of node matching and children matching\n\t * @param {number} gamma - controls the attenuation of the effect of chemical shift differences\n\t * @returns {number} similarity measure between tree nodes\n\t */\n\tfunction S(a, b, alpha, beta, gamma) {\n\t    if (a === undefined || b === undefined) {\n\t        return 0;\n\t    }\n\t    else {\n\t        var C = (alpha*Math.min(a.sum, b.sum)/Math.max(a.sum, b.sum)+ (1-alpha)*Math.exp(-gamma*Math.abs(a.center - b.center)));\n\t    }\n\t    return beta*C + (1-beta)*(S(a.left, b.left, alpha, beta, gamma)+S(a.right, b.right, alpha, beta, gamma));\n\t}\n\t\n\t/**\n\t * @type {number} alpha - weights the relative importance of intensity vs. shift match\n\t * @type {number} beta - weights the relative importance of node matching and children matching\n\t * @type {number} gamma - controls the attenuation of the effect of chemical shift differences\n\t * @type {number} minWindow - smallest range to accept in x\n\t * @type {number} threshold - smallest range to accept in y\n\t */\n\tvar defaultOptions = {\n\t    minWindow: 0.16,\n\t    threshold : 0.01,\n\t    alpha: 0.1,\n\t    beta: 0.33,\n\t    gamma: 0.001\n\t};\n\t\n\t/**\n\t * Builds a tree based in the spectra and compares this trees\n\t * @param {{x: Array<number>, y: Array<number>}} A - first spectra to be compared\n\t * @param {{x: Array<number>, y: Array<number>}} B - second spectra to be compared\n\t * @param {number} from - the low limit of x\n\t * @param {number} to - the top limit of x\n\t * @param {{minWindow: number, threshold: number, alpha: number, beta: number, gamma: number}} options\n\t * @returns {number} similarity measure between the spectra\n\t */\n\tfunction tree(A, B, from, to, options) {\n\t    options = options || {};\n\t    for (var o in defaultOptions)\n\t        if (!options.hasOwnProperty(o)) {\n\t            options[o] = defaultOptions[o];\n\t        }\n\t    var Atree, Btree;\n\t    if (A.sum)\n\t        Atree = A;\n\t    else\n\t        Atree = createTree(A.x, A.y, from, to, options.minWindow, options.threshold);\n\t    if (B.sum)\n\t        Btree = B;\n\t    else\n\t        Btree = createTree(B.x, B.y, from, to, options.minWindow, options.threshold);\n\t    return S(Atree, Btree, options.alpha, options.beta, options.gamma);\n\t}\n\t\n\tmodule.exports = {\n\t    calc: tree,\n\t    createTree: createTree\n\t};\n\n/***/ },\n/* 73 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function waveHedges(a, b) {\n\t    var ii = a.length,\n\t        ans = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        ans += 1 - (Math.min(a[i], b[i]) / Math.max(a[i], b[i]));\n\t    }\n\t    return ans;\n\t};\n\n\n/***/ },\n/* 74 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\texports.cosine = __webpack_require__(75);\n\texports.czekanowski = __webpack_require__(76);\n\texports.dice = __webpack_require__(77);\n\texports.intersection = __webpack_require__(78);\n\texports.jaccard = __webpack_require__(79);\n\texports.kulczynski = __webpack_require__(80);\n\texports.motyka = __webpack_require__(81);\n\texports.pearson = __webpack_require__(82);\n\texports.squaredChord = __webpack_require__(83);\n\texports.tanimoto = __webpack_require__(70);\n\n\n/***/ },\n/* 75 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function cosine(a, b) {\n\t    var ii = a.length,\n\t        p = 0,\n\t        p2 = 0,\n\t        q2 = 0;\n\t    for (var i = 0; i < ii ; i++) {\n\t        p += a[i] * b[i];\n\t        p2 += a[i] * a[i];\n\t        q2 += b[i] * b[i];\n\t    }\n\t    return p / (Math.sqrt(p2) * Math.sqrt(q2));\n\t};\n\n\n/***/ },\n/* 76 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar czekanowskiD = __webpack_require__(36);\n\t\n\tmodule.exports = function czekanowski(a, b) {\n\t    return 1 - czekanowskiD(a,b);\n\t};\n\n\n/***/ },\n/* 77 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar diceD = __webpack_require__(37);\n\t\n\tmodule.exports = function dice(a, b) {\n\t    return 1 - diceD(a,b);\n\t};\n\n\n/***/ },\n/* 78 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar intersectionD = __webpack_require__(45);\n\t\n\tmodule.exports = function intersection(a, b) {\n\t    return 1 - intersectionD(a,b);\n\t};\n\n\n/***/ },\n/* 79 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar jaccardD = __webpack_require__(46);\n\t\n\tmodule.exports = function jaccard(a, b) {\n\t    return 1 - jaccardD(a, b);\n\t};\n\n\n/***/ },\n/* 80 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar kulczynskiD = __webpack_require__(51);\n\t\n\tmodule.exports = function kulczynski(a, b) {\n\t    return 1 / kulczynskiD(a, b);\n\t};\n\n\n/***/ },\n/* 81 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar motykaD = __webpack_require__(59);\n\t\n\tmodule.exports = function motyka(a, b) {\n\t    return 1 - motykaD(a,b);\n\t};\n\n\n/***/ },\n/* 82 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar stat=__webpack_require__(5).array;\n\tvar cosine=__webpack_require__(75);\n\t\n\tmodule.exports = function pearson(a, b) {\n\t    var avgA=stat.mean(a);\n\t    var avgB=stat.mean(b);\n\t\n\t    var newA=new Array(a.length);\n\t    var newB=new Array(b.length);\n\t    for (var i=0; i<newA.length; i++) {\n\t        newA[i]=a[i]-avgA;\n\t        newB[i]=b[i]-avgB;\n\t    }\n\t\n\t    return cosine(newA, newB);\n\t};\n\n\n/***/ },\n/* 83 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar squaredChordD = __webpack_require__(67);\n\t\n\tmodule.exports = function squaredChord(a, b) {\n\t    return 1 - squaredChordD(a, b);\n\t};\n\n\n/***/ },\n/* 84 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar numeric = __webpack_require__(85);\n\t\n\t/**\n\t * Savitzky-Golay filter\n\t * @param {Array <number>} y\n\t * @param {number} dx\n\t * @constructor\n\t */\n\tfunction SavitzkyGolay (y, dx) {\n\t    this.data = y;\n\t    this.h = dx\n\t}\n\t\n\tvar defaultOptions = {\n\t    windSize: 5,\n\t    deriv: 1,\n\t    pol: 2\n\t};\n\t\n\t/**\n\t * Applies the filter\n\t * @param options\n\t * @returns {Array}\n\t */\n\tSavitzkyGolay.prototype.calc = function (options) {\n\t    options = options || {};\n\t    this.options = {};\n\t    for (var o in defaultOptions) {\n\t        if (options.hasOwnProperty(o)) {\n\t            this.options[o] = options[o];\n\t        } else {\n\t            this.options[o] = defaultOptions[o];\n\t        }\n\t    }\n\t    if ((this.options.windSize % 2 === 0) || (this.options.windSize < 5))\n\t        throw new RangeError('Invalid window size');\n\t    if ((this.options.deriv < 0) || (this.options.pol < 1))\n\t        throw new RangeError('Number too small');\n\t    if ((this.options.pol !== Math.floor(this.options.pol)) || (this.options.deriv !== Math.floor(this.options.deriv)) || (this.options.windSize !== Math.floor(this.options.windSize)))\n\t        throw new TypeError('Only integers allowed');\n\t\n\t    var C, norm;\n\t    if ((this.options.windSize === 5) && (this.options.pol === 2) && ((this.options.deriv === 1) || (this.options.deriv === 2))) {\n\t        if (this.options.deriv === 1) {\n\t            C = [-2,-1,0,1,2];\n\t            norm = 10;\n\t        }\n\t        else {\n\t            C = [2, -1, -2, -1, 2];\n\t            norm = 7;\n\t        }\n\t    }\n\t    else {\n\t        var J = new Array(this.options.windSize);\n\t        for (var i = 0; i < J.length; i++) {\n\t            J[i] = new Array(this.options.pol + 1);\n\t            var inic = -(this.options.windSize - 1) / 2;\n\t            for (var j = 0; j < J[i].length; j++) {\n\t                if ((inic + 1 === 0) && (j === 0))\n\t                    J[i][j] = 1;\n\t                else\n\t                    J[i][j] = Math.pow((inic + i), j);\n\t            }\n\t        }\n\t        C = numeric.dot(numeric.inv(numeric.dot(numeric.transpose(J), J)), numeric.transpose(J));\n\t        C = C[this.options.deriv].concat();\n\t        norm = 1;\n\t    }\n\t    var ans =  new Array(this.data.length);\n\t    for (var k = Math.ceil(this.options.windSize / 2); k < (ans.length - Math.floor(this.options.windSize / 2)); k++) {\n\t        var d = 0;\n\t        for (var l = 0; l < C.length; l++) {\n\t            d += C[l] * this.data[l + k - Math.floor(this.options.windSize / 2)] / (norm * Math.pow(this.h, this.options.deriv));\n\t        }\n\t        ans[k] = d;\n\t    }\n\t    for (var a = 0; a < Math.ceil(this.options.windSize / 2); a++)\n\t        ans[a] = ans[Math.ceil(this.options.windSize / 2)];\n\t    for (var b = (ans.length - Math.floor(this.options.windSize / 2)); b < ans.length; b++)\n\t        ans[b] = ans[(ans.length - Math.floor(this.options.windSize / 2)) - 1];\n\t    return ans;\n\t};\n\t\n\tmodule.exports = SavitzkyGolay;\n\n/***/ },\n/* 85 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {\"use strict\";\n\t\n\tvar numeric = ( false)?(function numeric() {}):(exports);\n\tif(typeof global !== \"undefined\") { global.numeric = numeric; }\n\t\n\tnumeric.version = \"1.2.6\";\n\t\n\t// 1. Utility functions\n\tnumeric.bench = function bench (f,interval) {\n\t    var t1,t2,n,i;\n\t    if(typeof interval === \"undefined\") { interval = 15; }\n\t    n = 0.5;\n\t    t1 = new Date();\n\t    while(1) {\n\t        n*=2;\n\t        for(i=n;i>3;i-=4) { f(); f(); f(); f(); }\n\t        while(i>0) { f(); i--; }\n\t        t2 = new Date();\n\t        if(t2-t1 > interval) break;\n\t    }\n\t    for(i=n;i>3;i-=4) { f(); f(); f(); f(); }\n\t    while(i>0) { f(); i--; }\n\t    t2 = new Date();\n\t    return 1000*(3*n-1)/(t2-t1);\n\t}\n\t\n\tnumeric._myIndexOf = (function _myIndexOf(w) {\n\t    var n = this.length,k;\n\t    for(k=0;k<n;++k) if(this[k]===w) return k;\n\t    return -1;\n\t});\n\tnumeric.myIndexOf = (Array.prototype.indexOf)?Array.prototype.indexOf:numeric._myIndexOf;\n\t\n\tnumeric.Function = Function;\n\tnumeric.precision = 4;\n\tnumeric.largeArray = 50;\n\t\n\tnumeric.prettyPrint = function prettyPrint(x) {\n\t    function fmtnum(x) {\n\t        if(x === 0) { return '0'; }\n\t        if(isNaN(x)) { return 'NaN'; }\n\t        if(x<0) { return '-'+fmtnum(-x); }\n\t        if(isFinite(x)) {\n\t            var scale = Math.floor(Math.log(x) / Math.log(10));\n\t            var normalized = x / Math.pow(10,scale);\n\t            var basic = normalized.toPrecision(numeric.precision);\n\t            if(parseFloat(basic) === 10) { scale++; normalized = 1; basic = normalized.toPrecision(numeric.precision); }\n\t            return parseFloat(basic).toString()+'e'+scale.toString();\n\t        }\n\t        return 'Infinity';\n\t    }\n\t    var ret = [];\n\t    function foo(x) {\n\t        var k;\n\t        if(typeof x === \"undefined\") { ret.push(Array(numeric.precision+8).join(' ')); return false; }\n\t        if(typeof x === \"string\") { ret.push('\"'+x+'\"'); return false; }\n\t        if(typeof x === \"boolean\") { ret.push(x.toString()); return false; }\n\t        if(typeof x === \"number\") {\n\t            var a = fmtnum(x);\n\t            var b = x.toPrecision(numeric.precision);\n\t            var c = parseFloat(x.toString()).toString();\n\t            var d = [a,b,c,parseFloat(b).toString(),parseFloat(c).toString()];\n\t            for(k=1;k<d.length;k++) { if(d[k].length < a.length) a = d[k]; }\n\t            ret.push(Array(numeric.precision+8-a.length).join(' ')+a);\n\t            return false;\n\t        }\n\t        if(x === null) { ret.push(\"null\"); return false; }\n\t        if(typeof x === \"function\") { \n\t            ret.push(x.toString());\n\t            var flag = false;\n\t            for(k in x) { if(x.hasOwnProperty(k)) { \n\t                if(flag) ret.push(',\\n');\n\t                else ret.push('\\n{');\n\t                flag = true; \n\t                ret.push(k); \n\t                ret.push(': \\n'); \n\t                foo(x[k]); \n\t            } }\n\t            if(flag) ret.push('}\\n');\n\t            return true;\n\t        }\n\t        if(x instanceof Array) {\n\t            if(x.length > numeric.largeArray) { ret.push('...Large Array...'); return true; }\n\t            var flag = false;\n\t            ret.push('[');\n\t            for(k=0;k<x.length;k++) { if(k>0) { ret.push(','); if(flag) ret.push('\\n '); } flag = foo(x[k]); }\n\t            ret.push(']');\n\t            return true;\n\t        }\n\t        ret.push('{');\n\t        var flag = false;\n\t        for(k in x) { if(x.hasOwnProperty(k)) { if(flag) ret.push(',\\n'); flag = true; ret.push(k); ret.push(': \\n'); foo(x[k]); } }\n\t        ret.push('}');\n\t        return true;\n\t    }\n\t    foo(x);\n\t    return ret.join('');\n\t}\n\t\n\tnumeric.parseDate = function parseDate(d) {\n\t    function foo(d) {\n\t        if(typeof d === 'string') { return Date.parse(d.replace(/-/g,'/')); }\n\t        if(!(d instanceof Array)) { throw new Error(\"parseDate: parameter must be arrays of strings\"); }\n\t        var ret = [],k;\n\t        for(k=0;k<d.length;k++) { ret[k] = foo(d[k]); }\n\t        return ret;\n\t    }\n\t    return foo(d);\n\t}\n\t\n\tnumeric.parseFloat = function parseFloat_(d) {\n\t    function foo(d) {\n\t        if(typeof d === 'string') { return parseFloat(d); }\n\t        if(!(d instanceof Array)) { throw new Error(\"parseFloat: parameter must be arrays of strings\"); }\n\t        var ret = [],k;\n\t        for(k=0;k<d.length;k++) { ret[k] = foo(d[k]); }\n\t        return ret;\n\t    }\n\t    return foo(d);\n\t}\n\t\n\tnumeric.parseCSV = function parseCSV(t) {\n\t    var foo = t.split('\\n');\n\t    var j,k;\n\t    var ret = [];\n\t    var pat = /(([^'\",]*)|('[^']*')|(\"[^\"]*\")),/g;\n\t    var patnum = /^\\s*(([+-]?[0-9]+(\\.[0-9]*)?(e[+-]?[0-9]+)?)|([+-]?[0-9]*(\\.[0-9]+)?(e[+-]?[0-9]+)?))\\s*$/;\n\t    var stripper = function(n) { return n.substr(0,n.length-1); }\n\t    var count = 0;\n\t    for(k=0;k<foo.length;k++) {\n\t      var bar = (foo[k]+\",\").match(pat),baz;\n\t      if(bar.length>0) {\n\t          ret[count] = [];\n\t          for(j=0;j<bar.length;j++) {\n\t              baz = stripper(bar[j]);\n\t              if(patnum.test(baz)) { ret[count][j] = parseFloat(baz); }\n\t              else ret[count][j] = baz;\n\t          }\n\t          count++;\n\t      }\n\t    }\n\t    return ret;\n\t}\n\t\n\tnumeric.toCSV = function toCSV(A) {\n\t    var s = numeric.dim(A);\n\t    var i,j,m,n,row,ret;\n\t    m = s[0];\n\t    n = s[1];\n\t    ret = [];\n\t    for(i=0;i<m;i++) {\n\t        row = [];\n\t        for(j=0;j<m;j++) { row[j] = A[i][j].toString(); }\n\t        ret[i] = row.join(', ');\n\t    }\n\t    return ret.join('\\n')+'\\n';\n\t}\n\t\n\tnumeric.getURL = function getURL(url) {\n\t    var client = new XMLHttpRequest();\n\t    client.open(\"GET\",url,false);\n\t    client.send();\n\t    return client;\n\t}\n\t\n\tnumeric.imageURL = function imageURL(img) {\n\t    function base64(A) {\n\t        var n = A.length, i,x,y,z,p,q,r,s;\n\t        var key = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\t        var ret = \"\";\n\t        for(i=0;i<n;i+=3) {\n\t            x = A[i];\n\t            y = A[i+1];\n\t            z = A[i+2];\n\t            p = x >> 2;\n\t            q = ((x & 3) << 4) + (y >> 4);\n\t            r = ((y & 15) << 2) + (z >> 6);\n\t            s = z & 63;\n\t            if(i+1>=n) { r = s = 64; }\n\t            else if(i+2>=n) { s = 64; }\n\t            ret += key.charAt(p) + key.charAt(q) + key.charAt(r) + key.charAt(s);\n\t            }\n\t        return ret;\n\t    }\n\t    function crc32Array (a,from,to) {\n\t        if(typeof from === \"undefined\") { from = 0; }\n\t        if(typeof to === \"undefined\") { to = a.length; }\n\t        var table = [0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,\n\t                     0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, \n\t                     0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,\n\t                     0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, \n\t                     0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, \n\t                     0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, \n\t                     0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,\n\t                     0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,\n\t                     0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,\n\t                     0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01, \n\t                     0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, \n\t                     0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, \n\t                     0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, \n\t                     0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, \n\t                     0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F, \n\t                     0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, \n\t                     0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, \n\t                     0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, \n\t                     0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, \n\t                     0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, \n\t                     0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B, \n\t                     0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79, \n\t                     0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, \n\t                     0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, \n\t                     0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, \n\t                     0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, \n\t                     0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, \n\t                     0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, \n\t                     0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, \n\t                     0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9, \n\t                     0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF, \n\t                     0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D];\n\t     \n\t        var crc = -1, y = 0, n = a.length,i;\n\t\n\t        for (i = from; i < to; i++) {\n\t            y = (crc ^ a[i]) & 0xFF;\n\t            crc = (crc >>> 8) ^ table[y];\n\t        }\n\t     \n\t        return crc ^ (-1);\n\t    }\n\t\n\t    var h = img[0].length, w = img[0][0].length, s1, s2, next,k,length,a,b,i,j,adler32,crc32;\n\t    var stream = [\n\t                  137, 80, 78, 71, 13, 10, 26, 10,                           //  0: PNG signature\n\t                  0,0,0,13,                                                  //  8: IHDR Chunk length\n\t                  73, 72, 68, 82,                                            // 12: \"IHDR\" \n\t                  (w >> 24) & 255, (w >> 16) & 255, (w >> 8) & 255, w&255,   // 16: Width\n\t                  (h >> 24) & 255, (h >> 16) & 255, (h >> 8) & 255, h&255,   // 20: Height\n\t                  8,                                                         // 24: bit depth\n\t                  2,                                                         // 25: RGB\n\t                  0,                                                         // 26: deflate\n\t                  0,                                                         // 27: no filter\n\t                  0,                                                         // 28: no interlace\n\t                  -1,-2,-3,-4,                                               // 29: CRC\n\t                  -5,-6,-7,-8,                                               // 33: IDAT Chunk length\n\t                  73, 68, 65, 84,                                            // 37: \"IDAT\"\n\t                  // RFC 1950 header starts here\n\t                  8,                                                         // 41: RFC1950 CMF\n\t                  29                                                         // 42: RFC1950 FLG\n\t                  ];\n\t    crc32 = crc32Array(stream,12,29);\n\t    stream[29] = (crc32>>24)&255;\n\t    stream[30] = (crc32>>16)&255;\n\t    stream[31] = (crc32>>8)&255;\n\t    stream[32] = (crc32)&255;\n\t    s1 = 1;\n\t    s2 = 0;\n\t    for(i=0;i<h;i++) {\n\t        if(i<h-1) { stream.push(0); }\n\t        else { stream.push(1); }\n\t        a = (3*w+1+(i===0))&255; b = ((3*w+1+(i===0))>>8)&255;\n\t        stream.push(a); stream.push(b);\n\t        stream.push((~a)&255); stream.push((~b)&255);\n\t        if(i===0) stream.push(0);\n\t        for(j=0;j<w;j++) {\n\t            for(k=0;k<3;k++) {\n\t                a = img[k][i][j];\n\t                if(a>255) a = 255;\n\t                else if(a<0) a=0;\n\t                else a = Math.round(a);\n\t                s1 = (s1 + a )%65521;\n\t                s2 = (s2 + s1)%65521;\n\t                stream.push(a);\n\t            }\n\t        }\n\t        stream.push(0);\n\t    }\n\t    adler32 = (s2<<16)+s1;\n\t    stream.push((adler32>>24)&255);\n\t    stream.push((adler32>>16)&255);\n\t    stream.push((adler32>>8)&255);\n\t    stream.push((adler32)&255);\n\t    length = stream.length - 41;\n\t    stream[33] = (length>>24)&255;\n\t    stream[34] = (length>>16)&255;\n\t    stream[35] = (length>>8)&255;\n\t    stream[36] = (length)&255;\n\t    crc32 = crc32Array(stream,37);\n\t    stream.push((crc32>>24)&255);\n\t    stream.push((crc32>>16)&255);\n\t    stream.push((crc32>>8)&255);\n\t    stream.push((crc32)&255);\n\t    stream.push(0);\n\t    stream.push(0);\n\t    stream.push(0);\n\t    stream.push(0);\n\t//    a = stream.length;\n\t    stream.push(73);  // I\n\t    stream.push(69);  // E\n\t    stream.push(78);  // N\n\t    stream.push(68);  // D\n\t    stream.push(174); // CRC1\n\t    stream.push(66);  // CRC2\n\t    stream.push(96);  // CRC3\n\t    stream.push(130); // CRC4\n\t    return 'data:image/png;base64,'+base64(stream);\n\t}\n\t\n\t// 2. Linear algebra with Arrays.\n\tnumeric._dim = function _dim(x) {\n\t    var ret = [];\n\t    while(typeof x === \"object\") { ret.push(x.length); x = x[0]; }\n\t    return ret;\n\t}\n\t\n\tnumeric.dim = function dim(x) {\n\t    var y,z;\n\t    if(typeof x === \"object\") {\n\t        y = x[0];\n\t        if(typeof y === \"object\") {\n\t            z = y[0];\n\t            if(typeof z === \"object\") {\n\t                return numeric._dim(x);\n\t            }\n\t            return [x.length,y.length];\n\t        }\n\t        return [x.length];\n\t    }\n\t    return [];\n\t}\n\t\n\tnumeric.mapreduce = function mapreduce(body,init) {\n\t    return Function('x','accum','_s','_k',\n\t            'if(typeof accum === \"undefined\") accum = '+init+';\\n'+\n\t            'if(typeof x === \"number\") { var xi = x; '+body+'; return accum; }\\n'+\n\t            'if(typeof _s === \"undefined\") _s = numeric.dim(x);\\n'+\n\t            'if(typeof _k === \"undefined\") _k = 0;\\n'+\n\t            'var _n = _s[_k];\\n'+\n\t            'var i,xi;\\n'+\n\t            'if(_k < _s.length-1) {\\n'+\n\t            '    for(i=_n-1;i>=0;i--) {\\n'+\n\t            '        accum = arguments.callee(x[i],accum,_s,_k+1);\\n'+\n\t            '    }'+\n\t            '    return accum;\\n'+\n\t            '}\\n'+\n\t            'for(i=_n-1;i>=1;i-=2) { \\n'+\n\t            '    xi = x[i];\\n'+\n\t            '    '+body+';\\n'+\n\t            '    xi = x[i-1];\\n'+\n\t            '    '+body+';\\n'+\n\t            '}\\n'+\n\t            'if(i === 0) {\\n'+\n\t            '    xi = x[i];\\n'+\n\t            '    '+body+'\\n'+\n\t            '}\\n'+\n\t            'return accum;'\n\t            );\n\t}\n\tnumeric.mapreduce2 = function mapreduce2(body,setup) {\n\t    return Function('x',\n\t            'var n = x.length;\\n'+\n\t            'var i,xi;\\n'+setup+';\\n'+\n\t            'for(i=n-1;i!==-1;--i) { \\n'+\n\t            '    xi = x[i];\\n'+\n\t            '    '+body+';\\n'+\n\t            '}\\n'+\n\t            'return accum;'\n\t            );\n\t}\n\t\n\t\n\tnumeric.same = function same(x,y) {\n\t    var i,n;\n\t    if(!(x instanceof Array) || !(y instanceof Array)) { return false; }\n\t    n = x.length;\n\t    if(n !== y.length) { return false; }\n\t    for(i=0;i<n;i++) {\n\t        if(x[i] === y[i]) { continue; }\n\t        if(typeof x[i] === \"object\") { if(!same(x[i],y[i])) return false; }\n\t        else { return false; }\n\t    }\n\t    return true;\n\t}\n\t\n\tnumeric.rep = function rep(s,v,k) {\n\t    if(typeof k === \"undefined\") { k=0; }\n\t    var n = s[k], ret = Array(n), i;\n\t    if(k === s.length-1) {\n\t        for(i=n-2;i>=0;i-=2) { ret[i+1] = v; ret[i] = v; }\n\t        if(i===-1) { ret[0] = v; }\n\t        return ret;\n\t    }\n\t    for(i=n-1;i>=0;i--) { ret[i] = numeric.rep(s,v,k+1); }\n\t    return ret;\n\t}\n\t\n\t\n\tnumeric.dotMMsmall = function dotMMsmall(x,y) {\n\t    var i,j,k,p,q,r,ret,foo,bar,woo,i0,k0,p0,r0;\n\t    p = x.length; q = y.length; r = y[0].length;\n\t    ret = Array(p);\n\t    for(i=p-1;i>=0;i--) {\n\t        foo = Array(r);\n\t        bar = x[i];\n\t        for(k=r-1;k>=0;k--) {\n\t            woo = bar[q-1]*y[q-1][k];\n\t            for(j=q-2;j>=1;j-=2) {\n\t                i0 = j-1;\n\t                woo += bar[j]*y[j][k] + bar[i0]*y[i0][k];\n\t            }\n\t            if(j===0) { woo += bar[0]*y[0][k]; }\n\t            foo[k] = woo;\n\t        }\n\t        ret[i] = foo;\n\t    }\n\t    return ret;\n\t}\n\tnumeric._getCol = function _getCol(A,j,x) {\n\t    var n = A.length, i;\n\t    for(i=n-1;i>0;--i) {\n\t        x[i] = A[i][j];\n\t        --i;\n\t        x[i] = A[i][j];\n\t    }\n\t    if(i===0) x[0] = A[0][j];\n\t}\n\tnumeric.dotMMbig = function dotMMbig(x,y){\n\t    var gc = numeric._getCol, p = y.length, v = Array(p);\n\t    var m = x.length, n = y[0].length, A = new Array(m), xj;\n\t    var VV = numeric.dotVV;\n\t    var i,j,k,z;\n\t    --p;\n\t    --m;\n\t    for(i=m;i!==-1;--i) A[i] = Array(n);\n\t    --n;\n\t    for(i=n;i!==-1;--i) {\n\t        gc(y,i,v);\n\t        for(j=m;j!==-1;--j) {\n\t            z=0;\n\t            xj = x[j];\n\t            A[j][i] = VV(xj,v);\n\t        }\n\t    }\n\t    return A;\n\t}\n\t\n\tnumeric.dotMV = function dotMV(x,y) {\n\t    var p = x.length, q = y.length,i;\n\t    var ret = Array(p), dotVV = numeric.dotVV;\n\t    for(i=p-1;i>=0;i--) { ret[i] = dotVV(x[i],y); }\n\t    return ret;\n\t}\n\t\n\tnumeric.dotVM = function dotVM(x,y) {\n\t    var i,j,k,p,q,r,ret,foo,bar,woo,i0,k0,p0,r0,s1,s2,s3,baz,accum;\n\t    p = x.length; q = y[0].length;\n\t    ret = Array(q);\n\t    for(k=q-1;k>=0;k--) {\n\t        woo = x[p-1]*y[p-1][k];\n\t        for(j=p-2;j>=1;j-=2) {\n\t            i0 = j-1;\n\t            woo += x[j]*y[j][k] + x[i0]*y[i0][k];\n\t        }\n\t        if(j===0) { woo += x[0]*y[0][k]; }\n\t        ret[k] = woo;\n\t    }\n\t    return ret;\n\t}\n\t\n\tnumeric.dotVV = function dotVV(x,y) {\n\t    var i,n=x.length,i1,ret = x[n-1]*y[n-1];\n\t    for(i=n-2;i>=1;i-=2) {\n\t        i1 = i-1;\n\t        ret += x[i]*y[i] + x[i1]*y[i1];\n\t    }\n\t    if(i===0) { ret += x[0]*y[0]; }\n\t    return ret;\n\t}\n\t\n\tnumeric.dot = function dot(x,y) {\n\t    var d = numeric.dim;\n\t    switch(d(x).length*1000+d(y).length) {\n\t    case 2002:\n\t        if(y.length < 10) return numeric.dotMMsmall(x,y);\n\t        else return numeric.dotMMbig(x,y);\n\t    case 2001: return numeric.dotMV(x,y);\n\t    case 1002: return numeric.dotVM(x,y);\n\t    case 1001: return numeric.dotVV(x,y);\n\t    case 1000: return numeric.mulVS(x,y);\n\t    case 1: return numeric.mulSV(x,y);\n\t    case 0: return x*y;\n\t    default: throw new Error('numeric.dot only works on vectors and matrices');\n\t    }\n\t}\n\t\n\tnumeric.diag = function diag(d) {\n\t    var i,i1,j,n = d.length, A = Array(n), Ai;\n\t    for(i=n-1;i>=0;i--) {\n\t        Ai = Array(n);\n\t        i1 = i+2;\n\t        for(j=n-1;j>=i1;j-=2) {\n\t            Ai[j] = 0;\n\t            Ai[j-1] = 0;\n\t        }\n\t        if(j>i) { Ai[j] = 0; }\n\t        Ai[i] = d[i];\n\t        for(j=i-1;j>=1;j-=2) {\n\t            Ai[j] = 0;\n\t            Ai[j-1] = 0;\n\t        }\n\t        if(j===0) { Ai[0] = 0; }\n\t        A[i] = Ai;\n\t    }\n\t    return A;\n\t}\n\tnumeric.getDiag = function(A) {\n\t    var n = Math.min(A.length,A[0].length),i,ret = Array(n);\n\t    for(i=n-1;i>=1;--i) {\n\t        ret[i] = A[i][i];\n\t        --i;\n\t        ret[i] = A[i][i];\n\t    }\n\t    if(i===0) {\n\t        ret[0] = A[0][0];\n\t    }\n\t    return ret;\n\t}\n\t\n\tnumeric.identity = function identity(n) { return numeric.diag(numeric.rep([n],1)); }\n\tnumeric.pointwise = function pointwise(params,body,setup) {\n\t    if(typeof setup === \"undefined\") { setup = \"\"; }\n\t    var fun = [];\n\t    var k;\n\t    var avec = /\\[i\\]$/,p,thevec = '';\n\t    var haveret = false;\n\t    for(k=0;k<params.length;k++) {\n\t        if(avec.test(params[k])) {\n\t            p = params[k].substring(0,params[k].length-3);\n\t            thevec = p;\n\t        } else { p = params[k]; }\n\t        if(p==='ret') haveret = true;\n\t        fun.push(p);\n\t    }\n\t    fun[params.length] = '_s';\n\t    fun[params.length+1] = '_k';\n\t    fun[params.length+2] = (\n\t            'if(typeof _s === \"undefined\") _s = numeric.dim('+thevec+');\\n'+\n\t            'if(typeof _k === \"undefined\") _k = 0;\\n'+\n\t            'var _n = _s[_k];\\n'+\n\t            'var i'+(haveret?'':', ret = Array(_n)')+';\\n'+\n\t            'if(_k < _s.length-1) {\\n'+\n\t            '    for(i=_n-1;i>=0;i--) ret[i] = arguments.callee('+params.join(',')+',_s,_k+1);\\n'+\n\t            '    return ret;\\n'+\n\t            '}\\n'+\n\t            setup+'\\n'+\n\t            'for(i=_n-1;i!==-1;--i) {\\n'+\n\t            '    '+body+'\\n'+\n\t            '}\\n'+\n\t            'return ret;'\n\t            );\n\t    return Function.apply(null,fun);\n\t}\n\tnumeric.pointwise2 = function pointwise2(params,body,setup) {\n\t    if(typeof setup === \"undefined\") { setup = \"\"; }\n\t    var fun = [];\n\t    var k;\n\t    var avec = /\\[i\\]$/,p,thevec = '';\n\t    var haveret = false;\n\t    for(k=0;k<params.length;k++) {\n\t        if(avec.test(params[k])) {\n\t            p = params[k].substring(0,params[k].length-3);\n\t            thevec = p;\n\t        } else { p = params[k]; }\n\t        if(p==='ret') haveret = true;\n\t        fun.push(p);\n\t    }\n\t    fun[params.length] = (\n\t            'var _n = '+thevec+'.length;\\n'+\n\t            'var i'+(haveret?'':', ret = Array(_n)')+';\\n'+\n\t            setup+'\\n'+\n\t            'for(i=_n-1;i!==-1;--i) {\\n'+\n\t            body+'\\n'+\n\t            '}\\n'+\n\t            'return ret;'\n\t            );\n\t    return Function.apply(null,fun);\n\t}\n\tnumeric._biforeach = (function _biforeach(x,y,s,k,f) {\n\t    if(k === s.length-1) { f(x,y); return; }\n\t    var i,n=s[k];\n\t    for(i=n-1;i>=0;i--) { _biforeach(typeof x===\"object\"?x[i]:x,typeof y===\"object\"?y[i]:y,s,k+1,f); }\n\t});\n\tnumeric._biforeach2 = (function _biforeach2(x,y,s,k,f) {\n\t    if(k === s.length-1) { return f(x,y); }\n\t    var i,n=s[k],ret = Array(n);\n\t    for(i=n-1;i>=0;--i) { ret[i] = _biforeach2(typeof x===\"object\"?x[i]:x,typeof y===\"object\"?y[i]:y,s,k+1,f); }\n\t    return ret;\n\t});\n\tnumeric._foreach = (function _foreach(x,s,k,f) {\n\t    if(k === s.length-1) { f(x); return; }\n\t    var i,n=s[k];\n\t    for(i=n-1;i>=0;i--) { _foreach(x[i],s,k+1,f); }\n\t});\n\tnumeric._foreach2 = (function _foreach2(x,s,k,f) {\n\t    if(k === s.length-1) { return f(x); }\n\t    var i,n=s[k], ret = Array(n);\n\t    for(i=n-1;i>=0;i--) { ret[i] = _foreach2(x[i],s,k+1,f); }\n\t    return ret;\n\t});\n\t\n\t/*numeric.anyV = numeric.mapreduce('if(xi) return true;','false');\n\tnumeric.allV = numeric.mapreduce('if(!xi) return false;','true');\n\tnumeric.any = function(x) { if(typeof x.length === \"undefined\") return x; return numeric.anyV(x); }\n\tnumeric.all = function(x) { if(typeof x.length === \"undefined\") return x; return numeric.allV(x); }*/\n\t\n\tnumeric.ops2 = {\n\t        add: '+',\n\t        sub: '-',\n\t        mul: '*',\n\t        div: '/',\n\t        mod: '%',\n\t        and: '&&',\n\t        or:  '||',\n\t        eq:  '===',\n\t        neq: '!==',\n\t        lt:  '<',\n\t        gt:  '>',\n\t        leq: '<=',\n\t        geq: '>=',\n\t        band: '&',\n\t        bor: '|',\n\t        bxor: '^',\n\t        lshift: '<<',\n\t        rshift: '>>',\n\t        rrshift: '>>>'\n\t};\n\tnumeric.opseq = {\n\t        addeq: '+=',\n\t        subeq: '-=',\n\t        muleq: '*=',\n\t        diveq: '/=',\n\t        modeq: '%=',\n\t        lshifteq: '<<=',\n\t        rshifteq: '>>=',\n\t        rrshifteq: '>>>=',\n\t        bandeq: '&=',\n\t        boreq: '|=',\n\t        bxoreq: '^='\n\t};\n\tnumeric.mathfuns = ['abs','acos','asin','atan','ceil','cos',\n\t                    'exp','floor','log','round','sin','sqrt','tan',\n\t                    'isNaN','isFinite'];\n\tnumeric.mathfuns2 = ['atan2','pow','max','min'];\n\tnumeric.ops1 = {\n\t        neg: '-',\n\t        not: '!',\n\t        bnot: '~',\n\t        clone: ''\n\t};\n\tnumeric.mapreducers = {\n\t        any: ['if(xi) return true;','var accum = false;'],\n\t        all: ['if(!xi) return false;','var accum = true;'],\n\t        sum: ['accum += xi;','var accum = 0;'],\n\t        prod: ['accum *= xi;','var accum = 1;'],\n\t        norm2Squared: ['accum += xi*xi;','var accum = 0;'],\n\t        norminf: ['accum = max(accum,abs(xi));','var accum = 0, max = Math.max, abs = Math.abs;'],\n\t        norm1: ['accum += abs(xi)','var accum = 0, abs = Math.abs;'],\n\t        sup: ['accum = max(accum,xi);','var accum = -Infinity, max = Math.max;'],\n\t        inf: ['accum = min(accum,xi);','var accum = Infinity, min = Math.min;']\n\t};\n\t\n\t(function () {\n\t    var i,o;\n\t    for(i=0;i<numeric.mathfuns2.length;++i) {\n\t        o = numeric.mathfuns2[i];\n\t        numeric.ops2[o] = o;\n\t    }\n\t    for(i in numeric.ops2) {\n\t        if(numeric.ops2.hasOwnProperty(i)) {\n\t            o = numeric.ops2[i];\n\t            var code, codeeq, setup = '';\n\t            if(numeric.myIndexOf.call(numeric.mathfuns2,i)!==-1) {\n\t                setup = 'var '+o+' = Math.'+o+';\\n';\n\t                code = function(r,x,y) { return r+' = '+o+'('+x+','+y+')'; };\n\t                codeeq = function(x,y) { return x+' = '+o+'('+x+','+y+')'; };\n\t            } else {\n\t                code = function(r,x,y) { return r+' = '+x+' '+o+' '+y; };\n\t                if(numeric.opseq.hasOwnProperty(i+'eq')) {\n\t                    codeeq = function(x,y) { return x+' '+o+'= '+y; };\n\t                } else {\n\t                    codeeq = function(x,y) { return x+' = '+x+' '+o+' '+y; };                    \n\t                }\n\t            }\n\t            numeric[i+'VV'] = numeric.pointwise2(['x[i]','y[i]'],code('ret[i]','x[i]','y[i]'),setup);\n\t            numeric[i+'SV'] = numeric.pointwise2(['x','y[i]'],code('ret[i]','x','y[i]'),setup);\n\t            numeric[i+'VS'] = numeric.pointwise2(['x[i]','y'],code('ret[i]','x[i]','y'),setup);\n\t            numeric[i] = Function(\n\t                    'var n = arguments.length, i, x = arguments[0], y;\\n'+\n\t                    'var VV = numeric.'+i+'VV, VS = numeric.'+i+'VS, SV = numeric.'+i+'SV;\\n'+\n\t                    'var dim = numeric.dim;\\n'+\n\t                    'for(i=1;i!==n;++i) { \\n'+\n\t                    '  y = arguments[i];\\n'+\n\t                    '  if(typeof x === \"object\") {\\n'+\n\t                    '      if(typeof y === \"object\") x = numeric._biforeach2(x,y,dim(x),0,VV);\\n'+\n\t                    '      else x = numeric._biforeach2(x,y,dim(x),0,VS);\\n'+\n\t                    '  } else if(typeof y === \"object\") x = numeric._biforeach2(x,y,dim(y),0,SV);\\n'+\n\t                    '  else '+codeeq('x','y')+'\\n'+\n\t                    '}\\nreturn x;\\n');\n\t            numeric[o] = numeric[i];\n\t            numeric[i+'eqV'] = numeric.pointwise2(['ret[i]','x[i]'], codeeq('ret[i]','x[i]'),setup);\n\t            numeric[i+'eqS'] = numeric.pointwise2(['ret[i]','x'], codeeq('ret[i]','x'),setup);\n\t            numeric[i+'eq'] = Function(\n\t                    'var n = arguments.length, i, x = arguments[0], y;\\n'+\n\t                    'var V = numeric.'+i+'eqV, S = numeric.'+i+'eqS\\n'+\n\t                    'var s = numeric.dim(x);\\n'+\n\t                    'for(i=1;i!==n;++i) { \\n'+\n\t                    '  y = arguments[i];\\n'+\n\t                    '  if(typeof y === \"object\") numeric._biforeach(x,y,s,0,V);\\n'+\n\t                    '  else numeric._biforeach(x,y,s,0,S);\\n'+\n\t                    '}\\nreturn x;\\n');\n\t        }\n\t    }\n\t    for(i=0;i<numeric.mathfuns2.length;++i) {\n\t        o = numeric.mathfuns2[i];\n\t        delete numeric.ops2[o];\n\t    }\n\t    for(i=0;i<numeric.mathfuns.length;++i) {\n\t        o = numeric.mathfuns[i];\n\t        numeric.ops1[o] = o;\n\t    }\n\t    for(i in numeric.ops1) {\n\t        if(numeric.ops1.hasOwnProperty(i)) {\n\t            setup = '';\n\t            o = numeric.ops1[i];\n\t            if(numeric.myIndexOf.call(numeric.mathfuns,i)!==-1) {\n\t                if(Math.hasOwnProperty(o)) setup = 'var '+o+' = Math.'+o+';\\n';\n\t            }\n\t            numeric[i+'eqV'] = numeric.pointwise2(['ret[i]'],'ret[i] = '+o+'(ret[i]);',setup);\n\t            numeric[i+'eq'] = Function('x',\n\t                    'if(typeof x !== \"object\") return '+o+'x\\n'+\n\t                    'var i;\\n'+\n\t                    'var V = numeric.'+i+'eqV;\\n'+\n\t                    'var s = numeric.dim(x);\\n'+\n\t                    'numeric._foreach(x,s,0,V);\\n'+\n\t                    'return x;\\n');\n\t            numeric[i+'V'] = numeric.pointwise2(['x[i]'],'ret[i] = '+o+'(x[i]);',setup);\n\t            numeric[i] = Function('x',\n\t                    'if(typeof x !== \"object\") return '+o+'(x)\\n'+\n\t                    'var i;\\n'+\n\t                    'var V = numeric.'+i+'V;\\n'+\n\t                    'var s = numeric.dim(x);\\n'+\n\t                    'return numeric._foreach2(x,s,0,V);\\n');\n\t        }\n\t    }\n\t    for(i=0;i<numeric.mathfuns.length;++i) {\n\t        o = numeric.mathfuns[i];\n\t        delete numeric.ops1[o];\n\t    }\n\t    for(i in numeric.mapreducers) {\n\t        if(numeric.mapreducers.hasOwnProperty(i)) {\n\t            o = numeric.mapreducers[i];\n\t            numeric[i+'V'] = numeric.mapreduce2(o[0],o[1]);\n\t            numeric[i] = Function('x','s','k',\n\t                    o[1]+\n\t                    'if(typeof x !== \"object\") {'+\n\t                    '    xi = x;\\n'+\n\t                    o[0]+';\\n'+\n\t                    '    return accum;\\n'+\n\t                    '}'+\n\t                    'if(typeof s === \"undefined\") s = numeric.dim(x);\\n'+\n\t                    'if(typeof k === \"undefined\") k = 0;\\n'+\n\t                    'if(k === s.length-1) return numeric.'+i+'V(x);\\n'+\n\t                    'var xi;\\n'+\n\t                    'var n = x.length, i;\\n'+\n\t                    'for(i=n-1;i!==-1;--i) {\\n'+\n\t                    '   xi = arguments.callee(x[i]);\\n'+\n\t                    o[0]+';\\n'+\n\t                    '}\\n'+\n\t                    'return accum;\\n');\n\t        }\n\t    }\n\t}());\n\t\n\tnumeric.truncVV = numeric.pointwise(['x[i]','y[i]'],'ret[i] = round(x[i]/y[i])*y[i];','var round = Math.round;');\n\tnumeric.truncVS = numeric.pointwise(['x[i]','y'],'ret[i] = round(x[i]/y)*y;','var round = Math.round;');\n\tnumeric.truncSV = numeric.pointwise(['x','y[i]'],'ret[i] = round(x/y[i])*y[i];','var round = Math.round;');\n\tnumeric.trunc = function trunc(x,y) {\n\t    if(typeof x === \"object\") {\n\t        if(typeof y === \"object\") return numeric.truncVV(x,y);\n\t        return numeric.truncVS(x,y);\n\t    }\n\t    if (typeof y === \"object\") return numeric.truncSV(x,y);\n\t    return Math.round(x/y)*y;\n\t}\n\t\n\tnumeric.inv = function inv(x) {\n\t    var s = numeric.dim(x), abs = Math.abs, m = s[0], n = s[1];\n\t    var A = numeric.clone(x), Ai, Aj;\n\t    var I = numeric.identity(m), Ii, Ij;\n\t    var i,j,k,x;\n\t    for(j=0;j<n;++j) {\n\t        var i0 = -1;\n\t        var v0 = -1;\n\t        for(i=j;i!==m;++i) { k = abs(A[i][j]); if(k>v0) { i0 = i; v0 = k; } }\n\t        Aj = A[i0]; A[i0] = A[j]; A[j] = Aj;\n\t        Ij = I[i0]; I[i0] = I[j]; I[j] = Ij;\n\t        x = Aj[j];\n\t        for(k=j;k!==n;++k)    Aj[k] /= x; \n\t        for(k=n-1;k!==-1;--k) Ij[k] /= x;\n\t        for(i=m-1;i!==-1;--i) {\n\t            if(i!==j) {\n\t                Ai = A[i];\n\t                Ii = I[i];\n\t                x = Ai[j];\n\t                for(k=j+1;k!==n;++k)  Ai[k] -= Aj[k]*x;\n\t                for(k=n-1;k>0;--k) { Ii[k] -= Ij[k]*x; --k; Ii[k] -= Ij[k]*x; }\n\t                if(k===0) Ii[0] -= Ij[0]*x;\n\t            }\n\t        }\n\t    }\n\t    return I;\n\t}\n\t\n\tnumeric.det = function det(x) {\n\t    var s = numeric.dim(x);\n\t    if(s.length !== 2 || s[0] !== s[1]) { throw new Error('numeric: det() only works on square matrices'); }\n\t    var n = s[0], ret = 1,i,j,k,A = numeric.clone(x),Aj,Ai,alpha,temp,k1,k2,k3;\n\t    for(j=0;j<n-1;j++) {\n\t        k=j;\n\t        for(i=j+1;i<n;i++) { if(Math.abs(A[i][j]) > Math.abs(A[k][j])) { k = i; } }\n\t        if(k !== j) {\n\t            temp = A[k]; A[k] = A[j]; A[j] = temp;\n\t            ret *= -1;\n\t        }\n\t        Aj = A[j];\n\t        for(i=j+1;i<n;i++) {\n\t            Ai = A[i];\n\t            alpha = Ai[j]/Aj[j];\n\t            for(k=j+1;k<n-1;k+=2) {\n\t                k1 = k+1;\n\t                Ai[k] -= Aj[k]*alpha;\n\t                Ai[k1] -= Aj[k1]*alpha;\n\t            }\n\t            if(k!==n) { Ai[k] -= Aj[k]*alpha; }\n\t        }\n\t        if(Aj[j] === 0) { return 0; }\n\t        ret *= Aj[j];\n\t    }\n\t    return ret*A[j][j];\n\t}\n\t\n\tnumeric.transpose = function transpose(x) {\n\t    var i,j,m = x.length,n = x[0].length, ret=Array(n),A0,A1,Bj;\n\t    for(j=0;j<n;j++) ret[j] = Array(m);\n\t    for(i=m-1;i>=1;i-=2) {\n\t        A1 = x[i];\n\t        A0 = x[i-1];\n\t        for(j=n-1;j>=1;--j) {\n\t            Bj = ret[j]; Bj[i] = A1[j]; Bj[i-1] = A0[j];\n\t            --j;\n\t            Bj = ret[j]; Bj[i] = A1[j]; Bj[i-1] = A0[j];\n\t        }\n\t        if(j===0) {\n\t            Bj = ret[0]; Bj[i] = A1[0]; Bj[i-1] = A0[0];\n\t        }\n\t    }\n\t    if(i===0) {\n\t        A0 = x[0];\n\t        for(j=n-1;j>=1;--j) {\n\t            ret[j][0] = A0[j];\n\t            --j;\n\t            ret[j][0] = A0[j];\n\t        }\n\t        if(j===0) { ret[0][0] = A0[0]; }\n\t    }\n\t    return ret;\n\t}\n\tnumeric.negtranspose = function negtranspose(x) {\n\t    var i,j,m = x.length,n = x[0].length, ret=Array(n),A0,A1,Bj;\n\t    for(j=0;j<n;j++) ret[j] = Array(m);\n\t    for(i=m-1;i>=1;i-=2) {\n\t        A1 = x[i];\n\t        A0 = x[i-1];\n\t        for(j=n-1;j>=1;--j) {\n\t            Bj = ret[j]; Bj[i] = -A1[j]; Bj[i-1] = -A0[j];\n\t            --j;\n\t            Bj = ret[j]; Bj[i] = -A1[j]; Bj[i-1] = -A0[j];\n\t        }\n\t        if(j===0) {\n\t            Bj = ret[0]; Bj[i] = -A1[0]; Bj[i-1] = -A0[0];\n\t        }\n\t    }\n\t    if(i===0) {\n\t        A0 = x[0];\n\t        for(j=n-1;j>=1;--j) {\n\t            ret[j][0] = -A0[j];\n\t            --j;\n\t            ret[j][0] = -A0[j];\n\t        }\n\t        if(j===0) { ret[0][0] = -A0[0]; }\n\t    }\n\t    return ret;\n\t}\n\t\n\tnumeric._random = function _random(s,k) {\n\t    var i,n=s[k],ret=Array(n), rnd;\n\t    if(k === s.length-1) {\n\t        rnd = Math.random;\n\t        for(i=n-1;i>=1;i-=2) {\n\t            ret[i] = rnd();\n\t            ret[i-1] = rnd();\n\t        }\n\t        if(i===0) { ret[0] = rnd(); }\n\t        return ret;\n\t    }\n\t    for(i=n-1;i>=0;i--) ret[i] = _random(s,k+1);\n\t    return ret;\n\t}\n\tnumeric.random = function random(s) { return numeric._random(s,0); }\n\t\n\tnumeric.norm2 = function norm2(x) { return Math.sqrt(numeric.norm2Squared(x)); }\n\t\n\tnumeric.linspace = function linspace(a,b,n) {\n\t    if(typeof n === \"undefined\") n = Math.max(Math.round(b-a)+1,1);\n\t    if(n<2) { return n===1?[a]:[]; }\n\t    var i,ret = Array(n);\n\t    n--;\n\t    for(i=n;i>=0;i--) { ret[i] = (i*b+(n-i)*a)/n; }\n\t    return ret;\n\t}\n\t\n\tnumeric.getBlock = function getBlock(x,from,to) {\n\t    var s = numeric.dim(x);\n\t    function foo(x,k) {\n\t        var i,a = from[k], n = to[k]-a, ret = Array(n);\n\t        if(k === s.length-1) {\n\t            for(i=n;i>=0;i--) { ret[i] = x[i+a]; }\n\t            return ret;\n\t        }\n\t        for(i=n;i>=0;i--) { ret[i] = foo(x[i+a],k+1); }\n\t        return ret;\n\t    }\n\t    return foo(x,0);\n\t}\n\t\n\tnumeric.setBlock = function setBlock(x,from,to,B) {\n\t    var s = numeric.dim(x);\n\t    function foo(x,y,k) {\n\t        var i,a = from[k], n = to[k]-a;\n\t        if(k === s.length-1) { for(i=n;i>=0;i--) { x[i+a] = y[i]; } }\n\t        for(i=n;i>=0;i--) { foo(x[i+a],y[i],k+1); }\n\t    }\n\t    foo(x,B,0);\n\t    return x;\n\t}\n\t\n\tnumeric.getRange = function getRange(A,I,J) {\n\t    var m = I.length, n = J.length;\n\t    var i,j;\n\t    var B = Array(m), Bi, AI;\n\t    for(i=m-1;i!==-1;--i) {\n\t        B[i] = Array(n);\n\t        Bi = B[i];\n\t        AI = A[I[i]];\n\t        for(j=n-1;j!==-1;--j) Bi[j] = AI[J[j]];\n\t    }\n\t    return B;\n\t}\n\t\n\tnumeric.blockMatrix = function blockMatrix(X) {\n\t    var s = numeric.dim(X);\n\t    if(s.length<4) return numeric.blockMatrix([X]);\n\t    var m=s[0],n=s[1],M,N,i,j,Xij;\n\t    M = 0; N = 0;\n\t    for(i=0;i<m;++i) M+=X[i][0].length;\n\t    for(j=0;j<n;++j) N+=X[0][j][0].length;\n\t    var Z = Array(M);\n\t    for(i=0;i<M;++i) Z[i] = Array(N);\n\t    var I=0,J,ZI,k,l,Xijk;\n\t    for(i=0;i<m;++i) {\n\t        J=N;\n\t        for(j=n-1;j!==-1;--j) {\n\t            Xij = X[i][j];\n\t            J -= Xij[0].length;\n\t            for(k=Xij.length-1;k!==-1;--k) {\n\t                Xijk = Xij[k];\n\t                ZI = Z[I+k];\n\t                for(l = Xijk.length-1;l!==-1;--l) ZI[J+l] = Xijk[l];\n\t            }\n\t        }\n\t        I += X[i][0].length;\n\t    }\n\t    return Z;\n\t}\n\t\n\tnumeric.tensor = function tensor(x,y) {\n\t    if(typeof x === \"number\" || typeof y === \"number\") return numeric.mul(x,y);\n\t    var s1 = numeric.dim(x), s2 = numeric.dim(y);\n\t    if(s1.length !== 1 || s2.length !== 1) {\n\t        throw new Error('numeric: tensor product is only defined for vectors');\n\t    }\n\t    var m = s1[0], n = s2[0], A = Array(m), Ai, i,j,xi;\n\t    for(i=m-1;i>=0;i--) {\n\t        Ai = Array(n);\n\t        xi = x[i];\n\t        for(j=n-1;j>=3;--j) {\n\t            Ai[j] = xi * y[j];\n\t            --j;\n\t            Ai[j] = xi * y[j];\n\t            --j;\n\t            Ai[j] = xi * y[j];\n\t            --j;\n\t            Ai[j] = xi * y[j];\n\t        }\n\t        while(j>=0) { Ai[j] = xi * y[j]; --j; }\n\t        A[i] = Ai;\n\t    }\n\t    return A;\n\t}\n\t\n\t// 3. The Tensor type T\n\tnumeric.T = function T(x,y) { this.x = x; this.y = y; }\n\tnumeric.t = function t(x,y) { return new numeric.T(x,y); }\n\t\n\tnumeric.Tbinop = function Tbinop(rr,rc,cr,cc,setup) {\n\t    var io = numeric.indexOf;\n\t    if(typeof setup !== \"string\") {\n\t        var k;\n\t        setup = '';\n\t        for(k in numeric) {\n\t            if(numeric.hasOwnProperty(k) && (rr.indexOf(k)>=0 || rc.indexOf(k)>=0 || cr.indexOf(k)>=0 || cc.indexOf(k)>=0) && k.length>1) {\n\t                setup += 'var '+k+' = numeric.'+k+';\\n';\n\t            }\n\t        }\n\t    }\n\t    return Function(['y'],\n\t            'var x = this;\\n'+\n\t            'if(!(y instanceof numeric.T)) { y = new numeric.T(y); }\\n'+\n\t            setup+'\\n'+\n\t            'if(x.y) {'+\n\t            '  if(y.y) {'+\n\t            '    return new numeric.T('+cc+');\\n'+\n\t            '  }\\n'+\n\t            '  return new numeric.T('+cr+');\\n'+\n\t            '}\\n'+\n\t            'if(y.y) {\\n'+\n\t            '  return new numeric.T('+rc+');\\n'+\n\t            '}\\n'+\n\t            'return new numeric.T('+rr+');\\n'\n\t    );\n\t}\n\t\n\tnumeric.T.prototype.add = numeric.Tbinop(\n\t        'add(x.x,y.x)',\n\t        'add(x.x,y.x),y.y',\n\t        'add(x.x,y.x),x.y',\n\t        'add(x.x,y.x),add(x.y,y.y)');\n\tnumeric.T.prototype.sub = numeric.Tbinop(\n\t        'sub(x.x,y.x)',\n\t        'sub(x.x,y.x),neg(y.y)',\n\t        'sub(x.x,y.x),x.y',\n\t        'sub(x.x,y.x),sub(x.y,y.y)');\n\tnumeric.T.prototype.mul = numeric.Tbinop(\n\t        'mul(x.x,y.x)',\n\t        'mul(x.x,y.x),mul(x.x,y.y)',\n\t        'mul(x.x,y.x),mul(x.y,y.x)',\n\t        'sub(mul(x.x,y.x),mul(x.y,y.y)),add(mul(x.x,y.y),mul(x.y,y.x))');\n\t\n\tnumeric.T.prototype.reciprocal = function reciprocal() {\n\t    var mul = numeric.mul, div = numeric.div;\n\t    if(this.y) {\n\t        var d = numeric.add(mul(this.x,this.x),mul(this.y,this.y));\n\t        return new numeric.T(div(this.x,d),div(numeric.neg(this.y),d));\n\t    }\n\t    return new T(div(1,this.x));\n\t}\n\tnumeric.T.prototype.div = function div(y) {\n\t    if(!(y instanceof numeric.T)) y = new numeric.T(y);\n\t    if(y.y) { return this.mul(y.reciprocal()); }\n\t    var div = numeric.div;\n\t    if(this.y) { return new numeric.T(div(this.x,y.x),div(this.y,y.x)); }\n\t    return new numeric.T(div(this.x,y.x));\n\t}\n\tnumeric.T.prototype.dot = numeric.Tbinop(\n\t        'dot(x.x,y.x)',\n\t        'dot(x.x,y.x),dot(x.x,y.y)',\n\t        'dot(x.x,y.x),dot(x.y,y.x)',\n\t        'sub(dot(x.x,y.x),dot(x.y,y.y)),add(dot(x.x,y.y),dot(x.y,y.x))'\n\t        );\n\tnumeric.T.prototype.transpose = function transpose() {\n\t    var t = numeric.transpose, x = this.x, y = this.y;\n\t    if(y) { return new numeric.T(t(x),t(y)); }\n\t    return new numeric.T(t(x));\n\t}\n\tnumeric.T.prototype.transjugate = function transjugate() {\n\t    var t = numeric.transpose, x = this.x, y = this.y;\n\t    if(y) { return new numeric.T(t(x),numeric.negtranspose(y)); }\n\t    return new numeric.T(t(x));\n\t}\n\tnumeric.Tunop = function Tunop(r,c,s) {\n\t    if(typeof s !== \"string\") { s = ''; }\n\t    return Function(\n\t            'var x = this;\\n'+\n\t            s+'\\n'+\n\t            'if(x.y) {'+\n\t            '  '+c+';\\n'+\n\t            '}\\n'+\n\t            r+';\\n'\n\t    );\n\t}\n\t\n\tnumeric.T.prototype.exp = numeric.Tunop(\n\t        'return new numeric.T(ex)',\n\t        'return new numeric.T(mul(cos(x.y),ex),mul(sin(x.y),ex))',\n\t        'var ex = numeric.exp(x.x), cos = numeric.cos, sin = numeric.sin, mul = numeric.mul;');\n\tnumeric.T.prototype.conj = numeric.Tunop(\n\t        'return new numeric.T(x.x);',\n\t        'return new numeric.T(x.x,numeric.neg(x.y));');\n\tnumeric.T.prototype.neg = numeric.Tunop(\n\t        'return new numeric.T(neg(x.x));',\n\t        'return new numeric.T(neg(x.x),neg(x.y));',\n\t        'var neg = numeric.neg;');\n\tnumeric.T.prototype.sin = numeric.Tunop(\n\t        'return new numeric.T(numeric.sin(x.x))',\n\t        'return x.exp().sub(x.neg().exp()).div(new numeric.T(0,2));');\n\tnumeric.T.prototype.cos = numeric.Tunop(\n\t        'return new numeric.T(numeric.cos(x.x))',\n\t        'return x.exp().add(x.neg().exp()).div(2);');\n\tnumeric.T.prototype.abs = numeric.Tunop(\n\t        'return new numeric.T(numeric.abs(x.x));',\n\t        'return new numeric.T(numeric.sqrt(numeric.add(mul(x.x,x.x),mul(x.y,x.y))));',\n\t        'var mul = numeric.mul;');\n\tnumeric.T.prototype.log = numeric.Tunop(\n\t        'return new numeric.T(numeric.log(x.x));',\n\t        'var theta = new numeric.T(numeric.atan2(x.y,x.x)), r = x.abs();\\n'+\n\t        'return new numeric.T(numeric.log(r.x),theta.x);');\n\tnumeric.T.prototype.norm2 = numeric.Tunop(\n\t        'return numeric.norm2(x.x);',\n\t        'var f = numeric.norm2Squared;\\n'+\n\t        'return Math.sqrt(f(x.x)+f(x.y));');\n\tnumeric.T.prototype.inv = function inv() {\n\t    var A = this;\n\t    if(typeof A.y === \"undefined\") { return new numeric.T(numeric.inv(A.x)); }\n\t    var n = A.x.length, i, j, k;\n\t    var Rx = numeric.identity(n),Ry = numeric.rep([n,n],0);\n\t    var Ax = numeric.clone(A.x), Ay = numeric.clone(A.y);\n\t    var Aix, Aiy, Ajx, Ajy, Rix, Riy, Rjx, Rjy;\n\t    var i,j,k,d,d1,ax,ay,bx,by,temp;\n\t    for(i=0;i<n;i++) {\n\t        ax = Ax[i][i]; ay = Ay[i][i];\n\t        d = ax*ax+ay*ay;\n\t        k = i;\n\t        for(j=i+1;j<n;j++) {\n\t            ax = Ax[j][i]; ay = Ay[j][i];\n\t            d1 = ax*ax+ay*ay;\n\t            if(d1 > d) { k=j; d = d1; }\n\t        }\n\t        if(k!==i) {\n\t            temp = Ax[i]; Ax[i] = Ax[k]; Ax[k] = temp;\n\t            temp = Ay[i]; Ay[i] = Ay[k]; Ay[k] = temp;\n\t            temp = Rx[i]; Rx[i] = Rx[k]; Rx[k] = temp;\n\t            temp = Ry[i]; Ry[i] = Ry[k]; Ry[k] = temp;\n\t        }\n\t        Aix = Ax[i]; Aiy = Ay[i];\n\t        Rix = Rx[i]; Riy = Ry[i];\n\t        ax = Aix[i]; ay = Aiy[i];\n\t        for(j=i+1;j<n;j++) {\n\t            bx = Aix[j]; by = Aiy[j];\n\t            Aix[j] = (bx*ax+by*ay)/d;\n\t            Aiy[j] = (by*ax-bx*ay)/d;\n\t        }\n\t        for(j=0;j<n;j++) {\n\t            bx = Rix[j]; by = Riy[j];\n\t            Rix[j] = (bx*ax+by*ay)/d;\n\t            Riy[j] = (by*ax-bx*ay)/d;\n\t        }\n\t        for(j=i+1;j<n;j++) {\n\t            Ajx = Ax[j]; Ajy = Ay[j];\n\t            Rjx = Rx[j]; Rjy = Ry[j];\n\t            ax = Ajx[i]; ay = Ajy[i];\n\t            for(k=i+1;k<n;k++) {\n\t                bx = Aix[k]; by = Aiy[k];\n\t                Ajx[k] -= bx*ax-by*ay;\n\t                Ajy[k] -= by*ax+bx*ay;\n\t            }\n\t            for(k=0;k<n;k++) {\n\t                bx = Rix[k]; by = Riy[k];\n\t                Rjx[k] -= bx*ax-by*ay;\n\t                Rjy[k] -= by*ax+bx*ay;\n\t            }\n\t        }\n\t    }\n\t    for(i=n-1;i>0;i--) {\n\t        Rix = Rx[i]; Riy = Ry[i];\n\t        for(j=i-1;j>=0;j--) {\n\t            Rjx = Rx[j]; Rjy = Ry[j];\n\t            ax = Ax[j][i]; ay = Ay[j][i];\n\t            for(k=n-1;k>=0;k--) {\n\t                bx = Rix[k]; by = Riy[k];\n\t                Rjx[k] -= ax*bx - ay*by;\n\t                Rjy[k] -= ax*by + ay*bx;\n\t            }\n\t        }\n\t    }\n\t    return new numeric.T(Rx,Ry);\n\t}\n\tnumeric.T.prototype.get = function get(i) {\n\t    var x = this.x, y = this.y, k = 0, ik, n = i.length;\n\t    if(y) {\n\t        while(k<n) {\n\t            ik = i[k];\n\t            x = x[ik];\n\t            y = y[ik];\n\t            k++;\n\t        }\n\t        return new numeric.T(x,y);\n\t    }\n\t    while(k<n) {\n\t        ik = i[k];\n\t        x = x[ik];\n\t        k++;\n\t    }\n\t    return new numeric.T(x);\n\t}\n\tnumeric.T.prototype.set = function set(i,v) {\n\t    var x = this.x, y = this.y, k = 0, ik, n = i.length, vx = v.x, vy = v.y;\n\t    if(n===0) {\n\t        if(vy) { this.y = vy; }\n\t        else if(y) { this.y = undefined; }\n\t        this.x = x;\n\t        return this;\n\t    }\n\t    if(vy) {\n\t        if(y) { /* ok */ }\n\t        else {\n\t            y = numeric.rep(numeric.dim(x),0);\n\t            this.y = y;\n\t        }\n\t        while(k<n-1) {\n\t            ik = i[k];\n\t            x = x[ik];\n\t            y = y[ik];\n\t            k++;\n\t        }\n\t        ik = i[k];\n\t        x[ik] = vx;\n\t        y[ik] = vy;\n\t        return this;\n\t    }\n\t    if(y) {\n\t        while(k<n-1) {\n\t            ik = i[k];\n\t            x = x[ik];\n\t            y = y[ik];\n\t            k++;\n\t        }\n\t        ik = i[k];\n\t        x[ik] = vx;\n\t        if(vx instanceof Array) y[ik] = numeric.rep(numeric.dim(vx),0);\n\t        else y[ik] = 0;\n\t        return this;\n\t    }\n\t    while(k<n-1) {\n\t        ik = i[k];\n\t        x = x[ik];\n\t        k++;\n\t    }\n\t    ik = i[k];\n\t    x[ik] = vx;\n\t    return this;\n\t}\n\tnumeric.T.prototype.getRows = function getRows(i0,i1) {\n\t    var n = i1-i0+1, j;\n\t    var rx = Array(n), ry, x = this.x, y = this.y;\n\t    for(j=i0;j<=i1;j++) { rx[j-i0] = x[j]; }\n\t    if(y) {\n\t        ry = Array(n);\n\t        for(j=i0;j<=i1;j++) { ry[j-i0] = y[j]; }\n\t        return new numeric.T(rx,ry);\n\t    }\n\t    return new numeric.T(rx);\n\t}\n\tnumeric.T.prototype.setRows = function setRows(i0,i1,A) {\n\t    var j;\n\t    var rx = this.x, ry = this.y, x = A.x, y = A.y;\n\t    for(j=i0;j<=i1;j++) { rx[j] = x[j-i0]; }\n\t    if(y) {\n\t        if(!ry) { ry = numeric.rep(numeric.dim(rx),0); this.y = ry; }\n\t        for(j=i0;j<=i1;j++) { ry[j] = y[j-i0]; }\n\t    } else if(ry) {\n\t        for(j=i0;j<=i1;j++) { ry[j] = numeric.rep([x[j-i0].length],0); }\n\t    }\n\t    return this;\n\t}\n\tnumeric.T.prototype.getRow = function getRow(k) {\n\t    var x = this.x, y = this.y;\n\t    if(y) { return new numeric.T(x[k],y[k]); }\n\t    return new numeric.T(x[k]);\n\t}\n\tnumeric.T.prototype.setRow = function setRow(i,v) {\n\t    var rx = this.x, ry = this.y, x = v.x, y = v.y;\n\t    rx[i] = x;\n\t    if(y) {\n\t        if(!ry) { ry = numeric.rep(numeric.dim(rx),0); this.y = ry; }\n\t        ry[i] = y;\n\t    } else if(ry) {\n\t        ry = numeric.rep([x.length],0);\n\t    }\n\t    return this;\n\t}\n\t\n\tnumeric.T.prototype.getBlock = function getBlock(from,to) {\n\t    var x = this.x, y = this.y, b = numeric.getBlock;\n\t    if(y) { return new numeric.T(b(x,from,to),b(y,from,to)); }\n\t    return new numeric.T(b(x,from,to));\n\t}\n\tnumeric.T.prototype.setBlock = function setBlock(from,to,A) {\n\t    if(!(A instanceof numeric.T)) A = new numeric.T(A);\n\t    var x = this.x, y = this.y, b = numeric.setBlock, Ax = A.x, Ay = A.y;\n\t    if(Ay) {\n\t        if(!y) { this.y = numeric.rep(numeric.dim(this),0); y = this.y; }\n\t        b(x,from,to,Ax);\n\t        b(y,from,to,Ay);\n\t        return this;\n\t    }\n\t    b(x,from,to,Ax);\n\t    if(y) b(y,from,to,numeric.rep(numeric.dim(Ax),0));\n\t}\n\tnumeric.T.rep = function rep(s,v) {\n\t    var T = numeric.T;\n\t    if(!(v instanceof T)) v = new T(v);\n\t    var x = v.x, y = v.y, r = numeric.rep;\n\t    if(y) return new T(r(s,x),r(s,y));\n\t    return new T(r(s,x));\n\t}\n\tnumeric.T.diag = function diag(d) {\n\t    if(!(d instanceof numeric.T)) d = new numeric.T(d);\n\t    var x = d.x, y = d.y, diag = numeric.diag;\n\t    if(y) return new numeric.T(diag(x),diag(y));\n\t    return new numeric.T(diag(x));\n\t}\n\tnumeric.T.eig = function eig() {\n\t    if(this.y) { throw new Error('eig: not implemented for complex matrices.'); }\n\t    return numeric.eig(this.x);\n\t}\n\tnumeric.T.identity = function identity(n) { return new numeric.T(numeric.identity(n)); }\n\tnumeric.T.prototype.getDiag = function getDiag() {\n\t    var n = numeric;\n\t    var x = this.x, y = this.y;\n\t    if(y) { return new n.T(n.getDiag(x),n.getDiag(y)); }\n\t    return new n.T(n.getDiag(x));\n\t}\n\t\n\t// 4. Eigenvalues of real matrices\n\t\n\tnumeric.house = function house(x) {\n\t    var v = numeric.clone(x);\n\t    var s = x[0] >= 0 ? 1 : -1;\n\t    var alpha = s*numeric.norm2(x);\n\t    v[0] += alpha;\n\t    var foo = numeric.norm2(v);\n\t    if(foo === 0) { /* this should not happen */ throw new Error('eig: internal error'); }\n\t    return numeric.div(v,foo);\n\t}\n\t\n\tnumeric.toUpperHessenberg = function toUpperHessenberg(me) {\n\t    var s = numeric.dim(me);\n\t    if(s.length !== 2 || s[0] !== s[1]) { throw new Error('numeric: toUpperHessenberg() only works on square matrices'); }\n\t    var m = s[0], i,j,k,x,v,A = numeric.clone(me),B,C,Ai,Ci,Q = numeric.identity(m),Qi;\n\t    for(j=0;j<m-2;j++) {\n\t        x = Array(m-j-1);\n\t        for(i=j+1;i<m;i++) { x[i-j-1] = A[i][j]; }\n\t        if(numeric.norm2(x)>0) {\n\t            v = numeric.house(x);\n\t            B = numeric.getBlock(A,[j+1,j],[m-1,m-1]);\n\t            C = numeric.tensor(v,numeric.dot(v,B));\n\t            for(i=j+1;i<m;i++) { Ai = A[i]; Ci = C[i-j-1]; for(k=j;k<m;k++) Ai[k] -= 2*Ci[k-j]; }\n\t            B = numeric.getBlock(A,[0,j+1],[m-1,m-1]);\n\t            C = numeric.tensor(numeric.dot(B,v),v);\n\t            for(i=0;i<m;i++) { Ai = A[i]; Ci = C[i]; for(k=j+1;k<m;k++) Ai[k] -= 2*Ci[k-j-1]; }\n\t            B = Array(m-j-1);\n\t            for(i=j+1;i<m;i++) B[i-j-1] = Q[i];\n\t            C = numeric.tensor(v,numeric.dot(v,B));\n\t            for(i=j+1;i<m;i++) { Qi = Q[i]; Ci = C[i-j-1]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }\n\t        }\n\t    }\n\t    return {H:A, Q:Q};\n\t}\n\t\n\tnumeric.epsilon = 2.220446049250313e-16;\n\t\n\tnumeric.QRFrancis = function(H,maxiter) {\n\t    if(typeof maxiter === \"undefined\") { maxiter = 10000; }\n\t    H = numeric.clone(H);\n\t    var H0 = numeric.clone(H);\n\t    var s = numeric.dim(H),m=s[0],x,v,a,b,c,d,det,tr, Hloc, Q = numeric.identity(m), Qi, Hi, B, C, Ci,i,j,k,iter;\n\t    if(m<3) { return {Q:Q, B:[ [0,m-1] ]}; }\n\t    var epsilon = numeric.epsilon;\n\t    for(iter=0;iter<maxiter;iter++) {\n\t        for(j=0;j<m-1;j++) {\n\t            if(Math.abs(H[j+1][j]) < epsilon*(Math.abs(H[j][j])+Math.abs(H[j+1][j+1]))) {\n\t                var QH1 = numeric.QRFrancis(numeric.getBlock(H,[0,0],[j,j]),maxiter);\n\t                var QH2 = numeric.QRFrancis(numeric.getBlock(H,[j+1,j+1],[m-1,m-1]),maxiter);\n\t                B = Array(j+1);\n\t                for(i=0;i<=j;i++) { B[i] = Q[i]; }\n\t                C = numeric.dot(QH1.Q,B);\n\t                for(i=0;i<=j;i++) { Q[i] = C[i]; }\n\t                B = Array(m-j-1);\n\t                for(i=j+1;i<m;i++) { B[i-j-1] = Q[i]; }\n\t                C = numeric.dot(QH2.Q,B);\n\t                for(i=j+1;i<m;i++) { Q[i] = C[i-j-1]; }\n\t                return {Q:Q,B:QH1.B.concat(numeric.add(QH2.B,j+1))};\n\t            }\n\t        }\n\t        a = H[m-2][m-2]; b = H[m-2][m-1];\n\t        c = H[m-1][m-2]; d = H[m-1][m-1];\n\t        tr = a+d;\n\t        det = (a*d-b*c);\n\t        Hloc = numeric.getBlock(H, [0,0], [2,2]);\n\t        if(tr*tr>=4*det) {\n\t            var s1,s2;\n\t            s1 = 0.5*(tr+Math.sqrt(tr*tr-4*det));\n\t            s2 = 0.5*(tr-Math.sqrt(tr*tr-4*det));\n\t            Hloc = numeric.add(numeric.sub(numeric.dot(Hloc,Hloc),\n\t                                           numeric.mul(Hloc,s1+s2)),\n\t                               numeric.diag(numeric.rep([3],s1*s2)));\n\t        } else {\n\t            Hloc = numeric.add(numeric.sub(numeric.dot(Hloc,Hloc),\n\t                                           numeric.mul(Hloc,tr)),\n\t                               numeric.diag(numeric.rep([3],det)));\n\t        }\n\t        x = [Hloc[0][0],Hloc[1][0],Hloc[2][0]];\n\t        v = numeric.house(x);\n\t        B = [H[0],H[1],H[2]];\n\t        C = numeric.tensor(v,numeric.dot(v,B));\n\t        for(i=0;i<3;i++) { Hi = H[i]; Ci = C[i]; for(k=0;k<m;k++) Hi[k] -= 2*Ci[k]; }\n\t        B = numeric.getBlock(H, [0,0],[m-1,2]);\n\t        C = numeric.tensor(numeric.dot(B,v),v);\n\t        for(i=0;i<m;i++) { Hi = H[i]; Ci = C[i]; for(k=0;k<3;k++) Hi[k] -= 2*Ci[k]; }\n\t        B = [Q[0],Q[1],Q[2]];\n\t        C = numeric.tensor(v,numeric.dot(v,B));\n\t        for(i=0;i<3;i++) { Qi = Q[i]; Ci = C[i]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }\n\t        var J;\n\t        for(j=0;j<m-2;j++) {\n\t            for(k=j;k<=j+1;k++) {\n\t                if(Math.abs(H[k+1][k]) < epsilon*(Math.abs(H[k][k])+Math.abs(H[k+1][k+1]))) {\n\t                    var QH1 = numeric.QRFrancis(numeric.getBlock(H,[0,0],[k,k]),maxiter);\n\t                    var QH2 = numeric.QRFrancis(numeric.getBlock(H,[k+1,k+1],[m-1,m-1]),maxiter);\n\t                    B = Array(k+1);\n\t                    for(i=0;i<=k;i++) { B[i] = Q[i]; }\n\t                    C = numeric.dot(QH1.Q,B);\n\t                    for(i=0;i<=k;i++) { Q[i] = C[i]; }\n\t                    B = Array(m-k-1);\n\t                    for(i=k+1;i<m;i++) { B[i-k-1] = Q[i]; }\n\t                    C = numeric.dot(QH2.Q,B);\n\t                    for(i=k+1;i<m;i++) { Q[i] = C[i-k-1]; }\n\t                    return {Q:Q,B:QH1.B.concat(numeric.add(QH2.B,k+1))};\n\t                }\n\t            }\n\t            J = Math.min(m-1,j+3);\n\t            x = Array(J-j);\n\t            for(i=j+1;i<=J;i++) { x[i-j-1] = H[i][j]; }\n\t            v = numeric.house(x);\n\t            B = numeric.getBlock(H, [j+1,j],[J,m-1]);\n\t            C = numeric.tensor(v,numeric.dot(v,B));\n\t            for(i=j+1;i<=J;i++) { Hi = H[i]; Ci = C[i-j-1]; for(k=j;k<m;k++) Hi[k] -= 2*Ci[k-j]; }\n\t            B = numeric.getBlock(H, [0,j+1],[m-1,J]);\n\t            C = numeric.tensor(numeric.dot(B,v),v);\n\t            for(i=0;i<m;i++) { Hi = H[i]; Ci = C[i]; for(k=j+1;k<=J;k++) Hi[k] -= 2*Ci[k-j-1]; }\n\t            B = Array(J-j);\n\t            for(i=j+1;i<=J;i++) B[i-j-1] = Q[i];\n\t            C = numeric.tensor(v,numeric.dot(v,B));\n\t            for(i=j+1;i<=J;i++) { Qi = Q[i]; Ci = C[i-j-1]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }\n\t        }\n\t    }\n\t    throw new Error('numeric: eigenvalue iteration does not converge -- increase maxiter?');\n\t}\n\t\n\tnumeric.eig = function eig(A,maxiter) {\n\t    var QH = numeric.toUpperHessenberg(A);\n\t    var QB = numeric.QRFrancis(QH.H,maxiter);\n\t    var T = numeric.T;\n\t    var n = A.length,i,k,flag = false,B = QB.B,H = numeric.dot(QB.Q,numeric.dot(QH.H,numeric.transpose(QB.Q)));\n\t    var Q = new T(numeric.dot(QB.Q,QH.Q)),Q0;\n\t    var m = B.length,j;\n\t    var a,b,c,d,p1,p2,disc,x,y,p,q,n1,n2;\n\t    var sqrt = Math.sqrt;\n\t    for(k=0;k<m;k++) {\n\t        i = B[k][0];\n\t        if(i === B[k][1]) {\n\t            // nothing\n\t        } else {\n\t            j = i+1;\n\t            a = H[i][i];\n\t            b = H[i][j];\n\t            c = H[j][i];\n\t            d = H[j][j];\n\t            if(b === 0 && c === 0) continue;\n\t            p1 = -a-d;\n\t            p2 = a*d-b*c;\n\t            disc = p1*p1-4*p2;\n\t            if(disc>=0) {\n\t                if(p1<0) x = -0.5*(p1-sqrt(disc));\n\t                else     x = -0.5*(p1+sqrt(disc));\n\t                n1 = (a-x)*(a-x)+b*b;\n\t                n2 = c*c+(d-x)*(d-x);\n\t                if(n1>n2) {\n\t                    n1 = sqrt(n1);\n\t                    p = (a-x)/n1;\n\t                    q = b/n1;\n\t                } else {\n\t                    n2 = sqrt(n2);\n\t                    p = c/n2;\n\t                    q = (d-x)/n2;\n\t                }\n\t                Q0 = new T([[q,-p],[p,q]]);\n\t                Q.setRows(i,j,Q0.dot(Q.getRows(i,j)));\n\t            } else {\n\t                x = -0.5*p1;\n\t                y = 0.5*sqrt(-disc);\n\t                n1 = (a-x)*(a-x)+b*b;\n\t                n2 = c*c+(d-x)*(d-x);\n\t                if(n1>n2) {\n\t                    n1 = sqrt(n1+y*y);\n\t                    p = (a-x)/n1;\n\t                    q = b/n1;\n\t                    x = 0;\n\t                    y /= n1;\n\t                } else {\n\t                    n2 = sqrt(n2+y*y);\n\t                    p = c/n2;\n\t                    q = (d-x)/n2;\n\t                    x = y/n2;\n\t                    y = 0;\n\t                }\n\t                Q0 = new T([[q,-p],[p,q]],[[x,y],[y,-x]]);\n\t                Q.setRows(i,j,Q0.dot(Q.getRows(i,j)));\n\t            }\n\t        }\n\t    }\n\t    var R = Q.dot(A).dot(Q.transjugate()), n = A.length, E = numeric.T.identity(n);\n\t    for(j=0;j<n;j++) {\n\t        if(j>0) {\n\t            for(k=j-1;k>=0;k--) {\n\t                var Rk = R.get([k,k]), Rj = R.get([j,j]);\n\t                if(numeric.neq(Rk.x,Rj.x) || numeric.neq(Rk.y,Rj.y)) {\n\t                    x = R.getRow(k).getBlock([k],[j-1]);\n\t                    y = E.getRow(j).getBlock([k],[j-1]);\n\t                    E.set([j,k],(R.get([k,j]).neg().sub(x.dot(y))).div(Rk.sub(Rj)));\n\t                } else {\n\t                    E.setRow(j,E.getRow(k));\n\t                    continue;\n\t                }\n\t            }\n\t        }\n\t    }\n\t    for(j=0;j<n;j++) {\n\t        x = E.getRow(j);\n\t        E.setRow(j,x.div(x.norm2()));\n\t    }\n\t    E = E.transpose();\n\t    E = Q.transjugate().dot(E);\n\t    return { lambda:R.getDiag(), E:E };\n\t};\n\t\n\t// 5. Compressed Column Storage matrices\n\tnumeric.ccsSparse = function ccsSparse(A) {\n\t    var m = A.length,n,foo, i,j, counts = [];\n\t    for(i=m-1;i!==-1;--i) {\n\t        foo = A[i];\n\t        for(j in foo) {\n\t            j = parseInt(j);\n\t            while(j>=counts.length) counts[counts.length] = 0;\n\t            if(foo[j]!==0) counts[j]++;\n\t        }\n\t    }\n\t    var n = counts.length;\n\t    var Ai = Array(n+1);\n\t    Ai[0] = 0;\n\t    for(i=0;i<n;++i) Ai[i+1] = Ai[i] + counts[i];\n\t    var Aj = Array(Ai[n]), Av = Array(Ai[n]);\n\t    for(i=m-1;i!==-1;--i) {\n\t        foo = A[i];\n\t        for(j in foo) {\n\t            if(foo[j]!==0) {\n\t                counts[j]--;\n\t                Aj[Ai[j]+counts[j]] = i;\n\t                Av[Ai[j]+counts[j]] = foo[j];\n\t            }\n\t        }\n\t    }\n\t    return [Ai,Aj,Av];\n\t}\n\tnumeric.ccsFull = function ccsFull(A) {\n\t    var Ai = A[0], Aj = A[1], Av = A[2], s = numeric.ccsDim(A), m = s[0], n = s[1], i,j,j0,j1,k;\n\t    var B = numeric.rep([m,n],0);\n\t    for(i=0;i<n;i++) {\n\t        j0 = Ai[i];\n\t        j1 = Ai[i+1];\n\t        for(j=j0;j<j1;++j) { B[Aj[j]][i] = Av[j]; }\n\t    }\n\t    return B;\n\t}\n\tnumeric.ccsTSolve = function ccsTSolve(A,b,x,bj,xj) {\n\t    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, max = Math.max,n=0;\n\t    if(typeof bj === \"undefined\") x = numeric.rep([m],0);\n\t    if(typeof bj === \"undefined\") bj = numeric.linspace(0,x.length-1);\n\t    if(typeof xj === \"undefined\") xj = [];\n\t    function dfs(j) {\n\t        var k;\n\t        if(x[j] !== 0) return;\n\t        x[j] = 1;\n\t        for(k=Ai[j];k<Ai[j+1];++k) dfs(Aj[k]);\n\t        xj[n] = j;\n\t        ++n;\n\t    }\n\t    var i,j,j0,j1,k,l,l0,l1,a;\n\t    for(i=bj.length-1;i!==-1;--i) { dfs(bj[i]); }\n\t    xj.length = n;\n\t    for(i=xj.length-1;i!==-1;--i) { x[xj[i]] = 0; }\n\t    for(i=bj.length-1;i!==-1;--i) { j = bj[i]; x[j] = b[j]; }\n\t    for(i=xj.length-1;i!==-1;--i) {\n\t        j = xj[i];\n\t        j0 = Ai[j];\n\t        j1 = max(Ai[j+1],j0);\n\t        for(k=j0;k!==j1;++k) { if(Aj[k] === j) { x[j] /= Av[k]; break; } }\n\t        a = x[j];\n\t        for(k=j0;k!==j1;++k) {\n\t            l = Aj[k];\n\t            if(l !== j) x[l] -= a*Av[k];\n\t        }\n\t    }\n\t    return x;\n\t}\n\tnumeric.ccsDFS = function ccsDFS(n) {\n\t    this.k = Array(n);\n\t    this.k1 = Array(n);\n\t    this.j = Array(n);\n\t}\n\tnumeric.ccsDFS.prototype.dfs = function dfs(J,Ai,Aj,x,xj,Pinv) {\n\t    var m = 0,foo,n=xj.length;\n\t    var k = this.k, k1 = this.k1, j = this.j,km,k11;\n\t    if(x[J]!==0) return;\n\t    x[J] = 1;\n\t    j[0] = J;\n\t    k[0] = km = Ai[J];\n\t    k1[0] = k11 = Ai[J+1];\n\t    while(1) {\n\t        if(km >= k11) {\n\t            xj[n] = j[m];\n\t            if(m===0) return;\n\t            ++n;\n\t            --m;\n\t            km = k[m];\n\t            k11 = k1[m];\n\t        } else {\n\t            foo = Pinv[Aj[km]];\n\t            if(x[foo] === 0) {\n\t                x[foo] = 1;\n\t                k[m] = km;\n\t                ++m;\n\t                j[m] = foo;\n\t                km = Ai[foo];\n\t                k1[m] = k11 = Ai[foo+1];\n\t            } else ++km;\n\t        }\n\t    }\n\t}\n\tnumeric.ccsLPSolve = function ccsLPSolve(A,B,x,xj,I,Pinv,dfs) {\n\t    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, n=0;\n\t    var Bi = B[0], Bj = B[1], Bv = B[2];\n\t    \n\t    var i,i0,i1,j,J,j0,j1,k,l,l0,l1,a;\n\t    i0 = Bi[I];\n\t    i1 = Bi[I+1];\n\t    xj.length = 0;\n\t    for(i=i0;i<i1;++i) { dfs.dfs(Pinv[Bj[i]],Ai,Aj,x,xj,Pinv); }\n\t    for(i=xj.length-1;i!==-1;--i) { x[xj[i]] = 0; }\n\t    for(i=i0;i!==i1;++i) { j = Pinv[Bj[i]]; x[j] = Bv[i]; }\n\t    for(i=xj.length-1;i!==-1;--i) {\n\t        j = xj[i];\n\t        j0 = Ai[j];\n\t        j1 = Ai[j+1];\n\t        for(k=j0;k<j1;++k) { if(Pinv[Aj[k]] === j) { x[j] /= Av[k]; break; } }\n\t        a = x[j];\n\t        for(k=j0;k<j1;++k) {\n\t            l = Pinv[Aj[k]];\n\t            if(l !== j) x[l] -= a*Av[k];\n\t        }\n\t    }\n\t    return x;\n\t}\n\tnumeric.ccsLUP1 = function ccsLUP1(A,threshold) {\n\t    var m = A[0].length-1;\n\t    var L = [numeric.rep([m+1],0),[],[]], U = [numeric.rep([m+1], 0),[],[]];\n\t    var Li = L[0], Lj = L[1], Lv = L[2], Ui = U[0], Uj = U[1], Uv = U[2];\n\t    var x = numeric.rep([m],0), xj = numeric.rep([m],0);\n\t    var i,j,k,j0,j1,a,e,c,d,K;\n\t    var sol = numeric.ccsLPSolve, max = Math.max, abs = Math.abs;\n\t    var P = numeric.linspace(0,m-1),Pinv = numeric.linspace(0,m-1);\n\t    var dfs = new numeric.ccsDFS(m);\n\t    if(typeof threshold === \"undefined\") { threshold = 1; }\n\t    for(i=0;i<m;++i) {\n\t        sol(L,A,x,xj,i,Pinv,dfs);\n\t        a = -1;\n\t        e = -1;\n\t        for(j=xj.length-1;j!==-1;--j) {\n\t            k = xj[j];\n\t            if(k <= i) continue;\n\t            c = abs(x[k]);\n\t            if(c > a) { e = k; a = c; }\n\t        }\n\t        if(abs(x[i])<threshold*a) {\n\t            j = P[i];\n\t            a = P[e];\n\t            P[i] = a; Pinv[a] = i;\n\t            P[e] = j; Pinv[j] = e;\n\t            a = x[i]; x[i] = x[e]; x[e] = a;\n\t        }\n\t        a = Li[i];\n\t        e = Ui[i];\n\t        d = x[i];\n\t        Lj[a] = P[i];\n\t        Lv[a] = 1;\n\t        ++a;\n\t        for(j=xj.length-1;j!==-1;--j) {\n\t            k = xj[j];\n\t            c = x[k];\n\t            xj[j] = 0;\n\t            x[k] = 0;\n\t            if(k<=i) { Uj[e] = k; Uv[e] = c;   ++e; }\n\t            else     { Lj[a] = P[k]; Lv[a] = c/d; ++a; }\n\t        }\n\t        Li[i+1] = a;\n\t        Ui[i+1] = e;\n\t    }\n\t    for(j=Lj.length-1;j!==-1;--j) { Lj[j] = Pinv[Lj[j]]; }\n\t    return {L:L, U:U, P:P, Pinv:Pinv};\n\t}\n\tnumeric.ccsDFS0 = function ccsDFS0(n) {\n\t    this.k = Array(n);\n\t    this.k1 = Array(n);\n\t    this.j = Array(n);\n\t}\n\tnumeric.ccsDFS0.prototype.dfs = function dfs(J,Ai,Aj,x,xj,Pinv,P) {\n\t    var m = 0,foo,n=xj.length;\n\t    var k = this.k, k1 = this.k1, j = this.j,km,k11;\n\t    if(x[J]!==0) return;\n\t    x[J] = 1;\n\t    j[0] = J;\n\t    k[0] = km = Ai[Pinv[J]];\n\t    k1[0] = k11 = Ai[Pinv[J]+1];\n\t    while(1) {\n\t        if(isNaN(km)) throw new Error(\"Ow!\");\n\t        if(km >= k11) {\n\t            xj[n] = Pinv[j[m]];\n\t            if(m===0) return;\n\t            ++n;\n\t            --m;\n\t            km = k[m];\n\t            k11 = k1[m];\n\t        } else {\n\t            foo = Aj[km];\n\t            if(x[foo] === 0) {\n\t                x[foo] = 1;\n\t                k[m] = km;\n\t                ++m;\n\t                j[m] = foo;\n\t                foo = Pinv[foo];\n\t                km = Ai[foo];\n\t                k1[m] = k11 = Ai[foo+1];\n\t            } else ++km;\n\t        }\n\t    }\n\t}\n\tnumeric.ccsLPSolve0 = function ccsLPSolve0(A,B,y,xj,I,Pinv,P,dfs) {\n\t    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, n=0;\n\t    var Bi = B[0], Bj = B[1], Bv = B[2];\n\t    \n\t    var i,i0,i1,j,J,j0,j1,k,l,l0,l1,a;\n\t    i0 = Bi[I];\n\t    i1 = Bi[I+1];\n\t    xj.length = 0;\n\t    for(i=i0;i<i1;++i) { dfs.dfs(Bj[i],Ai,Aj,y,xj,Pinv,P); }\n\t    for(i=xj.length-1;i!==-1;--i) { j = xj[i]; y[P[j]] = 0; }\n\t    for(i=i0;i!==i1;++i) { j = Bj[i]; y[j] = Bv[i]; }\n\t    for(i=xj.length-1;i!==-1;--i) {\n\t        j = xj[i];\n\t        l = P[j];\n\t        j0 = Ai[j];\n\t        j1 = Ai[j+1];\n\t        for(k=j0;k<j1;++k) { if(Aj[k] === l) { y[l] /= Av[k]; break; } }\n\t        a = y[l];\n\t        for(k=j0;k<j1;++k) y[Aj[k]] -= a*Av[k];\n\t        y[l] = a;\n\t    }\n\t}\n\tnumeric.ccsLUP0 = function ccsLUP0(A,threshold) {\n\t    var m = A[0].length-1;\n\t    var L = [numeric.rep([m+1],0),[],[]], U = [numeric.rep([m+1], 0),[],[]];\n\t    var Li = L[0], Lj = L[1], Lv = L[2], Ui = U[0], Uj = U[1], Uv = U[2];\n\t    var y = numeric.rep([m],0), xj = numeric.rep([m],0);\n\t    var i,j,k,j0,j1,a,e,c,d,K;\n\t    var sol = numeric.ccsLPSolve0, max = Math.max, abs = Math.abs;\n\t    var P = numeric.linspace(0,m-1),Pinv = numeric.linspace(0,m-1);\n\t    var dfs = new numeric.ccsDFS0(m);\n\t    if(typeof threshold === \"undefined\") { threshold = 1; }\n\t    for(i=0;i<m;++i) {\n\t        sol(L,A,y,xj,i,Pinv,P,dfs);\n\t        a = -1;\n\t        e = -1;\n\t        for(j=xj.length-1;j!==-1;--j) {\n\t            k = xj[j];\n\t            if(k <= i) continue;\n\t            c = abs(y[P[k]]);\n\t            if(c > a) { e = k; a = c; }\n\t        }\n\t        if(abs(y[P[i]])<threshold*a) {\n\t            j = P[i];\n\t            a = P[e];\n\t            P[i] = a; Pinv[a] = i;\n\t            P[e] = j; Pinv[j] = e;\n\t        }\n\t        a = Li[i];\n\t        e = Ui[i];\n\t        d = y[P[i]];\n\t        Lj[a] = P[i];\n\t        Lv[a] = 1;\n\t        ++a;\n\t        for(j=xj.length-1;j!==-1;--j) {\n\t            k = xj[j];\n\t            c = y[P[k]];\n\t            xj[j] = 0;\n\t            y[P[k]] = 0;\n\t            if(k<=i) { Uj[e] = k; Uv[e] = c;   ++e; }\n\t            else     { Lj[a] = P[k]; Lv[a] = c/d; ++a; }\n\t        }\n\t        Li[i+1] = a;\n\t        Ui[i+1] = e;\n\t    }\n\t    for(j=Lj.length-1;j!==-1;--j) { Lj[j] = Pinv[Lj[j]]; }\n\t    return {L:L, U:U, P:P, Pinv:Pinv};\n\t}\n\tnumeric.ccsLUP = numeric.ccsLUP0;\n\t\n\tnumeric.ccsDim = function ccsDim(A) { return [numeric.sup(A[1])+1,A[0].length-1]; }\n\tnumeric.ccsGetBlock = function ccsGetBlock(A,i,j) {\n\t    var s = numeric.ccsDim(A),m=s[0],n=s[1];\n\t    if(typeof i === \"undefined\") { i = numeric.linspace(0,m-1); }\n\t    else if(typeof i === \"number\") { i = [i]; }\n\t    if(typeof j === \"undefined\") { j = numeric.linspace(0,n-1); }\n\t    else if(typeof j === \"number\") { j = [j]; }\n\t    var p,p0,p1,P = i.length,q,Q = j.length,r,jq,ip;\n\t    var Bi = numeric.rep([n],0), Bj=[], Bv=[], B = [Bi,Bj,Bv];\n\t    var Ai = A[0], Aj = A[1], Av = A[2];\n\t    var x = numeric.rep([m],0),count=0,flags = numeric.rep([m],0);\n\t    for(q=0;q<Q;++q) {\n\t        jq = j[q];\n\t        var q0 = Ai[jq];\n\t        var q1 = Ai[jq+1];\n\t        for(p=q0;p<q1;++p) {\n\t            r = Aj[p];\n\t            flags[r] = 1;\n\t            x[r] = Av[p];\n\t        }\n\t        for(p=0;p<P;++p) {\n\t            ip = i[p];\n\t            if(flags[ip]) {\n\t                Bj[count] = p;\n\t                Bv[count] = x[i[p]];\n\t                ++count;\n\t            }\n\t        }\n\t        for(p=q0;p<q1;++p) {\n\t            r = Aj[p];\n\t            flags[r] = 0;\n\t        }\n\t        Bi[q+1] = count;\n\t    }\n\t    return B;\n\t}\n\t\n\tnumeric.ccsDot = function ccsDot(A,B) {\n\t    var Ai = A[0], Aj = A[1], Av = A[2];\n\t    var Bi = B[0], Bj = B[1], Bv = B[2];\n\t    var sA = numeric.ccsDim(A), sB = numeric.ccsDim(B);\n\t    var m = sA[0], n = sA[1], o = sB[1];\n\t    var x = numeric.rep([m],0), flags = numeric.rep([m],0), xj = Array(m);\n\t    var Ci = numeric.rep([o],0), Cj = [], Cv = [], C = [Ci,Cj,Cv];\n\t    var i,j,k,j0,j1,i0,i1,l,p,a,b;\n\t    for(k=0;k!==o;++k) {\n\t        j0 = Bi[k];\n\t        j1 = Bi[k+1];\n\t        p = 0;\n\t        for(j=j0;j<j1;++j) {\n\t            a = Bj[j];\n\t            b = Bv[j];\n\t            i0 = Ai[a];\n\t            i1 = Ai[a+1];\n\t            for(i=i0;i<i1;++i) {\n\t                l = Aj[i];\n\t                if(flags[l]===0) {\n\t                    xj[p] = l;\n\t                    flags[l] = 1;\n\t                    p = p+1;\n\t                }\n\t                x[l] = x[l] + Av[i]*b;\n\t            }\n\t        }\n\t        j0 = Ci[k];\n\t        j1 = j0+p;\n\t        Ci[k+1] = j1;\n\t        for(j=p-1;j!==-1;--j) {\n\t            b = j0+j;\n\t            i = xj[j];\n\t            Cj[b] = i;\n\t            Cv[b] = x[i];\n\t            flags[i] = 0;\n\t            x[i] = 0;\n\t        }\n\t        Ci[k+1] = Ci[k]+p;\n\t    }\n\t    return C;\n\t}\n\t\n\tnumeric.ccsLUPSolve = function ccsLUPSolve(LUP,B) {\n\t    var L = LUP.L, U = LUP.U, P = LUP.P;\n\t    var Bi = B[0];\n\t    var flag = false;\n\t    if(typeof Bi !== \"object\") { B = [[0,B.length],numeric.linspace(0,B.length-1),B]; Bi = B[0]; flag = true; }\n\t    var Bj = B[1], Bv = B[2];\n\t    var n = L[0].length-1, m = Bi.length-1;\n\t    var x = numeric.rep([n],0), xj = Array(n);\n\t    var b = numeric.rep([n],0), bj = Array(n);\n\t    var Xi = numeric.rep([m+1],0), Xj = [], Xv = [];\n\t    var sol = numeric.ccsTSolve;\n\t    var i,j,j0,j1,k,J,N=0;\n\t    for(i=0;i<m;++i) {\n\t        k = 0;\n\t        j0 = Bi[i];\n\t        j1 = Bi[i+1];\n\t        for(j=j0;j<j1;++j) { \n\t            J = LUP.Pinv[Bj[j]];\n\t            bj[k] = J;\n\t            b[J] = Bv[j];\n\t            ++k;\n\t        }\n\t        bj.length = k;\n\t        sol(L,b,x,bj,xj);\n\t        for(j=bj.length-1;j!==-1;--j) b[bj[j]] = 0;\n\t        sol(U,x,b,xj,bj);\n\t        if(flag) return b;\n\t        for(j=xj.length-1;j!==-1;--j) x[xj[j]] = 0;\n\t        for(j=bj.length-1;j!==-1;--j) {\n\t            J = bj[j];\n\t            Xj[N] = J;\n\t            Xv[N] = b[J];\n\t            b[J] = 0;\n\t            ++N;\n\t        }\n\t        Xi[i+1] = N;\n\t    }\n\t    return [Xi,Xj,Xv];\n\t}\n\t\n\tnumeric.ccsbinop = function ccsbinop(body,setup) {\n\t    if(typeof setup === \"undefined\") setup='';\n\t    return Function('X','Y',\n\t            'var Xi = X[0], Xj = X[1], Xv = X[2];\\n'+\n\t            'var Yi = Y[0], Yj = Y[1], Yv = Y[2];\\n'+\n\t            'var n = Xi.length-1,m = Math.max(numeric.sup(Xj),numeric.sup(Yj))+1;\\n'+\n\t            'var Zi = numeric.rep([n+1],0), Zj = [], Zv = [];\\n'+\n\t            'var x = numeric.rep([m],0),y = numeric.rep([m],0);\\n'+\n\t            'var xk,yk,zk;\\n'+\n\t            'var i,j,j0,j1,k,p=0;\\n'+\n\t            setup+\n\t            'for(i=0;i<n;++i) {\\n'+\n\t            '  j0 = Xi[i]; j1 = Xi[i+1];\\n'+\n\t            '  for(j=j0;j!==j1;++j) {\\n'+\n\t            '    k = Xj[j];\\n'+\n\t            '    x[k] = 1;\\n'+\n\t            '    Zj[p] = k;\\n'+\n\t            '    ++p;\\n'+\n\t            '  }\\n'+\n\t            '  j0 = Yi[i]; j1 = Yi[i+1];\\n'+\n\t            '  for(j=j0;j!==j1;++j) {\\n'+\n\t            '    k = Yj[j];\\n'+\n\t            '    y[k] = Yv[j];\\n'+\n\t            '    if(x[k] === 0) {\\n'+\n\t            '      Zj[p] = k;\\n'+\n\t            '      ++p;\\n'+\n\t            '    }\\n'+\n\t            '  }\\n'+\n\t            '  Zi[i+1] = p;\\n'+\n\t            '  j0 = Xi[i]; j1 = Xi[i+1];\\n'+\n\t            '  for(j=j0;j!==j1;++j) x[Xj[j]] = Xv[j];\\n'+\n\t            '  j0 = Zi[i]; j1 = Zi[i+1];\\n'+\n\t            '  for(j=j0;j!==j1;++j) {\\n'+\n\t            '    k = Zj[j];\\n'+\n\t            '    xk = x[k];\\n'+\n\t            '    yk = y[k];\\n'+\n\t            body+'\\n'+\n\t            '    Zv[j] = zk;\\n'+\n\t            '  }\\n'+\n\t            '  j0 = Xi[i]; j1 = Xi[i+1];\\n'+\n\t            '  for(j=j0;j!==j1;++j) x[Xj[j]] = 0;\\n'+\n\t            '  j0 = Yi[i]; j1 = Yi[i+1];\\n'+\n\t            '  for(j=j0;j!==j1;++j) y[Yj[j]] = 0;\\n'+\n\t            '}\\n'+\n\t            'return [Zi,Zj,Zv];'\n\t            );\n\t};\n\t\n\t(function() {\n\t    var k,A,B,C;\n\t    for(k in numeric.ops2) {\n\t        if(isFinite(eval('1'+numeric.ops2[k]+'0'))) A = '[Y[0],Y[1],numeric.'+k+'(X,Y[2])]';\n\t        else A = 'NaN';\n\t        if(isFinite(eval('0'+numeric.ops2[k]+'1'))) B = '[X[0],X[1],numeric.'+k+'(X[2],Y)]';\n\t        else B = 'NaN';\n\t        if(isFinite(eval('1'+numeric.ops2[k]+'0')) && isFinite(eval('0'+numeric.ops2[k]+'1'))) C = 'numeric.ccs'+k+'MM(X,Y)';\n\t        else C = 'NaN';\n\t        numeric['ccs'+k+'MM'] = numeric.ccsbinop('zk = xk '+numeric.ops2[k]+'yk;');\n\t        numeric['ccs'+k] = Function('X','Y',\n\t                'if(typeof X === \"number\") return '+A+';\\n'+\n\t                'if(typeof Y === \"number\") return '+B+';\\n'+\n\t                'return '+C+';\\n'\n\t                );\n\t    }\n\t}());\n\t\n\tnumeric.ccsScatter = function ccsScatter(A) {\n\t    var Ai = A[0], Aj = A[1], Av = A[2];\n\t    var n = numeric.sup(Aj)+1,m=Ai.length;\n\t    var Ri = numeric.rep([n],0),Rj=Array(m), Rv = Array(m);\n\t    var counts = numeric.rep([n],0),i;\n\t    for(i=0;i<m;++i) counts[Aj[i]]++;\n\t    for(i=0;i<n;++i) Ri[i+1] = Ri[i] + counts[i];\n\t    var ptr = Ri.slice(0),k,Aii;\n\t    for(i=0;i<m;++i) {\n\t        Aii = Aj[i];\n\t        k = ptr[Aii];\n\t        Rj[k] = Ai[i];\n\t        Rv[k] = Av[i];\n\t        ptr[Aii]=ptr[Aii]+1;\n\t    }\n\t    return [Ri,Rj,Rv];\n\t}\n\t\n\tnumeric.ccsGather = function ccsGather(A) {\n\t    var Ai = A[0], Aj = A[1], Av = A[2];\n\t    var n = Ai.length-1,m = Aj.length;\n\t    var Ri = Array(m), Rj = Array(m), Rv = Array(m);\n\t    var i,j,j0,j1,p;\n\t    p=0;\n\t    for(i=0;i<n;++i) {\n\t        j0 = Ai[i];\n\t        j1 = Ai[i+1];\n\t        for(j=j0;j!==j1;++j) {\n\t            Rj[p] = i;\n\t            Ri[p] = Aj[j];\n\t            Rv[p] = Av[j];\n\t            ++p;\n\t        }\n\t    }\n\t    return [Ri,Rj,Rv];\n\t}\n\t\n\t// The following sparse linear algebra routines are deprecated.\n\t\n\tnumeric.sdim = function dim(A,ret,k) {\n\t    if(typeof ret === \"undefined\") { ret = []; }\n\t    if(typeof A !== \"object\") return ret;\n\t    if(typeof k === \"undefined\") { k=0; }\n\t    if(!(k in ret)) { ret[k] = 0; }\n\t    if(A.length > ret[k]) ret[k] = A.length;\n\t    var i;\n\t    for(i in A) {\n\t        if(A.hasOwnProperty(i)) dim(A[i],ret,k+1);\n\t    }\n\t    return ret;\n\t};\n\t\n\tnumeric.sclone = function clone(A,k,n) {\n\t    if(typeof k === \"undefined\") { k=0; }\n\t    if(typeof n === \"undefined\") { n = numeric.sdim(A).length; }\n\t    var i,ret = Array(A.length);\n\t    if(k === n-1) {\n\t        for(i in A) { if(A.hasOwnProperty(i)) ret[i] = A[i]; }\n\t        return ret;\n\t    }\n\t    for(i in A) {\n\t        if(A.hasOwnProperty(i)) ret[i] = clone(A[i],k+1,n);\n\t    }\n\t    return ret;\n\t}\n\t\n\tnumeric.sdiag = function diag(d) {\n\t    var n = d.length,i,ret = Array(n),i1,i2,i3;\n\t    for(i=n-1;i>=1;i-=2) {\n\t        i1 = i-1;\n\t        ret[i] = []; ret[i][i] = d[i];\n\t        ret[i1] = []; ret[i1][i1] = d[i1];\n\t    }\n\t    if(i===0) { ret[0] = []; ret[0][0] = d[i]; }\n\t    return ret;\n\t}\n\t\n\tnumeric.sidentity = function identity(n) { return numeric.sdiag(numeric.rep([n],1)); }\n\t\n\tnumeric.stranspose = function transpose(A) {\n\t    var ret = [], n = A.length, i,j,Ai;\n\t    for(i in A) {\n\t        if(!(A.hasOwnProperty(i))) continue;\n\t        Ai = A[i];\n\t        for(j in Ai) {\n\t            if(!(Ai.hasOwnProperty(j))) continue;\n\t            if(typeof ret[j] !== \"object\") { ret[j] = []; }\n\t            ret[j][i] = Ai[j];\n\t        }\n\t    }\n\t    return ret;\n\t}\n\t\n\tnumeric.sLUP = function LUP(A,tol) {\n\t    throw new Error(\"The function numeric.sLUP had a bug in it and has been removed. Please use the new numeric.ccsLUP function instead.\");\n\t};\n\t\n\tnumeric.sdotMM = function dotMM(A,B) {\n\t    var p = A.length, q = B.length, BT = numeric.stranspose(B), r = BT.length, Ai, BTk;\n\t    var i,j,k,accum;\n\t    var ret = Array(p),reti;\n\t    for(i=p-1;i>=0;i--) {\n\t        reti = [];\n\t        Ai = A[i];\n\t        for(k=r-1;k>=0;k--) {\n\t            accum = 0;\n\t            BTk = BT[k];\n\t            for(j in Ai) {\n\t                if(!(Ai.hasOwnProperty(j))) continue;\n\t                if(j in BTk) { accum += Ai[j]*BTk[j]; }\n\t            }\n\t            if(accum) reti[k] = accum;\n\t        }\n\t        ret[i] = reti;\n\t    }\n\t    return ret;\n\t}\n\t\n\tnumeric.sdotMV = function dotMV(A,x) {\n\t    var p = A.length, Ai, i,j;\n\t    var ret = Array(p), accum;\n\t    for(i=p-1;i>=0;i--) {\n\t        Ai = A[i];\n\t        accum = 0;\n\t        for(j in Ai) {\n\t            if(!(Ai.hasOwnProperty(j))) continue;\n\t            if(x[j]) accum += Ai[j]*x[j];\n\t        }\n\t        if(accum) ret[i] = accum;\n\t    }\n\t    return ret;\n\t}\n\t\n\tnumeric.sdotVM = function dotMV(x,A) {\n\t    var i,j,Ai,alpha;\n\t    var ret = [], accum;\n\t    for(i in x) {\n\t        if(!x.hasOwnProperty(i)) continue;\n\t        Ai = A[i];\n\t        alpha = x[i];\n\t        for(j in Ai) {\n\t            if(!Ai.hasOwnProperty(j)) continue;\n\t            if(!ret[j]) { ret[j] = 0; }\n\t            ret[j] += alpha*Ai[j];\n\t        }\n\t    }\n\t    return ret;\n\t}\n\t\n\tnumeric.sdotVV = function dotVV(x,y) {\n\t    var i,ret=0;\n\t    for(i in x) { if(x[i] && y[i]) ret+= x[i]*y[i]; }\n\t    return ret;\n\t}\n\t\n\tnumeric.sdot = function dot(A,B) {\n\t    var m = numeric.sdim(A).length, n = numeric.sdim(B).length;\n\t    var k = m*1000+n;\n\t    switch(k) {\n\t    case 0: return A*B;\n\t    case 1001: return numeric.sdotVV(A,B);\n\t    case 2001: return numeric.sdotMV(A,B);\n\t    case 1002: return numeric.sdotVM(A,B);\n\t    case 2002: return numeric.sdotMM(A,B);\n\t    default: throw new Error('numeric.sdot not implemented for tensors of order '+m+' and '+n);\n\t    }\n\t}\n\t\n\tnumeric.sscatter = function scatter(V) {\n\t    var n = V[0].length, Vij, i, j, m = V.length, A = [], Aj;\n\t    for(i=n-1;i>=0;--i) {\n\t        if(!V[m-1][i]) continue;\n\t        Aj = A;\n\t        for(j=0;j<m-2;j++) {\n\t            Vij = V[j][i];\n\t            if(!Aj[Vij]) Aj[Vij] = [];\n\t            Aj = Aj[Vij];\n\t        }\n\t        Aj[V[j][i]] = V[j+1][i];\n\t    }\n\t    return A;\n\t}\n\t\n\tnumeric.sgather = function gather(A,ret,k) {\n\t    if(typeof ret === \"undefined\") ret = [];\n\t    if(typeof k === \"undefined\") k = [];\n\t    var n,i,Ai;\n\t    n = k.length;\n\t    for(i in A) {\n\t        if(A.hasOwnProperty(i)) {\n\t            k[n] = parseInt(i);\n\t            Ai = A[i];\n\t            if(typeof Ai === \"number\") {\n\t                if(Ai) {\n\t                    if(ret.length === 0) {\n\t                        for(i=n+1;i>=0;--i) ret[i] = [];\n\t                    }\n\t                    for(i=n;i>=0;--i) ret[i].push(k[i]);\n\t                    ret[n+1].push(Ai);\n\t                }\n\t            } else gather(Ai,ret,k);\n\t        }\n\t    }\n\t    if(k.length>n) k.pop();\n\t    return ret;\n\t}\n\t\n\t// 6. Coordinate matrices\n\tnumeric.cLU = function LU(A) {\n\t    var I = A[0], J = A[1], V = A[2];\n\t    var p = I.length, m=0, i,j,k,a,b,c;\n\t    for(i=0;i<p;i++) if(I[i]>m) m=I[i];\n\t    m++;\n\t    var L = Array(m), U = Array(m), left = numeric.rep([m],Infinity), right = numeric.rep([m],-Infinity);\n\t    var Ui, Uj,alpha;\n\t    for(k=0;k<p;k++) {\n\t        i = I[k];\n\t        j = J[k];\n\t        if(j<left[i]) left[i] = j;\n\t        if(j>right[i]) right[i] = j;\n\t    }\n\t    for(i=0;i<m-1;i++) { if(right[i] > right[i+1]) right[i+1] = right[i]; }\n\t    for(i=m-1;i>=1;i--) { if(left[i]<left[i-1]) left[i-1] = left[i]; }\n\t    var countL = 0, countU = 0;\n\t    for(i=0;i<m;i++) {\n\t        U[i] = numeric.rep([right[i]-left[i]+1],0);\n\t        L[i] = numeric.rep([i-left[i]],0);\n\t        countL += i-left[i]+1;\n\t        countU += right[i]-i+1;\n\t    }\n\t    for(k=0;k<p;k++) { i = I[k]; U[i][J[k]-left[i]] = V[k]; }\n\t    for(i=0;i<m-1;i++) {\n\t        a = i-left[i];\n\t        Ui = U[i];\n\t        for(j=i+1;left[j]<=i && j<m;j++) {\n\t            b = i-left[j];\n\t            c = right[i]-i;\n\t            Uj = U[j];\n\t            alpha = Uj[b]/Ui[a];\n\t            if(alpha) {\n\t                for(k=1;k<=c;k++) { Uj[k+b] -= alpha*Ui[k+a]; }\n\t                L[j][i-left[j]] = alpha;\n\t            }\n\t        }\n\t    }\n\t    var Ui = [], Uj = [], Uv = [], Li = [], Lj = [], Lv = [];\n\t    var p,q,foo;\n\t    p=0; q=0;\n\t    for(i=0;i<m;i++) {\n\t        a = left[i];\n\t        b = right[i];\n\t        foo = U[i];\n\t        for(j=i;j<=b;j++) {\n\t            if(foo[j-a]) {\n\t                Ui[p] = i;\n\t                Uj[p] = j;\n\t                Uv[p] = foo[j-a];\n\t                p++;\n\t            }\n\t        }\n\t        foo = L[i];\n\t        for(j=a;j<i;j++) {\n\t            if(foo[j-a]) {\n\t                Li[q] = i;\n\t                Lj[q] = j;\n\t                Lv[q] = foo[j-a];\n\t                q++;\n\t            }\n\t        }\n\t        Li[q] = i;\n\t        Lj[q] = i;\n\t        Lv[q] = 1;\n\t        q++;\n\t    }\n\t    return {U:[Ui,Uj,Uv], L:[Li,Lj,Lv]};\n\t};\n\t\n\tnumeric.cLUsolve = function LUsolve(lu,b) {\n\t    var L = lu.L, U = lu.U, ret = numeric.clone(b);\n\t    var Li = L[0], Lj = L[1], Lv = L[2];\n\t    var Ui = U[0], Uj = U[1], Uv = U[2];\n\t    var p = Ui.length, q = Li.length;\n\t    var m = ret.length,i,j,k;\n\t    k = 0;\n\t    for(i=0;i<m;i++) {\n\t        while(Lj[k] < i) {\n\t            ret[i] -= Lv[k]*ret[Lj[k]];\n\t            k++;\n\t        }\n\t        k++;\n\t    }\n\t    k = p-1;\n\t    for(i=m-1;i>=0;i--) {\n\t        while(Uj[k] > i) {\n\t            ret[i] -= Uv[k]*ret[Uj[k]];\n\t            k--;\n\t        }\n\t        ret[i] /= Uv[k];\n\t        k--;\n\t    }\n\t    return ret;\n\t};\n\t\n\tnumeric.cgrid = function grid(n,shape) {\n\t    if(typeof n === \"number\") n = [n,n];\n\t    var ret = numeric.rep(n,-1);\n\t    var i,j,count;\n\t    if(typeof shape !== \"function\") {\n\t        switch(shape) {\n\t        case 'L':\n\t            shape = function(i,j) { return (i>=n[0]/2 || j<n[1]/2); }\n\t            break;\n\t        default:\n\t            shape = function(i,j) { return true; };\n\t            break;\n\t        }\n\t    }\n\t    count=0;\n\t    for(i=1;i<n[0]-1;i++) for(j=1;j<n[1]-1;j++) \n\t        if(shape(i,j)) {\n\t            ret[i][j] = count;\n\t            count++;\n\t        }\n\t    return ret;\n\t}\n\t\n\tnumeric.cdelsq = function delsq(g) {\n\t    var dir = [[-1,0],[0,-1],[0,1],[1,0]];\n\t    var s = numeric.dim(g), m = s[0], n = s[1], i,j,k,p,q;\n\t    var Li = [], Lj = [], Lv = [];\n\t    for(i=1;i<m-1;i++) for(j=1;j<n-1;j++) {\n\t        if(g[i][j]<0) continue;\n\t        for(k=0;k<4;k++) {\n\t            p = i+dir[k][0];\n\t            q = j+dir[k][1];\n\t            if(g[p][q]<0) continue;\n\t            Li.push(g[i][j]);\n\t            Lj.push(g[p][q]);\n\t            Lv.push(-1);\n\t        }\n\t        Li.push(g[i][j]);\n\t        Lj.push(g[i][j]);\n\t        Lv.push(4);\n\t    }\n\t    return [Li,Lj,Lv];\n\t}\n\t\n\tnumeric.cdotMV = function dotMV(A,x) {\n\t    var ret, Ai = A[0], Aj = A[1], Av = A[2],k,p=Ai.length,N;\n\t    N=0;\n\t    for(k=0;k<p;k++) { if(Ai[k]>N) N = Ai[k]; }\n\t    N++;\n\t    ret = numeric.rep([N],0);\n\t    for(k=0;k<p;k++) { ret[Ai[k]]+=Av[k]*x[Aj[k]]; }\n\t    return ret;\n\t}\n\t\n\t// 7. Splines\n\t\n\tnumeric.Spline = function Spline(x,yl,yr,kl,kr) { this.x = x; this.yl = yl; this.yr = yr; this.kl = kl; this.kr = kr; }\n\tnumeric.Spline.prototype._at = function _at(x1,p) {\n\t    var x = this.x;\n\t    var yl = this.yl;\n\t    var yr = this.yr;\n\t    var kl = this.kl;\n\t    var kr = this.kr;\n\t    var x1,a,b,t;\n\t    var add = numeric.add, sub = numeric.sub, mul = numeric.mul;\n\t    a = sub(mul(kl[p],x[p+1]-x[p]),sub(yr[p+1],yl[p]));\n\t    b = add(mul(kr[p+1],x[p]-x[p+1]),sub(yr[p+1],yl[p]));\n\t    t = (x1-x[p])/(x[p+1]-x[p]);\n\t    var s = t*(1-t);\n\t    return add(add(add(mul(1-t,yl[p]),mul(t,yr[p+1])),mul(a,s*(1-t))),mul(b,s*t));\n\t}\n\tnumeric.Spline.prototype.at = function at(x0) {\n\t    if(typeof x0 === \"number\") {\n\t        var x = this.x;\n\t        var n = x.length;\n\t        var p,q,mid,floor = Math.floor,a,b,t;\n\t        p = 0;\n\t        q = n-1;\n\t        while(q-p>1) {\n\t            mid = floor((p+q)/2);\n\t            if(x[mid] <= x0) p = mid;\n\t            else q = mid;\n\t        }\n\t        return this._at(x0,p);\n\t    }\n\t    var n = x0.length, i, ret = Array(n);\n\t    for(i=n-1;i!==-1;--i) ret[i] = this.at(x0[i]);\n\t    return ret;\n\t}\n\tnumeric.Spline.prototype.diff = function diff() {\n\t    var x = this.x;\n\t    var yl = this.yl;\n\t    var yr = this.yr;\n\t    var kl = this.kl;\n\t    var kr = this.kr;\n\t    var n = yl.length;\n\t    var i,dx,dy;\n\t    var zl = kl, zr = kr, pl = Array(n), pr = Array(n);\n\t    var add = numeric.add, mul = numeric.mul, div = numeric.div, sub = numeric.sub;\n\t    for(i=n-1;i!==-1;--i) {\n\t        dx = x[i+1]-x[i];\n\t        dy = sub(yr[i+1],yl[i]);\n\t        pl[i] = div(add(mul(dy, 6),mul(kl[i],-4*dx),mul(kr[i+1],-2*dx)),dx*dx);\n\t        pr[i+1] = div(add(mul(dy,-6),mul(kl[i], 2*dx),mul(kr[i+1], 4*dx)),dx*dx);\n\t    }\n\t    return new numeric.Spline(x,zl,zr,pl,pr);\n\t}\n\tnumeric.Spline.prototype.roots = function roots() {\n\t    function sqr(x) { return x*x; }\n\t    function heval(y0,y1,k0,k1,x) {\n\t        var A = k0*2-(y1-y0);\n\t        var B = -k1*2+(y1-y0);\n\t        var t = (x+1)*0.5;\n\t        var s = t*(1-t);\n\t        return (1-t)*y0+t*y1+A*s*(1-t)+B*s*t;\n\t    }\n\t    var ret = [];\n\t    var x = this.x, yl = this.yl, yr = this.yr, kl = this.kl, kr = this.kr;\n\t    if(typeof yl[0] === \"number\") {\n\t        yl = [yl];\n\t        yr = [yr];\n\t        kl = [kl];\n\t        kr = [kr];\n\t    }\n\t    var m = yl.length,n=x.length-1,i,j,k,y,s,t;\n\t    var ai,bi,ci,di, ret = Array(m),ri,k0,k1,y0,y1,A,B,D,dx,cx,stops,z0,z1,zm,t0,t1,tm;\n\t    var sqrt = Math.sqrt;\n\t    for(i=0;i!==m;++i) {\n\t        ai = yl[i];\n\t        bi = yr[i];\n\t        ci = kl[i];\n\t        di = kr[i];\n\t        ri = [];\n\t        for(j=0;j!==n;j++) {\n\t            if(j>0 && bi[j]*ai[j]<0) ri.push(x[j]);\n\t            dx = (x[j+1]-x[j]);\n\t            cx = x[j];\n\t            y0 = ai[j];\n\t            y1 = bi[j+1];\n\t            k0 = ci[j]/dx;\n\t            k1 = di[j+1]/dx;\n\t            D = sqr(k0-k1+3*(y0-y1)) + 12*k1*y0;\n\t            A = k1+3*y0+2*k0-3*y1;\n\t            B = 3*(k1+k0+2*(y0-y1));\n\t            if(D<=0) {\n\t                z0 = A/B;\n\t                if(z0>x[j] && z0<x[j+1]) stops = [x[j],z0,x[j+1]];\n\t                else stops = [x[j],x[j+1]];\n\t            } else {\n\t                z0 = (A-sqrt(D))/B;\n\t                z1 = (A+sqrt(D))/B;\n\t                stops = [x[j]];\n\t                if(z0>x[j] && z0<x[j+1]) stops.push(z0);\n\t                if(z1>x[j] && z1<x[j+1]) stops.push(z1);\n\t                stops.push(x[j+1]);\n\t            }\n\t            t0 = stops[0];\n\t            z0 = this._at(t0,j);\n\t            for(k=0;k<stops.length-1;k++) {\n\t                t1 = stops[k+1];\n\t                z1 = this._at(t1,j);\n\t                if(z0 === 0) {\n\t                    ri.push(t0); \n\t                    t0 = t1;\n\t                    z0 = z1;\n\t                    continue;\n\t                }\n\t                if(z1 === 0 || z0*z1>0) {\n\t                    t0 = t1;\n\t                    z0 = z1;\n\t                    continue;\n\t                }\n\t                var side = 0;\n\t                while(1) {\n\t                    tm = (z0*t1-z1*t0)/(z0-z1);\n\t                    if(tm <= t0 || tm >= t1) { break; }\n\t                    zm = this._at(tm,j);\n\t                    if(zm*z1>0) {\n\t                        t1 = tm;\n\t                        z1 = zm;\n\t                        if(side === -1) z0*=0.5;\n\t                        side = -1;\n\t                    } else if(zm*z0>0) {\n\t                        t0 = tm;\n\t                        z0 = zm;\n\t                        if(side === 1) z1*=0.5;\n\t                        side = 1;\n\t                    } else break;\n\t                }\n\t                ri.push(tm);\n\t                t0 = stops[k+1];\n\t                z0 = this._at(t0, j);\n\t            }\n\t            if(z1 === 0) ri.push(t1);\n\t        }\n\t        ret[i] = ri;\n\t    }\n\t    if(typeof this.yl[0] === \"number\") return ret[0];\n\t    return ret;\n\t}\n\tnumeric.spline = function spline(x,y,k1,kn) {\n\t    var n = x.length, b = [], dx = [], dy = [];\n\t    var i;\n\t    var sub = numeric.sub,mul = numeric.mul,add = numeric.add;\n\t    for(i=n-2;i>=0;i--) { dx[i] = x[i+1]-x[i]; dy[i] = sub(y[i+1],y[i]); }\n\t    if(typeof k1 === \"string\" || typeof kn === \"string\") { \n\t        k1 = kn = \"periodic\";\n\t    }\n\t    // Build sparse tridiagonal system\n\t    var T = [[],[],[]];\n\t    switch(typeof k1) {\n\t    case \"undefined\":\n\t        b[0] = mul(3/(dx[0]*dx[0]),dy[0]);\n\t        T[0].push(0,0);\n\t        T[1].push(0,1);\n\t        T[2].push(2/dx[0],1/dx[0]);\n\t        break;\n\t    case \"string\":\n\t        b[0] = add(mul(3/(dx[n-2]*dx[n-2]),dy[n-2]),mul(3/(dx[0]*dx[0]),dy[0]));\n\t        T[0].push(0,0,0);\n\t        T[1].push(n-2,0,1);\n\t        T[2].push(1/dx[n-2],2/dx[n-2]+2/dx[0],1/dx[0]);\n\t        break;\n\t    default:\n\t        b[0] = k1;\n\t        T[0].push(0);\n\t        T[1].push(0);\n\t        T[2].push(1);\n\t        break;\n\t    }\n\t    for(i=1;i<n-1;i++) {\n\t        b[i] = add(mul(3/(dx[i-1]*dx[i-1]),dy[i-1]),mul(3/(dx[i]*dx[i]),dy[i]));\n\t        T[0].push(i,i,i);\n\t        T[1].push(i-1,i,i+1);\n\t        T[2].push(1/dx[i-1],2/dx[i-1]+2/dx[i],1/dx[i]);\n\t    }\n\t    switch(typeof kn) {\n\t    case \"undefined\":\n\t        b[n-1] = mul(3/(dx[n-2]*dx[n-2]),dy[n-2]);\n\t        T[0].push(n-1,n-1);\n\t        T[1].push(n-2,n-1);\n\t        T[2].push(1/dx[n-2],2/dx[n-2]);\n\t        break;\n\t    case \"string\":\n\t        T[1][T[1].length-1] = 0;\n\t        break;\n\t    default:\n\t        b[n-1] = kn;\n\t        T[0].push(n-1);\n\t        T[1].push(n-1);\n\t        T[2].push(1);\n\t        break;\n\t    }\n\t    if(typeof b[0] !== \"number\") b = numeric.transpose(b);\n\t    else b = [b];\n\t    var k = Array(b.length);\n\t    if(typeof k1 === \"string\") {\n\t        for(i=k.length-1;i!==-1;--i) {\n\t            k[i] = numeric.ccsLUPSolve(numeric.ccsLUP(numeric.ccsScatter(T)),b[i]);\n\t            k[i][n-1] = k[i][0];\n\t        }\n\t    } else {\n\t        for(i=k.length-1;i!==-1;--i) {\n\t            k[i] = numeric.cLUsolve(numeric.cLU(T),b[i]);\n\t        }\n\t    }\n\t    if(typeof y[0] === \"number\") k = k[0];\n\t    else k = numeric.transpose(k);\n\t    return new numeric.Spline(x,y,y,k,k);\n\t}\n\t\n\t// 8. FFT\n\tnumeric.fftpow2 = function fftpow2(x,y) {\n\t    var n = x.length;\n\t    if(n === 1) return;\n\t    var cos = Math.cos, sin = Math.sin, i,j;\n\t    var xe = Array(n/2), ye = Array(n/2), xo = Array(n/2), yo = Array(n/2);\n\t    j = n/2;\n\t    for(i=n-1;i!==-1;--i) {\n\t        --j;\n\t        xo[j] = x[i];\n\t        yo[j] = y[i];\n\t        --i;\n\t        xe[j] = x[i];\n\t        ye[j] = y[i];\n\t    }\n\t    fftpow2(xe,ye);\n\t    fftpow2(xo,yo);\n\t    j = n/2;\n\t    var t,k = (-6.2831853071795864769252867665590057683943387987502116419/n),ci,si;\n\t    for(i=n-1;i!==-1;--i) {\n\t        --j;\n\t        if(j === -1) j = n/2-1;\n\t        t = k*i;\n\t        ci = cos(t);\n\t        si = sin(t);\n\t        x[i] = xe[j] + ci*xo[j] - si*yo[j];\n\t        y[i] = ye[j] + ci*yo[j] + si*xo[j];\n\t    }\n\t}\n\tnumeric._ifftpow2 = function _ifftpow2(x,y) {\n\t    var n = x.length;\n\t    if(n === 1) return;\n\t    var cos = Math.cos, sin = Math.sin, i,j;\n\t    var xe = Array(n/2), ye = Array(n/2), xo = Array(n/2), yo = Array(n/2);\n\t    j = n/2;\n\t    for(i=n-1;i!==-1;--i) {\n\t        --j;\n\t        xo[j] = x[i];\n\t        yo[j] = y[i];\n\t        --i;\n\t        xe[j] = x[i];\n\t        ye[j] = y[i];\n\t    }\n\t    _ifftpow2(xe,ye);\n\t    _ifftpow2(xo,yo);\n\t    j = n/2;\n\t    var t,k = (6.2831853071795864769252867665590057683943387987502116419/n),ci,si;\n\t    for(i=n-1;i!==-1;--i) {\n\t        --j;\n\t        if(j === -1) j = n/2-1;\n\t        t = k*i;\n\t        ci = cos(t);\n\t        si = sin(t);\n\t        x[i] = xe[j] + ci*xo[j] - si*yo[j];\n\t        y[i] = ye[j] + ci*yo[j] + si*xo[j];\n\t    }\n\t}\n\tnumeric.ifftpow2 = function ifftpow2(x,y) {\n\t    numeric._ifftpow2(x,y);\n\t    numeric.diveq(x,x.length);\n\t    numeric.diveq(y,y.length);\n\t}\n\tnumeric.convpow2 = function convpow2(ax,ay,bx,by) {\n\t    numeric.fftpow2(ax,ay);\n\t    numeric.fftpow2(bx,by);\n\t    var i,n = ax.length,axi,bxi,ayi,byi;\n\t    for(i=n-1;i!==-1;--i) {\n\t        axi = ax[i]; ayi = ay[i]; bxi = bx[i]; byi = by[i];\n\t        ax[i] = axi*bxi-ayi*byi;\n\t        ay[i] = axi*byi+ayi*bxi;\n\t    }\n\t    numeric.ifftpow2(ax,ay);\n\t}\n\tnumeric.T.prototype.fft = function fft() {\n\t    var x = this.x, y = this.y;\n\t    var n = x.length, log = Math.log, log2 = log(2),\n\t        p = Math.ceil(log(2*n-1)/log2), m = Math.pow(2,p);\n\t    var cx = numeric.rep([m],0), cy = numeric.rep([m],0), cos = Math.cos, sin = Math.sin;\n\t    var k, c = (-3.141592653589793238462643383279502884197169399375105820/n),t;\n\t    var a = numeric.rep([m],0), b = numeric.rep([m],0),nhalf = Math.floor(n/2);\n\t    for(k=0;k<n;k++) a[k] = x[k];\n\t    if(typeof y !== \"undefined\") for(k=0;k<n;k++) b[k] = y[k];\n\t    cx[0] = 1;\n\t    for(k=1;k<=m/2;k++) {\n\t        t = c*k*k;\n\t        cx[k] = cos(t);\n\t        cy[k] = sin(t);\n\t        cx[m-k] = cos(t);\n\t        cy[m-k] = sin(t)\n\t    }\n\t    var X = new numeric.T(a,b), Y = new numeric.T(cx,cy);\n\t    X = X.mul(Y);\n\t    numeric.convpow2(X.x,X.y,numeric.clone(Y.x),numeric.neg(Y.y));\n\t    X = X.mul(Y);\n\t    X.x.length = n;\n\t    X.y.length = n;\n\t    return X;\n\t}\n\tnumeric.T.prototype.ifft = function ifft() {\n\t    var x = this.x, y = this.y;\n\t    var n = x.length, log = Math.log, log2 = log(2),\n\t        p = Math.ceil(log(2*n-1)/log2), m = Math.pow(2,p);\n\t    var cx = numeric.rep([m],0), cy = numeric.rep([m],0), cos = Math.cos, sin = Math.sin;\n\t    var k, c = (3.141592653589793238462643383279502884197169399375105820/n),t;\n\t    var a = numeric.rep([m],0), b = numeric.rep([m],0),nhalf = Math.floor(n/2);\n\t    for(k=0;k<n;k++) a[k] = x[k];\n\t    if(typeof y !== \"undefined\") for(k=0;k<n;k++) b[k] = y[k];\n\t    cx[0] = 1;\n\t    for(k=1;k<=m/2;k++) {\n\t        t = c*k*k;\n\t        cx[k] = cos(t);\n\t        cy[k] = sin(t);\n\t        cx[m-k] = cos(t);\n\t        cy[m-k] = sin(t)\n\t    }\n\t    var X = new numeric.T(a,b), Y = new numeric.T(cx,cy);\n\t    X = X.mul(Y);\n\t    numeric.convpow2(X.x,X.y,numeric.clone(Y.x),numeric.neg(Y.y));\n\t    X = X.mul(Y);\n\t    X.x.length = n;\n\t    X.y.length = n;\n\t    return X.div(n);\n\t}\n\t\n\t//9. Unconstrained optimization\n\tnumeric.gradient = function gradient(f,x) {\n\t    var n = x.length;\n\t    var f0 = f(x);\n\t    if(isNaN(f0)) throw new Error('gradient: f(x) is a NaN!');\n\t    var max = Math.max;\n\t    var i,x0 = numeric.clone(x),f1,f2, J = Array(n);\n\t    var div = numeric.div, sub = numeric.sub,errest,roundoff,max = Math.max,eps = 1e-3,abs = Math.abs, min = Math.min;\n\t    var t0,t1,t2,it=0,d1,d2,N;\n\t    for(i=0;i<n;i++) {\n\t        var h = max(1e-6*f0,1e-8);\n\t        while(1) {\n\t            ++it;\n\t            if(it>20) { throw new Error(\"Numerical gradient fails\"); }\n\t            x0[i] = x[i]+h;\n\t            f1 = f(x0);\n\t            x0[i] = x[i]-h;\n\t            f2 = f(x0);\n\t            x0[i] = x[i];\n\t            if(isNaN(f1) || isNaN(f2)) { h/=16; continue; }\n\t            J[i] = (f1-f2)/(2*h);\n\t            t0 = x[i]-h;\n\t            t1 = x[i];\n\t            t2 = x[i]+h;\n\t            d1 = (f1-f0)/h;\n\t            d2 = (f0-f2)/h;\n\t            N = max(abs(J[i]),abs(f0),abs(f1),abs(f2),abs(t0),abs(t1),abs(t2),1e-8);\n\t            errest = min(max(abs(d1-J[i]),abs(d2-J[i]),abs(d1-d2))/N,h/N);\n\t            if(errest>eps) { h/=16; }\n\t            else break;\n\t            }\n\t    }\n\t    return J;\n\t}\n\t\n\tnumeric.uncmin = function uncmin(f,x0,tol,gradient,maxit,callback,options) {\n\t    var grad = numeric.gradient;\n\t    if(typeof options === \"undefined\") { options = {}; }\n\t    if(typeof tol === \"undefined\") { tol = 1e-8; }\n\t    if(typeof gradient === \"undefined\") { gradient = function(x) { return grad(f,x); }; }\n\t    if(typeof maxit === \"undefined\") maxit = 1000;\n\t    x0 = numeric.clone(x0);\n\t    var n = x0.length;\n\t    var f0 = f(x0),f1,df0;\n\t    if(isNaN(f0)) throw new Error('uncmin: f(x0) is a NaN!');\n\t    var max = Math.max, norm2 = numeric.norm2;\n\t    tol = max(tol,numeric.epsilon);\n\t    var step,g0,g1,H1 = options.Hinv || numeric.identity(n);\n\t    var dot = numeric.dot, inv = numeric.inv, sub = numeric.sub, add = numeric.add, ten = numeric.tensor, div = numeric.div, mul = numeric.mul;\n\t    var all = numeric.all, isfinite = numeric.isFinite, neg = numeric.neg;\n\t    var it=0,i,s,x1,y,Hy,Hs,ys,i0,t,nstep,t1,t2;\n\t    var msg = \"\";\n\t    g0 = gradient(x0);\n\t    while(it<maxit) {\n\t        if(typeof callback === \"function\") { if(callback(it,x0,f0,g0,H1)) { msg = \"Callback returned true\"; break; } }\n\t        if(!all(isfinite(g0))) { msg = \"Gradient has Infinity or NaN\"; break; }\n\t        step = neg(dot(H1,g0));\n\t        if(!all(isfinite(step))) { msg = \"Search direction has Infinity or NaN\"; break; }\n\t        nstep = norm2(step);\n\t        if(nstep < tol) { msg=\"Newton step smaller than tol\"; break; }\n\t        t = 1;\n\t        df0 = dot(g0,step);\n\t        // line search\n\t        x1 = x0;\n\t        while(it < maxit) {\n\t            if(t*nstep < tol) { break; }\n\t            s = mul(step,t);\n\t            x1 = add(x0,s);\n\t            f1 = f(x1);\n\t            if(f1-f0 >= 0.1*t*df0 || isNaN(f1)) {\n\t                t *= 0.5;\n\t                ++it;\n\t                continue;\n\t            }\n\t            break;\n\t        }\n\t        if(t*nstep < tol) { msg = \"Line search step size smaller than tol\"; break; }\n\t        if(it === maxit) { msg = \"maxit reached during line search\"; break; }\n\t        g1 = gradient(x1);\n\t        y = sub(g1,g0);\n\t        ys = dot(y,s);\n\t        Hy = dot(H1,y);\n\t        H1 = sub(add(H1,\n\t                mul(\n\t                        (ys+dot(y,Hy))/(ys*ys),\n\t                        ten(s,s)    )),\n\t                div(add(ten(Hy,s),ten(s,Hy)),ys));\n\t        x0 = x1;\n\t        f0 = f1;\n\t        g0 = g1;\n\t        ++it;\n\t    }\n\t    return {solution: x0, f: f0, gradient: g0, invHessian: H1, iterations:it, message: msg};\n\t}\n\t\n\t// 10. Ode solver (Dormand-Prince)\n\tnumeric.Dopri = function Dopri(x,y,f,ymid,iterations,msg,events) {\n\t    this.x = x;\n\t    this.y = y;\n\t    this.f = f;\n\t    this.ymid = ymid;\n\t    this.iterations = iterations;\n\t    this.events = events;\n\t    this.message = msg;\n\t}\n\tnumeric.Dopri.prototype._at = function _at(xi,j) {\n\t    function sqr(x) { return x*x; }\n\t    var sol = this;\n\t    var xs = sol.x;\n\t    var ys = sol.y;\n\t    var k1 = sol.f;\n\t    var ymid = sol.ymid;\n\t    var n = xs.length;\n\t    var x0,x1,xh,y0,y1,yh,xi;\n\t    var floor = Math.floor,h;\n\t    var c = 0.5;\n\t    var add = numeric.add, mul = numeric.mul,sub = numeric.sub, p,q,w;\n\t    x0 = xs[j];\n\t    x1 = xs[j+1];\n\t    y0 = ys[j];\n\t    y1 = ys[j+1];\n\t    h  = x1-x0;\n\t    xh = x0+c*h;\n\t    yh = ymid[j];\n\t    p = sub(k1[j  ],mul(y0,1/(x0-xh)+2/(x0-x1)));\n\t    q = sub(k1[j+1],mul(y1,1/(x1-xh)+2/(x1-x0)));\n\t    w = [sqr(xi - x1) * (xi - xh) / sqr(x0 - x1) / (x0 - xh),\n\t         sqr(xi - x0) * sqr(xi - x1) / sqr(x0 - xh) / sqr(x1 - xh),\n\t         sqr(xi - x0) * (xi - xh) / sqr(x1 - x0) / (x1 - xh),\n\t         (xi - x0) * sqr(xi - x1) * (xi - xh) / sqr(x0-x1) / (x0 - xh),\n\t         (xi - x1) * sqr(xi - x0) * (xi - xh) / sqr(x0-x1) / (x1 - xh)];\n\t    return add(add(add(add(mul(y0,w[0]),\n\t                           mul(yh,w[1])),\n\t                           mul(y1,w[2])),\n\t                           mul( p,w[3])),\n\t                           mul( q,w[4]));\n\t}\n\tnumeric.Dopri.prototype.at = function at(x) {\n\t    var i,j,k,floor = Math.floor;\n\t    if(typeof x !== \"number\") {\n\t        var n = x.length, ret = Array(n);\n\t        for(i=n-1;i!==-1;--i) {\n\t            ret[i] = this.at(x[i]);\n\t        }\n\t        return ret;\n\t    }\n\t    var x0 = this.x;\n\t    i = 0; j = x0.length-1;\n\t    while(j-i>1) {\n\t        k = floor(0.5*(i+j));\n\t        if(x0[k] <= x) i = k;\n\t        else j = k;\n\t    }\n\t    return this._at(x,i);\n\t}\n\t\n\tnumeric.dopri = function dopri(x0,x1,y0,f,tol,maxit,event) {\n\t    if(typeof tol === \"undefined\") { tol = 1e-6; }\n\t    if(typeof maxit === \"undefined\") { maxit = 1000; }\n\t    var xs = [x0], ys = [y0], k1 = [f(x0,y0)], k2,k3,k4,k5,k6,k7, ymid = [];\n\t    var A2 = 1/5;\n\t    var A3 = [3/40,9/40];\n\t    var A4 = [44/45,-56/15,32/9];\n\t    var A5 = [19372/6561,-25360/2187,64448/6561,-212/729];\n\t    var A6 = [9017/3168,-355/33,46732/5247,49/176,-5103/18656];\n\t    var b = [35/384,0,500/1113,125/192,-2187/6784,11/84];\n\t    var bm = [0.5*6025192743/30085553152,\n\t              0,\n\t              0.5*51252292925/65400821598,\n\t              0.5*-2691868925/45128329728,\n\t              0.5*187940372067/1594534317056,\n\t              0.5*-1776094331/19743644256,\n\t              0.5*11237099/235043384];\n\t    var c = [1/5,3/10,4/5,8/9,1,1];\n\t    var e = [-71/57600,0,71/16695,-71/1920,17253/339200,-22/525,1/40];\n\t    var i = 0,er,j;\n\t    var h = (x1-x0)/10;\n\t    var it = 0;\n\t    var add = numeric.add, mul = numeric.mul, y1,erinf;\n\t    var max = Math.max, min = Math.min, abs = Math.abs, norminf = numeric.norminf,pow = Math.pow;\n\t    var any = numeric.any, lt = numeric.lt, and = numeric.and, sub = numeric.sub;\n\t    var e0, e1, ev;\n\t    var ret = new numeric.Dopri(xs,ys,k1,ymid,-1,\"\");\n\t    if(typeof event === \"function\") e0 = event(x0,y0);\n\t    while(x0<x1 && it<maxit) {\n\t        ++it;\n\t        if(x0+h>x1) h = x1-x0;\n\t        k2 = f(x0+c[0]*h,                add(y0,mul(   A2*h,k1[i])));\n\t        k3 = f(x0+c[1]*h,            add(add(y0,mul(A3[0]*h,k1[i])),mul(A3[1]*h,k2)));\n\t        k4 = f(x0+c[2]*h,        add(add(add(y0,mul(A4[0]*h,k1[i])),mul(A4[1]*h,k2)),mul(A4[2]*h,k3)));\n\t        k5 = f(x0+c[3]*h,    add(add(add(add(y0,mul(A5[0]*h,k1[i])),mul(A5[1]*h,k2)),mul(A5[2]*h,k3)),mul(A5[3]*h,k4)));\n\t        k6 = f(x0+c[4]*h,add(add(add(add(add(y0,mul(A6[0]*h,k1[i])),mul(A6[1]*h,k2)),mul(A6[2]*h,k3)),mul(A6[3]*h,k4)),mul(A6[4]*h,k5)));\n\t        y1 = add(add(add(add(add(y0,mul(k1[i],h*b[0])),mul(k3,h*b[2])),mul(k4,h*b[3])),mul(k5,h*b[4])),mul(k6,h*b[5]));\n\t        k7 = f(x0+h,y1);\n\t        er = add(add(add(add(add(mul(k1[i],h*e[0]),mul(k3,h*e[2])),mul(k4,h*e[3])),mul(k5,h*e[4])),mul(k6,h*e[5])),mul(k7,h*e[6]));\n\t        if(typeof er === \"number\") erinf = abs(er);\n\t        else erinf = norminf(er);\n\t        if(erinf > tol) { // reject\n\t            h = 0.2*h*pow(tol/erinf,0.25);\n\t            if(x0+h === x0) {\n\t                ret.msg = \"Step size became too small\";\n\t                break;\n\t            }\n\t            continue;\n\t        }\n\t        ymid[i] = add(add(add(add(add(add(y0,\n\t                mul(k1[i],h*bm[0])),\n\t                mul(k3   ,h*bm[2])),\n\t                mul(k4   ,h*bm[3])),\n\t                mul(k5   ,h*bm[4])),\n\t                mul(k6   ,h*bm[5])),\n\t                mul(k7   ,h*bm[6]));\n\t        ++i;\n\t        xs[i] = x0+h;\n\t        ys[i] = y1;\n\t        k1[i] = k7;\n\t        if(typeof event === \"function\") {\n\t            var yi,xl = x0,xr = x0+0.5*h,xi;\n\t            e1 = event(xr,ymid[i-1]);\n\t            ev = and(lt(e0,0),lt(0,e1));\n\t            if(!any(ev)) { xl = xr; xr = x0+h; e0 = e1; e1 = event(xr,y1); ev = and(lt(e0,0),lt(0,e1)); }\n\t            if(any(ev)) {\n\t                var xc, yc, en,ei;\n\t                var side=0, sl = 1.0, sr = 1.0;\n\t                while(1) {\n\t                    if(typeof e0 === \"number\") xi = (sr*e1*xl-sl*e0*xr)/(sr*e1-sl*e0);\n\t                    else {\n\t                        xi = xr;\n\t                        for(j=e0.length-1;j!==-1;--j) {\n\t                            if(e0[j]<0 && e1[j]>0) xi = min(xi,(sr*e1[j]*xl-sl*e0[j]*xr)/(sr*e1[j]-sl*e0[j]));\n\t                        }\n\t                    }\n\t                    if(xi <= xl || xi >= xr) break;\n\t                    yi = ret._at(xi, i-1);\n\t                    ei = event(xi,yi);\n\t                    en = and(lt(e0,0),lt(0,ei));\n\t                    if(any(en)) {\n\t                        xr = xi;\n\t                        e1 = ei;\n\t                        ev = en;\n\t                        sr = 1.0;\n\t                        if(side === -1) sl *= 0.5;\n\t                        else sl = 1.0;\n\t                        side = -1;\n\t                    } else {\n\t                        xl = xi;\n\t                        e0 = ei;\n\t                        sl = 1.0;\n\t                        if(side === 1) sr *= 0.5;\n\t                        else sr = 1.0;\n\t                        side = 1;\n\t                    }\n\t                }\n\t                y1 = ret._at(0.5*(x0+xi),i-1);\n\t                ret.f[i] = f(xi,yi);\n\t                ret.x[i] = xi;\n\t                ret.y[i] = yi;\n\t                ret.ymid[i-1] = y1;\n\t                ret.events = ev;\n\t                ret.iterations = it;\n\t                return ret;\n\t            }\n\t        }\n\t        x0 += h;\n\t        y0 = y1;\n\t        e0 = e1;\n\t        h = min(0.8*h*pow(tol/erinf,0.25),4*h);\n\t    }\n\t    ret.iterations = it;\n\t    return ret;\n\t}\n\t\n\t// 11. Ax = b\n\tnumeric.LU = function(A, fast) {\n\t  fast = fast || false;\n\t\n\t  var abs = Math.abs;\n\t  var i, j, k, absAjk, Akk, Ak, Pk, Ai;\n\t  var max;\n\t  var n = A.length, n1 = n-1;\n\t  var P = new Array(n);\n\t  if(!fast) A = numeric.clone(A);\n\t\n\t  for (k = 0; k < n; ++k) {\n\t    Pk = k;\n\t    Ak = A[k];\n\t    max = abs(Ak[k]);\n\t    for (j = k + 1; j < n; ++j) {\n\t      absAjk = abs(A[j][k]);\n\t      if (max < absAjk) {\n\t        max = absAjk;\n\t        Pk = j;\n\t      }\n\t    }\n\t    P[k] = Pk;\n\t\n\t    if (Pk != k) {\n\t      A[k] = A[Pk];\n\t      A[Pk] = Ak;\n\t      Ak = A[k];\n\t    }\n\t\n\t    Akk = Ak[k];\n\t\n\t    for (i = k + 1; i < n; ++i) {\n\t      A[i][k] /= Akk;\n\t    }\n\t\n\t    for (i = k + 1; i < n; ++i) {\n\t      Ai = A[i];\n\t      for (j = k + 1; j < n1; ++j) {\n\t        Ai[j] -= Ai[k] * Ak[j];\n\t        ++j;\n\t        Ai[j] -= Ai[k] * Ak[j];\n\t      }\n\t      if(j===n1) Ai[j] -= Ai[k] * Ak[j];\n\t    }\n\t  }\n\t\n\t  return {\n\t    LU: A,\n\t    P:  P\n\t  };\n\t}\n\t\n\tnumeric.LUsolve = function LUsolve(LUP, b) {\n\t  var i, j;\n\t  var LU = LUP.LU;\n\t  var n   = LU.length;\n\t  var x = numeric.clone(b);\n\t  var P   = LUP.P;\n\t  var Pi, LUi, LUii, tmp;\n\t\n\t  for (i=n-1;i!==-1;--i) x[i] = b[i];\n\t  for (i = 0; i < n; ++i) {\n\t    Pi = P[i];\n\t    if (P[i] !== i) {\n\t      tmp = x[i];\n\t      x[i] = x[Pi];\n\t      x[Pi] = tmp;\n\t    }\n\t\n\t    LUi = LU[i];\n\t    for (j = 0; j < i; ++j) {\n\t      x[i] -= x[j] * LUi[j];\n\t    }\n\t  }\n\t\n\t  for (i = n - 1; i >= 0; --i) {\n\t    LUi = LU[i];\n\t    for (j = i + 1; j < n; ++j) {\n\t      x[i] -= x[j] * LUi[j];\n\t    }\n\t\n\t    x[i] /= LUi[i];\n\t  }\n\t\n\t  return x;\n\t}\n\t\n\tnumeric.solve = function solve(A,b,fast) { return numeric.LUsolve(numeric.LU(A,fast), b); }\n\t\n\t// 12. Linear programming\n\tnumeric.echelonize = function echelonize(A) {\n\t    var s = numeric.dim(A), m = s[0], n = s[1];\n\t    var I = numeric.identity(m);\n\t    var P = Array(m);\n\t    var i,j,k,l,Ai,Ii,Z,a;\n\t    var abs = Math.abs;\n\t    var diveq = numeric.diveq;\n\t    A = numeric.clone(A);\n\t    for(i=0;i<m;++i) {\n\t        k = 0;\n\t        Ai = A[i];\n\t        Ii = I[i];\n\t        for(j=1;j<n;++j) if(abs(Ai[k])<abs(Ai[j])) k=j;\n\t        P[i] = k;\n\t        diveq(Ii,Ai[k]);\n\t        diveq(Ai,Ai[k]);\n\t        for(j=0;j<m;++j) if(j!==i) {\n\t            Z = A[j]; a = Z[k];\n\t            for(l=n-1;l!==-1;--l) Z[l] -= Ai[l]*a;\n\t            Z = I[j];\n\t            for(l=m-1;l!==-1;--l) Z[l] -= Ii[l]*a;\n\t        }\n\t    }\n\t    return {I:I, A:A, P:P};\n\t}\n\t\n\tnumeric.__solveLP = function __solveLP(c,A,b,tol,maxit,x,flag) {\n\t    var sum = numeric.sum, log = numeric.log, mul = numeric.mul, sub = numeric.sub, dot = numeric.dot, div = numeric.div, add = numeric.add;\n\t    var m = c.length, n = b.length,y;\n\t    var unbounded = false, cb,i0=0;\n\t    var alpha = 1.0;\n\t    var f0,df0,AT = numeric.transpose(A), svd = numeric.svd,transpose = numeric.transpose,leq = numeric.leq, sqrt = Math.sqrt, abs = Math.abs;\n\t    var muleq = numeric.muleq;\n\t    var norm = numeric.norminf, any = numeric.any,min = Math.min;\n\t    var all = numeric.all, gt = numeric.gt;\n\t    var p = Array(m), A0 = Array(n),e=numeric.rep([n],1), H;\n\t    var solve = numeric.solve, z = sub(b,dot(A,x)),count;\n\t    var dotcc = dot(c,c);\n\t    var g;\n\t    for(count=i0;count<maxit;++count) {\n\t        var i,j,d;\n\t        for(i=n-1;i!==-1;--i) A0[i] = div(A[i],z[i]);\n\t        var A1 = transpose(A0);\n\t        for(i=m-1;i!==-1;--i) p[i] = (/*x[i]+*/sum(A1[i]));\n\t        alpha = 0.25*abs(dotcc/dot(c,p));\n\t        var a1 = 100*sqrt(dotcc/dot(p,p));\n\t        if(!isFinite(alpha) || alpha>a1) alpha = a1;\n\t        g = add(c,mul(alpha,p));\n\t        H = dot(A1,A0);\n\t        for(i=m-1;i!==-1;--i) H[i][i] += 1;\n\t        d = solve(H,div(g,alpha),true);\n\t        var t0 = div(z,dot(A,d));\n\t        var t = 1.0;\n\t        for(i=n-1;i!==-1;--i) if(t0[i]<0) t = min(t,-0.999*t0[i]);\n\t        y = sub(x,mul(d,t));\n\t        z = sub(b,dot(A,y));\n\t        if(!all(gt(z,0))) return { solution: x, message: \"\", iterations: count };\n\t        x = y;\n\t        if(alpha<tol) return { solution: y, message: \"\", iterations: count };\n\t        if(flag) {\n\t            var s = dot(c,g), Ag = dot(A,g);\n\t            unbounded = true;\n\t            for(i=n-1;i!==-1;--i) if(s*Ag[i]<0) { unbounded = false; break; }\n\t        } else {\n\t            if(x[m-1]>=0) unbounded = false;\n\t            else unbounded = true;\n\t        }\n\t        if(unbounded) return { solution: y, message: \"Unbounded\", iterations: count };\n\t    }\n\t    return { solution: x, message: \"maximum iteration count exceeded\", iterations:count };\n\t}\n\t\n\tnumeric._solveLP = function _solveLP(c,A,b,tol,maxit) {\n\t    var m = c.length, n = b.length,y;\n\t    var sum = numeric.sum, log = numeric.log, mul = numeric.mul, sub = numeric.sub, dot = numeric.dot, div = numeric.div, add = numeric.add;\n\t    var c0 = numeric.rep([m],0).concat([1]);\n\t    var J = numeric.rep([n,1],-1);\n\t    var A0 = numeric.blockMatrix([[A                   ,   J  ]]);\n\t    var b0 = b;\n\t    var y = numeric.rep([m],0).concat(Math.max(0,numeric.sup(numeric.neg(b)))+1);\n\t    var x0 = numeric.__solveLP(c0,A0,b0,tol,maxit,y,false);\n\t    var x = numeric.clone(x0.solution);\n\t    x.length = m;\n\t    var foo = numeric.inf(sub(b,dot(A,x)));\n\t    if(foo<0) { return { solution: NaN, message: \"Infeasible\", iterations: x0.iterations }; }\n\t    var ret = numeric.__solveLP(c, A, b, tol, maxit-x0.iterations, x, true);\n\t    ret.iterations += x0.iterations;\n\t    return ret;\n\t};\n\t\n\tnumeric.solveLP = function solveLP(c,A,b,Aeq,beq,tol,maxit) {\n\t    if(typeof maxit === \"undefined\") maxit = 1000;\n\t    if(typeof tol === \"undefined\") tol = numeric.epsilon;\n\t    if(typeof Aeq === \"undefined\") return numeric._solveLP(c,A,b,tol,maxit);\n\t    var m = Aeq.length, n = Aeq[0].length, o = A.length;\n\t    var B = numeric.echelonize(Aeq);\n\t    var flags = numeric.rep([n],0);\n\t    var P = B.P;\n\t    var Q = [];\n\t    var i;\n\t    for(i=P.length-1;i!==-1;--i) flags[P[i]] = 1;\n\t    for(i=n-1;i!==-1;--i) if(flags[i]===0) Q.push(i);\n\t    var g = numeric.getRange;\n\t    var I = numeric.linspace(0,m-1), J = numeric.linspace(0,o-1);\n\t    var Aeq2 = g(Aeq,I,Q), A1 = g(A,J,P), A2 = g(A,J,Q), dot = numeric.dot, sub = numeric.sub;\n\t    var A3 = dot(A1,B.I);\n\t    var A4 = sub(A2,dot(A3,Aeq2)), b4 = sub(b,dot(A3,beq));\n\t    var c1 = Array(P.length), c2 = Array(Q.length);\n\t    for(i=P.length-1;i!==-1;--i) c1[i] = c[P[i]];\n\t    for(i=Q.length-1;i!==-1;--i) c2[i] = c[Q[i]];\n\t    var c4 = sub(c2,dot(c1,dot(B.I,Aeq2)));\n\t    var S = numeric._solveLP(c4,A4,b4,tol,maxit);\n\t    var x2 = S.solution;\n\t    if(x2!==x2) return S;\n\t    var x1 = dot(B.I,sub(beq,dot(Aeq2,x2)));\n\t    var x = Array(c.length);\n\t    for(i=P.length-1;i!==-1;--i) x[P[i]] = x1[i];\n\t    for(i=Q.length-1;i!==-1;--i) x[Q[i]] = x2[i];\n\t    return { solution: x, message:S.message, iterations: S.iterations };\n\t}\n\t\n\tnumeric.MPStoLP = function MPStoLP(MPS) {\n\t    if(MPS instanceof String) { MPS.split('\\n'); }\n\t    var state = 0;\n\t    var states = ['Initial state','NAME','ROWS','COLUMNS','RHS','BOUNDS','ENDATA'];\n\t    var n = MPS.length;\n\t    var i,j,z,N=0,rows = {}, sign = [], rl = 0, vars = {}, nv = 0;\n\t    var name;\n\t    var c = [], A = [], b = [];\n\t    function err(e) { throw new Error('MPStoLP: '+e+'\\nLine '+i+': '+MPS[i]+'\\nCurrent state: '+states[state]+'\\n'); }\n\t    for(i=0;i<n;++i) {\n\t        z = MPS[i];\n\t        var w0 = z.match(/\\S*/g);\n\t        var w = [];\n\t        for(j=0;j<w0.length;++j) if(w0[j]!==\"\") w.push(w0[j]);\n\t        if(w.length === 0) continue;\n\t        for(j=0;j<states.length;++j) if(z.substr(0,states[j].length) === states[j]) break;\n\t        if(j<states.length) {\n\t            state = j;\n\t            if(j===1) { name = w[1]; }\n\t            if(j===6) return { name:name, c:c, A:numeric.transpose(A), b:b, rows:rows, vars:vars };\n\t            continue;\n\t        }\n\t        switch(state) {\n\t        case 0: case 1: err('Unexpected line');\n\t        case 2: \n\t            switch(w[0]) {\n\t            case 'N': if(N===0) N = w[1]; else err('Two or more N rows'); break;\n\t            case 'L': rows[w[1]] = rl; sign[rl] = 1; b[rl] = 0; ++rl; break;\n\t            case 'G': rows[w[1]] = rl; sign[rl] = -1;b[rl] = 0; ++rl; break;\n\t            case 'E': rows[w[1]] = rl; sign[rl] = 0;b[rl] = 0; ++rl; break;\n\t            default: err('Parse error '+numeric.prettyPrint(w));\n\t            }\n\t            break;\n\t        case 3:\n\t            if(!vars.hasOwnProperty(w[0])) { vars[w[0]] = nv; c[nv] = 0; A[nv] = numeric.rep([rl],0); ++nv; }\n\t            var p = vars[w[0]];\n\t            for(j=1;j<w.length;j+=2) {\n\t                if(w[j] === N) { c[p] = parseFloat(w[j+1]); continue; }\n\t                var q = rows[w[j]];\n\t                A[p][q] = (sign[q]<0?-1:1)*parseFloat(w[j+1]);\n\t            }\n\t            break;\n\t        case 4:\n\t            for(j=1;j<w.length;j+=2) b[rows[w[j]]] = (sign[rows[w[j]]]<0?-1:1)*parseFloat(w[j+1]);\n\t            break;\n\t        case 5: /*FIXME*/ break;\n\t        case 6: err('Internal error');\n\t        }\n\t    }\n\t    err('Reached end of file without ENDATA');\n\t}\n\t// seedrandom.js version 2.0.\n\t// Author: David Bau 4/2/2011\n\t//\n\t// Defines a method Math.seedrandom() that, when called, substitutes\n\t// an explicitly seeded RC4-based algorithm for Math.random().  Also\n\t// supports automatic seeding from local or network sources of entropy.\n\t//\n\t// Usage:\n\t//\n\t//   <script src=http://davidbau.com/encode/seedrandom-min.js></script>\n\t//\n\t//   Math.seedrandom('yipee'); Sets Math.random to a function that is\n\t//                             initialized using the given explicit seed.\n\t//\n\t//   Math.seedrandom();        Sets Math.random to a function that is\n\t//                             seeded using the current time, dom state,\n\t//                             and other accumulated local entropy.\n\t//                             The generated seed string is returned.\n\t//\n\t//   Math.seedrandom('yowza', true);\n\t//                             Seeds using the given explicit seed mixed\n\t//                             together with accumulated entropy.\n\t//\n\t//   <script src=\"http://bit.ly/srandom-512\"></script>\n\t//                             Seeds using physical random bits downloaded\n\t//                             from random.org.\n\t//\n\t//   <script src=\"https://jsonlib.appspot.com/urandom?callback=Math.seedrandom\">\n\t//   </script>                 Seeds using urandom bits from call.jsonlib.com,\n\t//                             which is faster than random.org.\n\t//\n\t// Examples:\n\t//\n\t//   Math.seedrandom(\"hello\");            // Use \"hello\" as the seed.\n\t//   document.write(Math.random());       // Always 0.5463663768140734\n\t//   document.write(Math.random());       // Always 0.43973793770592234\n\t//   var rng1 = Math.random;              // Remember the current prng.\n\t//\n\t//   var autoseed = Math.seedrandom();    // New prng with an automatic seed.\n\t//   document.write(Math.random());       // Pretty much unpredictable.\n\t//\n\t//   Math.random = rng1;                  // Continue \"hello\" prng sequence.\n\t//   document.write(Math.random());       // Always 0.554769432473455\n\t//\n\t//   Math.seedrandom(autoseed);           // Restart at the previous seed.\n\t//   document.write(Math.random());       // Repeat the 'unpredictable' value.\n\t//\n\t// Notes:\n\t//\n\t// Each time seedrandom('arg') is called, entropy from the passed seed\n\t// is accumulated in a pool to help generate future seeds for the\n\t// zero-argument form of Math.seedrandom, so entropy can be injected over\n\t// time by calling seedrandom with explicit data repeatedly.\n\t//\n\t// On speed - This javascript implementation of Math.random() is about\n\t// 3-10x slower than the built-in Math.random() because it is not native\n\t// code, but this is typically fast enough anyway.  Seeding is more expensive,\n\t// especially if you use auto-seeding.  Some details (timings on Chrome 4):\n\t//\n\t// Our Math.random()            - avg less than 0.002 milliseconds per call\n\t// seedrandom('explicit')       - avg less than 0.5 milliseconds per call\n\t// seedrandom('explicit', true) - avg less than 2 milliseconds per call\n\t// seedrandom()                 - avg about 38 milliseconds per call\n\t//\n\t// LICENSE (BSD):\n\t//\n\t// Copyright 2010 David Bau, all rights reserved.\n\t//\n\t// Redistribution and use in source and binary forms, with or without\n\t// modification, are permitted provided that the following conditions are met:\n\t// \n\t//   1. Redistributions of source code must retain the above copyright\n\t//      notice, this list of conditions and the following disclaimer.\n\t//\n\t//   2. Redistributions in binary form must reproduce the above copyright\n\t//      notice, this list of conditions and the following disclaimer in the\n\t//      documentation and/or other materials provided with the distribution.\n\t// \n\t//   3. Neither the name of this module nor the names of its contributors may\n\t//      be used to endorse or promote products derived from this software\n\t//      without specific prior written permission.\n\t// \n\t// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\t// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\t// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\t// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\t// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\t// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\t// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\t// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\t// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t//\n\t/**\n\t * All code is in an anonymous closure to keep the global namespace clean.\n\t *\n\t * @param {number=} overflow \n\t * @param {number=} startdenom\n\t */\n\t\n\t// Patched by Seb so that seedrandom.js does not pollute the Math object.\n\t// My tests suggest that doing Math.trouble = 1 makes Math lookups about 5%\n\t// slower.\n\tnumeric.seedrandom = { pow:Math.pow, random:Math.random };\n\t\n\t(function (pool, math, width, chunks, significance, overflow, startdenom) {\n\t\n\t\n\t//\n\t// seedrandom()\n\t// This is the seedrandom function described above.\n\t//\n\tmath['seedrandom'] = function seedrandom(seed, use_entropy) {\n\t  var key = [];\n\t  var arc4;\n\t\n\t  // Flatten the seed string or build one from local entropy if needed.\n\t  seed = mixkey(flatten(\n\t    use_entropy ? [seed, pool] :\n\t    arguments.length ? seed :\n\t    [new Date().getTime(), pool, window], 3), key);\n\t\n\t  // Use the seed to initialize an ARC4 generator.\n\t  arc4 = new ARC4(key);\n\t\n\t  // Mix the randomness into accumulated entropy.\n\t  mixkey(arc4.S, pool);\n\t\n\t  // Override Math.random\n\t\n\t  // This function returns a random double in [0, 1) that contains\n\t  // randomness in every bit of the mantissa of the IEEE 754 value.\n\t\n\t  math['random'] = function random() {  // Closure to return a random double:\n\t    var n = arc4.g(chunks);             // Start with a numerator n < 2 ^ 48\n\t    var d = startdenom;                 //   and denominator d = 2 ^ 48.\n\t    var x = 0;                          //   and no 'extra last byte'.\n\t    while (n < significance) {          // Fill up all significant digits by\n\t      n = (n + x) * width;              //   shifting numerator and\n\t      d *= width;                       //   denominator and generating a\n\t      x = arc4.g(1);                    //   new least-significant-byte.\n\t    }\n\t    while (n >= overflow) {             // To avoid rounding up, before adding\n\t      n /= 2;                           //   last byte, shift everything\n\t      d /= 2;                           //   right using integer math until\n\t      x >>>= 1;                         //   we have exactly the desired bits.\n\t    }\n\t    return (n + x) / d;                 // Form the number within [0, 1).\n\t  };\n\t\n\t  // Return the seed that was used\n\t  return seed;\n\t};\n\t\n\t//\n\t// ARC4\n\t//\n\t// An ARC4 implementation.  The constructor takes a key in the form of\n\t// an array of at most (width) integers that should be 0 <= x < (width).\n\t//\n\t// The g(count) method returns a pseudorandom integer that concatenates\n\t// the next (count) outputs from ARC4.  Its return value is a number x\n\t// that is in the range 0 <= x < (width ^ count).\n\t//\n\t/** @constructor */\n\tfunction ARC4(key) {\n\t  var t, u, me = this, keylen = key.length;\n\t  var i = 0, j = me.i = me.j = me.m = 0;\n\t  me.S = [];\n\t  me.c = [];\n\t\n\t  // The empty key [] is treated as [0].\n\t  if (!keylen) { key = [keylen++]; }\n\t\n\t  // Set up S using the standard key scheduling algorithm.\n\t  while (i < width) { me.S[i] = i++; }\n\t  for (i = 0; i < width; i++) {\n\t    t = me.S[i];\n\t    j = lowbits(j + t + key[i % keylen]);\n\t    u = me.S[j];\n\t    me.S[i] = u;\n\t    me.S[j] = t;\n\t  }\n\t\n\t  // The \"g\" method returns the next (count) outputs as one number.\n\t  me.g = function getnext(count) {\n\t    var s = me.S;\n\t    var i = lowbits(me.i + 1); var t = s[i];\n\t    var j = lowbits(me.j + t); var u = s[j];\n\t    s[i] = u;\n\t    s[j] = t;\n\t    var r = s[lowbits(t + u)];\n\t    while (--count) {\n\t      i = lowbits(i + 1); t = s[i];\n\t      j = lowbits(j + t); u = s[j];\n\t      s[i] = u;\n\t      s[j] = t;\n\t      r = r * width + s[lowbits(t + u)];\n\t    }\n\t    me.i = i;\n\t    me.j = j;\n\t    return r;\n\t  };\n\t  // For robust unpredictability discard an initial batch of values.\n\t  // See http://www.rsa.com/rsalabs/node.asp?id=2009\n\t  me.g(width);\n\t}\n\t\n\t//\n\t// flatten()\n\t// Converts an object tree to nested arrays of strings.\n\t//\n\t/** @param {Object=} result \n\t  * @param {string=} prop\n\t  * @param {string=} typ */\n\tfunction flatten(obj, depth, result, prop, typ) {\n\t  result = [];\n\t  typ = typeof(obj);\n\t  if (depth && typ == 'object') {\n\t    for (prop in obj) {\n\t      if (prop.indexOf('S') < 5) {    // Avoid FF3 bug (local/sessionStorage)\n\t        try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n\t      }\n\t    }\n\t  }\n\t  return (result.length ? result : obj + (typ != 'string' ? '\\0' : ''));\n\t}\n\t\n\t//\n\t// mixkey()\n\t// Mixes a string seed into a key that is an array of integers, and\n\t// returns a shortened string seed that is equivalent to the result key.\n\t//\n\t/** @param {number=} smear \n\t  * @param {number=} j */\n\tfunction mixkey(seed, key, smear, j) {\n\t  seed += '';                         // Ensure the seed is a string\n\t  smear = 0;\n\t  for (j = 0; j < seed.length; j++) {\n\t    key[lowbits(j)] =\n\t      lowbits((smear ^= key[lowbits(j)] * 19) + seed.charCodeAt(j));\n\t  }\n\t  seed = '';\n\t  for (j in key) { seed += String.fromCharCode(key[j]); }\n\t  return seed;\n\t}\n\t\n\t//\n\t// lowbits()\n\t// A quick \"n mod width\" for width a power of 2.\n\t//\n\tfunction lowbits(n) { return n & (width - 1); }\n\t\n\t//\n\t// The following constants are related to IEEE 754 limits.\n\t//\n\tstartdenom = math.pow(width, chunks);\n\tsignificance = math.pow(2, significance);\n\toverflow = significance * 2;\n\t\n\t//\n\t// When seedrandom.js is loaded, we immediately mix a few bits\n\t// from the built-in RNG into the entropy pool.  Because we do\n\t// not want to intefere with determinstic PRNG state later,\n\t// seedrandom will not call math.random on its own again after\n\t// initialization.\n\t//\n\tmixkey(math.random(), pool);\n\t\n\t// End anonymous scope, and pass initial values.\n\t}(\n\t  [],   // pool: entropy pool starts empty\n\t  numeric.seedrandom, // math: package containing random, pow, and seedrandom\n\t  256,  // width: each RC4 output is 0 <= x < 256\n\t  6,    // chunks: at least six RC4 outputs for each double\n\t  52    // significance: there are 52 significant digits in a double\n\t  ));\n\t/* This file is a slightly modified version of quadprog.js from Alberto Santini.\n\t * It has been slightly modified by Sébastien Loisel to make sure that it handles\n\t * 0-based Arrays instead of 1-based Arrays.\n\t * License is in resources/LICENSE.quadprog */\n\t(function(exports) {\n\t\n\tfunction base0to1(A) {\n\t    if(typeof A !== \"object\") { return A; }\n\t    var ret = [], i,n=A.length;\n\t    for(i=0;i<n;i++) ret[i+1] = base0to1(A[i]);\n\t    return ret;\n\t}\n\tfunction base1to0(A) {\n\t    if(typeof A !== \"object\") { return A; }\n\t    var ret = [], i,n=A.length;\n\t    for(i=1;i<n;i++) ret[i-1] = base1to0(A[i]);\n\t    return ret;\n\t}\n\t\n\tfunction dpori(a, lda, n) {\n\t    var i, j, k, kp1, t;\n\t\n\t    for (k = 1; k <= n; k = k + 1) {\n\t        a[k][k] = 1 / a[k][k];\n\t        t = -a[k][k];\n\t        //~ dscal(k - 1, t, a[1][k], 1);\n\t        for (i = 1; i < k; i = i + 1) {\n\t            a[i][k] = t * a[i][k];\n\t        }\n\t\n\t        kp1 = k + 1;\n\t        if (n < kp1) {\n\t            break;\n\t        }\n\t        for (j = kp1; j <= n; j = j + 1) {\n\t            t = a[k][j];\n\t            a[k][j] = 0;\n\t            //~ daxpy(k, t, a[1][k], 1, a[1][j], 1);\n\t            for (i = 1; i <= k; i = i + 1) {\n\t                a[i][j] = a[i][j] + (t * a[i][k]);\n\t            }\n\t        }\n\t    }\n\t\n\t}\n\t\n\tfunction dposl(a, lda, n, b) {\n\t    var i, k, kb, t;\n\t\n\t    for (k = 1; k <= n; k = k + 1) {\n\t        //~ t = ddot(k - 1, a[1][k], 1, b[1], 1);\n\t        t = 0;\n\t        for (i = 1; i < k; i = i + 1) {\n\t            t = t + (a[i][k] * b[i]);\n\t        }\n\t\n\t        b[k] = (b[k] - t) / a[k][k];\n\t    }\n\t\n\t    for (kb = 1; kb <= n; kb = kb + 1) {\n\t        k = n + 1 - kb;\n\t        b[k] = b[k] / a[k][k];\n\t        t = -b[k];\n\t        //~ daxpy(k - 1, t, a[1][k], 1, b[1], 1);\n\t        for (i = 1; i < k; i = i + 1) {\n\t            b[i] = b[i] + (t * a[i][k]);\n\t        }\n\t    }\n\t}\n\t\n\tfunction dpofa(a, lda, n, info) {\n\t    var i, j, jm1, k, t, s;\n\t\n\t    for (j = 1; j <= n; j = j + 1) {\n\t        info[1] = j;\n\t        s = 0;\n\t        jm1 = j - 1;\n\t        if (jm1 < 1) {\n\t            s = a[j][j] - s;\n\t            if (s <= 0) {\n\t                break;\n\t            }\n\t            a[j][j] = Math.sqrt(s);\n\t        } else {\n\t            for (k = 1; k <= jm1; k = k + 1) {\n\t                //~ t = a[k][j] - ddot(k - 1, a[1][k], 1, a[1][j], 1);\n\t                t = a[k][j];\n\t                for (i = 1; i < k; i = i + 1) {\n\t                    t = t - (a[i][j] * a[i][k]);\n\t                }\n\t                t = t / a[k][k];\n\t                a[k][j] = t;\n\t                s = s + t * t;\n\t            }\n\t            s = a[j][j] - s;\n\t            if (s <= 0) {\n\t                break;\n\t            }\n\t            a[j][j] = Math.sqrt(s);\n\t        }\n\t        info[1] = 0;\n\t    }\n\t}\n\t\n\tfunction qpgen2(dmat, dvec, fddmat, n, sol, crval, amat,\n\t    bvec, fdamat, q, meq, iact, nact, iter, work, ierr) {\n\t\n\t    var i, j, l, l1, info, it1, iwzv, iwrv, iwrm, iwsv, iwuv, nvl, r, iwnbv,\n\t        temp, sum, t1, tt, gc, gs, nu,\n\t        t1inf, t2min,\n\t        vsmall, tmpa, tmpb,\n\t        go;\n\t\n\t    r = Math.min(n, q);\n\t    l = 2 * n + (r * (r + 5)) / 2 + 2 * q + 1;\n\t\n\t    vsmall = 1.0e-60;\n\t    do {\n\t        vsmall = vsmall + vsmall;\n\t        tmpa = 1 + 0.1 * vsmall;\n\t        tmpb = 1 + 0.2 * vsmall;\n\t    } while (tmpa <= 1 || tmpb <= 1);\n\t\n\t    for (i = 1; i <= n; i = i + 1) {\n\t        work[i] = dvec[i];\n\t    }\n\t    for (i = n + 1; i <= l; i = i + 1) {\n\t        work[i] = 0;\n\t    }\n\t    for (i = 1; i <= q; i = i + 1) {\n\t        iact[i] = 0;\n\t    }\n\t\n\t    info = [];\n\t\n\t    if (ierr[1] === 0) {\n\t        dpofa(dmat, fddmat, n, info);\n\t        if (info[1] !== 0) {\n\t            ierr[1] = 2;\n\t            return;\n\t        }\n\t        dposl(dmat, fddmat, n, dvec);\n\t        dpori(dmat, fddmat, n);\n\t    } else {\n\t        for (j = 1; j <= n; j = j + 1) {\n\t            sol[j] = 0;\n\t            for (i = 1; i <= j; i = i + 1) {\n\t                sol[j] = sol[j] + dmat[i][j] * dvec[i];\n\t            }\n\t        }\n\t        for (j = 1; j <= n; j = j + 1) {\n\t            dvec[j] = 0;\n\t            for (i = j; i <= n; i = i + 1) {\n\t                dvec[j] = dvec[j] + dmat[j][i] * sol[i];\n\t            }\n\t        }\n\t    }\n\t\n\t    crval[1] = 0;\n\t    for (j = 1; j <= n; j = j + 1) {\n\t        sol[j] = dvec[j];\n\t        crval[1] = crval[1] + work[j] * sol[j];\n\t        work[j] = 0;\n\t        for (i = j + 1; i <= n; i = i + 1) {\n\t            dmat[i][j] = 0;\n\t        }\n\t    }\n\t    crval[1] = -crval[1] / 2;\n\t    ierr[1] = 0;\n\t\n\t    iwzv = n;\n\t    iwrv = iwzv + n;\n\t    iwuv = iwrv + r;\n\t    iwrm = iwuv + r + 1;\n\t    iwsv = iwrm + (r * (r + 1)) / 2;\n\t    iwnbv = iwsv + q;\n\t\n\t    for (i = 1; i <= q; i = i + 1) {\n\t        sum = 0;\n\t        for (j = 1; j <= n; j = j + 1) {\n\t            sum = sum + amat[j][i] * amat[j][i];\n\t        }\n\t        work[iwnbv + i] = Math.sqrt(sum);\n\t    }\n\t    nact = 0;\n\t    iter[1] = 0;\n\t    iter[2] = 0;\n\t\n\t    function fn_goto_50() {\n\t        iter[1] = iter[1] + 1;\n\t\n\t        l = iwsv;\n\t        for (i = 1; i <= q; i = i + 1) {\n\t            l = l + 1;\n\t            sum = -bvec[i];\n\t            for (j = 1; j <= n; j = j + 1) {\n\t                sum = sum + amat[j][i] * sol[j];\n\t            }\n\t            if (Math.abs(sum) < vsmall) {\n\t                sum = 0;\n\t            }\n\t            if (i > meq) {\n\t                work[l] = sum;\n\t            } else {\n\t                work[l] = -Math.abs(sum);\n\t                if (sum > 0) {\n\t                    for (j = 1; j <= n; j = j + 1) {\n\t                        amat[j][i] = -amat[j][i];\n\t                    }\n\t                    bvec[i] = -bvec[i];\n\t                }\n\t            }\n\t        }\n\t\n\t        for (i = 1; i <= nact; i = i + 1) {\n\t            work[iwsv + iact[i]] = 0;\n\t        }\n\t\n\t        nvl = 0;\n\t        temp = 0;\n\t        for (i = 1; i <= q; i = i + 1) {\n\t            if (work[iwsv + i] < temp * work[iwnbv + i]) {\n\t                nvl = i;\n\t                temp = work[iwsv + i] / work[iwnbv + i];\n\t            }\n\t        }\n\t        if (nvl === 0) {\n\t            return 999;\n\t        }\n\t\n\t        return 0;\n\t    }\n\t\n\t    function fn_goto_55() {\n\t        for (i = 1; i <= n; i = i + 1) {\n\t            sum = 0;\n\t            for (j = 1; j <= n; j = j + 1) {\n\t                sum = sum + dmat[j][i] * amat[j][nvl];\n\t            }\n\t            work[i] = sum;\n\t        }\n\t\n\t        l1 = iwzv;\n\t        for (i = 1; i <= n; i = i + 1) {\n\t            work[l1 + i] = 0;\n\t        }\n\t        for (j = nact + 1; j <= n; j = j + 1) {\n\t            for (i = 1; i <= n; i = i + 1) {\n\t                work[l1 + i] = work[l1 + i] + dmat[i][j] * work[j];\n\t            }\n\t        }\n\t\n\t        t1inf = true;\n\t        for (i = nact; i >= 1; i = i - 1) {\n\t            sum = work[i];\n\t            l = iwrm + (i * (i + 3)) / 2;\n\t            l1 = l - i;\n\t            for (j = i + 1; j <= nact; j = j + 1) {\n\t                sum = sum - work[l] * work[iwrv + j];\n\t                l = l + j;\n\t            }\n\t            sum = sum / work[l1];\n\t            work[iwrv + i] = sum;\n\t            if (iact[i] < meq) {\n\t                // continue;\n\t                break;\n\t            }\n\t            if (sum < 0) {\n\t                // continue;\n\t                break;\n\t            }\n\t            t1inf = false;\n\t            it1 = i;\n\t        }\n\t\n\t        if (!t1inf) {\n\t            t1 = work[iwuv + it1] / work[iwrv + it1];\n\t            for (i = 1; i <= nact; i = i + 1) {\n\t                if (iact[i] < meq) {\n\t                    // continue;\n\t                    break;\n\t                }\n\t                if (work[iwrv + i] < 0) {\n\t                    // continue;\n\t                    break;\n\t                }\n\t                temp = work[iwuv + i] / work[iwrv + i];\n\t                if (temp < t1) {\n\t                    t1 = temp;\n\t                    it1 = i;\n\t                }\n\t            }\n\t        }\n\t\n\t        sum = 0;\n\t        for (i = iwzv + 1; i <= iwzv + n; i = i + 1) {\n\t            sum = sum + work[i] * work[i];\n\t        }\n\t        if (Math.abs(sum) <= vsmall) {\n\t            if (t1inf) {\n\t                ierr[1] = 1;\n\t                // GOTO 999\n\t                return 999;\n\t            } else {\n\t                for (i = 1; i <= nact; i = i + 1) {\n\t                    work[iwuv + i] = work[iwuv + i] - t1 * work[iwrv + i];\n\t                }\n\t                work[iwuv + nact + 1] = work[iwuv + nact + 1] + t1;\n\t                // GOTO 700\n\t                return 700;\n\t            }\n\t        } else {\n\t            sum = 0;\n\t            for (i = 1; i <= n; i = i + 1) {\n\t                sum = sum + work[iwzv + i] * amat[i][nvl];\n\t            }\n\t            tt = -work[iwsv + nvl] / sum;\n\t            t2min = true;\n\t            if (!t1inf) {\n\t                if (t1 < tt) {\n\t                    tt = t1;\n\t                    t2min = false;\n\t                }\n\t            }\n\t\n\t            for (i = 1; i <= n; i = i + 1) {\n\t                sol[i] = sol[i] + tt * work[iwzv + i];\n\t                if (Math.abs(sol[i]) < vsmall) {\n\t                    sol[i] = 0;\n\t                }\n\t            }\n\t\n\t            crval[1] = crval[1] + tt * sum * (tt / 2 + work[iwuv + nact + 1]);\n\t            for (i = 1; i <= nact; i = i + 1) {\n\t                work[iwuv + i] = work[iwuv + i] - tt * work[iwrv + i];\n\t            }\n\t            work[iwuv + nact + 1] = work[iwuv + nact + 1] + tt;\n\t\n\t            if (t2min) {\n\t                nact = nact + 1;\n\t                iact[nact] = nvl;\n\t\n\t                l = iwrm + ((nact - 1) * nact) / 2 + 1;\n\t                for (i = 1; i <= nact - 1; i = i + 1) {\n\t                    work[l] = work[i];\n\t                    l = l + 1;\n\t                }\n\t\n\t                if (nact === n) {\n\t                    work[l] = work[n];\n\t                } else {\n\t                    for (i = n; i >= nact + 1; i = i - 1) {\n\t                        if (work[i] === 0) {\n\t                            // continue;\n\t                            break;\n\t                        }\n\t                        gc = Math.max(Math.abs(work[i - 1]), Math.abs(work[i]));\n\t                        gs = Math.min(Math.abs(work[i - 1]), Math.abs(work[i]));\n\t                        if (work[i - 1] >= 0) {\n\t                            temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));\n\t                        } else {\n\t                            temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));\n\t                        }\n\t                        gc = work[i - 1] / temp;\n\t                        gs = work[i] / temp;\n\t\n\t                        if (gc === 1) {\n\t                            // continue;\n\t                            break;\n\t                        }\n\t                        if (gc === 0) {\n\t                            work[i - 1] = gs * temp;\n\t                            for (j = 1; j <= n; j = j + 1) {\n\t                                temp = dmat[j][i - 1];\n\t                                dmat[j][i - 1] = dmat[j][i];\n\t                                dmat[j][i] = temp;\n\t                            }\n\t                        } else {\n\t                            work[i - 1] = temp;\n\t                            nu = gs / (1 + gc);\n\t                            for (j = 1; j <= n; j = j + 1) {\n\t                                temp = gc * dmat[j][i - 1] + gs * dmat[j][i];\n\t                                dmat[j][i] = nu * (dmat[j][i - 1] + temp) - dmat[j][i];\n\t                                dmat[j][i - 1] = temp;\n\t\n\t                            }\n\t                        }\n\t                    }\n\t                    work[l] = work[nact];\n\t                }\n\t            } else {\n\t                sum = -bvec[nvl];\n\t                for (j = 1; j <= n; j = j + 1) {\n\t                    sum = sum + sol[j] * amat[j][nvl];\n\t                }\n\t                if (nvl > meq) {\n\t                    work[iwsv + nvl] = sum;\n\t                } else {\n\t                    work[iwsv + nvl] = -Math.abs(sum);\n\t                    if (sum > 0) {\n\t                        for (j = 1; j <= n; j = j + 1) {\n\t                            amat[j][nvl] = -amat[j][nvl];\n\t                        }\n\t                        bvec[nvl] = -bvec[nvl];\n\t                    }\n\t                }\n\t                // GOTO 700\n\t                return 700;\n\t            }\n\t        }\n\t\n\t        return 0;\n\t    }\n\t\n\t    function fn_goto_797() {\n\t        l = iwrm + (it1 * (it1 + 1)) / 2 + 1;\n\t        l1 = l + it1;\n\t        if (work[l1] === 0) {\n\t            // GOTO 798\n\t            return 798;\n\t        }\n\t        gc = Math.max(Math.abs(work[l1 - 1]), Math.abs(work[l1]));\n\t        gs = Math.min(Math.abs(work[l1 - 1]), Math.abs(work[l1]));\n\t        if (work[l1 - 1] >= 0) {\n\t            temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));\n\t        } else {\n\t            temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));\n\t        }\n\t        gc = work[l1 - 1] / temp;\n\t        gs = work[l1] / temp;\n\t\n\t        if (gc === 1) {\n\t            // GOTO 798\n\t            return 798;\n\t        }\n\t        if (gc === 0) {\n\t            for (i = it1 + 1; i <= nact; i = i + 1) {\n\t                temp = work[l1 - 1];\n\t                work[l1 - 1] = work[l1];\n\t                work[l1] = temp;\n\t                l1 = l1 + i;\n\t            }\n\t            for (i = 1; i <= n; i = i + 1) {\n\t                temp = dmat[i][it1];\n\t                dmat[i][it1] = dmat[i][it1 + 1];\n\t                dmat[i][it1 + 1] = temp;\n\t            }\n\t        } else {\n\t            nu = gs / (1 + gc);\n\t            for (i = it1 + 1; i <= nact; i = i + 1) {\n\t                temp = gc * work[l1 - 1] + gs * work[l1];\n\t                work[l1] = nu * (work[l1 - 1] + temp) - work[l1];\n\t                work[l1 - 1] = temp;\n\t                l1 = l1 + i;\n\t            }\n\t            for (i = 1; i <= n; i = i + 1) {\n\t                temp = gc * dmat[i][it1] + gs * dmat[i][it1 + 1];\n\t                dmat[i][it1 + 1] = nu * (dmat[i][it1] + temp) - dmat[i][it1 + 1];\n\t                dmat[i][it1] = temp;\n\t            }\n\t        }\n\t\n\t        return 0;\n\t    }\n\t\n\t    function fn_goto_798() {\n\t        l1 = l - it1;\n\t        for (i = 1; i <= it1; i = i + 1) {\n\t            work[l1] = work[l];\n\t            l = l + 1;\n\t            l1 = l1 + 1;\n\t        }\n\t\n\t        work[iwuv + it1] = work[iwuv + it1 + 1];\n\t        iact[it1] = iact[it1 + 1];\n\t        it1 = it1 + 1;\n\t        if (it1 < nact) {\n\t            // GOTO 797\n\t            return 797;\n\t        }\n\t\n\t        return 0;\n\t    }\n\t\n\t    function fn_goto_799() {\n\t        work[iwuv + nact] = work[iwuv + nact + 1];\n\t        work[iwuv + nact + 1] = 0;\n\t        iact[nact] = 0;\n\t        nact = nact - 1;\n\t        iter[2] = iter[2] + 1;\n\t\n\t        return 0;\n\t    }\n\t\n\t    go = 0;\n\t    while (true) {\n\t        go = fn_goto_50();\n\t        if (go === 999) {\n\t            return;\n\t        }\n\t        while (true) {\n\t            go = fn_goto_55();\n\t            if (go === 0) {\n\t                break;\n\t            }\n\t            if (go === 999) {\n\t                return;\n\t            }\n\t            if (go === 700) {\n\t                if (it1 === nact) {\n\t                    fn_goto_799();\n\t                } else {\n\t                    while (true) {\n\t                        fn_goto_797();\n\t                        go = fn_goto_798();\n\t                        if (go !== 797) {\n\t                            break;\n\t                        }\n\t                    }\n\t                    fn_goto_799();\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t}\n\t\n\tfunction solveQP(Dmat, dvec, Amat, bvec, meq, factorized) {\n\t    Dmat = base0to1(Dmat);\n\t    dvec = base0to1(dvec);\n\t    Amat = base0to1(Amat);\n\t    var i, n, q,\n\t        nact, r,\n\t        crval = [], iact = [], sol = [], work = [], iter = [],\n\t        message;\n\t\n\t    meq = meq || 0;\n\t    factorized = factorized ? base0to1(factorized) : [undefined, 0];\n\t    bvec = bvec ? base0to1(bvec) : [];\n\t\n\t    // In Fortran the array index starts from 1\n\t    n = Dmat.length - 1;\n\t    q = Amat[1].length - 1;\n\t\n\t    if (!bvec) {\n\t        for (i = 1; i <= q; i = i + 1) {\n\t            bvec[i] = 0;\n\t        }\n\t    }\n\t    for (i = 1; i <= q; i = i + 1) {\n\t        iact[i] = 0;\n\t    }\n\t    nact = 0;\n\t    r = Math.min(n, q);\n\t    for (i = 1; i <= n; i = i + 1) {\n\t        sol[i] = 0;\n\t    }\n\t    crval[1] = 0;\n\t    for (i = 1; i <= (2 * n + (r * (r + 5)) / 2 + 2 * q + 1); i = i + 1) {\n\t        work[i] = 0;\n\t    }\n\t    for (i = 1; i <= 2; i = i + 1) {\n\t        iter[i] = 0;\n\t    }\n\t\n\t    qpgen2(Dmat, dvec, n, n, sol, crval, Amat,\n\t        bvec, n, q, meq, iact, nact, iter, work, factorized);\n\t\n\t    message = \"\";\n\t    if (factorized[1] === 1) {\n\t        message = \"constraints are inconsistent, no solution!\";\n\t    }\n\t    if (factorized[1] === 2) {\n\t        message = \"matrix D in quadratic function is not positive definite!\";\n\t    }\n\t\n\t    return {\n\t        solution: base1to0(sol),\n\t        value: base1to0(crval),\n\t        unconstrained_solution: base1to0(dvec),\n\t        iterations: base1to0(iter),\n\t        iact: base1to0(iact),\n\t        message: message\n\t    };\n\t}\n\texports.solveQP = solveQP;\n\t}(numeric));\n\t/*\r\n\tShanti Rao sent me this routine by private email. I had to modify it\r\n\tslightly to work on Arrays instead of using a Matrix object.\r\n\tIt is apparently translated from http://stitchpanorama.sourceforge.net/Python/svd.py\r\n\t*/\r\n\t\r\n\tnumeric.svd= function svd(A) {\r\n\t    var temp;\r\n\t//Compute the thin SVD from G. H. Golub and C. Reinsch, Numer. Math. 14, 403-420 (1970)\r\n\t\tvar prec= numeric.epsilon; //Math.pow(2,-52) // assumes double prec\r\n\t\tvar tolerance= 1.e-64/prec;\r\n\t\tvar itmax= 50;\r\n\t\tvar c=0;\r\n\t\tvar i=0;\r\n\t\tvar j=0;\r\n\t\tvar k=0;\r\n\t\tvar l=0;\r\n\t\t\r\n\t\tvar u= numeric.clone(A);\r\n\t\tvar m= u.length;\r\n\t\t\r\n\t\tvar n= u[0].length;\r\n\t\t\r\n\t\tif (m < n) throw \"Need more rows than columns\"\r\n\t\t\r\n\t\tvar e = new Array(n);\r\n\t\tvar q = new Array(n);\r\n\t\tfor (i=0; i<n; i++) e[i] = q[i] = 0.0;\r\n\t\tvar v = numeric.rep([n,n],0);\r\n\t//\tv.zero();\r\n\t\t\r\n\t \tfunction pythag(a,b)\r\n\t \t{\r\n\t\t\ta = Math.abs(a)\r\n\t\t\tb = Math.abs(b)\r\n\t\t\tif (a > b)\r\n\t\t\t\treturn a*Math.sqrt(1.0+(b*b/a/a))\r\n\t\t\telse if (b == 0.0) \r\n\t\t\t\treturn a\r\n\t\t\treturn b*Math.sqrt(1.0+(a*a/b/b))\r\n\t\t}\r\n\t\r\n\t\t//Householder's reduction to bidiagonal form\r\n\t\r\n\t\tvar f= 0.0;\r\n\t\tvar g= 0.0;\r\n\t\tvar h= 0.0;\r\n\t\tvar x= 0.0;\r\n\t\tvar y= 0.0;\r\n\t\tvar z= 0.0;\r\n\t\tvar s= 0.0;\r\n\t\t\r\n\t\tfor (i=0; i < n; i++)\r\n\t\t{\t\r\n\t\t\te[i]= g;\r\n\t\t\ts= 0.0;\r\n\t\t\tl= i+1;\r\n\t\t\tfor (j=i; j < m; j++) \r\n\t\t\t\ts += (u[j][i]*u[j][i]);\r\n\t\t\tif (s <= tolerance)\r\n\t\t\t\tg= 0.0;\r\n\t\t\telse\r\n\t\t\t{\t\r\n\t\t\t\tf= u[i][i];\r\n\t\t\t\tg= Math.sqrt(s);\r\n\t\t\t\tif (f >= 0.0) g= -g;\r\n\t\t\t\th= f*g-s\r\n\t\t\t\tu[i][i]=f-g;\r\n\t\t\t\tfor (j=l; j < n; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\ts= 0.0\r\n\t\t\t\t\tfor (k=i; k < m; k++) \r\n\t\t\t\t\t\ts += u[k][i]*u[k][j]\r\n\t\t\t\t\tf= s/h\r\n\t\t\t\t\tfor (k=i; k < m; k++) \r\n\t\t\t\t\t\tu[k][j]+=f*u[k][i]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tq[i]= g\r\n\t\t\ts= 0.0\r\n\t\t\tfor (j=l; j < n; j++) \r\n\t\t\t\ts= s + u[i][j]*u[i][j]\r\n\t\t\tif (s <= tolerance)\r\n\t\t\t\tg= 0.0\r\n\t\t\telse\r\n\t\t\t{\t\r\n\t\t\t\tf= u[i][i+1]\r\n\t\t\t\tg= Math.sqrt(s)\r\n\t\t\t\tif (f >= 0.0) g= -g\r\n\t\t\t\th= f*g - s\r\n\t\t\t\tu[i][i+1] = f-g;\r\n\t\t\t\tfor (j=l; j < n; j++) e[j]= u[i][j]/h\r\n\t\t\t\tfor (j=l; j < m; j++)\r\n\t\t\t\t{\t\r\n\t\t\t\t\ts=0.0\r\n\t\t\t\t\tfor (k=l; k < n; k++) \r\n\t\t\t\t\t\ts += (u[j][k]*u[i][k])\r\n\t\t\t\t\tfor (k=l; k < n; k++) \r\n\t\t\t\t\t\tu[j][k]+=s*e[k]\r\n\t\t\t\t}\t\r\n\t\t\t}\r\n\t\t\ty= Math.abs(q[i])+Math.abs(e[i])\r\n\t\t\tif (y>x) \r\n\t\t\t\tx=y\r\n\t\t}\r\n\t\t\r\n\t\t// accumulation of right hand gtransformations\r\n\t\tfor (i=n-1; i != -1; i+= -1)\r\n\t\t{\t\r\n\t\t\tif (g != 0.0)\r\n\t\t\t{\r\n\t\t\t \th= g*u[i][i+1]\r\n\t\t\t\tfor (j=l; j < n; j++) \r\n\t\t\t\t\tv[j][i]=u[i][j]/h\r\n\t\t\t\tfor (j=l; j < n; j++)\r\n\t\t\t\t{\t\r\n\t\t\t\t\ts=0.0\r\n\t\t\t\t\tfor (k=l; k < n; k++) \r\n\t\t\t\t\t\ts += u[i][k]*v[k][j]\r\n\t\t\t\t\tfor (k=l; k < n; k++) \r\n\t\t\t\t\t\tv[k][j]+=(s*v[k][i])\r\n\t\t\t\t}\t\r\n\t\t\t}\r\n\t\t\tfor (j=l; j < n; j++)\r\n\t\t\t{\r\n\t\t\t\tv[i][j] = 0;\r\n\t\t\t\tv[j][i] = 0;\r\n\t\t\t}\r\n\t\t\tv[i][i] = 1;\r\n\t\t\tg= e[i]\r\n\t\t\tl= i\r\n\t\t}\r\n\t\t\r\n\t\t// accumulation of left hand transformations\r\n\t\tfor (i=n-1; i != -1; i+= -1)\r\n\t\t{\t\r\n\t\t\tl= i+1\r\n\t\t\tg= q[i]\r\n\t\t\tfor (j=l; j < n; j++) \r\n\t\t\t\tu[i][j] = 0;\r\n\t\t\tif (g != 0.0)\r\n\t\t\t{\r\n\t\t\t\th= u[i][i]*g\r\n\t\t\t\tfor (j=l; j < n; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\ts=0.0\r\n\t\t\t\t\tfor (k=l; k < m; k++) s += u[k][i]*u[k][j];\r\n\t\t\t\t\tf= s/h\r\n\t\t\t\t\tfor (k=i; k < m; k++) u[k][j]+=f*u[k][i];\r\n\t\t\t\t}\r\n\t\t\t\tfor (j=i; j < m; j++) u[j][i] = u[j][i]/g;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tfor (j=i; j < m; j++) u[j][i] = 0;\r\n\t\t\tu[i][i] += 1;\r\n\t\t}\r\n\t\t\r\n\t\t// diagonalization of the bidiagonal form\r\n\t\tprec= prec*x\r\n\t\tfor (k=n-1; k != -1; k+= -1)\r\n\t\t{\r\n\t\t\tfor (var iteration=0; iteration < itmax; iteration++)\r\n\t\t\t{\t// test f splitting\r\n\t\t\t\tvar test_convergence = false\r\n\t\t\t\tfor (l=k; l != -1; l+= -1)\r\n\t\t\t\t{\t\r\n\t\t\t\t\tif (Math.abs(e[l]) <= prec)\r\n\t\t\t\t\t{\ttest_convergence= true\r\n\t\t\t\t\t\tbreak \r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (Math.abs(q[l-1]) <= prec)\r\n\t\t\t\t\t\tbreak \r\n\t\t\t\t}\r\n\t\t\t\tif (!test_convergence)\r\n\t\t\t\t{\t// cancellation of e[l] if l>0\r\n\t\t\t\t\tc= 0.0\r\n\t\t\t\t\ts= 1.0\r\n\t\t\t\t\tvar l1= l-1\r\n\t\t\t\t\tfor (i =l; i<k+1; i++)\r\n\t\t\t\t\t{\t\r\n\t\t\t\t\t\tf= s*e[i]\r\n\t\t\t\t\t\te[i]= c*e[i]\r\n\t\t\t\t\t\tif (Math.abs(f) <= prec)\r\n\t\t\t\t\t\t\tbreak\r\n\t\t\t\t\t\tg= q[i]\r\n\t\t\t\t\t\th= pythag(f,g)\r\n\t\t\t\t\t\tq[i]= h\r\n\t\t\t\t\t\tc= g/h\r\n\t\t\t\t\t\ts= -f/h\r\n\t\t\t\t\t\tfor (j=0; j < m; j++)\r\n\t\t\t\t\t\t{\t\r\n\t\t\t\t\t\t\ty= u[j][l1]\r\n\t\t\t\t\t\t\tz= u[j][i]\r\n\t\t\t\t\t\t\tu[j][l1] =  y*c+(z*s)\r\n\t\t\t\t\t\t\tu[j][i] = -y*s+(z*c)\r\n\t\t\t\t\t\t} \r\n\t\t\t\t\t}\t\r\n\t\t\t\t}\r\n\t\t\t\t// test f convergence\r\n\t\t\t\tz= q[k]\r\n\t\t\t\tif (l== k)\r\n\t\t\t\t{\t//convergence\r\n\t\t\t\t\tif (z<0.0)\r\n\t\t\t\t\t{\t//q[k] is made non-negative\r\n\t\t\t\t\t\tq[k]= -z\r\n\t\t\t\t\t\tfor (j=0; j < n; j++)\r\n\t\t\t\t\t\t\tv[j][k] = -v[j][k]\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak  //break out of iteration loop and move on to next k value\r\n\t\t\t\t}\r\n\t\t\t\tif (iteration >= itmax-1)\r\n\t\t\t\t\tthrow 'Error: no convergence.'\r\n\t\t\t\t// shift from bottom 2x2 minor\r\n\t\t\t\tx= q[l]\r\n\t\t\t\ty= q[k-1]\r\n\t\t\t\tg= e[k-1]\r\n\t\t\t\th= e[k]\r\n\t\t\t\tf= ((y-z)*(y+z)+(g-h)*(g+h))/(2.0*h*y)\r\n\t\t\t\tg= pythag(f,1.0)\r\n\t\t\t\tif (f < 0.0)\r\n\t\t\t\t\tf= ((x-z)*(x+z)+h*(y/(f-g)-h))/x\r\n\t\t\t\telse\r\n\t\t\t\t\tf= ((x-z)*(x+z)+h*(y/(f+g)-h))/x\r\n\t\t\t\t// next QR transformation\r\n\t\t\t\tc= 1.0\r\n\t\t\t\ts= 1.0\r\n\t\t\t\tfor (i=l+1; i< k+1; i++)\r\n\t\t\t\t{\t\r\n\t\t\t\t\tg= e[i]\r\n\t\t\t\t\ty= q[i]\r\n\t\t\t\t\th= s*g\r\n\t\t\t\t\tg= c*g\r\n\t\t\t\t\tz= pythag(f,h)\r\n\t\t\t\t\te[i-1]= z\r\n\t\t\t\t\tc= f/z\r\n\t\t\t\t\ts= h/z\r\n\t\t\t\t\tf= x*c+g*s\r\n\t\t\t\t\tg= -x*s+g*c\r\n\t\t\t\t\th= y*s\r\n\t\t\t\t\ty= y*c\r\n\t\t\t\t\tfor (j=0; j < n; j++)\r\n\t\t\t\t\t{\t\r\n\t\t\t\t\t\tx= v[j][i-1]\r\n\t\t\t\t\t\tz= v[j][i]\r\n\t\t\t\t\t\tv[j][i-1] = x*c+z*s\r\n\t\t\t\t\t\tv[j][i] = -x*s+z*c\r\n\t\t\t\t\t}\r\n\t\t\t\t\tz= pythag(f,h)\r\n\t\t\t\t\tq[i-1]= z\r\n\t\t\t\t\tc= f/z\r\n\t\t\t\t\ts= h/z\r\n\t\t\t\t\tf= c*g+s*y\r\n\t\t\t\t\tx= -s*g+c*y\r\n\t\t\t\t\tfor (j=0; j < m; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ty= u[j][i-1]\r\n\t\t\t\t\t\tz= u[j][i]\r\n\t\t\t\t\t\tu[j][i-1] = y*c+z*s\r\n\t\t\t\t\t\tu[j][i] = -y*s+z*c\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\te[l]= 0.0\r\n\t\t\t\te[k]= f\r\n\t\t\t\tq[k]= x\r\n\t\t\t} \r\n\t\t}\r\n\t\t\t\r\n\t\t//vt= transpose(v)\r\n\t\t//return (u,q,vt)\r\n\t\tfor (i=0;i<q.length; i++) \r\n\t\t  if (q[i] < prec) q[i] = 0\r\n\t\t  \r\n\t\t//sort eigenvalues\t\r\n\t\tfor (i=0; i< n; i++)\r\n\t\t{\t \r\n\t\t//writeln(q)\r\n\t\t for (j=i-1; j >= 0; j--)\r\n\t\t {\r\n\t\t  if (q[j] < q[i])\r\n\t\t  {\r\n\t\t//  writeln(i,'-',j)\r\n\t\t   c = q[j]\r\n\t\t   q[j] = q[i]\r\n\t\t   q[i] = c\r\n\t\t   for(k=0;k<u.length;k++) { temp = u[k][i]; u[k][i] = u[k][j]; u[k][j] = temp; }\r\n\t\t   for(k=0;k<v.length;k++) { temp = v[k][i]; v[k][i] = v[k][j]; v[k][j] = temp; }\r\n\t//\t   u.swapCols(i,j)\r\n\t//\t   v.swapCols(i,j)\r\n\t\t   i = j\t   \r\n\t\t  }\r\n\t\t }\t\r\n\t\t}\r\n\t\t\r\n\t\treturn {U:u,S:q,V:v}\r\n\t};\r\n\t\r\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 86 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(87);\n\n\n/***/ },\n/* 87 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar Matrix = __webpack_require__(88);\n\tvar Stat = __webpack_require__(5);\n\tvar SVD = Matrix.DC.SVD;\n\t\n\tmodule.exports = PCA;\n\t\n\t/**\n\t* Creates new PCA (Principal Component Analysis) from the dataset\n\t* @param {Matrix} dataset\n\t* @param {boolean} reload - for load purposes\n\t* @param {Object} model - for load purposes\n\t* @constructor\n\t* */\n\tfunction PCA(dataset, reload, model) {\n\t\n\t    if (reload) {\n\t        this.U = model.U;\n\t        this.S = model.S;\n\t        this.means = model.means;\n\t        this.std = model.std;\n\t    } else {\n\t        if (!Matrix.isMatrix(dataset)) {\n\t            dataset = new Matrix(dataset, true);\n\t        } else {\n\t            dataset = dataset.clone();\n\t        }\n\t\n\t        var normalization = featureNormalize(dataset);\n\t        var normalizedDataset = normalization.result;\n\t\n\t        var covarianceMatrix = normalizedDataset.transpose().mmul(normalizedDataset).divS(dataset.rows);\n\t\n\t        var target = new SVD(covarianceMatrix, {\n\t            computeLeftSingularVectors: true,\n\t            computeRightSingularVectors: true,\n\t            autoTranspose: false\n\t        });\n\t\n\t        this.U = target.leftSingularVectors;\n\t        this.S = target.diagonal;\n\t        this.means = normalization.means;\n\t        this.std = normalization.std;\n\t    }\n\t}\n\t\n\t/**\n\t* Load a PCA model from JSON\n\t* @oaram {Object} model\n\t* @return {PCA}\n\t* */\n\tPCA.load = function (model) {\n\t    if(model.modelName !== 'PCA')\n\t        throw new RangeError(\"The current model is invalid!\");\n\t\n\t    return new PCA(null, true, model);\n\t};\n\t\n\t/**\n\t* Exports the current model to an Object\n\t* @return {Object} model\n\t* */\n\tPCA.prototype.export = function () {\n\t    return {\n\t        modelName: \"PCA\",\n\t        U: this.U,\n\t        S: this.S,\n\t        means: this.means,\n\t        std: this.std\n\t    };\n\t};\n\t\n\t/**\n\t* Function that project the dataset into new space of k dimensions,\n\t* this method doesn't modify your dataset.\n\t* @param {Matrix} dataset.\n\t* @param {Number} k - dimensions to project.\n\t* @return {Matrix} dataset projected in k dimensions.\n\t* @throws {RangeError} if k is larger than the number of eigenvector\n\t*                      of the model.\n\t* */\n\tPCA.prototype.project = function (dataset, k) {\n\t    var dimensions = k - 1;\n\t    if(k > this.U.columns)\n\t        throw new RangeError(\"the number of dimensions must not be larger than \" + this.U.columns);\n\t\n\t    var X = featureNormalize(Matrix(dataset).clone()).result;\n\t    return X.mmul(this.U.subMatrix(0, this.U.rows - 1, 0, dimensions));\n\t};\n\t\n\t/**\n\t* This method returns the percentage variance of each eigenvector.\n\t* @return {Number} percentage variance of each eigenvector.\n\t* */\n\tPCA.prototype.getExplainedVariance = function () {\n\t    var sum = this.S.reduce(function (previous, value) {\n\t        return previous + value;\n\t    });\n\t    return this.S.map(function (value) {\n\t        return value / sum;\n\t    });\n\t};\n\t\n\t/**\n\t * Function that returns the Eigenvectors of the covariance matrix.\n\t * @returns {Matrix}\n\t */\n\tPCA.prototype.getEigenvectors = function () {\n\t    return this.U;\n\t};\n\t\n\t/**\n\t * Function that returns the Eigenvalues (on the diagonal).\n\t * @returns {*}\n\t */\n\tPCA.prototype.getEigenvalues = function () {\n\t    return this.S;\n\t};\n\t\n\t/**\n\t* This method returns a dataset normalized in the following form:\n\t* X = (X - mean) / std\n\t* @param dataset.\n\t* @return A dataset normalized.\n\t* */\n\tfunction featureNormalize(dataset) {\n\t    var means = Stat.matrix.mean(dataset);\n\t    var std = Matrix.rowVector(Stat.matrix.standardDeviation(dataset, means, true));\n\t    means = Matrix.rowVector(means);\n\t\n\t    var result = dataset.subRowVector(means);\n\t    return {\n\t        result: result.divRowVector(std),\n\t        means: means,\n\t        std: std\n\t    }\n\t}\n\n\n/***/ },\n/* 88 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(89);\n\tmodule.exports.Decompositions = module.exports.DC = __webpack_require__(90);\n\n\n/***/ },\n/* 89 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar Asplice = Array.prototype.splice,\n\t    Aconcat = Array.prototype.concat;\n\t\n\t// For performance : http://jsperf.com/clone-array-slice-vs-while-vs-for\n\tfunction slice(arr) {\n\t    var i = 0,\n\t        ii = arr.length,\n\t        result = new Array(ii);\n\t    for (; i < ii; i++) {\n\t        result[i] = arr[i];\n\t    }\n\t    return result;\n\t}\n\t\n\t/**\n\t * Real matrix.\n\t * @constructor\n\t * @param {number|Array} nRows - Number of rows of the new matrix or a 2D array containing the data.\n\t * @param {number|boolean} [nColumns] - Number of columns of the new matrix or a boolean specifying if the input array should be cloned\n\t */\n\tfunction Matrix(nRows, nColumns) {\n\t    var i = 0, rows, columns, matrix, newInstance;\n\t    if (Array.isArray(nRows)) {\n\t        newInstance = nColumns;\n\t        matrix = newInstance ? slice(nRows) : nRows;\n\t        nRows = matrix.length;\n\t        nColumns = matrix[0].length;\n\t        if (typeof nColumns === 'undefined') {\n\t            throw new TypeError('Data must be a 2D array');\n\t        }\n\t        if (nRows > 0 && nColumns > 0) {\n\t            for (; i < nRows; i++) {\n\t                if (matrix[i].length !== nColumns) {\n\t                    throw new RangeError('Inconsistent array dimensions');\n\t                } else if (newInstance) {\n\t                    matrix[i] = slice(matrix[i]);\n\t                }\n\t            }\n\t        } else {\n\t            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n\t        }\n\t    } else if (typeof nRows === 'number') { // Create empty matrix\n\t        if (nRows > 0 && nColumns > 0) {\n\t            matrix = new Array(nRows);\n\t            for (; i < nRows; i++) {\n\t                matrix[i] = new Array(nColumns);\n\t            }\n\t        } else {\n\t            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n\t        }\n\t    } else {\n\t        throw new TypeError('Invalid arguments');\n\t    }\n\t\n\t    Object.defineProperty(matrix, 'rows', {writable: true, value: nRows});\n\t    Object.defineProperty(matrix, 'columns', {writable: true, value: nColumns});\n\t\n\t    matrix.__proto__ = Matrix.prototype;\n\t\n\t    return matrix;\n\t}\n\t\n\t/**\n\t * Constructs a Matrix with the chosen dimensions from a 1D array.\n\t * @param {number} newRows - Number of rows\n\t * @param {number} newColumns - Number of columns\n\t * @param {Array} newData - A 1D array containing data for the matrix\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.from1DArray = function from1DArray(newRows, newColumns, newData) {\n\t    var length, data, i = 0;\n\t\n\t    length = newRows * newColumns;\n\t    if (length !== newData.length)\n\t        throw new RangeError('Data length does not match given dimensions');\n\t\n\t    data = new Array(newRows);\n\t    for (; i < newRows; i++) {\n\t        data[i] = newData.slice(i * newColumns, (i + 1) * newColumns);\n\t    }\n\t    return new Matrix(data);\n\t};\n\t\n\t/**\n\t * Creates a row vector, a matrix with only one row.\n\t * @param {Array} newData - A 1D array containing data for the vector\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.rowVector = function rowVector(newData) {\n\t    return new Matrix([newData]);\n\t};\n\t\n\t/**\n\t * Creates a column vector, a matrix with only one column.\n\t * @param {Array} newData - A 1D array containing data for the vector\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.columnVector = function columnVector(newData) {\n\t    var l = newData.length, vector = new Array(l);\n\t    for (var i = 0; i < l; i++)\n\t        vector[i] = [newData[i]];\n\t    return new Matrix(vector);\n\t};\n\t\n\t/**\n\t * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.empty = function empty(rows, columns) {\n\t    return new Matrix(rows, columns);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be set to zero.\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.zeros = function zeros(rows, columns) {\n\t    return Matrix.empty(rows, columns).fill(0);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be set to one.\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.ones = function ones(rows, columns) {\n\t    return Matrix.empty(rows, columns).fill(1);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be randomly set using Math.random().\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} The new matrix\n\t */\n\tMatrix.rand = function rand(rows, columns) {\n\t    var matrix = Matrix.empty(rows, columns);\n\t    for (var i = 0, ii = matrix.rows; i < ii; i++) {\n\t        for (var j = 0, jj = matrix.columns; j < jj; j++) {\n\t            matrix[i][j] = Math.random();\n\t        }\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and other will be 0.\n\t * @param {number} n - Number of rows and columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.eye = function eye(n) {\n\t    var matrix = Matrix.zeros(n, n), l = matrix.rows;\n\t    for (var i = 0; i < l; i++) {\n\t        matrix[i][i] = 1;\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates a diagonal matrix based on the given array.\n\t * @param {Array} data - Array containing the data for the diagonal\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.diag = function diag(data) {\n\t    var l = data.length, matrix = Matrix.zeros(l, l);\n\t    for (var i = 0; i < l; i++) {\n\t        matrix[i][i] = data[i];\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates an array of indices between two values\n\t * @param {number} from\n\t * @param {number} to\n\t * @returns {Array}\n\t */\n\tMatrix.indices = function indices(from, to) {\n\t    var vector = new Array(to - from);\n\t    for (var i = 0; i < vector.length; i++)\n\t        vector[i] = from++;\n\t    return vector;\n\t};\n\t\n\t// TODO DOC\n\tMatrix.stack = function stack(arg1) {\n\t    var i, j, k;\n\t    if (Matrix.isMatrix(arg1)) {\n\t        var rows = 0,\n\t            cols = 0;\n\t        for (i = 0; i < arguments.length; i++) {\n\t            rows += arguments[i].rows;\n\t            if (arguments[i].columns > cols)\n\t                cols = arguments[i].columns;\n\t        }\n\t\n\t        var r = Matrix.zeros(rows, cols);\n\t        var c = 0;\n\t        for (i = 0; i < arguments.length; i++) {\n\t            var current = arguments[i];\n\t            for (j = 0; j < current.rows; j++) {\n\t                for (k = 0; k < current.columns; k++)\n\t                    r[c][k] = current[j][k];\n\t                c++;\n\t            }\n\t        }\n\t        return r;\n\t    }\n\t    else if (Array.isArray(arg1)) {\n\t        var matrix = Matrix.empty(arguments.length, arg1.length);\n\t        for (i = 0; i < arguments.length; i++)\n\t            matrix.setRow(i, arguments[i]);\n\t        return matrix;\n\t    }\n\t};\n\t\n\t// TODO DOC\n\tMatrix.expand = function expand(base, count) {\n\t    var expansion = [];\n\t    for (var i = 0; i < count.length; i++)\n\t        for (var j = 0; j < count[i]; j++)\n\t            expansion.push(base[i]);\n\t    return new Matrix(expansion);\n\t};\n\t\n\t/**\n\t * Check that the provided value is a Matrix and tries to instantiate one if not\n\t * @param value - The value to check\n\t * @returns {Matrix}\n\t * @throws {TypeError}\n\t */\n\tMatrix.checkMatrix = function checkMatrix(value) {\n\t    if (!value) {\n\t        throw new TypeError('Argument has to be a matrix');\n\t    }\n\t    if (value.klass !== 'Matrix') {\n\t        value = new Matrix(value);\n\t    }\n\t    return value;\n\t};\n\t\n\t/**\n\t * Returns true if the argument is a Matrix, false otherwise\n\t * @param value - The value to check\n\t * @returns {boolean}\n\t */\n\tMatrix.isMatrix = function isMatrix(value) {\n\t    return value ? value.klass === 'Matrix' : false;\n\t};\n\t\n\t/**\n\t * @property {string} - The name of this class.\n\t */\n\tObject.defineProperty(Matrix.prototype, 'klass', {\n\t    get: function klass() {\n\t        return 'Matrix';\n\t    }\n\t});\n\t\n\t/**\n\t * @property {number} - The number of elements in the matrix.\n\t */\n\tObject.defineProperty(Matrix.prototype, 'size', {\n\t    get: function size() {\n\t        return this.rows * this.columns;\n\t    }\n\t});\n\t\n\t/**\n\t * @private\n\t * Internal check that a row index is not out of bounds\n\t * @param {number} index\n\t */\n\tMatrix.prototype.checkRowIndex = function checkRowIndex(index) {\n\t    if (index < 0 || index > this.rows - 1)\n\t        throw new RangeError('Row index out of range.');\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that a column index is not out of bounds\n\t * @param {number} index\n\t */\n\tMatrix.prototype.checkColumnIndex = function checkColumnIndex(index) {\n\t    if (index < 0 || index > this.columns - 1)\n\t        throw new RangeError('Column index out of range.');\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that two matrices have the same dimensions\n\t * @param {Matrix} otherMatrix\n\t */\n\tMatrix.prototype.checkDimensions = function checkDimensions(otherMatrix) {\n\t    if ((this.rows !== otherMatrix.rows) || (this.columns !== otherMatrix.columns))\n\t        throw new RangeError('Matrices dimensions must be equal.');\n\t};\n\t\n\t/**\n\t * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n\t * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.apply = function apply(callback) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            callback.call(this, i, j);\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Creates an exact and independent copy of the matrix\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.clone = function clone() {\n\t    return new Matrix(this.to2DArray());\n\t};\n\t\n\t/**\n\t * Returns a new 1D array filled row by row with the matrix values\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.to1DArray = function to1DArray() {\n\t    return Aconcat.apply([], this);\n\t};\n\t\n\t/**\n\t * Returns a 2D array containing a copy of the data\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.to2DArray = function to2DArray() {\n\t    var l = this.rows, copy = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        copy[i] = slice(this[i]);\n\t    }\n\t    return copy;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one row\n\t */\n\tMatrix.prototype.isRowVector = function isRowVector() {\n\t    return this.rows === 1;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one column\n\t */\n\tMatrix.prototype.isColumnVector = function isColumnVector() {\n\t    return this.columns === 1;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one row or one column\n\t */\n\tMatrix.prototype.isVector = function isVector() {\n\t    return (this.rows === 1) || (this.columns === 1);\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has the same number of rows and columns\n\t */\n\tMatrix.prototype.isSquare = function isSquare() {\n\t    return this.rows === this.columns;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n\t */\n\tMatrix.prototype.isSymmetric = function isSymmetric() {\n\t    if (this.isSquare()) {\n\t        var l = this.rows;\n\t        for (var i = 0; i < l; i++) {\n\t            for (var j = 0; j <= i; j++) {\n\t                if (this[i][j] !== this[j][i]) {\n\t                    return false;\n\t                }\n\t            }\n\t        }\n\t        return true;\n\t    }\n\t    return false;\n\t};\n\t\n\t/**\n\t * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n\t * @param {number} rowIndex - Index of the row\n\t * @param {number} columnIndex - Index of the column\n\t * @param {number} value - The new value for the element\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.set = function set(rowIndex, columnIndex, value) {\n\t    this[rowIndex][columnIndex] = value;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n\t * @param {number} rowIndex - Index of the row\n\t * @param {number} columnIndex - Index of the column\n\t * @returns {number}\n\t */\n\tMatrix.prototype.get = function get(rowIndex, columnIndex) {\n\t    return this[rowIndex][columnIndex];\n\t};\n\t\n\t/**\n\t * Fills the matrix with a given value. All elements will be set to this value.\n\t * @param {number} value - New value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.fill = function fill(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] = value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Negates the matrix. All elements will be multiplied by (-1)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.neg = function neg() {\n\t    return this.mulS(-1);\n\t};\n\t\n\t/**\n\t * Adds a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.add = function add(value) {\n\t    if (typeof value === 'number')\n\t        return this.addS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.addM(value);\n\t};\n\t\n\t/**\n\t * Adds a scalar to each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addS = function addS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds the value of each element of matrix to the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addM = function addM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sub = function sub(value) {\n\t    if (typeof value === 'number')\n\t        return this.subS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.subM(value);\n\t};\n\t\n\t/**\n\t * Subtracts a scalar from each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subS = function subS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the value of each element of matrix from the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subM = function subM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mul = function mul(value) {\n\t    if (typeof value === 'number')\n\t        return this.mulS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.mulM(value);\n\t};\n\t\n\t/**\n\t * Multiplies a scalar with each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulS = function mulS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the value of each element of matrix with the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulM = function mulM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides by a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.div = function div(value) {\n\t    if (typeof value === 'number')\n\t        return this.divS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.divM(value);\n\t};\n\t\n\t/**\n\t * Divides each element of the matrix by a scalar\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divS = function divS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides each element of this by the corresponding element of matrix\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divM = function divM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns a new array from the given row index\n\t * @param {number} index - Row index\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.getRow = function getRow(index) {\n\t    this.checkRowIndex(index);\n\t    return slice(this[index]);\n\t};\n\t\n\t/**\n\t * Returns a new row vector from the given row index\n\t * @param {number} index - Row index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.getRowVector = function getRowVector(index) {\n\t    return Matrix.rowVector(this.getRow(index));\n\t};\n\t\n\t/**\n\t * Sets a row at the given index\n\t * @param {number} index - Row index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.setRow = function setRow(index, array) {\n\t    this.checkRowIndex(index);\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    if (array.length !== this.columns)\n\t        throw new RangeError('Invalid row size');\n\t    this[index] = slice(array);\n\t    return this;\n\t};\n\t\n\t/**\n\t * Removes a row from the given index\n\t * @param {number} index - Row index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.removeRow = function removeRow(index) {\n\t    this.checkRowIndex(index);\n\t    if (this.rows === 1)\n\t        throw new RangeError('A matrix cannot have less than one row');\n\t    Asplice.call(this, index, 1);\n\t    this.rows -= 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds a row at the given index\n\t * @param {number} [index = this.rows] - Row index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addRow = function addRow(index, array) {\n\t    if (typeof array === 'undefined') {\n\t        array = index;\n\t        index = this.rows;\n\t    }\n\t    if (index < 0 || index > this.rows)\n\t        throw new RangeError('Row index out of range.');\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    if (array.length !== this.columns)\n\t        throw new RangeError('Invalid row size');\n\t    Asplice.call(this, index, 0, slice(array));\n\t    this.rows += 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Swaps two rows\n\t * @param {number} row1 - First row index\n\t * @param {number} row2 - Second row index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.swapRows = function swapRows(row1, row2) {\n\t    this.checkRowIndex(row1);\n\t    this.checkRowIndex(row2);\n\t    var temp = this[row1];\n\t    this[row1] = this[row2];\n\t    this[row2] = temp;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns a new array from the given column index\n\t * @param {number} index - Column index\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.getColumn = function getColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var l = this.rows, column = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        column[i] = this[i][index];\n\t    }\n\t    return column;\n\t};\n\t\n\t/**\n\t * Returns a new column vector from the given column index\n\t * @param {number} index - Column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.getColumnVector = function getColumnVector(index) {\n\t    return Matrix.columnVector(this.getColumn(index));\n\t};\n\t\n\t/**\n\t * Sets a column at the given index\n\t * @param {number} index - Column index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.setColumn = function setColumn(index, array) {\n\t    this.checkColumnIndex(index);\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    var l = this.rows;\n\t    if (array.length !== l)\n\t        throw new RangeError('Invalid column size');\n\t    for (var i = 0; i < l; i++) {\n\t        this[i][index] = array[i];\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Removes a column from the given index\n\t * @param {number} index - Column index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.removeColumn = function removeColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    if (this.columns === 1)\n\t        throw new RangeError('A matrix cannot have less than one column');\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        this[i].splice(index, 1);\n\t    }\n\t    this.columns -= 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds a column at the given index\n\t * @param {number} [index = this.columns] - Column index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addColumn = function addColumn(index, array) {\n\t    if (typeof array === 'undefined') {\n\t        array = index;\n\t        index = this.columns;\n\t    }\n\t    if (index < 0 || index > this.columns)\n\t        throw new RangeError('Column index out of range.');\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    var l = this.rows;\n\t    if (array.length !== l)\n\t        throw new RangeError('Invalid column size');\n\t    for (var i = 0; i < l; i++) {\n\t        this[i].splice(index, 0, array[i]);\n\t    }\n\t    this.columns += 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Swaps two columns\n\t * @param {number} column1 - First column index\n\t * @param {number} column2 - Second column index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.swapColumns = function swapColumns(column1, column2) {\n\t    this.checkRowIndex(column1);\n\t    this.checkRowIndex(column2);\n\t    var l = this.rows, temp, row;\n\t    for (var i = 0; i < l; i++) {\n\t        row = this[i];\n\t        temp = row[column1];\n\t        row[column1] = row[column2];\n\t        row[column2] = temp;\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that the provided vector is an array with the right length\n\t * @param {Array|Matrix} vector\n\t * @returns {Array}\n\t * @throws {RangeError}\n\t */\n\tMatrix.prototype.checkRowVector = function checkRowVector(vector) {\n\t    if (Matrix.isMatrix(vector))\n\t        vector = vector.to1DArray();\n\t    if (vector.length !== this.columns)\n\t        throw new RangeError('vector size must be the same as the number of columns');\n\t    return vector;\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that the provided vector is an array with the right length\n\t * @param {Array|Matrix} vector\n\t * @returns {Array}\n\t * @throws {RangeError}\n\t */\n\tMatrix.prototype.checkColumnVector = function checkColumnVector(vector) {\n\t    if (Matrix.isMatrix(vector))\n\t        vector = vector.to1DArray();\n\t    if (vector.length !== this.rows)\n\t        throw new RangeError('vector size must be the same as the number of rows');\n\t    return vector;\n\t};\n\t\n\t/**\n\t * Adds the values of a vector to each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addRowVector = function addRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the values of a vector from each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subRowVector = function subRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a vector with each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulRowVector = function mulRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides the values of each row by those of a vector\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divRowVector = function divRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds the values of a vector to each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addColumnVector = function addColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the values of a vector from each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subColumnVector = function subColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a vector with each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulColumnVector = function mulColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides the values of each column by those of a vector\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divColumnVector = function divColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a row with a scalar\n\t * @param {number} index - Row index\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulRow = function mulRow(index, value) {\n\t    this.checkRowIndex(index);\n\t    var i = 0, l = this.columns;\n\t    for (; i < l; i++) {\n\t        this[index][i] *= value;\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a column with a scalar\n\t * @param {number} index - Column index\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulColumn = function mulColumn(index, value) {\n\t    this.checkColumnIndex(index);\n\t    var i = 0, l = this.rows;\n\t    for (; i < l; i++) {\n\t        this[i][index] *= value;\n\t    }\n\t};\n\t\n\t/**\n\t * A matrix index\n\t * @typedef {Object} MatrixIndex\n\t * @property {number} row\n\t * @property {number} column\n\t */\n\t\n\t/**\n\t * Returns the maximum value of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.max = function max() {\n\t    var v = -Infinity;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] > v) {\n\t                v = this[i][j];\n\t            }\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxIndex = function maxIndex() {\n\t    var v = -Infinity;\n\t    var idx = {};\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] > v) {\n\t                v = this[i][j];\n\t                idx.row = i;\n\t                idx.column = j;\n\t            }\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.min = function min() {\n\t    var v = Infinity;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] < v) {\n\t                v = this[i][j];\n\t            }\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the minimum value\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minIndex = function minIndex() {\n\t    var v = Infinity;\n\t    var idx = {};\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] < v) {\n\t                v = this[i][j];\n\t                idx.row = i;\n\t                idx.column = j;\n\t            }\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.maxRow = function maxRow(index) {\n\t    this.checkRowIndex(index);\n\t    var v = -Infinity;\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] > v) {\n\t            v = this[index][i];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxRowIndex = function maxRowIndex(index) {\n\t    this.checkRowIndex(index);\n\t    var v = -Infinity;\n\t    var idx = {\n\t            row: index\n\t        };\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] > v) {\n\t            v = this[index][i];\n\t            idx.column = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of one row\n\t * @param {number} index - Row index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.minRow = function minRow(index) {\n\t    this.checkRowIndex(index);\n\t    var v = Infinity;\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] < v) {\n\t            v = this[index][i];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minRowIndex = function minRowIndex(index) {\n\t    this.checkRowIndex(index);\n\t    var v = Infinity;\n\t    var idx = {\n\t        row: index,\n\t        column: 0\n\t    };\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] < v) {\n\t            v = this[index][i];\n\t            idx.column = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the maximum value of one column\n\t * @param {number} index - Column index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.maxColumn = function maxColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = -Infinity;\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] > v) {\n\t            v = this[i][index];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one column\n\t * @param {number} index - Column index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxColumnIndex = function maxColumnIndex(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = -Infinity;\n\t    var idx = {\n\t        row: 0,\n\t        column: index\n\t    };\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] > v) {\n\t            v = this[i][index];\n\t            idx.row = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of one column\n\t * @param {number} index - Column index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.minColumn = function minColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = Infinity;\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] < v) {\n\t            v = this[i][index];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the minimum value of one column\n\t * @param {number} index - Column index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minColumnIndex = function minColumnIndex(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = Infinity;\n\t    var idx = {\n\t        row: 0,\n\t        column: index\n\t    };\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] < v) {\n\t            v = this[i][index];\n\t            idx.row = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns an array containing the diagonal values of the matrix\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.diag = function diag() {\n\t    if (!this.isSquare())\n\t        throw new TypeError('Only square matrices have a diagonal.');\n\t    var diag = new Array(this.rows);\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        diag[i] = this[i][i];\n\t    }\n\t    return diag;\n\t};\n\t\n\t/**\n\t * Returns the sum of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.sum = function sum() {\n\t    var v = 0;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            v += this[i][j];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the mean of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.mean = function mean() {\n\t    return this.sum() / this.size;\n\t};\n\t\n\t/**\n\t * Returns the product of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.prod = function prod() {\n\t    var prod = 1;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            prod *= this[i][j];\n\t        }\n\t    }\n\t    return prod;\n\t};\n\t\n\t/**\n\t * Computes the cumulative sum of the matrix elements (in place, row by row)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.cumulativeSum = function cumulativeSum() {\n\t    var sum = 0;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            sum += this[i][j];\n\t            this[i][j] = sum;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Computes the dot (scalar) product between the matrix and another\n\t * @param {Matrix} other vector\n\t * @returns {number}\n\t */\n\tMatrix.prototype.dot = function dot(other) {\n\t    if (this.size !== other.size)\n\t        throw new RangeError('vectors do not have the same size');\n\t    var vector1 = this.to1DArray();\n\t    var vector2 = other.to1DArray();\n\t    var dot = 0, l = vector1.length;\n\t    for (var i = 0; i < l; i++) {\n\t        dot += vector1[i] * vector2[i];\n\t    }\n\t    return dot;\n\t};\n\t\n\t/**\n\t * Returns the matrix product between this and other\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.mmul = function mmul(other) {\n\t    if (!Matrix.isMatrix(other))\n\t        throw new TypeError('parameter \"other\" must be a matrix');\n\t    if (this.columns !== other.rows)\n\t        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n\t\n\t    var m = this.rows, n = this.columns, p = other.columns;\n\t    var result = new Matrix(m, p);\n\t\n\t    var Bcolj = new Array(n);\n\t    var i, j, k;\n\t    for (j = 0; j < p; j++) {\n\t        for (k = 0; k < n; k++)\n\t            Bcolj[k] = other[k][j];\n\t\n\t        for (i = 0; i < m; i++) {\n\t            var Arowi = this[i];\n\t\n\t            var s = 0;\n\t            for (k = 0; k < n; k++)\n\t                s += Arowi[k] * Bcolj[k];\n\t\n\t            result[i][j] = s;\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Sorts the rows (in place)\n\t * @param {function} compareFunction - usual Array.prototype.sort comparison function\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sortRows = function sortRows(compareFunction) {\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        this[i].sort(compareFunction);\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Sorts the columns (in place)\n\t * @param {function} compareFunction - usual Array.prototype.sort comparison function\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sortColumns = function sortColumns(compareFunction) {\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Transposes the matrix and returns a new one containing the result\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.transpose = function transpose() {\n\t    var result = new Matrix(this.columns, this.rows);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[j][i] = this[i][j];\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix\n\t * @param {number} startRow - First row index\n\t * @param {number} endRow - Last row index\n\t * @param {number} startColumn - First column index\n\t * @param {number} endColumn - Last column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrix = function subMatrix(startRow, endRow, startColumn, endColumn) {\n\t    if ((startRow > endRow) || (startColumn > endColumn) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n\t        throw new RangeError('Argument out of range');\n\t    var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n\t    for (var i = startRow; i <= endRow; i++) {\n\t        for (var j = startColumn; j <= endColumn; j++) {\n\t            newMatrix[i - startRow][j - startColumn] = this[i][j];\n\t        }\n\t    }\n\t    return newMatrix;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix based on an array of row indices\n\t * @param {Array} indices - Array containing the row indices\n\t * @param {number} [startColumn = 0] - First column index\n\t * @param {number} [endColumn = this.columns-1] - Last column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrixRow = function subMatrixRow(indices, startColumn, endColumn) {\n\t    if (typeof startColumn === 'undefined') {\n\t        startColumn = 0;\n\t        endColumn = this.columns - 1;\n\t    } else if (typeof endColumn === 'undefined') {\n\t        endColumn = this.columns - 1;\n\t    }\n\t    if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n\t        throw new RangeError('Argument out of range.');\n\t    var l = indices.length, rows = this.rows,\n\t        X = new Matrix(l, endColumn - startColumn + 1);\n\t    for (var i = 0; i < l; i++) {\n\t        for (var j = startColumn; j <= endColumn; j++) {\n\t            if ((indices[i] < 0) || (indices[i] >= rows))\n\t                throw new RangeError('Argument out of range.');\n\t            X[i][j - startColumn] = this[indices[i]][j];\n\t        }\n\t    }\n\t    return X;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix based on an array of column indices\n\t * @param {Array} indices - Array containing the column indices\n\t * @param {number} [startRow = 0] - First row index\n\t * @param {number} [endRow = this.rows-1] - Last row index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrixColumn = function subMatrixColumn(indices, startRow, endRow) {\n\t    if (typeof startRow === 'undefined') {\n\t        startRow = 0;\n\t        endRow = this.rows - 1;\n\t    } else if (typeof endRow === 'undefined') {\n\t        endRow = this.rows - 1;\n\t    }\n\t    if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows))\n\t        throw new RangeError('Argument out of range.');\n\t    var l = indices.length, columns = this.columns,\n\t        X = new Matrix(endRow - startRow + 1, l);\n\t    for (var i = 0; i < l; i++) {\n\t        for (var j = startRow; j <= endRow; j++) {\n\t            if ((indices[i] < 0) || (indices[i] >= columns))\n\t                throw new RangeError('Argument out of range.');\n\t            X[j - startRow][i] = this[j][indices[i]];\n\t        }\n\t    }\n\t    return X;\n\t};\n\t\n\t/**\n\t * Returns the trace of the matrix (sum of the diagonal elements)\n\t * @returns {number}\n\t */\n\tMatrix.prototype.trace = function trace() {\n\t    if (!this.isSquare())\n\t        throw new TypeError('The matrix is not square');\n\t    var trace = 0, i = 0, l = this.rows;\n\t    for (; i < l; i++) {\n\t        trace += this[i][i];\n\t    }\n\t    return trace;\n\t};\n\t\n\t/**\n\t * Sets each element of the matrix to its absolute value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.abs = function abs() {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] = Math.abs(this[i][j]);\n\t        }\n\t    }\n\t};\n\t\n\tmodule.exports = Matrix;\n\n\n/***/ },\n/* 90 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(89);\n\t\n\tvar SingularValueDecomposition = __webpack_require__(91);\n\tvar EigenvalueDecomposition = __webpack_require__(93);\n\tvar LuDecomposition = __webpack_require__(94);\n\tvar QrDecomposition = __webpack_require__(95);\n\tvar CholeskyDecomposition = __webpack_require__(96);\n\t\n\tfunction inverse(matrix) {\n\t    return solve(matrix, Matrix.eye(matrix.rows));\n\t}\n\t\n\tMatrix.prototype.inverse = function () {\n\t    return inverse(this);\n\t};\n\t\n\tfunction solve(leftHandSide, rightHandSide) {\n\t    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n\t}\n\t\n\tMatrix.prototype.solve = function (other) {\n\t    return solve(this, other);\n\t};\n\t\n\tmodule.exports = {\n\t    SingularValueDecomposition: SingularValueDecomposition,\n\t    SVD: SingularValueDecomposition,\n\t    EigenvalueDecomposition: EigenvalueDecomposition,\n\t    EVD: EigenvalueDecomposition,\n\t    LuDecomposition: LuDecomposition,\n\t    LU: LuDecomposition,\n\t    QrDecomposition: QrDecomposition,\n\t    QR: QrDecomposition,\n\t    CholeskyDecomposition: CholeskyDecomposition,\n\t    CHO: CholeskyDecomposition,\n\t    inverse: inverse,\n\t    solve: solve\n\t};\n\n\n/***/ },\n/* 91 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(89);\n\tvar hypotenuse = __webpack_require__(92).hypotenuse;\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\n\tfunction SingularValueDecomposition(value, options) {\n\t    if (!(this instanceof SingularValueDecomposition)) {\n\t        return new SingularValueDecomposition(value, options);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t\n\t    options = options || {};\n\t\n\t    var a = value.clone(),\n\t        m = value.rows,\n\t        n = value.columns,\n\t        nu = Math.min(m, n);\n\t\n\t    var wantu = true, wantv = true;\n\t    if (options.computeLeftSingularVectors === false)\n\t        wantu = false;\n\t    if (options.computeRightSingularVectors === false)\n\t        wantv = false;\n\t    var autoTranspose = options.autoTranspose === true;\n\t\n\t    var swapped = false;\n\t    if (m < n) {\n\t        if (!autoTranspose) {\n\t            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n\t        } else {\n\t            a = a.transpose();\n\t            m = a.rows;\n\t            n = a.columns;\n\t            swapped = true;\n\t            var aux = wantu;\n\t            wantu = wantv;\n\t            wantv = aux;\n\t        }\n\t    }\n\t\n\t    var s = new Array(Math.min(m + 1, n)),\n\t        U = Matrix.zeros(m, nu),\n\t        V = Matrix.zeros(n, n),\n\t        e = new Array(n),\n\t        work = new Array(m);\n\t\n\t    var nct = Math.min(m - 1, n);\n\t    var nrt = Math.max(0, Math.min(n - 2, m));\n\t\n\t    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n\t        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\t\n\t    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n\t        if (k < nct) {\n\t            s[k] = 0;\n\t            for (i = k; i < m; i++) {\n\t                s[k] = hypotenuse(s[k], a[i][k]);\n\t            }\n\t            if (s[k] !== 0) {\n\t                if (a[k][k] < 0) {\n\t                    s[k] = -s[k];\n\t                }\n\t                for (i = k; i < m; i++) {\n\t                    a[i][k] /= s[k];\n\t                }\n\t                a[k][k] += 1;\n\t            }\n\t            s[k] = -s[k];\n\t        }\n\t\n\t        for (j = k + 1; j < n; j++) {\n\t            if ((k < nct) && (s[k] !== 0)) {\n\t                t = 0;\n\t                for (i = k; i < m; i++) {\n\t                    t += a[i][k] * a[i][j];\n\t                }\n\t                t = -t / a[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    a[i][j] += t * a[i][k];\n\t                }\n\t            }\n\t            e[j] = a[k][j];\n\t        }\n\t\n\t        if (wantu && (k < nct)) {\n\t            for (i = k; i < m; i++) {\n\t                U[i][k] = a[i][k];\n\t            }\n\t        }\n\t\n\t        if (k < nrt) {\n\t            e[k] = 0;\n\t            for (i = k + 1; i < n; i++) {\n\t                e[k] = hypotenuse(e[k], e[i]);\n\t            }\n\t            if (e[k] !== 0) {\n\t                if (e[k + 1] < 0)\n\t                    e[k] = -e[k];\n\t                for (i = k + 1; i < n; i++) {\n\t                    e[i] /= e[k];\n\t                }\n\t                e[k + 1] += 1;\n\t            }\n\t            e[k] = -e[k];\n\t            if ((k + 1 < m) && (e[k] !== 0)) {\n\t                for (i = k + 1; i < m; i++) {\n\t                    work[i] = 0;\n\t                }\n\t                for (j = k + 1; j < n; j++) {\n\t                    for (i = k + 1; i < m; i++) {\n\t                        work[i] += e[j] * a[i][j];\n\t                    }\n\t                }\n\t                for (j = k + 1; j < n; j++) {\n\t                    t = -e[j] / e[k + 1];\n\t                    for (i = k + 1; i < m; i++) {\n\t                        a[i][j] += t * work[i];\n\t                    }\n\t                }\n\t            }\n\t            if (wantv) {\n\t                for (i = k + 1; i < n; i++) {\n\t                    V[i][k] = e[i];\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    p = Math.min(n, m + 1);\n\t    if (nct < n) {\n\t        s[nct] = a[nct][nct];\n\t    }\n\t    if (m < p) {\n\t        s[p - 1] = 0;\n\t    }\n\t    if (nrt + 1 < p) {\n\t        e[nrt] = a[nrt][p - 1];\n\t    }\n\t    e[p - 1] = 0;\n\t\n\t    if (wantu) {\n\t        for (j = nct; j < nu; j++) {\n\t            for (i = 0; i < m; i++) {\n\t                U[i][j] = 0;\n\t            }\n\t            U[j][j] = 1;\n\t        }\n\t        for (k = nct - 1; k >= 0; k--) {\n\t            if (s[k] !== 0) {\n\t                for (j = k + 1; j < nu; j++) {\n\t                    t = 0;\n\t                    for (i = k; i < m; i++) {\n\t                        t += U[i][k] * U[i][j];\n\t                    }\n\t                    t = -t / U[k][k];\n\t                    for (i = k; i < m; i++) {\n\t                        U[i][j] += t * U[i][k];\n\t                    }\n\t                }\n\t                for (i = k; i < m; i++) {\n\t                    U[i][k] = -U[i][k];\n\t                }\n\t                U[k][k] = 1 + U[k][k];\n\t                for (i = 0; i < k - 1; i++) {\n\t                    U[i][k] = 0;\n\t                }\n\t            } else {\n\t                for (i = 0; i < m; i++) {\n\t                    U[i][k] = 0;\n\t                }\n\t                U[k][k] = 1;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (wantv) {\n\t        for (k = n - 1; k >= 0; k--) {\n\t            if ((k < nrt) && (e[k] !== 0)) {\n\t                for (j = k + 1; j < n; j++) {\n\t                    t = 0;\n\t                    for (i = k + 1; i < n; i++) {\n\t                        t += V[i][k] * V[i][j];\n\t                    }\n\t                    t = -t / V[k + 1][k];\n\t                    for (i = k + 1; i < n; i++) {\n\t                        V[i][j] += t * V[i][k];\n\t                    }\n\t                }\n\t            }\n\t            for (i = 0; i < n; i++) {\n\t                V[i][k] = 0;\n\t            }\n\t            V[k][k] = 1;\n\t        }\n\t    }\n\t\n\t    var pp = p - 1,\n\t        iter = 0,\n\t        eps = Math.pow(2, -52);\n\t    while (p > 0) {\n\t        for (k = p - 2; k >= -1; k--) {\n\t            if (k === -1) {\n\t                break;\n\t            }\n\t            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n\t                e[k] = 0;\n\t                break;\n\t            }\n\t        }\n\t        if (k === p - 2) {\n\t            kase = 4;\n\t        } else {\n\t            for (ks = p - 1; ks >= k; ks--) {\n\t                if (ks === k) {\n\t                    break;\n\t                }\n\t                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n\t                if (Math.abs(s[ks]) <= eps * t) {\n\t                    s[ks] = 0;\n\t                    break;\n\t                }\n\t            }\n\t            if (ks === k) {\n\t                kase = 3;\n\t            } else if (ks === p - 1) {\n\t                kase = 1;\n\t            } else {\n\t                kase = 2;\n\t                k = ks;\n\t            }\n\t        }\n\t\n\t        k++;\n\t\n\t        switch (kase) {\n\t            case 1: {\n\t                f = e[p - 2];\n\t                e[p - 2] = 0;\n\t                for (j = p - 2; j >= k; j--) {\n\t                    t = hypotenuse(s[j], f);\n\t                    cs = s[j] / t;\n\t                    sn = f / t;\n\t                    s[j] = t;\n\t                    if (j !== k) {\n\t                        f = -sn * e[j - 1];\n\t                        e[j - 1] = cs * e[j - 1];\n\t                    }\n\t                    if (wantv) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = cs * V[i][j] + sn * V[i][p - 1];\n\t                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n\t                            V[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t            case 2 : {\n\t                f = e[k - 1];\n\t                e[k - 1] = 0;\n\t                for (j = k; j < p; j++) {\n\t                    t = hypotenuse(s[j], f);\n\t                    cs = s[j] / t;\n\t                    sn = f / t;\n\t                    s[j] = t;\n\t                    f = -sn * e[j];\n\t                    e[j] = cs * e[j];\n\t                    if (wantu) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = cs * U[i][j] + sn * U[i][k - 1];\n\t                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n\t                            U[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t            case 3 : {\n\t                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n\t                sp = s[p - 1] / scale;\n\t                spm1 = s[p - 2] / scale;\n\t                epm1 = e[p - 2] / scale;\n\t                sk = s[k] / scale;\n\t                ek = e[k] / scale;\n\t                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n\t                c = (sp * epm1) * (sp * epm1);\n\t                shift = 0;\n\t                if ((b !== 0) || (c !== 0)) {\n\t                    shift = Math.sqrt(b * b + c);\n\t                    if (b < 0) {\n\t                        shift = -shift;\n\t                    }\n\t                    shift = c / (b + shift);\n\t                }\n\t                f = (sk + sp) * (sk - sp) + shift;\n\t                g = sk * ek;\n\t                for (j = k; j < p - 1; j++) {\n\t                    t = hypotenuse(f, g);\n\t                    cs = f / t;\n\t                    sn = g / t;\n\t                    if (j !== k) {\n\t                        e[j - 1] = t;\n\t                    }\n\t                    f = cs * s[j] + sn * e[j];\n\t                    e[j] = cs * e[j] - sn * s[j];\n\t                    g = sn * s[j + 1];\n\t                    s[j + 1] = cs * s[j + 1];\n\t                    if (wantv) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = cs * V[i][j] + sn * V[i][j + 1];\n\t                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n\t                            V[i][j] = t;\n\t                        }\n\t                    }\n\t                    t = hypotenuse(f, g);\n\t                    cs = f / t;\n\t                    sn = g / t;\n\t                    s[j] = t;\n\t                    f = cs * e[j] + sn * s[j + 1];\n\t                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n\t                    g = sn * e[j + 1];\n\t                    e[j + 1] = cs * e[j + 1];\n\t                    if (wantu && (j < m - 1)) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = cs * U[i][j] + sn * U[i][j + 1];\n\t                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n\t                            U[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                e[p - 2] = f;\n\t                iter = iter + 1;\n\t                break;\n\t            }\n\t            case 4: {\n\t                if (s[k] <= 0) {\n\t                    s[k] = (s[k] < 0 ? -s[k] : 0);\n\t                    if (wantv) {\n\t                        for (i = 0; i <= pp; i++) {\n\t                            V[i][k] = -V[i][k];\n\t                        }\n\t                    }\n\t                }\n\t                while (k < pp) {\n\t                    if (s[k] >= s[k + 1]) {\n\t                        break;\n\t                    }\n\t                    t = s[k];\n\t                    s[k] = s[k + 1];\n\t                    s[k + 1] = t;\n\t                    if (wantv && (k < n - 1)) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = V[i][k + 1];\n\t                            V[i][k + 1] = V[i][k];\n\t                            V[i][k] = t;\n\t                        }\n\t                    }\n\t                    if (wantu && (k < m - 1)) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = U[i][k + 1];\n\t                            U[i][k + 1] = U[i][k];\n\t                            U[i][k] = t;\n\t                        }\n\t                    }\n\t                    k++;\n\t                }\n\t                iter = 0;\n\t                p--;\n\t                break;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (swapped) {\n\t        var tmp = V;\n\t        V = U;\n\t        U = tmp;\n\t    }\n\t\n\t    this.m = m;\n\t    this.n = n;\n\t    this.s = s;\n\t    this.U = U;\n\t    this.V = V;\n\t}\n\t\n\tSingularValueDecomposition.prototype = {\n\t    get condition() {\n\t        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n\t    },\n\t    get norm2() {\n\t        return this.s[0];\n\t    },\n\t    get rank() {\n\t        var eps = Math.pow(2, -52),\n\t            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n\t            r = 0,\n\t            s = this.s;\n\t        for (var i = 0, ii = s.length; i < ii; i++) {\n\t            if (s[i] > tol) {\n\t                r++;\n\t            }\n\t        }\n\t        return r;\n\t    },\n\t    get diagonal() {\n\t        return this.s;\n\t    },\n\t    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n\t    get threshold() {\n\t        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n\t    },\n\t    get leftSingularVectors() {\n\t        return this.U;\n\t    },\n\t    get rightSingularVectors() {\n\t        return this.V;\n\t    },\n\t    get diagonalMatrix() {\n\t        return Matrix.diag(this.s);\n\t    },\n\t    solve: function (value) {\n\t\n\t        var Y = value,\n\t            e = this.threshold,\n\t            scols = this.s.length,\n\t            Ls = Matrix.zeros(scols, scols),\n\t            i;\n\t\n\t        for (i = 0; i < scols; i++) {\n\t            if (Math.abs(this.s[i]) <= e) {\n\t                Ls[i][i] = 0;\n\t            } else {\n\t                Ls[i][i] = 1 / this.s[i];\n\t            }\n\t        }\n\t\n\t\n\t        var VL = this.V.mmul(Ls),\n\t            vrows = this.V.rows,\n\t            urows = this.U.rows,\n\t            VLU = Matrix.zeros(vrows, urows),\n\t            j, k, sum;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < urows; j++) {\n\t                sum = 0;\n\t                for (k = 0; k < scols; k++) {\n\t                    sum += VL[i][k] * this.U[j][k];\n\t                }\n\t                VLU[i][j] = sum;\n\t            }\n\t        }\n\t\n\t        return VLU.mmul(Y);\n\t    },\n\t    solveForDiagonal: function (value) {\n\t        return this.solve(Matrix.diag(value));\n\t    },\n\t    inverse: function () {\n\t        var e = this.threshold,\n\t            vrows = this.V.rows,\n\t            vcols = this.V.columns,\n\t            X = new Matrix(vrows, this.s.length),\n\t            i, j;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < vcols; j++) {\n\t                if (Math.abs(this.s[j]) > e) {\n\t                    X[i][j] = this.V[i][j] / this.s[j];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t\n\t        var urows = this.U.rows,\n\t            ucols = this.U.columns,\n\t            Y = new Matrix(vrows, urows),\n\t            k, sum;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < urows; j++) {\n\t                sum = 0;\n\t                for (k = 0; k < ucols; k++) {\n\t                    sum += X[i][k] * this.U[j][k];\n\t                }\n\t                Y[i][j] = sum;\n\t            }\n\t        }\n\t\n\t        return Y;\n\t    }\n\t};\n\t\n\tmodule.exports = SingularValueDecomposition;\n\n\n/***/ },\n/* 92 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.hypotenuse = function hypotenuse(a, b) {\n\t    var r;\n\t    if (Math.abs(a) > Math.abs(b)) {\n\t        r = b / a;\n\t        return Math.abs(a) * Math.sqrt(1 + r * r);\n\t    }\n\t    if (b !== 0) {\n\t        r = a / b;\n\t        return Math.abs(b) * Math.sqrt(1 + r * r);\n\t    }\n\t    return 0;\n\t};\n\n\n/***/ },\n/* 93 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(89);\n\tvar hypotenuse = __webpack_require__(92).hypotenuse;\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\n\tfunction EigenvalueDecomposition(matrix) {\n\t    if (!(this instanceof EigenvalueDecomposition)) {\n\t        return new EigenvalueDecomposition(matrix);\n\t    }\n\t    matrix = Matrix.checkMatrix(matrix);\n\t    if (!matrix.isSquare()) {\n\t        throw new Error('Matrix is not a square matrix');\n\t    }\n\t\n\t    var n = matrix.columns,\n\t        V = Matrix.zeros(n, n),\n\t        d = new Array(n),\n\t        e = new Array(n),\n\t        value = matrix,\n\t        i, j;\n\t\n\t    if (matrix.isSymmetric()) {\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                V[i][j] = value[i][j];\n\t            }\n\t        }\n\t        tred2(n, e, d, V);\n\t        tql2(n, e, d, V);\n\t    }\n\t    else {\n\t        var H = Matrix.zeros(n, n),\n\t            ort = new Array(n);\n\t        for (j = 0; j < n; j++) {\n\t            for (i = 0; i < n; i++) {\n\t                H[i][j] = value[i][j];\n\t            }\n\t        }\n\t        orthes(n, H, ort, V);\n\t        hqr2(n, e, d, V, H);\n\t    }\n\t\n\t    this.n = n;\n\t    this.e = e;\n\t    this.d = d;\n\t    this.V = V;\n\t}\n\t\n\tEigenvalueDecomposition.prototype = {\n\t    get realEigenvalues() {\n\t        return this.d;\n\t    },\n\t    get imaginaryEigenvalues() {\n\t        return this.e;\n\t    },\n\t    get eigenvectorMatrix() {\n\t        return this.V;\n\t    },\n\t    get diagonalMatrix() {\n\t        var n = this.n,\n\t            e = this.e,\n\t            d = this.d,\n\t            X = new Matrix(n, n),\n\t            i, j;\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                X[i][j] = 0;\n\t            }\n\t            X[i][i] = d[i];\n\t            if (e[i] > 0) {\n\t                X[i][i + 1] = e[i];\n\t            }\n\t            else if (e[i] < 0) {\n\t                X[i][i - 1] = e[i];\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tfunction tred2(n, e, d, V) {\n\t\n\t    var f, g, h, i, j, k,\n\t        hh, scale;\n\t\n\t    for (j = 0; j < n; j++) {\n\t        d[j] = V[n - 1][j];\n\t    }\n\t\n\t    for (i = n - 1; i > 0; i--) {\n\t        scale = 0;\n\t        h = 0;\n\t        for (k = 0; k < i; k++) {\n\t            scale = scale + Math.abs(d[k]);\n\t        }\n\t\n\t        if (scale === 0) {\n\t            e[i] = d[i - 1];\n\t            for (j = 0; j < i; j++) {\n\t                d[j] = V[i - 1][j];\n\t                V[i][j] = 0;\n\t                V[j][i] = 0;\n\t            }\n\t        } else {\n\t            for (k = 0; k < i; k++) {\n\t                d[k] /= scale;\n\t                h += d[k] * d[k];\n\t            }\n\t\n\t            f = d[i - 1];\n\t            g = Math.sqrt(h);\n\t            if (f > 0) {\n\t                g = -g;\n\t            }\n\t\n\t            e[i] = scale * g;\n\t            h = h - f * g;\n\t            d[i - 1] = f - g;\n\t            for (j = 0; j < i; j++) {\n\t                e[j] = 0;\n\t            }\n\t\n\t            for (j = 0; j < i; j++) {\n\t                f = d[j];\n\t                V[j][i] = f;\n\t                g = e[j] + V[j][j] * f;\n\t                for (k = j + 1; k <= i - 1; k++) {\n\t                    g += V[k][j] * d[k];\n\t                    e[k] += V[k][j] * f;\n\t                }\n\t                e[j] = g;\n\t            }\n\t\n\t            f = 0;\n\t            for (j = 0; j < i; j++) {\n\t                e[j] /= h;\n\t                f += e[j] * d[j];\n\t            }\n\t\n\t            hh = f / (h + h);\n\t            for (j = 0; j < i; j++) {\n\t                e[j] -= hh * d[j];\n\t            }\n\t\n\t            for (j = 0; j < i; j++) {\n\t                f = d[j];\n\t                g = e[j];\n\t                for (k = j; k <= i - 1; k++) {\n\t                    V[k][j] -= (f * e[k] + g * d[k]);\n\t                }\n\t                d[j] = V[i - 1][j];\n\t                V[i][j] = 0;\n\t            }\n\t        }\n\t        d[i] = h;\n\t    }\n\t\n\t    for (i = 0; i < n - 1; i++) {\n\t        V[n - 1][i] = V[i][i];\n\t        V[i][i] = 1;\n\t        h = d[i + 1];\n\t        if (h !== 0) {\n\t            for (k = 0; k <= i; k++) {\n\t                d[k] = V[k][i + 1] / h;\n\t            }\n\t\n\t            for (j = 0; j <= i; j++) {\n\t                g = 0;\n\t                for (k = 0; k <= i; k++) {\n\t                    g += V[k][i + 1] * V[k][j];\n\t                }\n\t                for (k = 0; k <= i; k++) {\n\t                    V[k][j] -= g * d[k];\n\t                }\n\t            }\n\t        }\n\t\n\t        for (k = 0; k <= i; k++) {\n\t            V[k][i + 1] = 0;\n\t        }\n\t    }\n\t\n\t    for (j = 0; j < n; j++) {\n\t        d[j] = V[n - 1][j];\n\t        V[n - 1][j] = 0;\n\t    }\n\t\n\t    V[n - 1][n - 1] = 1;\n\t    e[0] = 0;\n\t}\n\t\n\tfunction tql2(n, e, d, V) {\n\t\n\t    var g, h, i, j, k, l, m, p, r,\n\t        dl1, c, c2, c3, el1, s, s2,\n\t        iter;\n\t\n\t    for (i = 1; i < n; i++) {\n\t        e[i - 1] = e[i];\n\t    }\n\t\n\t    e[n - 1] = 0;\n\t\n\t    var f = 0,\n\t        tst1 = 0,\n\t        eps = Math.pow(2, -52);\n\t\n\t    for (l = 0; l < n; l++) {\n\t        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n\t        m = l;\n\t        while (m < n) {\n\t            if (Math.abs(e[m]) <= eps * tst1) {\n\t                break;\n\t            }\n\t            m++;\n\t        }\n\t\n\t        if (m > l) {\n\t            iter = 0;\n\t            do {\n\t                iter = iter + 1;\n\t\n\t                g = d[l];\n\t                p = (d[l + 1] - g) / (2 * e[l]);\n\t                r = hypotenuse(p, 1);\n\t                if (p < 0) {\n\t                    r = -r;\n\t                }\n\t\n\t                d[l] = e[l] / (p + r);\n\t                d[l + 1] = e[l] * (p + r);\n\t                dl1 = d[l + 1];\n\t                h = g - d[l];\n\t                for (i = l + 2; i < n; i++) {\n\t                    d[i] -= h;\n\t                }\n\t\n\t                f = f + h;\n\t\n\t                p = d[m];\n\t                c = 1;\n\t                c2 = c;\n\t                c3 = c;\n\t                el1 = e[l + 1];\n\t                s = 0;\n\t                s2 = 0;\n\t                for (i = m - 1; i >= l; i--) {\n\t                    c3 = c2;\n\t                    c2 = c;\n\t                    s2 = s;\n\t                    g = c * e[i];\n\t                    h = c * p;\n\t                    r = hypotenuse(p, e[i]);\n\t                    e[i + 1] = s * r;\n\t                    s = e[i] / r;\n\t                    c = p / r;\n\t                    p = c * d[i] - s * g;\n\t                    d[i + 1] = h + s * (c * g + s * d[i]);\n\t\n\t                    for (k = 0; k < n; k++) {\n\t                        h = V[k][i + 1];\n\t                        V[k][i + 1] = s * V[k][i] + c * h;\n\t                        V[k][i] = c * V[k][i] - s * h;\n\t                    }\n\t                }\n\t\n\t                p = -s * s2 * c3 * el1 * e[l] / dl1;\n\t                e[l] = s * p;\n\t                d[l] = c * p;\n\t\n\t            }\n\t            while (Math.abs(e[l]) > eps * tst1);\n\t        }\n\t        d[l] = d[l] + f;\n\t        e[l] = 0;\n\t    }\n\t\n\t    for (i = 0; i < n - 1; i++) {\n\t        k = i;\n\t        p = d[i];\n\t        for (j = i + 1; j < n; j++) {\n\t            if (d[j] < p) {\n\t                k = j;\n\t                p = d[j];\n\t            }\n\t        }\n\t\n\t        if (k !== i) {\n\t            d[k] = d[i];\n\t            d[i] = p;\n\t            for (j = 0; j < n; j++) {\n\t                p = V[j][i];\n\t                V[j][i] = V[j][k];\n\t                V[j][k] = p;\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction orthes(n, H, ort, V) {\n\t\n\t    var low = 0,\n\t        high = n - 1,\n\t        f, g, h, i, j, m,\n\t        scale;\n\t\n\t    for (m = low + 1; m <= high - 1; m++) {\n\t        scale = 0;\n\t        for (i = m; i <= high; i++) {\n\t            scale = scale + Math.abs(H[i][m - 1]);\n\t        }\n\t\n\t        if (scale !== 0) {\n\t            h = 0;\n\t            for (i = high; i >= m; i--) {\n\t                ort[i] = H[i][m - 1] / scale;\n\t                h += ort[i] * ort[i];\n\t            }\n\t\n\t            g = Math.sqrt(h);\n\t            if (ort[m] > 0) {\n\t                g = -g;\n\t            }\n\t\n\t            h = h - ort[m] * g;\n\t            ort[m] = ort[m] - g;\n\t\n\t            for (j = m; j < n; j++) {\n\t                f = 0;\n\t                for (i = high; i >= m; i--) {\n\t                    f += ort[i] * H[i][j];\n\t                }\n\t\n\t                f = f / h;\n\t                for (i = m; i <= high; i++) {\n\t                    H[i][j] -= f * ort[i];\n\t                }\n\t            }\n\t\n\t            for (i = 0; i <= high; i++) {\n\t                f = 0;\n\t                for (j = high; j >= m; j--) {\n\t                    f += ort[j] * H[i][j];\n\t                }\n\t\n\t                f = f / h;\n\t                for (j = m; j <= high; j++) {\n\t                    H[i][j] -= f * ort[j];\n\t                }\n\t            }\n\t\n\t            ort[m] = scale * ort[m];\n\t            H[m][m - 1] = scale * g;\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < n; i++) {\n\t        for (j = 0; j < n; j++) {\n\t            V[i][j] = (i === j ? 1 : 0);\n\t        }\n\t    }\n\t\n\t    for (m = high - 1; m >= low + 1; m--) {\n\t        if (H[m][m - 1] !== 0) {\n\t            for (i = m + 1; i <= high; i++) {\n\t                ort[i] = H[i][m - 1];\n\t            }\n\t\n\t            for (j = m; j <= high; j++) {\n\t                g = 0;\n\t                for (i = m; i <= high; i++) {\n\t                    g += ort[i] * V[i][j];\n\t                }\n\t\n\t                g = (g / ort[m]) / H[m][m - 1];\n\t                for (i = m; i <= high; i++) {\n\t                    V[i][j] += g * ort[i];\n\t                }\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction hqr2(nn, e, d, V, H) {\n\t    var n = nn - 1,\n\t        low = 0,\n\t        high = nn - 1,\n\t        eps = Math.pow(2, -52),\n\t        exshift = 0,\n\t        norm = 0,\n\t        p = 0,\n\t        q = 0,\n\t        r = 0,\n\t        s = 0,\n\t        z = 0,\n\t        iter = 0,\n\t        i, j, k, l, m, t, w, x, y,\n\t        ra, sa, vr, vi,\n\t        notlast, cdivres;\n\t\n\t    for (i = 0; i < nn; i++) {\n\t        if (i < low || i > high) {\n\t            d[i] = H[i][i];\n\t            e[i] = 0;\n\t        }\n\t\n\t        for (j = Math.max(i - 1, 0); j < nn; j++) {\n\t            norm = norm + Math.abs(H[i][j]);\n\t        }\n\t    }\n\t\n\t    while (n >= low) {\n\t        l = n;\n\t        while (l > low) {\n\t            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n\t            if (s === 0) {\n\t                s = norm;\n\t            }\n\t            if (Math.abs(H[l][l - 1]) < eps * s) {\n\t                break;\n\t            }\n\t            l--;\n\t        }\n\t\n\t        if (l === n) {\n\t            H[n][n] = H[n][n] + exshift;\n\t            d[n] = H[n][n];\n\t            e[n] = 0;\n\t            n--;\n\t            iter = 0;\n\t        } else if (l === n - 1) {\n\t            w = H[n][n - 1] * H[n - 1][n];\n\t            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n\t            q = p * p + w;\n\t            z = Math.sqrt(Math.abs(q));\n\t            H[n][n] = H[n][n] + exshift;\n\t            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n\t            x = H[n][n];\n\t\n\t            if (q >= 0) {\n\t                z = (p >= 0) ? (p + z) : (p - z);\n\t                d[n - 1] = x + z;\n\t                d[n] = d[n - 1];\n\t                if (z !== 0) {\n\t                    d[n] = x - w / z;\n\t                }\n\t                e[n - 1] = 0;\n\t                e[n] = 0;\n\t                x = H[n][n - 1];\n\t                s = Math.abs(x) + Math.abs(z);\n\t                p = x / s;\n\t                q = z / s;\n\t                r = Math.sqrt(p * p + q * q);\n\t                p = p / r;\n\t                q = q / r;\n\t\n\t                for (j = n - 1; j < nn; j++) {\n\t                    z = H[n - 1][j];\n\t                    H[n - 1][j] = q * z + p * H[n][j];\n\t                    H[n][j] = q * H[n][j] - p * z;\n\t                }\n\t\n\t                for (i = 0; i <= n; i++) {\n\t                    z = H[i][n - 1];\n\t                    H[i][n - 1] = q * z + p * H[i][n];\n\t                    H[i][n] = q * H[i][n] - p * z;\n\t                }\n\t\n\t                for (i = low; i <= high; i++) {\n\t                    z = V[i][n - 1];\n\t                    V[i][n - 1] = q * z + p * V[i][n];\n\t                    V[i][n] = q * V[i][n] - p * z;\n\t                }\n\t            } else {\n\t                d[n - 1] = x + p;\n\t                d[n] = x + p;\n\t                e[n - 1] = z;\n\t                e[n] = -z;\n\t            }\n\t\n\t            n = n - 2;\n\t            iter = 0;\n\t        } else {\n\t            x = H[n][n];\n\t            y = 0;\n\t            w = 0;\n\t            if (l < n) {\n\t                y = H[n - 1][n - 1];\n\t                w = H[n][n - 1] * H[n - 1][n];\n\t            }\n\t\n\t            if (iter === 10) {\n\t                exshift += x;\n\t                for (i = low; i <= n; i++) {\n\t                    H[i][i] -= x;\n\t                }\n\t                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n\t                x = y = 0.75 * s;\n\t                w = -0.4375 * s * s;\n\t            }\n\t\n\t            if (iter === 30) {\n\t                s = (y - x) / 2;\n\t                s = s * s + w;\n\t                if (s > 0) {\n\t                    s = Math.sqrt(s);\n\t                    if (y < x) {\n\t                        s = -s;\n\t                    }\n\t                    s = x - w / ((y - x) / 2 + s);\n\t                    for (i = low; i <= n; i++) {\n\t                        H[i][i] -= s;\n\t                    }\n\t                    exshift += s;\n\t                    x = y = w = 0.964;\n\t                }\n\t            }\n\t\n\t            iter = iter + 1;\n\t\n\t            m = n - 2;\n\t            while (m >= l) {\n\t                z = H[m][m];\n\t                r = x - z;\n\t                s = y - z;\n\t                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n\t                q = H[m + 1][m + 1] - z - r - s;\n\t                r = H[m + 2][m + 1];\n\t                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n\t                p = p / s;\n\t                q = q / s;\n\t                r = r / s;\n\t                if (m === l) {\n\t                    break;\n\t                }\n\t                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n\t                    break;\n\t                }\n\t                m--;\n\t            }\n\t\n\t            for (i = m + 2; i <= n; i++) {\n\t                H[i][i - 2] = 0;\n\t                if (i > m + 2) {\n\t                    H[i][i - 3] = 0;\n\t                }\n\t            }\n\t\n\t            for (k = m; k <= n - 1; k++) {\n\t                notlast = (k !== n - 1);\n\t                if (k !== m) {\n\t                    p = H[k][k - 1];\n\t                    q = H[k + 1][k - 1];\n\t                    r = (notlast ? H[k + 2][k - 1] : 0);\n\t                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n\t                    if (x !== 0) {\n\t                        p = p / x;\n\t                        q = q / x;\n\t                        r = r / x;\n\t                    }\n\t                }\n\t\n\t                if (x === 0) {\n\t                    break;\n\t                }\n\t\n\t                s = Math.sqrt(p * p + q * q + r * r);\n\t                if (p < 0) {\n\t                    s = -s;\n\t                }\n\t\n\t                if (s !== 0) {\n\t                    if (k !== m) {\n\t                        H[k][k - 1] = -s * x;\n\t                    } else if (l !== m) {\n\t                        H[k][k - 1] = -H[k][k - 1];\n\t                    }\n\t\n\t                    p = p + s;\n\t                    x = p / s;\n\t                    y = q / s;\n\t                    z = r / s;\n\t                    q = q / p;\n\t                    r = r / p;\n\t\n\t                    for (j = k; j < nn; j++) {\n\t                        p = H[k][j] + q * H[k + 1][j];\n\t                        if (notlast) {\n\t                            p = p + r * H[k + 2][j];\n\t                            H[k + 2][j] = H[k + 2][j] - p * z;\n\t                        }\n\t\n\t                        H[k][j] = H[k][j] - p * x;\n\t                        H[k + 1][j] = H[k + 1][j] - p * y;\n\t                    }\n\t\n\t                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n\t                        p = x * H[i][k] + y * H[i][k + 1];\n\t                        if (notlast) {\n\t                            p = p + z * H[i][k + 2];\n\t                            H[i][k + 2] = H[i][k + 2] - p * r;\n\t                        }\n\t\n\t                        H[i][k] = H[i][k] - p;\n\t                        H[i][k + 1] = H[i][k + 1] - p * q;\n\t                    }\n\t\n\t                    for (i = low; i <= high; i++) {\n\t                        p = x * V[i][k] + y * V[i][k + 1];\n\t                        if (notlast) {\n\t                            p = p + z * V[i][k + 2];\n\t                            V[i][k + 2] = V[i][k + 2] - p * r;\n\t                        }\n\t\n\t                        V[i][k] = V[i][k] - p;\n\t                        V[i][k + 1] = V[i][k + 1] - p * q;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    if (norm === 0) {\n\t        return;\n\t    }\n\t\n\t    for (n = nn - 1; n >= 0; n--) {\n\t        p = d[n];\n\t        q = e[n];\n\t\n\t        if (q === 0) {\n\t            l = n;\n\t            H[n][n] = 1;\n\t            for (i = n - 1; i >= 0; i--) {\n\t                w = H[i][i] - p;\n\t                r = 0;\n\t                for (j = l; j <= n; j++) {\n\t                    r = r + H[i][j] * H[j][n];\n\t                }\n\t\n\t                if (e[i] < 0) {\n\t                    z = w;\n\t                    s = r;\n\t                } else {\n\t                    l = i;\n\t                    if (e[i] === 0) {\n\t                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n\t                    } else {\n\t                        x = H[i][i + 1];\n\t                        y = H[i + 1][i];\n\t                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n\t                        t = (x * s - z * r) / q;\n\t                        H[i][n] = t;\n\t                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n\t                    }\n\t\n\t                    t = Math.abs(H[i][n]);\n\t                    if ((eps * t) * t > 1) {\n\t                        for (j = i; j <= n; j++) {\n\t                            H[j][n] = H[j][n] / t;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        } else if (q < 0) {\n\t            l = n - 1;\n\t\n\t            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n\t                H[n - 1][n - 1] = q / H[n][n - 1];\n\t                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n\t            } else {\n\t                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n\t                H[n - 1][n - 1] = cdivres[0];\n\t                H[n - 1][n] = cdivres[1];\n\t            }\n\t\n\t            H[n][n - 1] = 0;\n\t            H[n][n] = 1;\n\t            for (i = n - 2; i >= 0; i--) {\n\t                ra = 0;\n\t                sa = 0;\n\t                for (j = l; j <= n; j++) {\n\t                    ra = ra + H[i][j] * H[j][n - 1];\n\t                    sa = sa + H[i][j] * H[j][n];\n\t                }\n\t\n\t                w = H[i][i] - p;\n\t\n\t                if (e[i] < 0) {\n\t                    z = w;\n\t                    r = ra;\n\t                    s = sa;\n\t                } else {\n\t                    l = i;\n\t                    if (e[i] === 0) {\n\t                        cdivres = cdiv(-ra, -sa, w, q);\n\t                        H[i][n - 1] = cdivres[0];\n\t                        H[i][n] = cdivres[1];\n\t                    } else {\n\t                        x = H[i][i + 1];\n\t                        y = H[i + 1][i];\n\t                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n\t                        vi = (d[i] - p) * 2 * q;\n\t                        if (vr === 0 && vi === 0) {\n\t                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n\t                        }\n\t                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n\t                        H[i][n - 1] = cdivres[0];\n\t                        H[i][n] = cdivres[1];\n\t                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n\t                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n\t                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n\t                        } else {\n\t                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n\t                            H[i + 1][n - 1] = cdivres[0];\n\t                            H[i + 1][n] = cdivres[1];\n\t                        }\n\t                    }\n\t\n\t                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n\t                    if ((eps * t) * t > 1) {\n\t                        for (j = i; j <= n; j++) {\n\t                            H[j][n - 1] = H[j][n - 1] / t;\n\t                            H[j][n] = H[j][n] / t;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < nn; i++) {\n\t        if (i < low || i > high) {\n\t            for (j = i; j < nn; j++) {\n\t                V[i][j] = H[i][j];\n\t            }\n\t        }\n\t    }\n\t\n\t    for (j = nn - 1; j >= low; j--) {\n\t        for (i = low; i <= high; i++) {\n\t            z = 0;\n\t            for (k = low; k <= Math.min(j, high); k++) {\n\t                z = z + V[i][k] * H[k][j];\n\t            }\n\t            V[i][j] = z;\n\t        }\n\t    }\n\t}\n\t\n\tfunction cdiv(xr, xi, yr, yi) {\n\t    var r, d;\n\t    if (Math.abs(yr) > Math.abs(yi)) {\n\t        r = yi / yr;\n\t        d = yr + r * yi;\n\t        return [(xr + r * xi) / d, (xi - r * xr) / d];\n\t    }\n\t    else {\n\t        r = yr / yi;\n\t        d = yi + r * yr;\n\t        return [(r * xr + xi) / d, (r * xi - xr) / d];\n\t    }\n\t}\n\t\n\tmodule.exports = EigenvalueDecomposition;\n\n\n/***/ },\n/* 94 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(89);\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\n\tfunction LuDecomposition(matrix) {\n\t    if (!(this instanceof LuDecomposition)) {\n\t        return new LuDecomposition(matrix);\n\t    }\n\t    matrix = Matrix.checkMatrix(matrix);\n\t\n\t    var lu = matrix.clone(),\n\t        rows = lu.rows,\n\t        columns = lu.columns,\n\t        pivotVector = new Array(rows),\n\t        pivotSign = 1,\n\t        i, j, k, p, s, t, v,\n\t        LUrowi, LUcolj, kmax;\n\t\n\t    for (i = 0; i < rows; i++) {\n\t        pivotVector[i] = i;\n\t    }\n\t\n\t    LUcolj = new Array(rows);\n\t\n\t    for (j = 0; j < columns; j++) {\n\t\n\t        for (i = 0; i < rows; i++) {\n\t            LUcolj[i] = lu[i][j];\n\t        }\n\t\n\t        for (i = 0; i < rows; i++) {\n\t            LUrowi = lu[i];\n\t            kmax = Math.min(i, j);\n\t            s = 0;\n\t            for (k = 0; k < kmax; k++) {\n\t                s += LUrowi[k] * LUcolj[k];\n\t            }\n\t            LUrowi[j] = LUcolj[i] -= s;\n\t        }\n\t\n\t        p = j;\n\t        for (i = j + 1; i < rows; i++) {\n\t            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n\t                p = i;\n\t            }\n\t        }\n\t\n\t        if (p !== j) {\n\t            for (k = 0; k < columns; k++) {\n\t                t = lu[p][k];\n\t                lu[p][k] = lu[j][k];\n\t                lu[j][k] = t;\n\t            }\n\t\n\t            v = pivotVector[p];\n\t            pivotVector[p] = pivotVector[j];\n\t            pivotVector[j] = v;\n\t\n\t            pivotSign = -pivotSign;\n\t        }\n\t\n\t        if (j < rows && lu[j][j] !== 0) {\n\t            for (i = j + 1; i < rows; i++) {\n\t                lu[i][j] /= lu[j][j];\n\t            }\n\t        }\n\t    }\n\t\n\t    this.LU = lu;\n\t    this.pivotVector = pivotVector;\n\t    this.pivotSign = pivotSign;\n\t}\n\t\n\tLuDecomposition.prototype = {\n\t    isSingular: function () {\n\t        var data = this.LU,\n\t            col = data.columns;\n\t        for (var j = 0; j < col; j++) {\n\t            if (data[j][j] === 0) {\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    },\n\t    get determinant() {\n\t        var data = this.LU;\n\t        if (!data.isSquare())\n\t            throw new Error('Matrix must be square');\n\t        var determinant = this.pivotSign, col = data.columns;\n\t        for (var j = 0; j < col; j++)\n\t            determinant *= data[j][j];\n\t        return determinant;\n\t    },\n\t    get lowerTriangularFactor() {\n\t        var data = this.LU,\n\t            rows = data.rows,\n\t            columns = data.columns,\n\t            X = new Matrix(rows, columns);\n\t        for (var i = 0; i < rows; i++) {\n\t            for (var j = 0; j < columns; j++) {\n\t                if (i > j) {\n\t                    X[i][j] = data[i][j];\n\t                } else if (i === j) {\n\t                    X[i][j] = 1;\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get upperTriangularFactor() {\n\t        var data = this.LU,\n\t            rows = data.rows,\n\t            columns = data.columns,\n\t            X = new Matrix(rows, columns);\n\t        for (var i = 0; i < rows; i++) {\n\t            for (var j = 0; j < columns; j++) {\n\t                if (i <= j) {\n\t                    X[i][j] = data[i][j];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get pivotPermutationVector() {\n\t        return this.pivotVector.slice();\n\t    },\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var lu = this.LU,\n\t            rows = lu.rows;\n\t\n\t        if (rows !== value.rows)\n\t            throw new Error('Invalid matrix dimensions');\n\t        if (this.isSingular())\n\t            throw new Error('LU matrix is singular');\n\t\n\t        var count = value.columns,\n\t            X = value.subMatrixRow(this.pivotVector, 0, count - 1),\n\t            columns = lu.columns,\n\t            i, j, k;\n\t\n\t        for (k = 0; k < columns; k++) {\n\t            for (i = k + 1; i < columns; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * lu[i][k];\n\t                }\n\t            }\n\t        }\n\t        for (k = columns - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                X[k][j] /= lu[k][k];\n\t            }\n\t            for (i = 0; i < k; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * lu[i][k];\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tmodule.exports = LuDecomposition;\n\n\n/***/ },\n/* 95 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(89);\n\tvar hypotenuse = __webpack_require__(92).hypotenuse;\n\t\n\t//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\n\tfunction QrDecomposition(value) {\n\t    if (!(this instanceof QrDecomposition)) {\n\t        return new QrDecomposition(value);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t\n\t    var qr = value.clone(),\n\t        m = value.rows,\n\t        n = value.columns,\n\t        rdiag = new Array(n),\n\t        i, j, k, s;\n\t\n\t    for (k = 0; k < n; k++) {\n\t        var nrm = 0;\n\t        for (i = k; i < m; i++) {\n\t            nrm = hypotenuse(nrm, qr[i][k]);\n\t        }\n\t        if (nrm !== 0) {\n\t            if (qr[k][k] < 0) {\n\t                nrm = -nrm;\n\t            }\n\t            for (i = k; i < m; i++) {\n\t                qr[i][k] /= nrm;\n\t            }\n\t            qr[k][k] += 1;\n\t            for (j = k + 1; j < n; j++) {\n\t                s = 0;\n\t                for (i = k; i < m; i++) {\n\t                    s += qr[i][k] * qr[i][j];\n\t                }\n\t                s = -s / qr[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    qr[i][j] += s * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t        rdiag[k] = -nrm;\n\t    }\n\t\n\t    this.QR = qr;\n\t    this.Rdiag = rdiag;\n\t}\n\t\n\tQrDecomposition.prototype = {\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var qr = this.QR,\n\t            m = qr.rows;\n\t\n\t        if (value.rows !== m)\n\t            throw new Error('Matrix row dimensions must agree');\n\t        if (!this.isFullRank())\n\t            throw new Error('Matrix is rank deficient');\n\t\n\t        var count = value.columns,\n\t            X = value.clone(),\n\t            n = qr.columns,\n\t            i, j, k, s;\n\t\n\t        for (k = 0; k < n; k++) {\n\t            for (j = 0; j < count; j++) {\n\t                s = 0;\n\t                for (i = k; i < m; i++) {\n\t                    s += qr[i][k] * X[i][j];\n\t                }\n\t                s = -s / qr[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    X[i][j] += s * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t        for (k = n - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                X[k][j] /= this.Rdiag[k];\n\t            }\n\t            for (i = 0; i < k; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t\n\t        return X.subMatrix(0, n - 1, 0, count - 1);\n\t    },\n\t    isFullRank: function () {\n\t        var columns = this.QR.columns;\n\t        for (var i = 0; i < columns; i++) {\n\t            if (this.Rdiag[i] === 0) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    },\n\t    get upperTriangularFactor() {\n\t        var qr = this.QR,\n\t            n = qr.columns,\n\t            X = new Matrix(n, n),\n\t            i, j;\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                if (i < j) {\n\t                    X[i][j] = qr[i][j];\n\t                } else if (i === j) {\n\t                    X[i][j] = this.Rdiag[i];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get orthogonalFactor() {\n\t        var qr = this.QR,\n\t            rows = qr.rows,\n\t            columns = qr.columns,\n\t            X = new Matrix(rows, columns),\n\t            i, j, k, s;\n\t\n\t        for (k = columns - 1; k >= 0; k--) {\n\t            for (i = 0; i < rows; i++) {\n\t                X[i][k] = 0;\n\t            }\n\t            X[k][k] = 1;\n\t            for (j = k; j < columns; j++) {\n\t                if (qr[k][k] !== 0) {\n\t                    s = 0;\n\t                    for (i = k; i < rows; i++) {\n\t                        s += qr[i][k] * X[i][j];\n\t                    }\n\t\n\t                    s = -s / qr[k][k];\n\t\n\t                    for (i = k; i < rows; i++) {\n\t                        X[i][j] += s * qr[i][k];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tmodule.exports = QrDecomposition;\n\n\n/***/ },\n/* 96 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(89);\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\n\tfunction CholeskyDecomposition(value) {\n\t    if (!(this instanceof CholeskyDecomposition)) {\n\t        return new CholeskyDecomposition(value);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t    if (!value.isSymmetric())\n\t        throw new Error('Matrix is not symmetric');\n\t\n\t    var a = value,\n\t        dimension = a.rows,\n\t        l = new Matrix(dimension, dimension),\n\t        positiveDefinite = true,\n\t        i, j, k;\n\t\n\t    for (j = 0; j < dimension; j++) {\n\t        var Lrowj = l[j];\n\t        var d = 0;\n\t        for (k = 0; k < j; k++) {\n\t            var Lrowk = l[k];\n\t            var s = 0;\n\t            for (i = 0; i < k; i++) {\n\t                s += Lrowk[i] * Lrowj[i];\n\t            }\n\t            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n\t            d = d + s * s;\n\t        }\n\t\n\t        d = a[j][j] - d;\n\t\n\t        positiveDefinite &= (d > 0);\n\t        l[j][j] = Math.sqrt(Math.max(d, 0));\n\t        for (k = j + 1; k < dimension; k++) {\n\t            l[j][k] = 0;\n\t        }\n\t    }\n\t\n\t    if (!positiveDefinite) {\n\t        throw new Error('Matrix is not positive definite');\n\t    }\n\t\n\t    this.L = l;\n\t}\n\t\n\tCholeskyDecomposition.prototype = {\n\t    get leftTriangularFactor() {\n\t        return this.L;\n\t    },\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var l = this.L,\n\t            dimension = l.rows;\n\t\n\t        if (value.rows !== dimension) {\n\t            throw new Error('Matrix dimensions do not match');\n\t        }\n\t\n\t        var count = value.columns,\n\t            B = value.clone(),\n\t            i, j, k;\n\t\n\t        for (k = 0; k < dimension; k++) {\n\t            for (j = 0; j < count; j++) {\n\t                for (i = 0; i < k; i++) {\n\t                    B[k][j] -= B[i][j] * l[k][i];\n\t                }\n\t                B[k][j] /= l[k][k];\n\t            }\n\t        }\n\t\n\t        for (k = dimension - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                for (i = k + 1; i < dimension; i++) {\n\t                    B[k][j] -= B[i][j] * l[i][k];\n\t                }\n\t                B[k][j] /= l[k][k];\n\t            }\n\t        }\n\t\n\t        return B;\n\t    }\n\t};\n\t\n\tmodule.exports = CholeskyDecomposition;\n\n\n/***/ },\n/* 97 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar LOOP = 8;\n\tvar FLOAT_MUL = 1 / 16777216;\n\t\n\tfunction multiply_uint32(n, m) {\n\t    n >>>= 0;\n\t    m >>>= 0;\n\t    var nlo = n & 0xffff;\n\t    var nhi = n - nlo;\n\t    return (nhi * m >>> 0) + nlo * m >>> 0;\n\t}\n\t\n\tvar XSadd = (function () {\n\t    function XSadd() {\n\t        var seed = arguments.length <= 0 || arguments[0] === undefined ? Date.now() : arguments[0];\n\t\n\t        _classCallCheck(this, XSadd);\n\t\n\t        this.state = new Uint32Array(4);\n\t        this.init(seed);\n\t    }\n\t\n\t    _createClass(XSadd, [{\n\t        key: \"init\",\n\t        value: function init(seed) {\n\t            this.state[0] = seed;\n\t            this.state[1] = 0;\n\t            this.state[2] = 0;\n\t            this.state[3] = 0;\n\t            for (var i = 1; i < LOOP; i++) {\n\t                this.state[i & 3] ^= i + multiply_uint32(1812433253, this.state[i - 1 & 3] ^ this.state[i - 1 & 3] >>> 30 >>> 0) >>> 0;\n\t            }\n\t            period_certification(this);\n\t            for (var i = 0; i < LOOP; i++) {\n\t                next_state(this);\n\t            }\n\t        }\n\t\n\t        /**\n\t         * Returns a 32-bit integer r (0 <= r < 2^32)\n\t         */\n\t    }, {\n\t        key: \"getUint32\",\n\t        value: function getUint32() {\n\t            next_state(this);\n\t            return this.state[3] + this.state[2] >>> 0;\n\t        }\n\t\n\t        /**\n\t         * Returns a floating point number r (0.0 <= r < 1.0)\n\t         */\n\t    }, {\n\t        key: \"getFloat\",\n\t        value: function getFloat() {\n\t            return (this.getUint32() >>> 8) * FLOAT_MUL;\n\t        }\n\t    }, {\n\t        key: \"random\",\n\t        get: function get() {\n\t            if (!this._random) {\n\t                this._random = this.getFloat.bind(this);\n\t            }\n\t            return this._random;\n\t        }\n\t    }]);\n\t\n\t    return XSadd;\n\t})();\n\t\n\texports[\"default\"] = XSadd;\n\t\n\tfunction period_certification(xsadd) {\n\t    if (xsadd.state[0] === 0 && xsadd.state[1] === 0 && xsadd.state[2] === 0 && xsadd.state[3] === 0) {\n\t        xsadd.state[0] = 88; // X\n\t        xsadd.state[1] = 83; // S\n\t        xsadd.state[2] = 65; // A\n\t        xsadd.state[3] = 68; // D\n\t    }\n\t}\n\t\n\tvar sh1 = 15;\n\tvar sh2 = 18;\n\tvar sh3 = 11;\n\tfunction next_state(xsadd) {\n\t    var t = xsadd.state[0];\n\t    t ^= t << sh1;\n\t    t ^= t >>> sh2;\n\t    t ^= xsadd.state[3] << sh3;\n\t    xsadd.state[0] = xsadd.state[1];\n\t    xsadd.state[1] = xsadd.state[2];\n\t    xsadd.state[2] = xsadd.state[3];\n\t    xsadd.state[3] = t;\n\t}\n\tmodule.exports = exports[\"default\"];\n\n\n/***/ },\n/* 98 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = exports = __webpack_require__(99);\n\texports.kernel = __webpack_require__(100).kernel;\n\n\n/***/ },\n/* 99 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar kernel = __webpack_require__(100).kernel;\n\tvar getKernel = __webpack_require__(100).getKernel;\n\t\n\t/**\n\t * Parameters to implement function\n\t * @type {{C: number, tol: number, max_passes: number, par: number, k: string}}\n\t * @param {number} C - regularization parameter\n\t * @param {number} tol - numerical tolerance\n\t * @param {number} max_passes - max number of times to iterate over alphas without\n\t * changing\n\t * @param {string} k - the kind of kernel\n\t * @param {number} par - parameter used in the polynomial and the radial function\n\t * of the kernel\n\t */\n\tvar defaultOptions = {\n\t    C: 10,\n\t    tol: 10e-2,\n\t    max_passes: 100,\n\t    par: 2,\n\t    k: 'lineal'\n\t};\n\t\n\t/**\n\t * Function to calculate the estimated prediction\n\t * @param {Array <number>} x - point where calculate the function prediction\n\t * @param {Array <Array <number>>} X - training data point in the form (x1, x2)\n\t * @param {Array <number>} Y - training data labels in the domain {1,-1}\n\t * @param {Array <number>} alpha - Lagrange multipliers\n\t * @param {number} b - threshold of the function\n\t * @param {string} k - the kind of kernel\n\t * @param {number} par - parameter used in the polynomial and the radial function\n\t * of the kernel\n\t * @returns {number}\n\t */\n\tfunction f(x, X, Y, alpha, b, kernel, par) {\n\t    var m = X.length;\n\t    var aux = b;\n\t    for (var i = 0; i < m; i++) {\n\t        b += alpha[i]*Y[i]*kernel(X[i],x, par)\n\t    }\n\t    return aux;\n\t}\n\t\n\t/**\n\t * Simplified version of the Sequential Minimal Optimization algorithm for training\n\t * support vector machines\n\t * @param {{json}} options - parameters to implement function\n\t * @constructor\n\t */\n\tfunction SVM(options) {\n\t    options = options || {};\n\t    this.options = {};\n\t    for (var o in defaultOptions) {\n\t        if (options.hasOwnProperty(o)) {\n\t            this.options[o] = options[o];\n\t        } else {\n\t            this.options[o] = defaultOptions[o];\n\t        }\n\t    }\n\t    this.kernel = getKernel(this.options.k);\n\t    this.b = 0;\n\t}\n\t\n\t/**\n\t * Train the SVM model\n\t * @param {Array <Array <number>>} X - training data point in the form (x1, x2)\n\t * @param {Array <number>} Y - training data labels in the domain {1,-1}\n\t */\n\tSVM.prototype.train = function (X, Y) {\n\t    var m = Y.length;\n\t    var alpha = new Array(m);\n\t    for (var a = 0; a < m; a++)\n\t        alpha[a] = 0;\n\t    if (X.length !== m)\n\t        throw new TypeError('Arrays should have the same length');\n\t    var b = 0,\n\t        b1 = 0,\n\t        b2 = 0,\n\t        iter = 0,\n\t        Ei = 0,\n\t        Ej = 0,\n\t        ai = 0,\n\t        aj = 0,\n\t        L = 0,\n\t        H = 0,\n\t        eta = 0;\n\t\n\t    while (iter < this.options.max_passes) {\n\t        var numChange = 0;\n\t        for (var i = 0; i < m; i++) {\n\t            Ei = f(X[i],X,Y,alpha,b,this.kernel,this.options.par) - Y[i];\n\t            if (((Y[i]*Ei < -this.options.tol) && (alpha[i] < this.options.C)) || ((Y[i]*Ei > this.options.tol) && (alpha[i] > 0))) {\n\t                var j = 0;\n\t                do {\n\t                    j = Math.ceil(Math.random()*(m - 1));\n\t                }\n\t                while (j === i);\n\t                Ej = f(X[j],X,Y,alpha,b,this.kernel,this.options.par) - Y[j];\n\t                ai = alpha[i];\n\t                aj = alpha[j];\n\t                if (Y[i] === Y[j]) {\n\t                    L = Math.max(0, ai+aj-this.options.C);\n\t                    H = Math.min(this.options.C, ai+aj);\n\t                }\n\t                else  {\n\t                    L = Math.max(0, ai-aj);\n\t                    H = Math.min(this.options.C, this.options.C-ai+aj);\n\t                }\n\t                if (L !== H) {\n\t                    eta = 2*this.kernel(X[i],X[j], this.options.par) - this.kernel(X[i],X[i], this.options.par) - this.kernel(X[j],X[j], this.options.par);\n\t                    if (eta < 0) {\n\t                        alpha[j] = alpha[j] - (Y[j]*(Ei - Ej)) / eta;\n\t                        if (alpha[j] > H)\n\t                            alpha[j] = H;\n\t                        else if (alpha[j] < L)\n\t                            alpha[j] = L;\n\t                        if (Math.abs(aj - alpha[j]) >= 10e-5) {\n\t                            alpha[i] = alpha[i] + Y[i]*Y[j]*(aj - alpha[j]);\n\t                            b1 = b - Ei - Y[i]*(alpha[i] - ai)*this.kernel(X[i],X[i], this.options.par) - Y[j]*(alpha[j] - aj)*this.kernel(X[i],X[j], this.options.par);\n\t                            b2 = b - Ej - Y[i]*(alpha[i] - ai)*this.kernel(X[i],X[j], this.options.par) - Y[j]*(alpha[j] - aj)*this.kernel(X[j],X[j], this.options.par);\n\t                            if ((alpha[i] < this.options.C) && (alpha[i] > 0))\n\t                                b = b1;\n\t                            else if ((alpha[j] < this.options.C) && (alpha[j] > 0))\n\t                                b = b2;\n\t                            else\n\t                                b = (b1 + b2) / 2;\n\t                            numChange += 1;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        if (numChange == 0)\n\t            iter += 1;\n\t        else\n\t            iter = 0;\n\t    }\n\t    this.b = b;\n\t    var s = X[0].length;\n\t    this.W = new Array(s);\n\t    for (var r = 0; r < s; r++) {\n\t        this.W[r] = 0;\n\t        for (var w = 0; w < m; w++)\n\t            this.W[r] += Y[w]*alpha[w]*X[w][r];\n\t    }\n\t    this.alphas = alpha.splice();\n\t};\n\t\n\t/**\n\t * Recreates a SVM based in the exported model\n\t * @param {{name: string, ,options: {json} ,alpha: Array<number>, b: number}} model\n\t * @returns {SVM}\n\t */\n\tSVM.load = function (model) {\n\t    if (model.name === 'SVM') {\n\t        var svm = new SVM(model.options);\n\t        svm.W = model.W.slice();\n\t        svm.b = model.b;\n\t        return svm;\n\t    } else {\n\t        throw new TypeError('expecting a SVM model');\n\t    }\n\t};\n\t\n\t/**\n\t * Let's have a JSON to recreate the model\n\t * @returns {{name: String(\"SVM\"), ,options: {json} ,alpha: Array<number>, b: number}}\n\t * name identifier, options to recreate model, the Lagrange multipliers and the\n\t * threshold of the objective function\n\t */\n\tSVM.prototype.export = function () {\n\t    var model = {\n\t        name: 'SVM'\n\t    };\n\t    model.options = this.options;\n\t    model.W = this.W;\n\t    model.b = this.b;\n\t    return model;\n\t};\n\t\n\t/**\n\t * Return the Lagrange multipliers\n\t * @returns {Array <number>}\n\t */\n\tSVM.prototype.getAlphas = function () {\n\t    return this.alphas.slice();\n\t};\n\t\n\t/**\n\t * Returns the threshold of the model function\n\t * @returns {number} threshold of the function\n\t */\n\tSVM.prototype.getThreshold = function () {\n\t    return this.b;\n\t};\n\t\n\t/**\n\t * Use the train model to make predictions\n\t * @param {Array} p - An array or a single dot to have the prediction\n\t * @returns {*} An array or a single {-1, 1} value of the prediction\n\t */\n\tSVM.prototype.predict = function (p) {\n\t    var ev;\n\t    if (Array.isArray(p) && (Array.isArray(p[0]) || (typeof p[0] === 'object'))) {\n\t        var ans = new Array(p.length);\n\t        for (var i = 0; i < ans.length; i++) {\n\t            ev = this.b;\n\t            for (var j = 0; j < this.W.length; j++)\n\t                ev += this.W[j]*p[j];\n\t            if (ev < 0)\n\t                ans[i] = -1;\n\t            else\n\t                ans[i] = 1;\n\t        }\n\t        return ans;\n\t    }\n\t    else {\n\t        ev = this.b;\n\t        for (var e = 0; e < this.W.length; e++)\n\t            ev += this.W[e]*p[e];\n\t        if (ev < 0)\n\t            return -1;\n\t        else\n\t            return 1;\n\t    }\n\t};\n\t\n\tmodule.exports = SVM;\n\n/***/ },\n/* 100 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Kernel function to return the dot product for different spaces\n\t * @param {Array <number>} x1 - input first vector\n\t * @param {Array <number>} x2 - input second vector\n\t * @param {string} func - the kind of transformation\n\t * @param {number} par - parameter used in the polynomial and the radial function\n\t * @return {number} calculus of the dot product using the function\n\t * */\n\tfunction kernel(x1,x2,func,par) {\n\t    return getKernel(func)(x1, x2, par);\n\t}\n\t\n\t/**\n\t * The dot product between the p1 and p2 vectors\n\t * @param {Array <number>} p1 - first vector to get dot product\n\t * @param {Array <number>} p2 - second vector to get dot product\n\t * @returns {number} dot product between the p1 and p2 vectors\n\t */\n\tfunction dot(p1, p2) {\n\t    var l = p1.length;\n\t    var prod = 0;\n\t\n\t    for (var i = 0; i < l; i++) {\n\t        prod += p1[i] * p2[i];\n\t    }\n\t\n\t    return prod;\n\t}\n\t\n\tfunction getKernel(func) {\n\t    func = (typeof func === 'undefined') ? 'lineal' : func;\n\t\n\t    switch(func) {\n\t        case 'lineal':\n\t            return kernelLineal;\n\t        case 'polynomial':\n\t            return kernelPolynomial;\n\t        case 'radial':\n\t            return kernelRadial;\n\t        default:\n\t            throw new TypeError('Function kernel undefined: ' + func);\n\t    }\n\t}\n\t\n\tfunction kernelLineal(x1,x2) {\n\t    return dot(x1,x2);\n\t}\n\t\n\tfunction kernelPolynomial(x1, x2, par) {\n\t    par = (typeof par === 'undefined') ? 2 : par;\n\t    return Math.pow((dot(x1, x2) + 1), par);\n\t}\n\t\n\tfunction kernelRadial(x1, x2, par) {\n\t    par = (typeof par === 'undefined') ? 2 : par;\n\t    var l = x1.length;\n\t    var rest = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        rest[i] = x1[i] - x2[i];\n\t    }\n\t    var norm = dot(rest, rest);\n\t    return Math.exp((norm)/(-2*par*par));\n\t}\n\t\n\tmodule.exports = {\n\t    kernel: kernel,\n\t    getKernel: getKernel,\n\t    lineal : kernelLineal,\n\t    polynomial : kernelPolynomial,\n\t    radial : kernelRadial\n\t};\n\n\n/***/ },\n/* 101 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(102);\n\n/***/ },\n/* 102 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = KNN;\n\t\n\tvar KDTree = __webpack_require__(103).kdTree;\n\tvar Distances = __webpack_require__(28);\n\t\n\t/**\n\t * K-Nearest neighboor constructor.\n\t *\n\t * @param reload - loading purposes.\n\t * @param model - loading purposes\n\t * @constructor\n\t */\n\tfunction KNN(reload, model) {\n\t    if(reload) {\n\t        this.kdtree = model.kdtree;\n\t        this.k = model.k;\n\t        this.classes = model.classes;\n\t    }\n\t}\n\t\n\t/**\n\t * Function that trains the KNN with the given trainingSet and trainingLabels.\n\t * The third argument is an object with the following options.\n\t *  * distance: that represent the distance function applied (default: euclidean)\n\t *  * k: the number of neighboors to take in count for classify (default: number of features + 1)\n\t *\n\t * @param trainingSet\n\t * @param trainingLabels\n\t * @param options\n\t */\n\tKNN.prototype.train = function (trainingSet, trainingLabels, options) {\n\t    if(options === undefined) options = {};\n\t    if(options.distance === undefined) options.distance = Distances.distance.euclidean;\n\t    if(options.k === undefined) options.k = trainingSet[0].length + 1;\n\t\n\t    var classes = 0;\n\t    var exist = new Array(1000);\n\t    var j = 0;\n\t    for(var i = 0; i < trainingLabels.length; ++i) {\n\t        if(exist.indexOf(trainingLabels[i]) === -1) {\n\t            classes++;\n\t            exist[j] = trainingLabels[i];\n\t            j++;\n\t        }\n\t    }\n\t\n\t    // copy dataset\n\t    var points = new Array(trainingSet.length);\n\t    for(i = 0; i < points.length; ++i) {\n\t        points[i] = trainingSet[i].slice();\n\t    }\n\t\n\t    this.features = trainingSet[0].length;\n\t    for(i = 0; i < trainingLabels.length; ++i) {\n\t        points[i].push(trainingLabels[i]);\n\t    }\n\t\n\t    var dimensions = new Array(trainingSet[0].length);\n\t    for(i = 0; i < dimensions.length; ++i) {\n\t        dimensions[i] = i;\n\t    }\n\t\n\t    this.kdtree = new KDTree(points, options.distance, dimensions);\n\t    this.k = options.k;\n\t    this.classes = classes;\n\t};\n\t\n\t/**\n\t * Function that returns the predictions given the dataset.\n\t * \n\t * @param dataset\n\t * @returns {Array}\n\t */\n\tKNN.prototype.predict = function (dataset) {\n\t    var predictions = new Array(dataset.length);\n\t    for(var i = 0; i < dataset.length; ++i) {\n\t        predictions[i] = this.getSinglePrediction(dataset[i]);\n\t    }\n\t\n\t    return predictions;\n\t};\n\t\n\t/**\n\t * function that returns a prediction for a single case.\n\t * @param currentCase\n\t * @returns {number}\n\t */\n\tKNN.prototype.getSinglePrediction = function (currentCase) {\n\t    var nearestPoints = this.kdtree.nearest(currentCase, this.k);\n\t    var pointsPerClass = new Array(this.classes);\n\t    var predictedClass = -1;\n\t    var maxPoints = -1;\n\t    var lastElement = nearestPoints[0][0].length - 1;\n\t\n\t    for(var i = 0; i < pointsPerClass.length; ++i) {\n\t        pointsPerClass[i] = 0;\n\t    }\n\t\n\t    for(i = 0; i < nearestPoints.length; ++i) {\n\t        var currentClass = nearestPoints[i][0][lastElement];\n\t        var currentPoints = ++pointsPerClass[currentClass];\n\t        if(currentPoints > maxPoints) {\n\t            predictedClass = currentClass;\n\t            maxPoints = currentPoints;\n\t        }\n\t    }\n\t\n\t    return predictedClass;\n\t};\n\t\n\t/**\n\t * function that returns a KNN classifier with the given model.\n\t *\n\t * @param model\n\t */\n\tKNN.load = function (model) {\n\t    if(model.modelName !== \"KNN\")\n\t        throw new RangeError(\"The given model is invalid!\");\n\t\n\t    return new KNN(true, model);\n\t};\n\t\n\t/**\n\t * function that exports the current KNN classifier.\n\t */\n\tKNN.prototype.export = function () {\n\t    return {\n\t        modelName: \"KNN\",\n\t        kdtree: this.kdtree,\n\t        k: this.k,\n\t        classes: this.classes\n\t    };\n\t};\n\n/***/ },\n/* 103 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t* k-d Tree JavaScript - V 1.01\n\t*\n\t* https://github.com/ubilabs/kd-tree-javascript\n\t*\n\t* @author Mircea Pricop <pricop@ubilabs.net>, 2012\n\t* @author Martin Kleppe <kleppe@ubilabs.net>, 2012\n\t* @author Ubilabs http://ubilabs.net, 2012\n\t* @license MIT License <http://www.opensource.org/licenses/mit-license.php>\n\t*/\n\t\n\t\n\tfunction Node(obj, dimension, parent) {\n\t    this.obj = obj;\n\t    this.left = null;\n\t    this.right = null;\n\t    this.parent = parent;\n\t    this.dimension = dimension;\n\t}\n\t\n\tfunction kdTree(points, metric, dimensions) {\n\t\n\t    var self = this;\n\t\n\t    function buildTree(points, depth, parent) {\n\t        var dim = depth % dimensions.length,\n\t            median,\n\t            node;\n\t\n\t        if (points.length === 0) {\n\t            return null;\n\t        }\n\t        if (points.length === 1) {\n\t            return new Node(points[0], dim, parent);\n\t        }\n\t\n\t        points.sort(function (a, b) {\n\t            return a[dimensions[dim]] - b[dimensions[dim]];\n\t        });\n\t\n\t        median = Math.floor(points.length / 2);\n\t        node = new Node(points[median], dim, parent);\n\t        node.left = buildTree(points.slice(0, median), depth + 1, node);\n\t        node.right = buildTree(points.slice(median + 1), depth + 1, node);\n\t\n\t        return node;\n\t    }\n\t\n\t    // Reloads a serialied tree\n\t    function loadTree (data) {\n\t        // Just need to restore the `parent` parameter\n\t        self.root = data;\n\t\n\t        function restoreParent (root) {\n\t            if (root.left) {\n\t                root.left.parent = root;\n\t                restoreParent(root.left);\n\t            }\n\t\n\t            if (root.right) {\n\t                root.right.parent = root;\n\t                restoreParent(root.right);\n\t            }\n\t        }\n\t\n\t        restoreParent(self.root);\n\t    }\n\t\n\t    // If points is not an array, assume we're loading a pre-built tree\n\t    if (!Array.isArray(points)) loadTree(points, metric, dimensions);\n\t    else this.root = buildTree(points, 0, null);\n\t\n\t    // Convert to a JSON serializable structure; this just requires removing\n\t    // the `parent` property\n\t    this.toJSON = function (src) {\n\t        if (!src) src = this.root;\n\t        var dest = new Node(src.obj, src.dimension, null);\n\t        if (src.left) dest.left = self.toJSON(src.left);\n\t        if (src.right) dest.right = self.toJSON(src.right);\n\t        return dest;\n\t    };\n\t\n\t    this.insert = function (point) {\n\t        function innerSearch(node, parent) {\n\t\n\t            if (node === null) {\n\t                return parent;\n\t            }\n\t\n\t            var dimension = dimensions[node.dimension];\n\t            if (point[dimension] < node.obj[dimension]) {\n\t                return innerSearch(node.left, node);\n\t            } else {\n\t                return innerSearch(node.right, node);\n\t            }\n\t        }\n\t\n\t        var insertPosition = innerSearch(this.root, null),\n\t            newNode,\n\t            dimension;\n\t\n\t        if (insertPosition === null) {\n\t            this.root = new Node(point, 0, null);\n\t            return;\n\t        }\n\t\n\t        newNode = new Node(point, (insertPosition.dimension + 1) % dimensions.length, insertPosition);\n\t        dimension = dimensions[insertPosition.dimension];\n\t\n\t        if (point[dimension] < insertPosition.obj[dimension]) {\n\t            insertPosition.left = newNode;\n\t        } else {\n\t            insertPosition.right = newNode;\n\t        }\n\t    };\n\t\n\t    this.remove = function (point) {\n\t        var node;\n\t\n\t        function nodeSearch(node) {\n\t            if (node === null) {\n\t                return null;\n\t            }\n\t\n\t            if (node.obj === point) {\n\t                return node;\n\t            }\n\t\n\t            var dimension = dimensions[node.dimension];\n\t\n\t            if (point[dimension] < node.obj[dimension]) {\n\t                return nodeSearch(node.left, node);\n\t            } else {\n\t                return nodeSearch(node.right, node);\n\t            }\n\t        }\n\t\n\t        function removeNode(node) {\n\t            var nextNode,\n\t                nextObj,\n\t                pDimension;\n\t\n\t            function findMin(node, dim) {\n\t                var dimension,\n\t                    own,\n\t                    left,\n\t                    right,\n\t                    min;\n\t\n\t                if (node === null) {\n\t                    return null;\n\t                }\n\t\n\t                dimension = dimensions[dim];\n\t\n\t                if (node.dimension === dim) {\n\t                    if (node.left !== null) {\n\t                        return findMin(node.left, dim);\n\t                    }\n\t                    return node;\n\t                }\n\t\n\t                own = node.obj[dimension];\n\t                left = findMin(node.left, dim);\n\t                right = findMin(node.right, dim);\n\t                min = node;\n\t\n\t                if (left !== null && left.obj[dimension] < own) {\n\t                    min = left;\n\t                }\n\t                if (right !== null && right.obj[dimension] < min.obj[dimension]) {\n\t                    min = right;\n\t                }\n\t                return min;\n\t            }\n\t\n\t            if (node.left === null && node.right === null) {\n\t                if (node.parent === null) {\n\t                    self.root = null;\n\t                    return;\n\t                }\n\t\n\t                pDimension = dimensions[node.parent.dimension];\n\t\n\t                if (node.obj[pDimension] < node.parent.obj[pDimension]) {\n\t                    node.parent.left = null;\n\t                } else {\n\t                    node.parent.right = null;\n\t                }\n\t                return;\n\t            }\n\t\n\t            // If the right subtree is not empty, swap with the minimum element on the\n\t            // node's dimension. If it is empty, we swap the left and right subtrees and\n\t            // do the same.\n\t            if (node.right !== null) {\n\t                nextNode = findMin(node.right, node.dimension);\n\t                nextObj = nextNode.obj;\n\t                removeNode(nextNode);\n\t                node.obj = nextObj;\n\t            } else {\n\t                nextNode = findMin(node.left, node.dimension);\n\t                nextObj = nextNode.obj;\n\t                removeNode(nextNode);\n\t                node.right = node.left;\n\t                node.left = null;\n\t                node.obj = nextObj;\n\t            }\n\t\n\t        }\n\t\n\t        node = nodeSearch(self.root);\n\t\n\t        if (node === null) { return; }\n\t\n\t        removeNode(node);\n\t    };\n\t\n\t    this.nearest = function (point, maxNodes, maxDistance) {\n\t        var i,\n\t            result,\n\t            bestNodes;\n\t\n\t        bestNodes = new BinaryHeap(\n\t            function (e) { return -e[1]; }\n\t        );\n\t\n\t        function nearestSearch(node) {\n\t            var bestChild,\n\t                dimension = dimensions[node.dimension],\n\t                ownDistance = metric(point, node.obj),\n\t                linearPoint = {},\n\t                linearDistance,\n\t                otherChild,\n\t                i;\n\t\n\t            function saveNode(node, distance) {\n\t                bestNodes.push([node, distance]);\n\t                if (bestNodes.size() > maxNodes) {\n\t                    bestNodes.pop();\n\t                }\n\t            }\n\t\n\t            for (i = 0; i < dimensions.length; i += 1) {\n\t                if (i === node.dimension) {\n\t                    linearPoint[dimensions[i]] = point[dimensions[i]];\n\t                } else {\n\t                    linearPoint[dimensions[i]] = node.obj[dimensions[i]];\n\t                }\n\t            }\n\t\n\t            linearDistance = metric(linearPoint, node.obj);\n\t\n\t            if (node.right === null && node.left === null) {\n\t                if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {\n\t                    saveNode(node, ownDistance);\n\t                }\n\t                return;\n\t            }\n\t\n\t            if (node.right === null) {\n\t                bestChild = node.left;\n\t            } else if (node.left === null) {\n\t                bestChild = node.right;\n\t            } else {\n\t                if (point[dimension] < node.obj[dimension]) {\n\t                    bestChild = node.left;\n\t                } else {\n\t                    bestChild = node.right;\n\t                }\n\t            }\n\t\n\t            nearestSearch(bestChild);\n\t\n\t            if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {\n\t                saveNode(node, ownDistance);\n\t            }\n\t\n\t            if (bestNodes.size() < maxNodes || Math.abs(linearDistance) < bestNodes.peek()[1]) {\n\t                if (bestChild === node.left) {\n\t                    otherChild = node.right;\n\t                } else {\n\t                    otherChild = node.left;\n\t                }\n\t                if (otherChild !== null) {\n\t                    nearestSearch(otherChild);\n\t                }\n\t            }\n\t        }\n\t\n\t        if (maxDistance) {\n\t            for (i = 0; i < maxNodes; i += 1) {\n\t                bestNodes.push([null, maxDistance]);\n\t            }\n\t        }\n\t\n\t        if(self.root)\n\t            nearestSearch(self.root);\n\t\n\t        result = [];\n\t\n\t        for (i = 0; i < Math.min(maxNodes, bestNodes.content.length); i += 1) {\n\t            if (bestNodes.content[i][0]) {\n\t                result.push([bestNodes.content[i][0].obj, bestNodes.content[i][1]]);\n\t            }\n\t        }\n\t        return result;\n\t    };\n\t\n\t    this.balanceFactor = function () {\n\t        function height(node) {\n\t            if (node === null) {\n\t                return 0;\n\t            }\n\t            return Math.max(height(node.left), height(node.right)) + 1;\n\t        }\n\t\n\t        function count(node) {\n\t            if (node === null) {\n\t                return 0;\n\t            }\n\t            return count(node.left) + count(node.right) + 1;\n\t        }\n\t\n\t        return height(self.root) / (Math.log(count(self.root)) / Math.log(2));\n\t    };\n\t}\n\t\n\t// Binary heap implementation from:\n\t// http://eloquentjavascript.net/appendix2.html\n\t\n\tfunction BinaryHeap(scoreFunction){\n\t    this.content = [];\n\t    this.scoreFunction = scoreFunction;\n\t}\n\t\n\tBinaryHeap.prototype = {\n\t    push: function(element) {\n\t        // Add the new element to the end of the array.\n\t        this.content.push(element);\n\t        // Allow it to bubble up.\n\t        this.bubbleUp(this.content.length - 1);\n\t    },\n\t\n\t    pop: function() {\n\t        // Store the first element so we can return it later.\n\t        var result = this.content[0];\n\t        // Get the element at the end of the array.\n\t        var end = this.content.pop();\n\t        // If there are any elements left, put the end element at the\n\t        // start, and let it sink down.\n\t        if (this.content.length > 0) {\n\t            this.content[0] = end;\n\t            this.sinkDown(0);\n\t        }\n\t        return result;\n\t    },\n\t\n\t    peek: function() {\n\t        return this.content[0];\n\t    },\n\t\n\t    remove: function(node) {\n\t        var len = this.content.length;\n\t        // To remove a value, we must search through the array to find\n\t        // it.\n\t        for (var i = 0; i < len; i++) {\n\t            if (this.content[i] == node) {\n\t                // When it is found, the process seen in 'pop' is repeated\n\t                // to fill up the hole.\n\t                var end = this.content.pop();\n\t                if (i != len - 1) {\n\t                    this.content[i] = end;\n\t                    if (this.scoreFunction(end) < this.scoreFunction(node))\n\t                        this.bubbleUp(i);\n\t                    else\n\t                        this.sinkDown(i);\n\t                }\n\t                return;\n\t            }\n\t        }\n\t        throw new Error(\"Node not found.\");\n\t    },\n\t\n\t    size: function() {\n\t        return this.content.length;\n\t    },\n\t\n\t    bubbleUp: function(n) {\n\t        // Fetch the element that has to be moved.\n\t        var element = this.content[n];\n\t        // When at 0, an element can not go up any further.\n\t        while (n > 0) {\n\t            // Compute the parent element's index, and fetch it.\n\t            var parentN = Math.floor((n + 1) / 2) - 1,\n\t                parent = this.content[parentN];\n\t            // Swap the elements if the parent is greater.\n\t            if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n\t                this.content[parentN] = element;\n\t                this.content[n] = parent;\n\t                // Update 'n' to continue at the new position.\n\t                n = parentN;\n\t            }\n\t            // Found a parent that is less, no need to move it further.\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t    },\n\t\n\t    sinkDown: function(n) {\n\t        // Look up the target element and its score.\n\t        var length = this.content.length,\n\t            element = this.content[n],\n\t            elemScore = this.scoreFunction(element);\n\t\n\t        while(true) {\n\t            // Compute the indices of the child elements.\n\t            var child2N = (n + 1) * 2, child1N = child2N - 1;\n\t            // This is used to store the new position of the element,\n\t            // if any.\n\t            var swap = null;\n\t            // If the first child exists (is inside the array)...\n\t            if (child1N < length) {\n\t                // Look it up and compute its score.\n\t                var child1 = this.content[child1N],\n\t                    child1Score = this.scoreFunction(child1);\n\t                // If the score is less than our element's, we need to swap.\n\t                if (child1Score < elemScore)\n\t                    swap = child1N;\n\t            }\n\t            // Do the same checks for the other child.\n\t            if (child2N < length) {\n\t                var child2 = this.content[child2N],\n\t                    child2Score = this.scoreFunction(child2);\n\t                if (child2Score < (swap == null ? elemScore : child1Score)){\n\t                    swap = child2N;\n\t                }\n\t            }\n\t\n\t            // If the element needs to be moved, swap it, and continue.\n\t            if (swap != null) {\n\t                this.content[n] = this.content[swap];\n\t                this.content[swap] = element;\n\t                n = swap;\n\t            }\n\t            // Otherwise, we are done.\n\t            else {\n\t                break;\n\t            }\n\t        }\n\t    }\n\t};\n\t\n\tthis.kdTree = kdTree;\n\t\n\texports.kdTree = kdTree;\n\texports.BinaryHeap = BinaryHeap;\n\n\n/***/ },\n/* 104 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = exports = __webpack_require__(105).NaiveBayes;\n\texports.separateClasses = __webpack_require__(105).separateClasses;\n\n/***/ },\n/* 105 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(106);\n\tvar Stat = __webpack_require__(5);\n\t\n\tmodule.exports.NaiveBayes = NaiveBayes;\n\tmodule.exports.separateClasses = separateClasses;\n\t\n\t/**\n\t * Constructor for the Naive Bayes classifier, the parameters here is just for loading purposes.\n\t *\n\t * @param reload\n\t * @param model\n\t * @constructor\n\t */\n\tfunction NaiveBayes(reload, model) {\n\t    if(reload) {\n\t        this.means = model.means;\n\t        this.calculateProbabilities = model.calculateProbabilities;\n\t    }\n\t}\n\t\n\t/**\n\t * Function that trains the classifier with a matrix that represents the training set and an array that\n\t * represents the label of each row in the training set. the labels must be numbers between 0 to n-1 where\n\t * n represents the number of classes.\n\t *\n\t * WARNING: in the case that one class, all the cases in one or more features have the same value, the\n\t * Naive Bayes classifier will not work well.\n\t * @param trainingSet\n\t * @param trainingLabels\n\t */\n\tNaiveBayes.prototype.train = function (trainingSet, trainingLabels) {\n\t    var C1 = Math.sqrt(2*Math.PI); // constant to precalculate the squared root\n\t    if(!Matrix.isMatrix(trainingSet)) var X = Matrix(trainingSet);\n\t    else X = trainingSet.clone();\n\t\n\t    if(X.rows !== trainingLabels.length)\n\t        throw new RangeError(\"the size of the training set and the training labels must be the same.\");\n\t\n\t    var separatedClasses = separateClasses(trainingSet, trainingLabels);\n\t    var calculateProbabilities = new Array(separatedClasses.length);\n\t    this.means = new Array(separatedClasses.length);\n\t    for(var i = 0; i < separatedClasses.length; ++i) {\n\t        var means = Stat.matrix.mean(separatedClasses[i]);\n\t        var std = Stat.matrix.standardDeviation(separatedClasses[i], means);\n\t\n\t        var logPriorProbability = Math.log(separatedClasses[i].rows / X.rows);\n\t        calculateProbabilities[i] = new Array(means.length + 1);\n\t\n\t        calculateProbabilities[i][0] = logPriorProbability;\n\t        for(var j = 1; j < means.length + 1; ++j) {\n\t            var currentStd = std[j - 1];\n\t            calculateProbabilities[i][j] = [(1 / (C1 * currentStd)), -2*currentStd*currentStd];\n\t        }\n\t\n\t        this.means[i] = means;\n\t    }\n\t\n\t    this.calculateProbabilities = calculateProbabilities;\n\t};\n\t\n\t/**\n\t * function that predicts each row of the dataset (must be a matrix).\n\t *\n\t * @param dataset\n\t * @returns {Array}\n\t */\n\tNaiveBayes.prototype.predict = function (dataset) {\n\t    if(dataset[0].length === this.calculateProbabilities[0].length)\n\t        throw new RangeError('the dataset must have the same features as the training set');\n\t\n\t    var predictions = new Array(dataset.length);\n\t\n\t    for(var i = 0; i < predictions.length; ++i) {\n\t        predictions[i] = getCurrentClass(dataset[i], this.means, this.calculateProbabilities);\n\t    }\n\t\n\t    return predictions;\n\t};\n\t\n\t/**\n\t * Function the retrieves a prediction with one case.\n\t *\n\t * @param currentCase\n\t * @param mean - Precalculated means of each class trained\n\t * @param classes - Precalculated value of each class (Prior probability and probability function of each feature)\n\t * @returns {number}\n\t */\n\tfunction getCurrentClass(currentCase, mean, classes) {\n\t    var maxProbability = 0;\n\t    var predictedClass = -1;\n\t\n\t    // going through all precalculated values for the classes\n\t    for(var i = 0; i < classes.length; ++i) {\n\t        var currentProbability = classes[i][0]; // initialize with the prior probability\n\t        for(var j = 1; j < classes[0][1].length + 1; ++j) {\n\t            currentProbability += calculateLogProbability(currentCase[j - 1], mean[i][j - 1], classes[i][j][0], classes[i][j][1]);\n\t        }\n\t\n\t        currentProbability = Math.exp(currentProbability);\n\t        if(currentProbability > maxProbability) {\n\t            maxProbability = currentProbability;\n\t            predictedClass = i;\n\t        }\n\t    }\n\t\n\t    return predictedClass;\n\t}\n\t\n\t/**\n\t * Function that export the NaiveBayes model.\n\t * @returns {{modelName: string, means: *, calculateProbabilities: *}}\n\t */\n\tNaiveBayes.prototype.export = function () {\n\t    return {\n\t        modelName: \"NaiveBayes\",\n\t        means: this.means,\n\t        calculateProbabilities: this.calculateProbabilities\n\t    };\n\t};\n\t\n\t/**\n\t * Function that create a Naive Bayes classifier with the given model.\n\t * @param model\n\t * @returns {NaiveBayes}\n\t */\n\tNaiveBayes.load = function (model) {\n\t    if(model.modelName !== 'NaiveBayes')\n\t        throw new RangeError(\"The given model is invalid!\");\n\t\n\t    return new NaiveBayes(true, model);\n\t};\n\t\n\t/**\n\t * function that retrieves the probability of the feature given the class.\n\t * @param value - value of the feature.\n\t * @param mean - mean of the feature for the given class.\n\t * @param C1 - precalculated value of (1 / (sqrt(2*pi) * std)).\n\t * @param C2 - precalculated value of (2 * std^2) for the denominator of the exponential.\n\t * @returns {number}\n\t */\n\tfunction calculateLogProbability(value, mean, C1, C2) {\n\t    var value = value - mean;\n\t    return Math.log(C1 * Math.exp((value * value) / C2))\n\t}\n\t\n\t/**\n\t * Function that retuns an array of matrices of the cases that belong to each class.\n\t * @param X - dataset\n\t * @param y - predictions\n\t * @returns {Array}\n\t */\n\tfunction separateClasses(X, y) {\n\t    var features = X.columns;\n\t\n\t    var classes = 0;\n\t    var totalPerClasses = new Array(100); // max upperbound of classes\n\t    for (var i = 0; i < y.length; i++) {\n\t        if(totalPerClasses[y[i]] === undefined) {\n\t            totalPerClasses[y[i]] = 0;\n\t            classes++;\n\t        }\n\t        totalPerClasses[y[i]]++;\n\t    }\n\t    var separatedClasses = new Array(classes);\n\t    var currentIndex = new Array(classes);\n\t    for(i = 0; i < classes; ++i) {\n\t        separatedClasses[i] = new Matrix(totalPerClasses[i], features);\n\t        currentIndex[i] = 0;\n\t    }\n\t    for(i = 0; i < X.rows; ++i) {\n\t        separatedClasses[y[i]].setRow(currentIndex[y[i]], X.getRow(i));\n\t        currentIndex[y[i]]++;\n\t    }\n\t    return separatedClasses;\n\t}\n\n/***/ },\n/* 106 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(107);\n\tmodule.exports.Decompositions = module.exports.DC = __webpack_require__(108);\n\n\n/***/ },\n/* 107 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar Asplice = Array.prototype.splice,\n\t    Aconcat = Array.prototype.concat;\n\t\n\t// For performance : http://jsperf.com/clone-array-slice-vs-while-vs-for\n\tfunction slice(arr) {\n\t    var i = 0,\n\t        ii = arr.length,\n\t        result = new Array(ii);\n\t    for (; i < ii; i++) {\n\t        result[i] = arr[i];\n\t    }\n\t    return result;\n\t}\n\t\n\t/**\n\t * Real matrix.\n\t * @constructor\n\t * @param {number|Array} nRows - Number of rows of the new matrix or a 2D array containing the data.\n\t * @param {number|boolean} [nColumns] - Number of columns of the new matrix or a boolean specifying if the input array should be cloned\n\t */\n\tfunction Matrix(nRows, nColumns) {\n\t    var i = 0, rows, columns, matrix, newInstance;\n\t    if (Array.isArray(nRows)) {\n\t        newInstance = nColumns;\n\t        matrix = newInstance ? slice(nRows) : nRows;\n\t        nRows = matrix.length;\n\t        nColumns = matrix[0].length;\n\t        if (typeof nColumns === 'undefined') {\n\t            throw new TypeError('Data must be a 2D array');\n\t        }\n\t        if (nRows > 0 && nColumns > 0) {\n\t            for (; i < nRows; i++) {\n\t                if (matrix[i].length !== nColumns) {\n\t                    throw new RangeError('Inconsistent array dimensions');\n\t                } else if (newInstance) {\n\t                    matrix[i] = slice(matrix[i]);\n\t                }\n\t            }\n\t        } else {\n\t            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n\t        }\n\t    } else if (typeof nRows === 'number') { // Create empty matrix\n\t        if (nRows > 0 && nColumns > 0) {\n\t            matrix = new Array(nRows);\n\t            for (; i < nRows; i++) {\n\t                matrix[i] = new Array(nColumns);\n\t            }\n\t        } else {\n\t            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n\t        }\n\t    } else {\n\t        throw new TypeError('Invalid arguments');\n\t    }\n\t\n\t    Object.defineProperty(matrix, 'rows', {writable: true, value: nRows});\n\t    Object.defineProperty(matrix, 'columns', {writable: true, value: nColumns});\n\t\n\t    matrix.__proto__ = Matrix.prototype;\n\t\n\t    return matrix;\n\t}\n\t\n\t/**\n\t * Constructs a Matrix with the chosen dimensions from a 1D array.\n\t * @param {number} newRows - Number of rows\n\t * @param {number} newColumns - Number of columns\n\t * @param {Array} newData - A 1D array containing data for the matrix\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.from1DArray = function from1DArray(newRows, newColumns, newData) {\n\t    var length, data, i = 0;\n\t\n\t    length = newRows * newColumns;\n\t    if (length !== newData.length)\n\t        throw new RangeError('Data length does not match given dimensions');\n\t\n\t    data = new Array(newRows);\n\t    for (; i < newRows; i++) {\n\t        data[i] = newData.slice(i * newColumns, (i + 1) * newColumns);\n\t    }\n\t    return new Matrix(data);\n\t};\n\t\n\t/**\n\t * Creates a row vector, a matrix with only one row.\n\t * @param {Array} newData - A 1D array containing data for the vector\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.rowVector = function rowVector(newData) {\n\t    return new Matrix([newData]);\n\t};\n\t\n\t/**\n\t * Creates a column vector, a matrix with only one column.\n\t * @param {Array} newData - A 1D array containing data for the vector\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.columnVector = function columnVector(newData) {\n\t    var l = newData.length, vector = new Array(l);\n\t    for (var i = 0; i < l; i++)\n\t        vector[i] = [newData[i]];\n\t    return new Matrix(vector);\n\t};\n\t\n\t/**\n\t * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.empty = function empty(rows, columns) {\n\t    return new Matrix(rows, columns);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be set to zero.\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.zeros = function zeros(rows, columns) {\n\t    return Matrix.empty(rows, columns).fill(0);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be set to one.\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.ones = function ones(rows, columns) {\n\t    return Matrix.empty(rows, columns).fill(1);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be randomly set using Math.random().\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} The new matrix\n\t */\n\tMatrix.rand = function rand(rows, columns) {\n\t    var matrix = Matrix.empty(rows, columns);\n\t    for (var i = 0, ii = matrix.rows; i < ii; i++) {\n\t        for (var j = 0, jj = matrix.columns; j < jj; j++) {\n\t            matrix[i][j] = Math.random();\n\t        }\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and other will be 0.\n\t * @param {number} n - Number of rows and columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.eye = function eye(n) {\n\t    var matrix = Matrix.zeros(n, n), l = matrix.rows;\n\t    for (var i = 0; i < l; i++) {\n\t        matrix[i][i] = 1;\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates a diagonal matrix based on the given array.\n\t * @param {Array} data - Array containing the data for the diagonal\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.diag = function diag(data) {\n\t    var l = data.length, matrix = Matrix.zeros(l, l);\n\t    for (var i = 0; i < l; i++) {\n\t        matrix[i][i] = data[i];\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates an array of indices between two values\n\t * @param {number} from\n\t * @param {number} to\n\t * @returns {Array}\n\t */\n\tMatrix.indices = function indices(from, to) {\n\t    var vector = new Array(to - from);\n\t    for (var i = 0; i < vector.length; i++)\n\t        vector[i] = from++;\n\t    return vector;\n\t};\n\t\n\t// TODO DOC\n\tMatrix.stack = function stack(arg1) {\n\t    var i, j, k;\n\t    if (Matrix.isMatrix(arg1)) {\n\t        var rows = 0,\n\t            cols = 0;\n\t        for (i = 0; i < arguments.length; i++) {\n\t            rows += arguments[i].rows;\n\t            if (arguments[i].columns > cols)\n\t                cols = arguments[i].columns;\n\t        }\n\t\n\t        var r = Matrix.zeros(rows, cols);\n\t        var c = 0;\n\t        for (i = 0; i < arguments.length; i++) {\n\t            var current = arguments[i];\n\t            for (j = 0; j < current.rows; j++) {\n\t                for (k = 0; k < current.columns; k++)\n\t                    r[c][k] = current[j][k];\n\t                c++;\n\t            }\n\t        }\n\t        return r;\n\t    }\n\t    else if (Array.isArray(arg1)) {\n\t        var matrix = Matrix.empty(arguments.length, arg1.length);\n\t        for (i = 0; i < arguments.length; i++)\n\t            matrix.setRow(i, arguments[i]);\n\t        return matrix;\n\t    }\n\t};\n\t\n\t// TODO DOC\n\tMatrix.expand = function expand(base, count) {\n\t    var expansion = [];\n\t    for (var i = 0; i < count.length; i++)\n\t        for (var j = 0; j < count[i]; j++)\n\t            expansion.push(base[i]);\n\t    return new Matrix(expansion);\n\t};\n\t\n\t/**\n\t * Check that the provided value is a Matrix and tries to instantiate one if not\n\t * @param value - The value to check\n\t * @returns {Matrix}\n\t * @throws {TypeError}\n\t */\n\tMatrix.checkMatrix = function checkMatrix(value) {\n\t    if (!value) {\n\t        throw new TypeError('Argument has to be a matrix');\n\t    }\n\t    if (value.klass !== 'Matrix') {\n\t        value = new Matrix(value);\n\t    }\n\t    return value;\n\t};\n\t\n\t/**\n\t * Returns true if the argument is a Matrix, false otherwise\n\t * @param value - The value to check\n\t * @returns {boolean}\n\t */\n\tMatrix.isMatrix = function isMatrix(value) {\n\t    return value ? value.klass === 'Matrix' : false;\n\t};\n\t\n\t/**\n\t * @property {string} - The name of this class.\n\t */\n\tObject.defineProperty(Matrix.prototype, 'klass', {\n\t    get: function klass() {\n\t        return 'Matrix';\n\t    }\n\t});\n\t\n\t/**\n\t * @property {number} - The number of elements in the matrix.\n\t */\n\tObject.defineProperty(Matrix.prototype, 'size', {\n\t    get: function size() {\n\t        return this.rows * this.columns;\n\t    }\n\t});\n\t\n\t/**\n\t * @private\n\t * Internal check that a row index is not out of bounds\n\t * @param {number} index\n\t */\n\tMatrix.prototype.checkRowIndex = function checkRowIndex(index) {\n\t    if (index < 0 || index > this.rows - 1)\n\t        throw new RangeError('Row index out of range.');\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that a column index is not out of bounds\n\t * @param {number} index\n\t */\n\tMatrix.prototype.checkColumnIndex = function checkColumnIndex(index) {\n\t    if (index < 0 || index > this.columns - 1)\n\t        throw new RangeError('Column index out of range.');\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that two matrices have the same dimensions\n\t * @param {Matrix} otherMatrix\n\t */\n\tMatrix.prototype.checkDimensions = function checkDimensions(otherMatrix) {\n\t    if ((this.rows !== otherMatrix.rows) || (this.columns !== otherMatrix.columns))\n\t        throw new RangeError('Matrices dimensions must be equal.');\n\t};\n\t\n\t/**\n\t * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n\t * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.apply = function apply(callback) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            callback.call(this, i, j);\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Creates an exact and independent copy of the matrix\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.clone = function clone() {\n\t    return new Matrix(this.to2DArray());\n\t};\n\t\n\t/**\n\t * Returns a new 1D array filled row by row with the matrix values\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.to1DArray = function to1DArray() {\n\t    return Aconcat.apply([], this);\n\t};\n\t\n\t/**\n\t * Returns a 2D array containing a copy of the data\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.to2DArray = function to2DArray() {\n\t    var l = this.rows, copy = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        copy[i] = slice(this[i]);\n\t    }\n\t    return copy;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one row\n\t */\n\tMatrix.prototype.isRowVector = function isRowVector() {\n\t    return this.rows === 1;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one column\n\t */\n\tMatrix.prototype.isColumnVector = function isColumnVector() {\n\t    return this.columns === 1;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one row or one column\n\t */\n\tMatrix.prototype.isVector = function isVector() {\n\t    return (this.rows === 1) || (this.columns === 1);\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has the same number of rows and columns\n\t */\n\tMatrix.prototype.isSquare = function isSquare() {\n\t    return this.rows === this.columns;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n\t */\n\tMatrix.prototype.isSymmetric = function isSymmetric() {\n\t    if (this.isSquare()) {\n\t        var l = this.rows;\n\t        for (var i = 0; i < l; i++) {\n\t            for (var j = 0; j <= i; j++) {\n\t                if (this[i][j] !== this[j][i]) {\n\t                    return false;\n\t                }\n\t            }\n\t        }\n\t        return true;\n\t    }\n\t    return false;\n\t};\n\t\n\t/**\n\t * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n\t * @param {number} rowIndex - Index of the row\n\t * @param {number} columnIndex - Index of the column\n\t * @param {number} value - The new value for the element\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.set = function set(rowIndex, columnIndex, value) {\n\t    this[rowIndex][columnIndex] = value;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n\t * @param {number} rowIndex - Index of the row\n\t * @param {number} columnIndex - Index of the column\n\t * @returns {number}\n\t */\n\tMatrix.prototype.get = function get(rowIndex, columnIndex) {\n\t    return this[rowIndex][columnIndex];\n\t};\n\t\n\t/**\n\t * Fills the matrix with a given value. All elements will be set to this value.\n\t * @param {number} value - New value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.fill = function fill(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] = value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Negates the matrix. All elements will be multiplied by (-1)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.neg = function neg() {\n\t    return this.mulS(-1);\n\t};\n\t\n\t/**\n\t * Adds a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.add = function add(value) {\n\t    if (typeof value === 'number')\n\t        return this.addS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.addM(value);\n\t};\n\t\n\t/**\n\t * Adds a scalar to each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addS = function addS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds the value of each element of matrix to the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addM = function addM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sub = function sub(value) {\n\t    if (typeof value === 'number')\n\t        return this.subS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.subM(value);\n\t};\n\t\n\t/**\n\t * Subtracts a scalar from each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subS = function subS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the value of each element of matrix from the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subM = function subM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mul = function mul(value) {\n\t    if (typeof value === 'number')\n\t        return this.mulS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.mulM(value);\n\t};\n\t\n\t/**\n\t * Multiplies a scalar with each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulS = function mulS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the value of each element of matrix with the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulM = function mulM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides by a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.div = function div(value) {\n\t    if (typeof value === 'number')\n\t        return this.divS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.divM(value);\n\t};\n\t\n\t/**\n\t * Divides each element of the matrix by a scalar\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divS = function divS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides each element of this by the corresponding element of matrix\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divM = function divM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns a new array from the given row index\n\t * @param {number} index - Row index\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.getRow = function getRow(index) {\n\t    this.checkRowIndex(index);\n\t    return slice(this[index]);\n\t};\n\t\n\t/**\n\t * Returns a new row vector from the given row index\n\t * @param {number} index - Row index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.getRowVector = function getRowVector(index) {\n\t    return Matrix.rowVector(this.getRow(index));\n\t};\n\t\n\t/**\n\t * Sets a row at the given index\n\t * @param {number} index - Row index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.setRow = function setRow(index, array) {\n\t    this.checkRowIndex(index);\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    if (array.length !== this.columns)\n\t        throw new RangeError('Invalid row size');\n\t    this[index] = slice(array);\n\t    return this;\n\t};\n\t\n\t/**\n\t * Removes a row from the given index\n\t * @param {number} index - Row index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.removeRow = function removeRow(index) {\n\t    this.checkRowIndex(index);\n\t    if (this.rows === 1)\n\t        throw new RangeError('A matrix cannot have less than one row');\n\t    Asplice.call(this, index, 1);\n\t    this.rows -= 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds a row at the given index\n\t * @param {number} [index = this.rows] - Row index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addRow = function addRow(index, array) {\n\t    if (typeof array === 'undefined') {\n\t        array = index;\n\t        index = this.rows;\n\t    }\n\t    if (index < 0 || index > this.rows)\n\t        throw new RangeError('Row index out of range.');\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    if (array.length !== this.columns)\n\t        throw new RangeError('Invalid row size');\n\t    Asplice.call(this, index, 0, slice(array));\n\t    this.rows += 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Swaps two rows\n\t * @param {number} row1 - First row index\n\t * @param {number} row2 - Second row index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.swapRows = function swapRows(row1, row2) {\n\t    this.checkRowIndex(row1);\n\t    this.checkRowIndex(row2);\n\t    var temp = this[row1];\n\t    this[row1] = this[row2];\n\t    this[row2] = temp;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns a new array from the given column index\n\t * @param {number} index - Column index\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.getColumn = function getColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var l = this.rows, column = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        column[i] = this[i][index];\n\t    }\n\t    return column;\n\t};\n\t\n\t/**\n\t * Returns a new column vector from the given column index\n\t * @param {number} index - Column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.getColumnVector = function getColumnVector(index) {\n\t    return Matrix.columnVector(this.getColumn(index));\n\t};\n\t\n\t/**\n\t * Sets a column at the given index\n\t * @param {number} index - Column index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.setColumn = function setColumn(index, array) {\n\t    this.checkColumnIndex(index);\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    var l = this.rows;\n\t    if (array.length !== l)\n\t        throw new RangeError('Invalid column size');\n\t    for (var i = 0; i < l; i++) {\n\t        this[i][index] = array[i];\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Removes a column from the given index\n\t * @param {number} index - Column index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.removeColumn = function removeColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    if (this.columns === 1)\n\t        throw new RangeError('A matrix cannot have less than one column');\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        this[i].splice(index, 1);\n\t    }\n\t    this.columns -= 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds a column at the given index\n\t * @param {number} [index = this.columns] - Column index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addColumn = function addColumn(index, array) {\n\t    if (typeof array === 'undefined') {\n\t        array = index;\n\t        index = this.columns;\n\t    }\n\t    if (index < 0 || index > this.columns)\n\t        throw new RangeError('Column index out of range.');\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    var l = this.rows;\n\t    if (array.length !== l)\n\t        throw new RangeError('Invalid column size');\n\t    for (var i = 0; i < l; i++) {\n\t        this[i].splice(index, 0, array[i]);\n\t    }\n\t    this.columns += 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Swaps two columns\n\t * @param {number} column1 - First column index\n\t * @param {number} column2 - Second column index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.swapColumns = function swapColumns(column1, column2) {\n\t    this.checkRowIndex(column1);\n\t    this.checkRowIndex(column2);\n\t    var l = this.rows, temp, row;\n\t    for (var i = 0; i < l; i++) {\n\t        row = this[i];\n\t        temp = row[column1];\n\t        row[column1] = row[column2];\n\t        row[column2] = temp;\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that the provided vector is an array with the right length\n\t * @param {Array|Matrix} vector\n\t * @returns {Array}\n\t * @throws {RangeError}\n\t */\n\tMatrix.prototype.checkRowVector = function checkRowVector(vector) {\n\t    if (Matrix.isMatrix(vector))\n\t        vector = vector.to1DArray();\n\t    if (vector.length !== this.columns)\n\t        throw new RangeError('vector size must be the same as the number of columns');\n\t    return vector;\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that the provided vector is an array with the right length\n\t * @param {Array|Matrix} vector\n\t * @returns {Array}\n\t * @throws {RangeError}\n\t */\n\tMatrix.prototype.checkColumnVector = function checkColumnVector(vector) {\n\t    if (Matrix.isMatrix(vector))\n\t        vector = vector.to1DArray();\n\t    if (vector.length !== this.rows)\n\t        throw new RangeError('vector size must be the same as the number of rows');\n\t    return vector;\n\t};\n\t\n\t/**\n\t * Adds the values of a vector to each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addRowVector = function addRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the values of a vector from each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subRowVector = function subRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a vector with each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulRowVector = function mulRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides the values of each row by those of a vector\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divRowVector = function divRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds the values of a vector to each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addColumnVector = function addColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the values of a vector from each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subColumnVector = function subColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a vector with each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulColumnVector = function mulColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides the values of each column by those of a vector\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divColumnVector = function divColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a row with a scalar\n\t * @param {number} index - Row index\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulRow = function mulRow(index, value) {\n\t    this.checkRowIndex(index);\n\t    var i = 0, l = this.columns;\n\t    for (; i < l; i++) {\n\t        this[index][i] *= value;\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a column with a scalar\n\t * @param {number} index - Column index\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulColumn = function mulColumn(index, value) {\n\t    this.checkColumnIndex(index);\n\t    var i = 0, l = this.rows;\n\t    for (; i < l; i++) {\n\t        this[i][index] *= value;\n\t    }\n\t};\n\t\n\t/**\n\t * A matrix index\n\t * @typedef {Object} MatrixIndex\n\t * @property {number} row\n\t * @property {number} column\n\t */\n\t\n\t/**\n\t * Returns the maximum value of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.max = function max() {\n\t    var v = -Infinity;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] > v) {\n\t                v = this[i][j];\n\t            }\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxIndex = function maxIndex() {\n\t    var v = -Infinity;\n\t    var idx = {};\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] > v) {\n\t                v = this[i][j];\n\t                idx.row = i;\n\t                idx.column = j;\n\t            }\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.min = function min() {\n\t    var v = Infinity;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] < v) {\n\t                v = this[i][j];\n\t            }\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the minimum value\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minIndex = function minIndex() {\n\t    var v = Infinity;\n\t    var idx = {};\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] < v) {\n\t                v = this[i][j];\n\t                idx.row = i;\n\t                idx.column = j;\n\t            }\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.maxRow = function maxRow(index) {\n\t    this.checkRowIndex(index);\n\t    var v = -Infinity;\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] > v) {\n\t            v = this[index][i];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxRowIndex = function maxRowIndex(index) {\n\t    this.checkRowIndex(index);\n\t    var v = -Infinity;\n\t    var idx = {\n\t            row: index\n\t        };\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] > v) {\n\t            v = this[index][i];\n\t            idx.column = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of one row\n\t * @param {number} index - Row index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.minRow = function minRow(index) {\n\t    this.checkRowIndex(index);\n\t    var v = Infinity;\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] < v) {\n\t            v = this[index][i];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minRowIndex = function minRowIndex(index) {\n\t    this.checkRowIndex(index);\n\t    var v = Infinity;\n\t    var idx = {\n\t        row: index,\n\t        column: 0\n\t    };\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] < v) {\n\t            v = this[index][i];\n\t            idx.column = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the maximum value of one column\n\t * @param {number} index - Column index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.maxColumn = function maxColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = -Infinity;\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] > v) {\n\t            v = this[i][index];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one column\n\t * @param {number} index - Column index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxColumnIndex = function maxColumnIndex(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = -Infinity;\n\t    var idx = {\n\t        row: 0,\n\t        column: index\n\t    };\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] > v) {\n\t            v = this[i][index];\n\t            idx.row = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of one column\n\t * @param {number} index - Column index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.minColumn = function minColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = Infinity;\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] < v) {\n\t            v = this[i][index];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the minimum value of one column\n\t * @param {number} index - Column index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minColumnIndex = function minColumnIndex(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = Infinity;\n\t    var idx = {\n\t        row: 0,\n\t        column: index\n\t    };\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] < v) {\n\t            v = this[i][index];\n\t            idx.row = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns an array containing the diagonal values of the matrix\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.diag = function diag() {\n\t    if (!this.isSquare())\n\t        throw new TypeError('Only square matrices have a diagonal.');\n\t    var diag = new Array(this.rows);\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        diag[i] = this[i][i];\n\t    }\n\t    return diag;\n\t};\n\t\n\t/**\n\t * Returns the sum of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.sum = function sum() {\n\t    var v = 0;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            v += this[i][j];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the mean of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.mean = function mean() {\n\t    return this.sum() / this.size;\n\t};\n\t\n\t/**\n\t * Returns the product of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.prod = function prod() {\n\t    var prod = 1;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            prod *= this[i][j];\n\t        }\n\t    }\n\t    return prod;\n\t};\n\t\n\t/**\n\t * Computes the cumulative sum of the matrix elements (in place, row by row)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.cumulativeSum = function cumulativeSum() {\n\t    var sum = 0;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            sum += this[i][j];\n\t            this[i][j] = sum;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Computes the dot (scalar) product between the matrix and another\n\t * @param {Matrix} other vector\n\t * @returns {number}\n\t */\n\tMatrix.prototype.dot = function dot(other) {\n\t    if (this.size !== other.size)\n\t        throw new RangeError('vectors do not have the same size');\n\t    var vector1 = this.to1DArray();\n\t    var vector2 = other.to1DArray();\n\t    var dot = 0, l = vector1.length;\n\t    for (var i = 0; i < l; i++) {\n\t        dot += vector1[i] * vector2[i];\n\t    }\n\t    return dot;\n\t};\n\t\n\t/**\n\t * Returns the matrix product between this and other\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.mmul = function mmul(other) {\n\t    if (!Matrix.isMatrix(other))\n\t        throw new TypeError('parameter \"other\" must be a matrix');\n\t    if (this.columns !== other.rows)\n\t        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n\t\n\t    var m = this.rows, n = this.columns, p = other.columns;\n\t    var result = new Matrix(m, p);\n\t\n\t    var Bcolj = new Array(n);\n\t    var i, j, k;\n\t    for (j = 0; j < p; j++) {\n\t        for (k = 0; k < n; k++)\n\t            Bcolj[k] = other[k][j];\n\t\n\t        for (i = 0; i < m; i++) {\n\t            var Arowi = this[i];\n\t\n\t            var s = 0;\n\t            for (k = 0; k < n; k++)\n\t                s += Arowi[k] * Bcolj[k];\n\t\n\t            result[i][j] = s;\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Sorts the rows (in place)\n\t * @param {function} compareFunction - usual Array.prototype.sort comparison function\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sortRows = function sortRows(compareFunction) {\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        this[i].sort(compareFunction);\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Sorts the columns (in place)\n\t * @param {function} compareFunction - usual Array.prototype.sort comparison function\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sortColumns = function sortColumns(compareFunction) {\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Transposes the matrix and returns a new one containing the result\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.transpose = function transpose() {\n\t    var result = new Matrix(this.columns, this.rows);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[j][i] = this[i][j];\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix\n\t * @param {number} startRow - First row index\n\t * @param {number} endRow - Last row index\n\t * @param {number} startColumn - First column index\n\t * @param {number} endColumn - Last column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrix = function subMatrix(startRow, endRow, startColumn, endColumn) {\n\t    if ((startRow > endRow) || (startColumn > endColumn) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n\t        throw new RangeError('Argument out of range');\n\t    var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n\t    for (var i = startRow; i <= endRow; i++) {\n\t        for (var j = startColumn; j <= endColumn; j++) {\n\t            newMatrix[i - startRow][j - startColumn] = this[i][j];\n\t        }\n\t    }\n\t    return newMatrix;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix based on an array of row indices\n\t * @param {Array} indices - Array containing the row indices\n\t * @param {number} [startColumn = 0] - First column index\n\t * @param {number} [endColumn = this.columns-1] - Last column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrixRow = function subMatrixRow(indices, startColumn, endColumn) {\n\t    if (typeof startColumn === 'undefined') {\n\t        startColumn = 0;\n\t        endColumn = this.columns - 1;\n\t    } else if (typeof endColumn === 'undefined') {\n\t        endColumn = this.columns - 1;\n\t    }\n\t    if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n\t        throw new RangeError('Argument out of range.');\n\t    var l = indices.length, rows = this.rows,\n\t        X = new Matrix(l, endColumn - startColumn + 1);\n\t    for (var i = 0; i < l; i++) {\n\t        for (var j = startColumn; j <= endColumn; j++) {\n\t            if ((indices[i] < 0) || (indices[i] >= rows))\n\t                throw new RangeError('Argument out of range.');\n\t            X[i][j - startColumn] = this[indices[i]][j];\n\t        }\n\t    }\n\t    return X;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix based on an array of column indices\n\t * @param {Array} indices - Array containing the column indices\n\t * @param {number} [startRow = 0] - First row index\n\t * @param {number} [endRow = this.rows-1] - Last row index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrixColumn = function subMatrixColumn(indices, startRow, endRow) {\n\t    if (typeof startRow === 'undefined') {\n\t        startRow = 0;\n\t        endRow = this.rows - 1;\n\t    } else if (typeof endRow === 'undefined') {\n\t        endRow = this.rows - 1;\n\t    }\n\t    if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows))\n\t        throw new RangeError('Argument out of range.');\n\t    var l = indices.length, columns = this.columns,\n\t        X = new Matrix(endRow - startRow + 1, l);\n\t    for (var i = 0; i < l; i++) {\n\t        for (var j = startRow; j <= endRow; j++) {\n\t            if ((indices[i] < 0) || (indices[i] >= columns))\n\t                throw new RangeError('Argument out of range.');\n\t            X[j - startRow][i] = this[j][indices[i]];\n\t        }\n\t    }\n\t    return X;\n\t};\n\t\n\t/**\n\t * Returns the trace of the matrix (sum of the diagonal elements)\n\t * @returns {number}\n\t */\n\tMatrix.prototype.trace = function trace() {\n\t    if (!this.isSquare())\n\t        throw new TypeError('The matrix is not square');\n\t    var trace = 0, i = 0, l = this.rows;\n\t    for (; i < l; i++) {\n\t        trace += this[i][i];\n\t    }\n\t    return trace;\n\t};\n\t\n\t/**\n\t * Sets each element of the matrix to its absolute value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.abs = function abs() {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] = Math.abs(this[i][j]);\n\t        }\n\t    }\n\t};\n\t\n\tmodule.exports = Matrix;\n\n\n/***/ },\n/* 108 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(107);\n\t\n\tvar SingularValueDecomposition = __webpack_require__(109);\n\tvar EigenvalueDecomposition = __webpack_require__(111);\n\tvar LuDecomposition = __webpack_require__(112);\n\tvar QrDecomposition = __webpack_require__(113);\n\tvar CholeskyDecomposition = __webpack_require__(114);\n\t\n\tfunction inverse(matrix) {\n\t    return solve(matrix, Matrix.eye(matrix.rows));\n\t}\n\t\n\tMatrix.prototype.inverse = function () {\n\t    return inverse(this);\n\t};\n\t\n\tfunction solve(leftHandSide, rightHandSide) {\n\t    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n\t}\n\t\n\tMatrix.prototype.solve = function (other) {\n\t    return solve(this, other);\n\t};\n\t\n\tmodule.exports = {\n\t    SingularValueDecomposition: SingularValueDecomposition,\n\t    SVD: SingularValueDecomposition,\n\t    EigenvalueDecomposition: EigenvalueDecomposition,\n\t    EVD: EigenvalueDecomposition,\n\t    LuDecomposition: LuDecomposition,\n\t    LU: LuDecomposition,\n\t    QrDecomposition: QrDecomposition,\n\t    QR: QrDecomposition,\n\t    CholeskyDecomposition: CholeskyDecomposition,\n\t    CHO: CholeskyDecomposition,\n\t    inverse: inverse,\n\t    solve: solve\n\t};\n\n\n/***/ },\n/* 109 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(107);\n\tvar hypotenuse = __webpack_require__(110).hypotenuse;\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\n\tfunction SingularValueDecomposition(value, options) {\n\t    if (!(this instanceof SingularValueDecomposition)) {\n\t        return new SingularValueDecomposition(value, options);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t\n\t    options = options || {};\n\t\n\t    var a = value.clone(),\n\t        m = value.rows,\n\t        n = value.columns,\n\t        nu = Math.min(m, n);\n\t\n\t    var wantu = true, wantv = true;\n\t    if (options.computeLeftSingularVectors === false)\n\t        wantu = false;\n\t    if (options.computeRightSingularVectors === false)\n\t        wantv = false;\n\t    var autoTranspose = options.autoTranspose === true;\n\t\n\t    var swapped = false;\n\t    if (m < n) {\n\t        if (!autoTranspose) {\n\t            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n\t        } else {\n\t            a = a.transpose();\n\t            m = a.rows;\n\t            n = a.columns;\n\t            swapped = true;\n\t            var aux = wantu;\n\t            wantu = wantv;\n\t            wantv = aux;\n\t        }\n\t    }\n\t\n\t    var s = new Array(Math.min(m + 1, n)),\n\t        U = Matrix.zeros(m, nu),\n\t        V = Matrix.zeros(n, n),\n\t        e = new Array(n),\n\t        work = new Array(m);\n\t\n\t    var nct = Math.min(m - 1, n);\n\t    var nrt = Math.max(0, Math.min(n - 2, m));\n\t\n\t    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n\t        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\t\n\t    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n\t        if (k < nct) {\n\t            s[k] = 0;\n\t            for (i = k; i < m; i++) {\n\t                s[k] = hypotenuse(s[k], a[i][k]);\n\t            }\n\t            if (s[k] !== 0) {\n\t                if (a[k][k] < 0) {\n\t                    s[k] = -s[k];\n\t                }\n\t                for (i = k; i < m; i++) {\n\t                    a[i][k] /= s[k];\n\t                }\n\t                a[k][k] += 1;\n\t            }\n\t            s[k] = -s[k];\n\t        }\n\t\n\t        for (j = k + 1; j < n; j++) {\n\t            if ((k < nct) && (s[k] !== 0)) {\n\t                t = 0;\n\t                for (i = k; i < m; i++) {\n\t                    t += a[i][k] * a[i][j];\n\t                }\n\t                t = -t / a[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    a[i][j] += t * a[i][k];\n\t                }\n\t            }\n\t            e[j] = a[k][j];\n\t        }\n\t\n\t        if (wantu && (k < nct)) {\n\t            for (i = k; i < m; i++) {\n\t                U[i][k] = a[i][k];\n\t            }\n\t        }\n\t\n\t        if (k < nrt) {\n\t            e[k] = 0;\n\t            for (i = k + 1; i < n; i++) {\n\t                e[k] = hypotenuse(e[k], e[i]);\n\t            }\n\t            if (e[k] !== 0) {\n\t                if (e[k + 1] < 0)\n\t                    e[k] = -e[k];\n\t                for (i = k + 1; i < n; i++) {\n\t                    e[i] /= e[k];\n\t                }\n\t                e[k + 1] += 1;\n\t            }\n\t            e[k] = -e[k];\n\t            if ((k + 1 < m) && (e[k] !== 0)) {\n\t                for (i = k + 1; i < m; i++) {\n\t                    work[i] = 0;\n\t                }\n\t                for (j = k + 1; j < n; j++) {\n\t                    for (i = k + 1; i < m; i++) {\n\t                        work[i] += e[j] * a[i][j];\n\t                    }\n\t                }\n\t                for (j = k + 1; j < n; j++) {\n\t                    t = -e[j] / e[k + 1];\n\t                    for (i = k + 1; i < m; i++) {\n\t                        a[i][j] += t * work[i];\n\t                    }\n\t                }\n\t            }\n\t            if (wantv) {\n\t                for (i = k + 1; i < n; i++) {\n\t                    V[i][k] = e[i];\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    p = Math.min(n, m + 1);\n\t    if (nct < n) {\n\t        s[nct] = a[nct][nct];\n\t    }\n\t    if (m < p) {\n\t        s[p - 1] = 0;\n\t    }\n\t    if (nrt + 1 < p) {\n\t        e[nrt] = a[nrt][p - 1];\n\t    }\n\t    e[p - 1] = 0;\n\t\n\t    if (wantu) {\n\t        for (j = nct; j < nu; j++) {\n\t            for (i = 0; i < m; i++) {\n\t                U[i][j] = 0;\n\t            }\n\t            U[j][j] = 1;\n\t        }\n\t        for (k = nct - 1; k >= 0; k--) {\n\t            if (s[k] !== 0) {\n\t                for (j = k + 1; j < nu; j++) {\n\t                    t = 0;\n\t                    for (i = k; i < m; i++) {\n\t                        t += U[i][k] * U[i][j];\n\t                    }\n\t                    t = -t / U[k][k];\n\t                    for (i = k; i < m; i++) {\n\t                        U[i][j] += t * U[i][k];\n\t                    }\n\t                }\n\t                for (i = k; i < m; i++) {\n\t                    U[i][k] = -U[i][k];\n\t                }\n\t                U[k][k] = 1 + U[k][k];\n\t                for (i = 0; i < k - 1; i++) {\n\t                    U[i][k] = 0;\n\t                }\n\t            } else {\n\t                for (i = 0; i < m; i++) {\n\t                    U[i][k] = 0;\n\t                }\n\t                U[k][k] = 1;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (wantv) {\n\t        for (k = n - 1; k >= 0; k--) {\n\t            if ((k < nrt) && (e[k] !== 0)) {\n\t                for (j = k + 1; j < n; j++) {\n\t                    t = 0;\n\t                    for (i = k + 1; i < n; i++) {\n\t                        t += V[i][k] * V[i][j];\n\t                    }\n\t                    t = -t / V[k + 1][k];\n\t                    for (i = k + 1; i < n; i++) {\n\t                        V[i][j] += t * V[i][k];\n\t                    }\n\t                }\n\t            }\n\t            for (i = 0; i < n; i++) {\n\t                V[i][k] = 0;\n\t            }\n\t            V[k][k] = 1;\n\t        }\n\t    }\n\t\n\t    var pp = p - 1,\n\t        iter = 0,\n\t        eps = Math.pow(2, -52);\n\t    while (p > 0) {\n\t        for (k = p - 2; k >= -1; k--) {\n\t            if (k === -1) {\n\t                break;\n\t            }\n\t            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n\t                e[k] = 0;\n\t                break;\n\t            }\n\t        }\n\t        if (k === p - 2) {\n\t            kase = 4;\n\t        } else {\n\t            for (ks = p - 1; ks >= k; ks--) {\n\t                if (ks === k) {\n\t                    break;\n\t                }\n\t                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n\t                if (Math.abs(s[ks]) <= eps * t) {\n\t                    s[ks] = 0;\n\t                    break;\n\t                }\n\t            }\n\t            if (ks === k) {\n\t                kase = 3;\n\t            } else if (ks === p - 1) {\n\t                kase = 1;\n\t            } else {\n\t                kase = 2;\n\t                k = ks;\n\t            }\n\t        }\n\t\n\t        k++;\n\t\n\t        switch (kase) {\n\t            case 1: {\n\t                f = e[p - 2];\n\t                e[p - 2] = 0;\n\t                for (j = p - 2; j >= k; j--) {\n\t                    t = hypotenuse(s[j], f);\n\t                    cs = s[j] / t;\n\t                    sn = f / t;\n\t                    s[j] = t;\n\t                    if (j !== k) {\n\t                        f = -sn * e[j - 1];\n\t                        e[j - 1] = cs * e[j - 1];\n\t                    }\n\t                    if (wantv) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = cs * V[i][j] + sn * V[i][p - 1];\n\t                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n\t                            V[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t            case 2 : {\n\t                f = e[k - 1];\n\t                e[k - 1] = 0;\n\t                for (j = k; j < p; j++) {\n\t                    t = hypotenuse(s[j], f);\n\t                    cs = s[j] / t;\n\t                    sn = f / t;\n\t                    s[j] = t;\n\t                    f = -sn * e[j];\n\t                    e[j] = cs * e[j];\n\t                    if (wantu) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = cs * U[i][j] + sn * U[i][k - 1];\n\t                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n\t                            U[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t            case 3 : {\n\t                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n\t                sp = s[p - 1] / scale;\n\t                spm1 = s[p - 2] / scale;\n\t                epm1 = e[p - 2] / scale;\n\t                sk = s[k] / scale;\n\t                ek = e[k] / scale;\n\t                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n\t                c = (sp * epm1) * (sp * epm1);\n\t                shift = 0;\n\t                if ((b !== 0) || (c !== 0)) {\n\t                    shift = Math.sqrt(b * b + c);\n\t                    if (b < 0) {\n\t                        shift = -shift;\n\t                    }\n\t                    shift = c / (b + shift);\n\t                }\n\t                f = (sk + sp) * (sk - sp) + shift;\n\t                g = sk * ek;\n\t                for (j = k; j < p - 1; j++) {\n\t                    t = hypotenuse(f, g);\n\t                    cs = f / t;\n\t                    sn = g / t;\n\t                    if (j !== k) {\n\t                        e[j - 1] = t;\n\t                    }\n\t                    f = cs * s[j] + sn * e[j];\n\t                    e[j] = cs * e[j] - sn * s[j];\n\t                    g = sn * s[j + 1];\n\t                    s[j + 1] = cs * s[j + 1];\n\t                    if (wantv) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = cs * V[i][j] + sn * V[i][j + 1];\n\t                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n\t                            V[i][j] = t;\n\t                        }\n\t                    }\n\t                    t = hypotenuse(f, g);\n\t                    cs = f / t;\n\t                    sn = g / t;\n\t                    s[j] = t;\n\t                    f = cs * e[j] + sn * s[j + 1];\n\t                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n\t                    g = sn * e[j + 1];\n\t                    e[j + 1] = cs * e[j + 1];\n\t                    if (wantu && (j < m - 1)) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = cs * U[i][j] + sn * U[i][j + 1];\n\t                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n\t                            U[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                e[p - 2] = f;\n\t                iter = iter + 1;\n\t                break;\n\t            }\n\t            case 4: {\n\t                if (s[k] <= 0) {\n\t                    s[k] = (s[k] < 0 ? -s[k] : 0);\n\t                    if (wantv) {\n\t                        for (i = 0; i <= pp; i++) {\n\t                            V[i][k] = -V[i][k];\n\t                        }\n\t                    }\n\t                }\n\t                while (k < pp) {\n\t                    if (s[k] >= s[k + 1]) {\n\t                        break;\n\t                    }\n\t                    t = s[k];\n\t                    s[k] = s[k + 1];\n\t                    s[k + 1] = t;\n\t                    if (wantv && (k < n - 1)) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = V[i][k + 1];\n\t                            V[i][k + 1] = V[i][k];\n\t                            V[i][k] = t;\n\t                        }\n\t                    }\n\t                    if (wantu && (k < m - 1)) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = U[i][k + 1];\n\t                            U[i][k + 1] = U[i][k];\n\t                            U[i][k] = t;\n\t                        }\n\t                    }\n\t                    k++;\n\t                }\n\t                iter = 0;\n\t                p--;\n\t                break;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (swapped) {\n\t        var tmp = V;\n\t        V = U;\n\t        U = tmp;\n\t    }\n\t\n\t    this.m = m;\n\t    this.n = n;\n\t    this.s = s;\n\t    this.U = U;\n\t    this.V = V;\n\t}\n\t\n\tSingularValueDecomposition.prototype = {\n\t    get condition() {\n\t        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n\t    },\n\t    get norm2() {\n\t        return this.s[0];\n\t    },\n\t    get rank() {\n\t        var eps = Math.pow(2, -52),\n\t            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n\t            r = 0,\n\t            s = this.s;\n\t        for (var i = 0, ii = s.length; i < ii; i++) {\n\t            if (s[i] > tol) {\n\t                r++;\n\t            }\n\t        }\n\t        return r;\n\t    },\n\t    get diagonal() {\n\t        return this.s;\n\t    },\n\t    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n\t    get threshold() {\n\t        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n\t    },\n\t    get leftSingularVectors() {\n\t        return this.U;\n\t    },\n\t    get rightSingularVectors() {\n\t        return this.V;\n\t    },\n\t    get diagonalMatrix() {\n\t        return Matrix.diag(this.s);\n\t    },\n\t    solve: function (value) {\n\t\n\t        var Y = value,\n\t            e = this.threshold,\n\t            scols = this.s.length,\n\t            Ls = Matrix.zeros(scols, scols),\n\t            i;\n\t\n\t        for (i = 0; i < scols; i++) {\n\t            if (Math.abs(this.s[i]) <= e) {\n\t                Ls[i][i] = 0;\n\t            } else {\n\t                Ls[i][i] = 1 / this.s[i];\n\t            }\n\t        }\n\t\n\t\n\t        var VL = this.V.mmul(Ls),\n\t            vrows = this.V.rows,\n\t            urows = this.U.rows,\n\t            VLU = Matrix.zeros(vrows, urows),\n\t            j, k, sum;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < urows; j++) {\n\t                sum = 0;\n\t                for (k = 0; k < scols; k++) {\n\t                    sum += VL[i][k] * this.U[j][k];\n\t                }\n\t                VLU[i][j] = sum;\n\t            }\n\t        }\n\t\n\t        return VLU.mmul(Y);\n\t    },\n\t    solveForDiagonal: function (value) {\n\t        return this.solve(Matrix.diag(value));\n\t    },\n\t    inverse: function () {\n\t        var e = this.threshold,\n\t            vrows = this.V.rows,\n\t            vcols = this.V.columns,\n\t            X = new Matrix(vrows, this.s.length),\n\t            i, j;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < vcols; j++) {\n\t                if (Math.abs(this.s[j]) > e) {\n\t                    X[i][j] = this.V[i][j] / this.s[j];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t\n\t        var urows = this.U.rows,\n\t            ucols = this.U.columns,\n\t            Y = new Matrix(vrows, urows),\n\t            k, sum;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < urows; j++) {\n\t                sum = 0;\n\t                for (k = 0; k < ucols; k++) {\n\t                    sum += X[i][k] * this.U[j][k];\n\t                }\n\t                Y[i][j] = sum;\n\t            }\n\t        }\n\t\n\t        return Y;\n\t    }\n\t};\n\t\n\tmodule.exports = SingularValueDecomposition;\n\n\n/***/ },\n/* 110 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.hypotenuse = function hypotenuse(a, b) {\n\t    var r;\n\t    if (Math.abs(a) > Math.abs(b)) {\n\t        r = b / a;\n\t        return Math.abs(a) * Math.sqrt(1 + r * r);\n\t    }\n\t    if (b !== 0) {\n\t        r = a / b;\n\t        return Math.abs(b) * Math.sqrt(1 + r * r);\n\t    }\n\t    return 0;\n\t};\n\n\n/***/ },\n/* 111 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(107);\n\tvar hypotenuse = __webpack_require__(110).hypotenuse;\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\n\tfunction EigenvalueDecomposition(matrix) {\n\t    if (!(this instanceof EigenvalueDecomposition)) {\n\t        return new EigenvalueDecomposition(matrix);\n\t    }\n\t    matrix = Matrix.checkMatrix(matrix);\n\t    if (!matrix.isSquare()) {\n\t        throw new Error('Matrix is not a square matrix');\n\t    }\n\t\n\t    var n = matrix.columns,\n\t        V = Matrix.zeros(n, n),\n\t        d = new Array(n),\n\t        e = new Array(n),\n\t        value = matrix,\n\t        i, j;\n\t\n\t    if (matrix.isSymmetric()) {\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                V[i][j] = value[i][j];\n\t            }\n\t        }\n\t        tred2(n, e, d, V);\n\t        tql2(n, e, d, V);\n\t    }\n\t    else {\n\t        var H = Matrix.zeros(n, n),\n\t            ort = new Array(n);\n\t        for (j = 0; j < n; j++) {\n\t            for (i = 0; i < n; i++) {\n\t                H[i][j] = value[i][j];\n\t            }\n\t        }\n\t        orthes(n, H, ort, V);\n\t        hqr2(n, e, d, V, H);\n\t    }\n\t\n\t    this.n = n;\n\t    this.e = e;\n\t    this.d = d;\n\t    this.V = V;\n\t}\n\t\n\tEigenvalueDecomposition.prototype = {\n\t    get realEigenvalues() {\n\t        return this.d;\n\t    },\n\t    get imaginaryEigenvalues() {\n\t        return this.e;\n\t    },\n\t    get eigenvectorMatrix() {\n\t        return this.V;\n\t    },\n\t    get diagonalMatrix() {\n\t        var n = this.n,\n\t            e = this.e,\n\t            d = this.d,\n\t            X = new Matrix(n, n),\n\t            i, j;\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                X[i][j] = 0;\n\t            }\n\t            X[i][i] = d[i];\n\t            if (e[i] > 0) {\n\t                X[i][i + 1] = e[i];\n\t            }\n\t            else if (e[i] < 0) {\n\t                X[i][i - 1] = e[i];\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tfunction tred2(n, e, d, V) {\n\t\n\t    var f, g, h, i, j, k,\n\t        hh, scale;\n\t\n\t    for (j = 0; j < n; j++) {\n\t        d[j] = V[n - 1][j];\n\t    }\n\t\n\t    for (i = n - 1; i > 0; i--) {\n\t        scale = 0;\n\t        h = 0;\n\t        for (k = 0; k < i; k++) {\n\t            scale = scale + Math.abs(d[k]);\n\t        }\n\t\n\t        if (scale === 0) {\n\t            e[i] = d[i - 1];\n\t            for (j = 0; j < i; j++) {\n\t                d[j] = V[i - 1][j];\n\t                V[i][j] = 0;\n\t                V[j][i] = 0;\n\t            }\n\t        } else {\n\t            for (k = 0; k < i; k++) {\n\t                d[k] /= scale;\n\t                h += d[k] * d[k];\n\t            }\n\t\n\t            f = d[i - 1];\n\t            g = Math.sqrt(h);\n\t            if (f > 0) {\n\t                g = -g;\n\t            }\n\t\n\t            e[i] = scale * g;\n\t            h = h - f * g;\n\t            d[i - 1] = f - g;\n\t            for (j = 0; j < i; j++) {\n\t                e[j] = 0;\n\t            }\n\t\n\t            for (j = 0; j < i; j++) {\n\t                f = d[j];\n\t                V[j][i] = f;\n\t                g = e[j] + V[j][j] * f;\n\t                for (k = j + 1; k <= i - 1; k++) {\n\t                    g += V[k][j] * d[k];\n\t                    e[k] += V[k][j] * f;\n\t                }\n\t                e[j] = g;\n\t            }\n\t\n\t            f = 0;\n\t            for (j = 0; j < i; j++) {\n\t                e[j] /= h;\n\t                f += e[j] * d[j];\n\t            }\n\t\n\t            hh = f / (h + h);\n\t            for (j = 0; j < i; j++) {\n\t                e[j] -= hh * d[j];\n\t            }\n\t\n\t            for (j = 0; j < i; j++) {\n\t                f = d[j];\n\t                g = e[j];\n\t                for (k = j; k <= i - 1; k++) {\n\t                    V[k][j] -= (f * e[k] + g * d[k]);\n\t                }\n\t                d[j] = V[i - 1][j];\n\t                V[i][j] = 0;\n\t            }\n\t        }\n\t        d[i] = h;\n\t    }\n\t\n\t    for (i = 0; i < n - 1; i++) {\n\t        V[n - 1][i] = V[i][i];\n\t        V[i][i] = 1;\n\t        h = d[i + 1];\n\t        if (h !== 0) {\n\t            for (k = 0; k <= i; k++) {\n\t                d[k] = V[k][i + 1] / h;\n\t            }\n\t\n\t            for (j = 0; j <= i; j++) {\n\t                g = 0;\n\t                for (k = 0; k <= i; k++) {\n\t                    g += V[k][i + 1] * V[k][j];\n\t                }\n\t                for (k = 0; k <= i; k++) {\n\t                    V[k][j] -= g * d[k];\n\t                }\n\t            }\n\t        }\n\t\n\t        for (k = 0; k <= i; k++) {\n\t            V[k][i + 1] = 0;\n\t        }\n\t    }\n\t\n\t    for (j = 0; j < n; j++) {\n\t        d[j] = V[n - 1][j];\n\t        V[n - 1][j] = 0;\n\t    }\n\t\n\t    V[n - 1][n - 1] = 1;\n\t    e[0] = 0;\n\t}\n\t\n\tfunction tql2(n, e, d, V) {\n\t\n\t    var g, h, i, j, k, l, m, p, r,\n\t        dl1, c, c2, c3, el1, s, s2,\n\t        iter;\n\t\n\t    for (i = 1; i < n; i++) {\n\t        e[i - 1] = e[i];\n\t    }\n\t\n\t    e[n - 1] = 0;\n\t\n\t    var f = 0,\n\t        tst1 = 0,\n\t        eps = Math.pow(2, -52);\n\t\n\t    for (l = 0; l < n; l++) {\n\t        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n\t        m = l;\n\t        while (m < n) {\n\t            if (Math.abs(e[m]) <= eps * tst1) {\n\t                break;\n\t            }\n\t            m++;\n\t        }\n\t\n\t        if (m > l) {\n\t            iter = 0;\n\t            do {\n\t                iter = iter + 1;\n\t\n\t                g = d[l];\n\t                p = (d[l + 1] - g) / (2 * e[l]);\n\t                r = hypotenuse(p, 1);\n\t                if (p < 0) {\n\t                    r = -r;\n\t                }\n\t\n\t                d[l] = e[l] / (p + r);\n\t                d[l + 1] = e[l] * (p + r);\n\t                dl1 = d[l + 1];\n\t                h = g - d[l];\n\t                for (i = l + 2; i < n; i++) {\n\t                    d[i] -= h;\n\t                }\n\t\n\t                f = f + h;\n\t\n\t                p = d[m];\n\t                c = 1;\n\t                c2 = c;\n\t                c3 = c;\n\t                el1 = e[l + 1];\n\t                s = 0;\n\t                s2 = 0;\n\t                for (i = m - 1; i >= l; i--) {\n\t                    c3 = c2;\n\t                    c2 = c;\n\t                    s2 = s;\n\t                    g = c * e[i];\n\t                    h = c * p;\n\t                    r = hypotenuse(p, e[i]);\n\t                    e[i + 1] = s * r;\n\t                    s = e[i] / r;\n\t                    c = p / r;\n\t                    p = c * d[i] - s * g;\n\t                    d[i + 1] = h + s * (c * g + s * d[i]);\n\t\n\t                    for (k = 0; k < n; k++) {\n\t                        h = V[k][i + 1];\n\t                        V[k][i + 1] = s * V[k][i] + c * h;\n\t                        V[k][i] = c * V[k][i] - s * h;\n\t                    }\n\t                }\n\t\n\t                p = -s * s2 * c3 * el1 * e[l] / dl1;\n\t                e[l] = s * p;\n\t                d[l] = c * p;\n\t\n\t            }\n\t            while (Math.abs(e[l]) > eps * tst1);\n\t        }\n\t        d[l] = d[l] + f;\n\t        e[l] = 0;\n\t    }\n\t\n\t    for (i = 0; i < n - 1; i++) {\n\t        k = i;\n\t        p = d[i];\n\t        for (j = i + 1; j < n; j++) {\n\t            if (d[j] < p) {\n\t                k = j;\n\t                p = d[j];\n\t            }\n\t        }\n\t\n\t        if (k !== i) {\n\t            d[k] = d[i];\n\t            d[i] = p;\n\t            for (j = 0; j < n; j++) {\n\t                p = V[j][i];\n\t                V[j][i] = V[j][k];\n\t                V[j][k] = p;\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction orthes(n, H, ort, V) {\n\t\n\t    var low = 0,\n\t        high = n - 1,\n\t        f, g, h, i, j, m,\n\t        scale;\n\t\n\t    for (m = low + 1; m <= high - 1; m++) {\n\t        scale = 0;\n\t        for (i = m; i <= high; i++) {\n\t            scale = scale + Math.abs(H[i][m - 1]);\n\t        }\n\t\n\t        if (scale !== 0) {\n\t            h = 0;\n\t            for (i = high; i >= m; i--) {\n\t                ort[i] = H[i][m - 1] / scale;\n\t                h += ort[i] * ort[i];\n\t            }\n\t\n\t            g = Math.sqrt(h);\n\t            if (ort[m] > 0) {\n\t                g = -g;\n\t            }\n\t\n\t            h = h - ort[m] * g;\n\t            ort[m] = ort[m] - g;\n\t\n\t            for (j = m; j < n; j++) {\n\t                f = 0;\n\t                for (i = high; i >= m; i--) {\n\t                    f += ort[i] * H[i][j];\n\t                }\n\t\n\t                f = f / h;\n\t                for (i = m; i <= high; i++) {\n\t                    H[i][j] -= f * ort[i];\n\t                }\n\t            }\n\t\n\t            for (i = 0; i <= high; i++) {\n\t                f = 0;\n\t                for (j = high; j >= m; j--) {\n\t                    f += ort[j] * H[i][j];\n\t                }\n\t\n\t                f = f / h;\n\t                for (j = m; j <= high; j++) {\n\t                    H[i][j] -= f * ort[j];\n\t                }\n\t            }\n\t\n\t            ort[m] = scale * ort[m];\n\t            H[m][m - 1] = scale * g;\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < n; i++) {\n\t        for (j = 0; j < n; j++) {\n\t            V[i][j] = (i === j ? 1 : 0);\n\t        }\n\t    }\n\t\n\t    for (m = high - 1; m >= low + 1; m--) {\n\t        if (H[m][m - 1] !== 0) {\n\t            for (i = m + 1; i <= high; i++) {\n\t                ort[i] = H[i][m - 1];\n\t            }\n\t\n\t            for (j = m; j <= high; j++) {\n\t                g = 0;\n\t                for (i = m; i <= high; i++) {\n\t                    g += ort[i] * V[i][j];\n\t                }\n\t\n\t                g = (g / ort[m]) / H[m][m - 1];\n\t                for (i = m; i <= high; i++) {\n\t                    V[i][j] += g * ort[i];\n\t                }\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction hqr2(nn, e, d, V, H) {\n\t    var n = nn - 1,\n\t        low = 0,\n\t        high = nn - 1,\n\t        eps = Math.pow(2, -52),\n\t        exshift = 0,\n\t        norm = 0,\n\t        p = 0,\n\t        q = 0,\n\t        r = 0,\n\t        s = 0,\n\t        z = 0,\n\t        iter = 0,\n\t        i, j, k, l, m, t, w, x, y,\n\t        ra, sa, vr, vi,\n\t        notlast, cdivres;\n\t\n\t    for (i = 0; i < nn; i++) {\n\t        if (i < low || i > high) {\n\t            d[i] = H[i][i];\n\t            e[i] = 0;\n\t        }\n\t\n\t        for (j = Math.max(i - 1, 0); j < nn; j++) {\n\t            norm = norm + Math.abs(H[i][j]);\n\t        }\n\t    }\n\t\n\t    while (n >= low) {\n\t        l = n;\n\t        while (l > low) {\n\t            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n\t            if (s === 0) {\n\t                s = norm;\n\t            }\n\t            if (Math.abs(H[l][l - 1]) < eps * s) {\n\t                break;\n\t            }\n\t            l--;\n\t        }\n\t\n\t        if (l === n) {\n\t            H[n][n] = H[n][n] + exshift;\n\t            d[n] = H[n][n];\n\t            e[n] = 0;\n\t            n--;\n\t            iter = 0;\n\t        } else if (l === n - 1) {\n\t            w = H[n][n - 1] * H[n - 1][n];\n\t            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n\t            q = p * p + w;\n\t            z = Math.sqrt(Math.abs(q));\n\t            H[n][n] = H[n][n] + exshift;\n\t            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n\t            x = H[n][n];\n\t\n\t            if (q >= 0) {\n\t                z = (p >= 0) ? (p + z) : (p - z);\n\t                d[n - 1] = x + z;\n\t                d[n] = d[n - 1];\n\t                if (z !== 0) {\n\t                    d[n] = x - w / z;\n\t                }\n\t                e[n - 1] = 0;\n\t                e[n] = 0;\n\t                x = H[n][n - 1];\n\t                s = Math.abs(x) + Math.abs(z);\n\t                p = x / s;\n\t                q = z / s;\n\t                r = Math.sqrt(p * p + q * q);\n\t                p = p / r;\n\t                q = q / r;\n\t\n\t                for (j = n - 1; j < nn; j++) {\n\t                    z = H[n - 1][j];\n\t                    H[n - 1][j] = q * z + p * H[n][j];\n\t                    H[n][j] = q * H[n][j] - p * z;\n\t                }\n\t\n\t                for (i = 0; i <= n; i++) {\n\t                    z = H[i][n - 1];\n\t                    H[i][n - 1] = q * z + p * H[i][n];\n\t                    H[i][n] = q * H[i][n] - p * z;\n\t                }\n\t\n\t                for (i = low; i <= high; i++) {\n\t                    z = V[i][n - 1];\n\t                    V[i][n - 1] = q * z + p * V[i][n];\n\t                    V[i][n] = q * V[i][n] - p * z;\n\t                }\n\t            } else {\n\t                d[n - 1] = x + p;\n\t                d[n] = x + p;\n\t                e[n - 1] = z;\n\t                e[n] = -z;\n\t            }\n\t\n\t            n = n - 2;\n\t            iter = 0;\n\t        } else {\n\t            x = H[n][n];\n\t            y = 0;\n\t            w = 0;\n\t            if (l < n) {\n\t                y = H[n - 1][n - 1];\n\t                w = H[n][n - 1] * H[n - 1][n];\n\t            }\n\t\n\t            if (iter === 10) {\n\t                exshift += x;\n\t                for (i = low; i <= n; i++) {\n\t                    H[i][i] -= x;\n\t                }\n\t                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n\t                x = y = 0.75 * s;\n\t                w = -0.4375 * s * s;\n\t            }\n\t\n\t            if (iter === 30) {\n\t                s = (y - x) / 2;\n\t                s = s * s + w;\n\t                if (s > 0) {\n\t                    s = Math.sqrt(s);\n\t                    if (y < x) {\n\t                        s = -s;\n\t                    }\n\t                    s = x - w / ((y - x) / 2 + s);\n\t                    for (i = low; i <= n; i++) {\n\t                        H[i][i] -= s;\n\t                    }\n\t                    exshift += s;\n\t                    x = y = w = 0.964;\n\t                }\n\t            }\n\t\n\t            iter = iter + 1;\n\t\n\t            m = n - 2;\n\t            while (m >= l) {\n\t                z = H[m][m];\n\t                r = x - z;\n\t                s = y - z;\n\t                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n\t                q = H[m + 1][m + 1] - z - r - s;\n\t                r = H[m + 2][m + 1];\n\t                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n\t                p = p / s;\n\t                q = q / s;\n\t                r = r / s;\n\t                if (m === l) {\n\t                    break;\n\t                }\n\t                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n\t                    break;\n\t                }\n\t                m--;\n\t            }\n\t\n\t            for (i = m + 2; i <= n; i++) {\n\t                H[i][i - 2] = 0;\n\t                if (i > m + 2) {\n\t                    H[i][i - 3] = 0;\n\t                }\n\t            }\n\t\n\t            for (k = m; k <= n - 1; k++) {\n\t                notlast = (k !== n - 1);\n\t                if (k !== m) {\n\t                    p = H[k][k - 1];\n\t                    q = H[k + 1][k - 1];\n\t                    r = (notlast ? H[k + 2][k - 1] : 0);\n\t                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n\t                    if (x !== 0) {\n\t                        p = p / x;\n\t                        q = q / x;\n\t                        r = r / x;\n\t                    }\n\t                }\n\t\n\t                if (x === 0) {\n\t                    break;\n\t                }\n\t\n\t                s = Math.sqrt(p * p + q * q + r * r);\n\t                if (p < 0) {\n\t                    s = -s;\n\t                }\n\t\n\t                if (s !== 0) {\n\t                    if (k !== m) {\n\t                        H[k][k - 1] = -s * x;\n\t                    } else if (l !== m) {\n\t                        H[k][k - 1] = -H[k][k - 1];\n\t                    }\n\t\n\t                    p = p + s;\n\t                    x = p / s;\n\t                    y = q / s;\n\t                    z = r / s;\n\t                    q = q / p;\n\t                    r = r / p;\n\t\n\t                    for (j = k; j < nn; j++) {\n\t                        p = H[k][j] + q * H[k + 1][j];\n\t                        if (notlast) {\n\t                            p = p + r * H[k + 2][j];\n\t                            H[k + 2][j] = H[k + 2][j] - p * z;\n\t                        }\n\t\n\t                        H[k][j] = H[k][j] - p * x;\n\t                        H[k + 1][j] = H[k + 1][j] - p * y;\n\t                    }\n\t\n\t                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n\t                        p = x * H[i][k] + y * H[i][k + 1];\n\t                        if (notlast) {\n\t                            p = p + z * H[i][k + 2];\n\t                            H[i][k + 2] = H[i][k + 2] - p * r;\n\t                        }\n\t\n\t                        H[i][k] = H[i][k] - p;\n\t                        H[i][k + 1] = H[i][k + 1] - p * q;\n\t                    }\n\t\n\t                    for (i = low; i <= high; i++) {\n\t                        p = x * V[i][k] + y * V[i][k + 1];\n\t                        if (notlast) {\n\t                            p = p + z * V[i][k + 2];\n\t                            V[i][k + 2] = V[i][k + 2] - p * r;\n\t                        }\n\t\n\t                        V[i][k] = V[i][k] - p;\n\t                        V[i][k + 1] = V[i][k + 1] - p * q;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    if (norm === 0) {\n\t        return;\n\t    }\n\t\n\t    for (n = nn - 1; n >= 0; n--) {\n\t        p = d[n];\n\t        q = e[n];\n\t\n\t        if (q === 0) {\n\t            l = n;\n\t            H[n][n] = 1;\n\t            for (i = n - 1; i >= 0; i--) {\n\t                w = H[i][i] - p;\n\t                r = 0;\n\t                for (j = l; j <= n; j++) {\n\t                    r = r + H[i][j] * H[j][n];\n\t                }\n\t\n\t                if (e[i] < 0) {\n\t                    z = w;\n\t                    s = r;\n\t                } else {\n\t                    l = i;\n\t                    if (e[i] === 0) {\n\t                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n\t                    } else {\n\t                        x = H[i][i + 1];\n\t                        y = H[i + 1][i];\n\t                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n\t                        t = (x * s - z * r) / q;\n\t                        H[i][n] = t;\n\t                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n\t                    }\n\t\n\t                    t = Math.abs(H[i][n]);\n\t                    if ((eps * t) * t > 1) {\n\t                        for (j = i; j <= n; j++) {\n\t                            H[j][n] = H[j][n] / t;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        } else if (q < 0) {\n\t            l = n - 1;\n\t\n\t            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n\t                H[n - 1][n - 1] = q / H[n][n - 1];\n\t                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n\t            } else {\n\t                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n\t                H[n - 1][n - 1] = cdivres[0];\n\t                H[n - 1][n] = cdivres[1];\n\t            }\n\t\n\t            H[n][n - 1] = 0;\n\t            H[n][n] = 1;\n\t            for (i = n - 2; i >= 0; i--) {\n\t                ra = 0;\n\t                sa = 0;\n\t                for (j = l; j <= n; j++) {\n\t                    ra = ra + H[i][j] * H[j][n - 1];\n\t                    sa = sa + H[i][j] * H[j][n];\n\t                }\n\t\n\t                w = H[i][i] - p;\n\t\n\t                if (e[i] < 0) {\n\t                    z = w;\n\t                    r = ra;\n\t                    s = sa;\n\t                } else {\n\t                    l = i;\n\t                    if (e[i] === 0) {\n\t                        cdivres = cdiv(-ra, -sa, w, q);\n\t                        H[i][n - 1] = cdivres[0];\n\t                        H[i][n] = cdivres[1];\n\t                    } else {\n\t                        x = H[i][i + 1];\n\t                        y = H[i + 1][i];\n\t                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n\t                        vi = (d[i] - p) * 2 * q;\n\t                        if (vr === 0 && vi === 0) {\n\t                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n\t                        }\n\t                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n\t                        H[i][n - 1] = cdivres[0];\n\t                        H[i][n] = cdivres[1];\n\t                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n\t                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n\t                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n\t                        } else {\n\t                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n\t                            H[i + 1][n - 1] = cdivres[0];\n\t                            H[i + 1][n] = cdivres[1];\n\t                        }\n\t                    }\n\t\n\t                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n\t                    if ((eps * t) * t > 1) {\n\t                        for (j = i; j <= n; j++) {\n\t                            H[j][n - 1] = H[j][n - 1] / t;\n\t                            H[j][n] = H[j][n] / t;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < nn; i++) {\n\t        if (i < low || i > high) {\n\t            for (j = i; j < nn; j++) {\n\t                V[i][j] = H[i][j];\n\t            }\n\t        }\n\t    }\n\t\n\t    for (j = nn - 1; j >= low; j--) {\n\t        for (i = low; i <= high; i++) {\n\t            z = 0;\n\t            for (k = low; k <= Math.min(j, high); k++) {\n\t                z = z + V[i][k] * H[k][j];\n\t            }\n\t            V[i][j] = z;\n\t        }\n\t    }\n\t}\n\t\n\tfunction cdiv(xr, xi, yr, yi) {\n\t    var r, d;\n\t    if (Math.abs(yr) > Math.abs(yi)) {\n\t        r = yi / yr;\n\t        d = yr + r * yi;\n\t        return [(xr + r * xi) / d, (xi - r * xr) / d];\n\t    }\n\t    else {\n\t        r = yr / yi;\n\t        d = yi + r * yr;\n\t        return [(r * xr + xi) / d, (r * xi - xr) / d];\n\t    }\n\t}\n\t\n\tmodule.exports = EigenvalueDecomposition;\n\n\n/***/ },\n/* 112 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(107);\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\n\tfunction LuDecomposition(matrix) {\n\t    if (!(this instanceof LuDecomposition)) {\n\t        return new LuDecomposition(matrix);\n\t    }\n\t    matrix = Matrix.checkMatrix(matrix);\n\t\n\t    var lu = matrix.clone(),\n\t        rows = lu.rows,\n\t        columns = lu.columns,\n\t        pivotVector = new Array(rows),\n\t        pivotSign = 1,\n\t        i, j, k, p, s, t, v,\n\t        LUrowi, LUcolj, kmax;\n\t\n\t    for (i = 0; i < rows; i++) {\n\t        pivotVector[i] = i;\n\t    }\n\t\n\t    LUcolj = new Array(rows);\n\t\n\t    for (j = 0; j < columns; j++) {\n\t\n\t        for (i = 0; i < rows; i++) {\n\t            LUcolj[i] = lu[i][j];\n\t        }\n\t\n\t        for (i = 0; i < rows; i++) {\n\t            LUrowi = lu[i];\n\t            kmax = Math.min(i, j);\n\t            s = 0;\n\t            for (k = 0; k < kmax; k++) {\n\t                s += LUrowi[k] * LUcolj[k];\n\t            }\n\t            LUrowi[j] = LUcolj[i] -= s;\n\t        }\n\t\n\t        p = j;\n\t        for (i = j + 1; i < rows; i++) {\n\t            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n\t                p = i;\n\t            }\n\t        }\n\t\n\t        if (p !== j) {\n\t            for (k = 0; k < columns; k++) {\n\t                t = lu[p][k];\n\t                lu[p][k] = lu[j][k];\n\t                lu[j][k] = t;\n\t            }\n\t\n\t            v = pivotVector[p];\n\t            pivotVector[p] = pivotVector[j];\n\t            pivotVector[j] = v;\n\t\n\t            pivotSign = -pivotSign;\n\t        }\n\t\n\t        if (j < rows && lu[j][j] !== 0) {\n\t            for (i = j + 1; i < rows; i++) {\n\t                lu[i][j] /= lu[j][j];\n\t            }\n\t        }\n\t    }\n\t\n\t    this.LU = lu;\n\t    this.pivotVector = pivotVector;\n\t    this.pivotSign = pivotSign;\n\t}\n\t\n\tLuDecomposition.prototype = {\n\t    isSingular: function () {\n\t        var data = this.LU,\n\t            col = data.columns;\n\t        for (var j = 0; j < col; j++) {\n\t            if (data[j][j] === 0) {\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    },\n\t    get determinant() {\n\t        var data = this.LU;\n\t        if (!data.isSquare())\n\t            throw new Error('Matrix must be square');\n\t        var determinant = this.pivotSign, col = data.columns;\n\t        for (var j = 0; j < col; j++)\n\t            determinant *= data[j][j];\n\t        return determinant;\n\t    },\n\t    get lowerTriangularFactor() {\n\t        var data = this.LU,\n\t            rows = data.rows,\n\t            columns = data.columns,\n\t            X = new Matrix(rows, columns);\n\t        for (var i = 0; i < rows; i++) {\n\t            for (var j = 0; j < columns; j++) {\n\t                if (i > j) {\n\t                    X[i][j] = data[i][j];\n\t                } else if (i === j) {\n\t                    X[i][j] = 1;\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get upperTriangularFactor() {\n\t        var data = this.LU,\n\t            rows = data.rows,\n\t            columns = data.columns,\n\t            X = new Matrix(rows, columns);\n\t        for (var i = 0; i < rows; i++) {\n\t            for (var j = 0; j < columns; j++) {\n\t                if (i <= j) {\n\t                    X[i][j] = data[i][j];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get pivotPermutationVector() {\n\t        return this.pivotVector.slice();\n\t    },\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var lu = this.LU,\n\t            rows = lu.rows;\n\t\n\t        if (rows !== value.rows)\n\t            throw new Error('Invalid matrix dimensions');\n\t        if (this.isSingular())\n\t            throw new Error('LU matrix is singular');\n\t\n\t        var count = value.columns,\n\t            X = value.subMatrixRow(this.pivotVector, 0, count - 1),\n\t            columns = lu.columns,\n\t            i, j, k;\n\t\n\t        for (k = 0; k < columns; k++) {\n\t            for (i = k + 1; i < columns; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * lu[i][k];\n\t                }\n\t            }\n\t        }\n\t        for (k = columns - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                X[k][j] /= lu[k][k];\n\t            }\n\t            for (i = 0; i < k; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * lu[i][k];\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tmodule.exports = LuDecomposition;\n\n\n/***/ },\n/* 113 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(107);\n\tvar hypotenuse = __webpack_require__(110).hypotenuse;\n\t\n\t//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\n\tfunction QrDecomposition(value) {\n\t    if (!(this instanceof QrDecomposition)) {\n\t        return new QrDecomposition(value);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t\n\t    var qr = value.clone(),\n\t        m = value.rows,\n\t        n = value.columns,\n\t        rdiag = new Array(n),\n\t        i, j, k, s;\n\t\n\t    for (k = 0; k < n; k++) {\n\t        var nrm = 0;\n\t        for (i = k; i < m; i++) {\n\t            nrm = hypotenuse(nrm, qr[i][k]);\n\t        }\n\t        if (nrm !== 0) {\n\t            if (qr[k][k] < 0) {\n\t                nrm = -nrm;\n\t            }\n\t            for (i = k; i < m; i++) {\n\t                qr[i][k] /= nrm;\n\t            }\n\t            qr[k][k] += 1;\n\t            for (j = k + 1; j < n; j++) {\n\t                s = 0;\n\t                for (i = k; i < m; i++) {\n\t                    s += qr[i][k] * qr[i][j];\n\t                }\n\t                s = -s / qr[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    qr[i][j] += s * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t        rdiag[k] = -nrm;\n\t    }\n\t\n\t    this.QR = qr;\n\t    this.Rdiag = rdiag;\n\t}\n\t\n\tQrDecomposition.prototype = {\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var qr = this.QR,\n\t            m = qr.rows;\n\t\n\t        if (value.rows !== m)\n\t            throw new Error('Matrix row dimensions must agree');\n\t        if (!this.isFullRank())\n\t            throw new Error('Matrix is rank deficient');\n\t\n\t        var count = value.columns,\n\t            X = value.clone(),\n\t            n = qr.columns,\n\t            i, j, k, s;\n\t\n\t        for (k = 0; k < n; k++) {\n\t            for (j = 0; j < count; j++) {\n\t                s = 0;\n\t                for (i = k; i < m; i++) {\n\t                    s += qr[i][k] * X[i][j];\n\t                }\n\t                s = -s / qr[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    X[i][j] += s * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t        for (k = n - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                X[k][j] /= this.Rdiag[k];\n\t            }\n\t            for (i = 0; i < k; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t\n\t        return X.subMatrix(0, n - 1, 0, count - 1);\n\t    },\n\t    isFullRank: function () {\n\t        var columns = this.QR.columns;\n\t        for (var i = 0; i < columns; i++) {\n\t            if (this.Rdiag[i] === 0) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    },\n\t    get upperTriangularFactor() {\n\t        var qr = this.QR,\n\t            n = qr.columns,\n\t            X = new Matrix(n, n),\n\t            i, j;\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                if (i < j) {\n\t                    X[i][j] = qr[i][j];\n\t                } else if (i === j) {\n\t                    X[i][j] = this.Rdiag[i];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get orthogonalFactor() {\n\t        var qr = this.QR,\n\t            rows = qr.rows,\n\t            columns = qr.columns,\n\t            X = new Matrix(rows, columns),\n\t            i, j, k, s;\n\t\n\t        for (k = columns - 1; k >= 0; k--) {\n\t            for (i = 0; i < rows; i++) {\n\t                X[i][k] = 0;\n\t            }\n\t            X[k][k] = 1;\n\t            for (j = k; j < columns; j++) {\n\t                if (qr[k][k] !== 0) {\n\t                    s = 0;\n\t                    for (i = k; i < rows; i++) {\n\t                        s += qr[i][k] * X[i][j];\n\t                    }\n\t\n\t                    s = -s / qr[k][k];\n\t\n\t                    for (i = k; i < rows; i++) {\n\t                        X[i][j] += s * qr[i][k];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tmodule.exports = QrDecomposition;\n\n\n/***/ },\n/* 114 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(107);\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\n\tfunction CholeskyDecomposition(value) {\n\t    if (!(this instanceof CholeskyDecomposition)) {\n\t        return new CholeskyDecomposition(value);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t    if (!value.isSymmetric())\n\t        throw new Error('Matrix is not symmetric');\n\t\n\t    var a = value,\n\t        dimension = a.rows,\n\t        l = new Matrix(dimension, dimension),\n\t        positiveDefinite = true,\n\t        i, j, k;\n\t\n\t    for (j = 0; j < dimension; j++) {\n\t        var Lrowj = l[j];\n\t        var d = 0;\n\t        for (k = 0; k < j; k++) {\n\t            var Lrowk = l[k];\n\t            var s = 0;\n\t            for (i = 0; i < k; i++) {\n\t                s += Lrowk[i] * Lrowj[i];\n\t            }\n\t            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n\t            d = d + s * s;\n\t        }\n\t\n\t        d = a[j][j] - d;\n\t\n\t        positiveDefinite &= (d > 0);\n\t        l[j][j] = Math.sqrt(Math.max(d, 0));\n\t        for (k = j + 1; k < dimension; k++) {\n\t            l[j][k] = 0;\n\t        }\n\t    }\n\t\n\t    if (!positiveDefinite) {\n\t        throw new Error('Matrix is not positive definite');\n\t    }\n\t\n\t    this.L = l;\n\t}\n\t\n\tCholeskyDecomposition.prototype = {\n\t    get leftTriangularFactor() {\n\t        return this.L;\n\t    },\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var l = this.L,\n\t            dimension = l.rows;\n\t\n\t        if (value.rows !== dimension) {\n\t            throw new Error('Matrix dimensions do not match');\n\t        }\n\t\n\t        var count = value.columns,\n\t            B = value.clone(),\n\t            i, j, k;\n\t\n\t        for (k = 0; k < dimension; k++) {\n\t            for (j = 0; j < count; j++) {\n\t                for (i = 0; i < k; i++) {\n\t                    B[k][j] -= B[i][j] * l[k][i];\n\t                }\n\t                B[k][j] /= l[k][k];\n\t            }\n\t        }\n\t\n\t        for (k = dimension - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                for (i = k + 1; i < dimension; i++) {\n\t                    B[k][j] -= B[i][j] * l[i][k];\n\t                }\n\t                B[k][j] /= l[k][k];\n\t            }\n\t        }\n\t\n\t        return B;\n\t    }\n\t};\n\t\n\tmodule.exports = CholeskyDecomposition;\n\n\n/***/ },\n/* 115 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = exports = __webpack_require__(116);\n\texports.Utils = __webpack_require__(126);\n\texports.OPLS = __webpack_require__(127);\n\n/***/ },\n/* 116 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = PLS;\n\tvar Matrix = __webpack_require__(117);\n\tvar Utils = __webpack_require__(126);\n\t\n\t/**\n\t * Retrieves the sum at the column of the given matrix.\n\t * @param matrix\n\t * @param column\n\t * @returns {number}\n\t */\n\tfunction getColSum(matrix, column) {\n\t    var sum = 0;\n\t    for (var i = 0; i < matrix.rows; i++) {\n\t        sum += matrix[i][column];\n\t    }\n\t    return sum;\n\t}\n\t\n\t/**\n\t * Function that returns the index where the sum of each\n\t * column vector is maximum.\n\t * @param {Matrix} data\n\t * @returns {number} index of the maximum\n\t */\n\tfunction maxSumColIndex(data) {\n\t    var maxIndex = 0;\n\t    var maxSum = -Infinity;\n\t    for(var i = 0; i < data.columns; ++i) {\n\t        var currentSum = getColSum(data, i);\n\t        if(currentSum > maxSum) {\n\t            maxSum = currentSum;\n\t            maxIndex = i;\n\t        }\n\t    }\n\t    return maxIndex;\n\t}\n\t\n\t/**\n\t * Constructor of the PLS model.\n\t * @param reload - used for load purposes.\n\t * @param model - used for load purposes.\n\t * @constructor\n\t */\n\tfunction PLS(reload, model) {\n\t    if(reload) {\n\t        this.E = model.E;\n\t        this.F = model.F;\n\t        this.ssqYcal = model.ssqYcal;\n\t        this.R2X = model.R2X;\n\t        this.ymean = model.ymean;\n\t        this.ystd = model.ystd;\n\t        this.PBQ = model.PBQ;\n\t        this.T = model.T;\n\t        this.P = model.P;\n\t        this.U = model.U;\n\t        this.Q = model.Q;\n\t        this.W = model.W;\n\t        this.B = model.B;\n\t    }\n\t}\n\t\n\t/**\n\t * Function that fit the model with the given data and predictions, in this function is calculated the\n\t * following outputs:\n\t *\n\t * T - Score matrix of X\n\t * P - Loading matrix of X\n\t * U - Score matrix of Y\n\t * Q - Loading matrix of Y\n\t * B - Matrix of regression coefficient\n\t * W - Weight matrix of X\n\t *\n\t * @param {Matrix} trainingSet - Dataset to be apply the model\n\t * @param {Matrix} predictions - Predictions over each case of the dataset\n\t * @param {Number} options - recieves the latentVectors and the tolerance of each step of the PLS\n\t */\n\tPLS.prototype.train = function (trainingSet, predictions, options) {\n\t\n\t    if(options === undefined) options = {};\n\t\n\t    var latentVectors = options.latentVectors;\n\t    if(latentVectors === undefined || isNaN(latentVectors)) {\n\t        throw new RangeError(\"Latent vector must be a number.\");\n\t    }\n\t\n\t    var tolerance = options.tolerance;\n\t    if(tolerance === undefined || isNaN(tolerance)) {\n\t        throw new RangeError(\"Tolerance must be a number\");\n\t    }\n\t\n\t    if(trainingSet.length !== predictions.length)\n\t        throw new RangeError(\"The number of predictions and elements in the dataset must be the same\");\n\t\n\t    //var tolerance = 1e-9;\n\t    var X = Utils.featureNormalize(Matrix(trainingSet, true)).result;\n\t    var resultY = Utils.featureNormalize(Matrix(predictions, true));\n\t    this.ymean = resultY.means.neg();\n\t    this.ystd = resultY.std;\n\t    var Y = resultY.result;\n\t\n\t    var rx = X.rows;\n\t    var cx = X.columns;\n\t    var ry = Y.rows;\n\t    var cy = Y.columns;\n\t\n\t    if(rx != ry) {\n\t        throw new RangeError(\"dataset cases is not the same as the predictions\");\n\t    }\n\t\n\t    var ssqXcal = X.clone().mul(X).sum(); // for the r²\n\t    var sumOfSquaresY = Y.clone().mul(Y).sum();\n\t\n\t    var n = latentVectors; //Math.max(cx, cy); // components of the pls\n\t    var T = Matrix.zeros(rx, n);\n\t    var P = Matrix.zeros(cx, n);\n\t    var U = Matrix.zeros(ry, n);\n\t    var Q = Matrix.zeros(cy, n);\n\t    var B = Matrix.zeros(n, n);\n\t    var W = P.clone();\n\t    var k = 0;\n\t    var R2X = new Array(n);\n\t\n\t    while(Utils.norm(Y) > tolerance && k < n) {\n\t        var transposeX = X.transpose();\n\t        var transposeY = Y.transpose();\n\t\n\t        var tIndex = maxSumColIndex(X.clone().mulM(X));\n\t        var uIndex = maxSumColIndex(Y.clone().mulM(Y));\n\t\n\t        var t1 = X.getColumnVector(tIndex);\n\t        var u = Y.getColumnVector(uIndex);\n\t        var t = Matrix.zeros(rx, 1);\n\t\n\t        while(Utils.norm(t1.clone().sub(t)) > tolerance) {\n\t            var w = transposeX.mmul(u);\n\t            w.div(Utils.norm(w));\n\t            t = t1;\n\t            t1 = X.mmul(w);\n\t            var q = transposeY.mmul(t1);\n\t            q.div(Utils.norm(q));\n\t            u = Y.mmul(q);\n\t        }\n\t\n\t        t = t1;\n\t        var num = transposeX.mmul(t);\n\t        var den = (t.transpose().mmul(t))[0][0];\n\t        var p = num.div(den);\n\t        var pnorm = Utils.norm(p);\n\t        p.div(pnorm);\n\t        t.mul(pnorm);\n\t        w.mul(pnorm);\n\t\n\t        num = u.transpose().mmul(t);\n\t        den = (t.transpose().mmul(t))[0][0];\n\t        var b = (num.div(den))[0][0];\n\t        X.sub(t.mmul(p.transpose()));\n\t        Y.sub(t.clone().mul(b).mmul(q.transpose()));\n\t\n\t        T.setColumn(k, t);\n\t        P.setColumn(k, p);\n\t        U.setColumn(k, u);\n\t        Q.setColumn(k, q);\n\t        W.setColumn(k, w);\n\t\n\t        B[k][k] = b;\n\t        k++;\n\t    }\n\t\n\t    k--;\n\t    T = T.subMatrix(0, T.rows - 1, 0, k);\n\t    P = P.subMatrix(0, P.rows - 1, 0, k);\n\t    U = U.subMatrix(0, U.rows - 1, 0, k);\n\t    Q = Q.subMatrix(0, Q.rows - 1, 0, k);\n\t    W = W.subMatrix(0, W.rows - 1, 0, k);\n\t    B = B.subMatrix(0, k, 0, k);\n\t\n\t    this.R2X = t.transpose().mmul(t).mmul(p.transpose().mmul(p)).divS(ssqXcal)[0][0];\n\t\n\t    // TODO: review of R2Y\n\t    //this.R2Y = t.transpose().mmul(t).mul(q[k][0]*q[k][0]).divS(ssqYcal)[0][0];\n\t\n\t    this.ssqYcal = sumOfSquaresY;\n\t    this.E = X;\n\t    this.F = Y;\n\t    this.T = T;\n\t    this.P = P;\n\t    this.U = U;\n\t    this.Q = Q;\n\t    this.W = W;\n\t    this.B = B;\n\t    this.PBQ = P.mmul(B).mmul(Q.transpose());\n\t};\n\t\n\t/**\n\t * Function that predict the behavior of the given dataset.\n\t * @param dataset - data to be predicted.\n\t * @returns {Matrix} - predictions of each element of the dataset.\n\t */\n\tPLS.prototype.predict = function (dataset) {\n\t    var X = Matrix(dataset, true);\n\t    var normalization = Utils.featureNormalize(X);\n\t    X = normalization.result;\n\t    var Y = X.mmul(this.PBQ);\n\t    Y.mulRowVector(this.ystd);\n\t    Y.addRowVector(this.ymean);\n\t    return Y;\n\t};\n\t\n\t/**\n\t * Function that returns the explained variance on training of the PLS model.\n\t * @returns {number}\n\t */\n\tPLS.prototype.getExplainedVariance = function () {\n\t    return this.R2X;\n\t};\n\t\n\t/**\n\t * Load a PLS model from an Object\n\t * @param model\n\t * @returns {PLS} - PLS object from the given model\n\t */\n\tPLS.load = function (model) {\n\t    if(model.modelName !== 'PLS')\n\t        throw new RangeError(\"The current model is invalid!\");\n\t\n\t    return new PLS(true, model);\n\t};\n\t\n\t/**\n\t * Function that exports a PLS model to an Object.\n\t * @returns {{modelName: string, ymean: *, ystd: *, PBQ: *}} model.\n\t */\n\tPLS.prototype.export = function () {\n\t    return {\n\t        modelName: \"PLS\",\n\t        E: this.E,\n\t        F: this.F,\n\t        R2X: this.R2X,\n\t        ssqYcal: this.ssqYcal,\n\t        ymean: this.ymean,\n\t        ystd: this.ystd,\n\t        PBQ: this.PBQ,\n\t        T: this.T,\n\t        P: this.P,\n\t        U: this.U,\n\t        Q: this.Q,\n\t        W: this.W,\n\t        B: this.B\n\t    };\n\t};\n\n\n/***/ },\n/* 117 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(118);\n\tmodule.exports.Decompositions = module.exports.DC = __webpack_require__(119);\n\n\n/***/ },\n/* 118 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar Asplice = Array.prototype.splice,\n\t    Aconcat = Array.prototype.concat;\n\t\n\t// For performance : http://jsperf.com/clone-array-slice-vs-while-vs-for\n\tfunction slice(arr) {\n\t    var i = 0,\n\t        ii = arr.length,\n\t        result = new Array(ii);\n\t    for (; i < ii; i++) {\n\t        result[i] = arr[i];\n\t    }\n\t    return result;\n\t}\n\t\n\t/**\n\t * Real matrix.\n\t * @constructor\n\t * @param {number|Array} nRows - Number of rows of the new matrix or a 2D array containing the data.\n\t * @param {number|boolean} [nColumns] - Number of columns of the new matrix or a boolean specifying if the input array should be cloned\n\t */\n\tfunction Matrix(nRows, nColumns) {\n\t    var i = 0, rows, columns, matrix, newInstance;\n\t    if (Array.isArray(nRows)) {\n\t        newInstance = nColumns;\n\t        matrix = newInstance ? slice(nRows) : nRows;\n\t        nRows = matrix.length;\n\t        nColumns = matrix[0].length;\n\t        if (typeof nColumns === 'undefined') {\n\t            throw new TypeError('Data must be a 2D array');\n\t        }\n\t        if (nRows > 0 && nColumns > 0) {\n\t            for (; i < nRows; i++) {\n\t                if (matrix[i].length !== nColumns) {\n\t                    throw new RangeError('Inconsistent array dimensions');\n\t                } else if (newInstance) {\n\t                    matrix[i] = slice(matrix[i]);\n\t                }\n\t            }\n\t        } else {\n\t            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n\t        }\n\t    } else if (typeof nRows === 'number') { // Create empty matrix\n\t        if (nRows > 0 && nColumns > 0) {\n\t            matrix = new Array(nRows);\n\t            for (; i < nRows; i++) {\n\t                matrix[i] = new Array(nColumns);\n\t            }\n\t        } else {\n\t            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n\t        }\n\t    } else {\n\t        throw new TypeError('Invalid arguments');\n\t    }\n\t\n\t    Object.defineProperty(matrix, 'rows', {writable: true, value: nRows});\n\t    Object.defineProperty(matrix, 'columns', {writable: true, value: nColumns});\n\t\n\t    matrix.__proto__ = Matrix.prototype;\n\t\n\t    return matrix;\n\t}\n\t\n\t/**\n\t * Constructs a Matrix with the chosen dimensions from a 1D array.\n\t * @param {number} newRows - Number of rows\n\t * @param {number} newColumns - Number of columns\n\t * @param {Array} newData - A 1D array containing data for the matrix\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.from1DArray = function from1DArray(newRows, newColumns, newData) {\n\t    var length, data, i = 0;\n\t\n\t    length = newRows * newColumns;\n\t    if (length !== newData.length)\n\t        throw new RangeError('Data length does not match given dimensions');\n\t\n\t    data = new Array(newRows);\n\t    for (; i < newRows; i++) {\n\t        data[i] = newData.slice(i * newColumns, (i + 1) * newColumns);\n\t    }\n\t    return new Matrix(data);\n\t};\n\t\n\t/**\n\t * Creates a row vector, a matrix with only one row.\n\t * @param {Array} newData - A 1D array containing data for the vector\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.rowVector = function rowVector(newData) {\n\t    return new Matrix([newData]);\n\t};\n\t\n\t/**\n\t * Creates a column vector, a matrix with only one column.\n\t * @param {Array} newData - A 1D array containing data for the vector\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.columnVector = function columnVector(newData) {\n\t    var l = newData.length, vector = new Array(l);\n\t    for (var i = 0; i < l; i++)\n\t        vector[i] = [newData[i]];\n\t    return new Matrix(vector);\n\t};\n\t\n\t/**\n\t * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.empty = function empty(rows, columns) {\n\t    return new Matrix(rows, columns);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be set to zero.\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.zeros = function zeros(rows, columns) {\n\t    return Matrix.empty(rows, columns).fill(0);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be set to one.\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.ones = function ones(rows, columns) {\n\t    return Matrix.empty(rows, columns).fill(1);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be randomly set using Math.random().\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} The new matrix\n\t */\n\tMatrix.rand = function rand(rows, columns) {\n\t    var matrix = Matrix.empty(rows, columns);\n\t    for (var i = 0, ii = matrix.rows; i < ii; i++) {\n\t        for (var j = 0, jj = matrix.columns; j < jj; j++) {\n\t            matrix[i][j] = Math.random();\n\t        }\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and other will be 0.\n\t * @param {number} n - Number of rows and columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.eye = function eye(n) {\n\t    var matrix = Matrix.zeros(n, n), l = matrix.rows;\n\t    for (var i = 0; i < l; i++) {\n\t        matrix[i][i] = 1;\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates a diagonal matrix based on the given array.\n\t * @param {Array} data - Array containing the data for the diagonal\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.diag = function diag(data) {\n\t    var l = data.length, matrix = Matrix.zeros(l, l);\n\t    for (var i = 0; i < l; i++) {\n\t        matrix[i][i] = data[i];\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates an array of indices between two values\n\t * @param {number} from\n\t * @param {number} to\n\t * @returns {Array}\n\t */\n\tMatrix.indices = function indices(from, to) {\n\t    var vector = new Array(to - from);\n\t    for (var i = 0; i < vector.length; i++)\n\t        vector[i] = from++;\n\t    return vector;\n\t};\n\t\n\t// TODO DOC\n\tMatrix.stack = function stack(arg1) {\n\t    var i, j, k;\n\t    if (Matrix.isMatrix(arg1)) {\n\t        var rows = 0,\n\t            cols = 0;\n\t        for (i = 0; i < arguments.length; i++) {\n\t            rows += arguments[i].rows;\n\t            if (arguments[i].columns > cols)\n\t                cols = arguments[i].columns;\n\t        }\n\t\n\t        var r = Matrix.zeros(rows, cols);\n\t        var c = 0;\n\t        for (i = 0; i < arguments.length; i++) {\n\t            var current = arguments[i];\n\t            for (j = 0; j < current.rows; j++) {\n\t                for (k = 0; k < current.columns; k++)\n\t                    r[c][k] = current[j][k];\n\t                c++;\n\t            }\n\t        }\n\t        return r;\n\t    }\n\t    else if (Array.isArray(arg1)) {\n\t        var matrix = Matrix.empty(arguments.length, arg1.length);\n\t        for (i = 0; i < arguments.length; i++)\n\t            matrix.setRow(i, arguments[i]);\n\t        return matrix;\n\t    }\n\t};\n\t\n\t// TODO DOC\n\tMatrix.expand = function expand(base, count) {\n\t    var expansion = [];\n\t    for (var i = 0; i < count.length; i++)\n\t        for (var j = 0; j < count[i]; j++)\n\t            expansion.push(base[i]);\n\t    return new Matrix(expansion);\n\t};\n\t\n\t/**\n\t * Check that the provided value is a Matrix and tries to instantiate one if not\n\t * @param value - The value to check\n\t * @returns {Matrix}\n\t * @throws {TypeError}\n\t */\n\tMatrix.checkMatrix = function checkMatrix(value) {\n\t    if (!value) {\n\t        throw new TypeError('Argument has to be a matrix');\n\t    }\n\t    if (value.klass !== 'Matrix') {\n\t        value = new Matrix(value);\n\t    }\n\t    return value;\n\t};\n\t\n\t/**\n\t * Returns true if the argument is a Matrix, false otherwise\n\t * @param value - The value to check\n\t * @returns {boolean}\n\t */\n\tMatrix.isMatrix = function isMatrix(value) {\n\t    return value ? value.klass === 'Matrix' : false;\n\t};\n\t\n\t/**\n\t * @property {string} - The name of this class.\n\t */\n\tObject.defineProperty(Matrix.prototype, 'klass', {\n\t    get: function klass() {\n\t        return 'Matrix';\n\t    }\n\t});\n\t\n\t/**\n\t * @property {number} - The number of elements in the matrix.\n\t */\n\tObject.defineProperty(Matrix.prototype, 'size', {\n\t    get: function size() {\n\t        return this.rows * this.columns;\n\t    }\n\t});\n\t\n\t/**\n\t * @private\n\t * Internal check that a row index is not out of bounds\n\t * @param {number} index\n\t */\n\tMatrix.prototype.checkRowIndex = function checkRowIndex(index) {\n\t    if (index < 0 || index > this.rows - 1)\n\t        throw new RangeError('Row index out of range.');\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that a column index is not out of bounds\n\t * @param {number} index\n\t */\n\tMatrix.prototype.checkColumnIndex = function checkColumnIndex(index) {\n\t    if (index < 0 || index > this.columns - 1)\n\t        throw new RangeError('Column index out of range.');\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that two matrices have the same dimensions\n\t * @param {Matrix} otherMatrix\n\t */\n\tMatrix.prototype.checkDimensions = function checkDimensions(otherMatrix) {\n\t    if ((this.rows !== otherMatrix.rows) || (this.columns !== otherMatrix.columns))\n\t        throw new RangeError('Matrices dimensions must be equal.');\n\t};\n\t\n\t/**\n\t * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n\t * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.apply = function apply(callback) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            callback.call(this, i, j);\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Creates an exact and independent copy of the matrix\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.clone = function clone() {\n\t    return new Matrix(this.to2DArray());\n\t};\n\t\n\t/**\n\t * Returns a new 1D array filled row by row with the matrix values\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.to1DArray = function to1DArray() {\n\t    return Aconcat.apply([], this);\n\t};\n\t\n\t/**\n\t * Returns a 2D array containing a copy of the data\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.to2DArray = function to2DArray() {\n\t    var l = this.rows, copy = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        copy[i] = slice(this[i]);\n\t    }\n\t    return copy;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one row\n\t */\n\tMatrix.prototype.isRowVector = function isRowVector() {\n\t    return this.rows === 1;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one column\n\t */\n\tMatrix.prototype.isColumnVector = function isColumnVector() {\n\t    return this.columns === 1;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one row or one column\n\t */\n\tMatrix.prototype.isVector = function isVector() {\n\t    return (this.rows === 1) || (this.columns === 1);\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has the same number of rows and columns\n\t */\n\tMatrix.prototype.isSquare = function isSquare() {\n\t    return this.rows === this.columns;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n\t */\n\tMatrix.prototype.isSymmetric = function isSymmetric() {\n\t    if (this.isSquare()) {\n\t        var l = this.rows;\n\t        for (var i = 0; i < l; i++) {\n\t            for (var j = 0; j <= i; j++) {\n\t                if (this[i][j] !== this[j][i]) {\n\t                    return false;\n\t                }\n\t            }\n\t        }\n\t        return true;\n\t    }\n\t    return false;\n\t};\n\t\n\t/**\n\t * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n\t * @param {number} rowIndex - Index of the row\n\t * @param {number} columnIndex - Index of the column\n\t * @param {number} value - The new value for the element\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.set = function set(rowIndex, columnIndex, value) {\n\t    this[rowIndex][columnIndex] = value;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n\t * @param {number} rowIndex - Index of the row\n\t * @param {number} columnIndex - Index of the column\n\t * @returns {number}\n\t */\n\tMatrix.prototype.get = function get(rowIndex, columnIndex) {\n\t    return this[rowIndex][columnIndex];\n\t};\n\t\n\t/**\n\t * Fills the matrix with a given value. All elements will be set to this value.\n\t * @param {number} value - New value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.fill = function fill(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] = value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Negates the matrix. All elements will be multiplied by (-1)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.neg = function neg() {\n\t    return this.mulS(-1);\n\t};\n\t\n\t/**\n\t * Adds a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.add = function add(value) {\n\t    if (typeof value === 'number')\n\t        return this.addS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.addM(value);\n\t};\n\t\n\t/**\n\t * Adds a scalar to each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addS = function addS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds the value of each element of matrix to the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addM = function addM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sub = function sub(value) {\n\t    if (typeof value === 'number')\n\t        return this.subS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.subM(value);\n\t};\n\t\n\t/**\n\t * Subtracts a scalar from each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subS = function subS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the value of each element of matrix from the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subM = function subM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mul = function mul(value) {\n\t    if (typeof value === 'number')\n\t        return this.mulS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.mulM(value);\n\t};\n\t\n\t/**\n\t * Multiplies a scalar with each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulS = function mulS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the value of each element of matrix with the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulM = function mulM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides by a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.div = function div(value) {\n\t    if (typeof value === 'number')\n\t        return this.divS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.divM(value);\n\t};\n\t\n\t/**\n\t * Divides each element of the matrix by a scalar\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divS = function divS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides each element of this by the corresponding element of matrix\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divM = function divM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns a new array from the given row index\n\t * @param {number} index - Row index\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.getRow = function getRow(index) {\n\t    this.checkRowIndex(index);\n\t    return slice(this[index]);\n\t};\n\t\n\t/**\n\t * Returns a new row vector from the given row index\n\t * @param {number} index - Row index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.getRowVector = function getRowVector(index) {\n\t    return Matrix.rowVector(this.getRow(index));\n\t};\n\t\n\t/**\n\t * Sets a row at the given index\n\t * @param {number} index - Row index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.setRow = function setRow(index, array) {\n\t    this.checkRowIndex(index);\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    if (array.length !== this.columns)\n\t        throw new RangeError('Invalid row size');\n\t    this[index] = slice(array);\n\t    return this;\n\t};\n\t\n\t/**\n\t * Removes a row from the given index\n\t * @param {number} index - Row index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.removeRow = function removeRow(index) {\n\t    this.checkRowIndex(index);\n\t    if (this.rows === 1)\n\t        throw new RangeError('A matrix cannot have less than one row');\n\t    Asplice.call(this, index, 1);\n\t    this.rows -= 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds a row at the given index\n\t * @param {number} [index = this.rows] - Row index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addRow = function addRow(index, array) {\n\t    if (typeof array === 'undefined') {\n\t        array = index;\n\t        index = this.rows;\n\t    }\n\t    if (index < 0 || index > this.rows)\n\t        throw new RangeError('Row index out of range.');\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    if (array.length !== this.columns)\n\t        throw new RangeError('Invalid row size');\n\t    Asplice.call(this, index, 0, slice(array));\n\t    this.rows += 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Swaps two rows\n\t * @param {number} row1 - First row index\n\t * @param {number} row2 - Second row index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.swapRows = function swapRows(row1, row2) {\n\t    this.checkRowIndex(row1);\n\t    this.checkRowIndex(row2);\n\t    var temp = this[row1];\n\t    this[row1] = this[row2];\n\t    this[row2] = temp;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns a new array from the given column index\n\t * @param {number} index - Column index\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.getColumn = function getColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var l = this.rows, column = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        column[i] = this[i][index];\n\t    }\n\t    return column;\n\t};\n\t\n\t/**\n\t * Returns a new column vector from the given column index\n\t * @param {number} index - Column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.getColumnVector = function getColumnVector(index) {\n\t    return Matrix.columnVector(this.getColumn(index));\n\t};\n\t\n\t/**\n\t * Sets a column at the given index\n\t * @param {number} index - Column index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.setColumn = function setColumn(index, array) {\n\t    this.checkColumnIndex(index);\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    var l = this.rows;\n\t    if (array.length !== l)\n\t        throw new RangeError('Invalid column size');\n\t    for (var i = 0; i < l; i++) {\n\t        this[i][index] = array[i];\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Removes a column from the given index\n\t * @param {number} index - Column index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.removeColumn = function removeColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    if (this.columns === 1)\n\t        throw new RangeError('A matrix cannot have less than one column');\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        this[i].splice(index, 1);\n\t    }\n\t    this.columns -= 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds a column at the given index\n\t * @param {number} [index = this.columns] - Column index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addColumn = function addColumn(index, array) {\n\t    if (typeof array === 'undefined') {\n\t        array = index;\n\t        index = this.columns;\n\t    }\n\t    if (index < 0 || index > this.columns)\n\t        throw new RangeError('Column index out of range.');\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    var l = this.rows;\n\t    if (array.length !== l)\n\t        throw new RangeError('Invalid column size');\n\t    for (var i = 0; i < l; i++) {\n\t        this[i].splice(index, 0, array[i]);\n\t    }\n\t    this.columns += 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Swaps two columns\n\t * @param {number} column1 - First column index\n\t * @param {number} column2 - Second column index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.swapColumns = function swapColumns(column1, column2) {\n\t    this.checkRowIndex(column1);\n\t    this.checkRowIndex(column2);\n\t    var l = this.rows, temp, row;\n\t    for (var i = 0; i < l; i++) {\n\t        row = this[i];\n\t        temp = row[column1];\n\t        row[column1] = row[column2];\n\t        row[column2] = temp;\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that the provided vector is an array with the right length\n\t * @param {Array|Matrix} vector\n\t * @returns {Array}\n\t * @throws {RangeError}\n\t */\n\tMatrix.prototype.checkRowVector = function checkRowVector(vector) {\n\t    if (Matrix.isMatrix(vector))\n\t        vector = vector.to1DArray();\n\t    if (vector.length !== this.columns)\n\t        throw new RangeError('vector size must be the same as the number of columns');\n\t    return vector;\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that the provided vector is an array with the right length\n\t * @param {Array|Matrix} vector\n\t * @returns {Array}\n\t * @throws {RangeError}\n\t */\n\tMatrix.prototype.checkColumnVector = function checkColumnVector(vector) {\n\t    if (Matrix.isMatrix(vector))\n\t        vector = vector.to1DArray();\n\t    if (vector.length !== this.rows)\n\t        throw new RangeError('vector size must be the same as the number of rows');\n\t    return vector;\n\t};\n\t\n\t/**\n\t * Adds the values of a vector to each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addRowVector = function addRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the values of a vector from each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subRowVector = function subRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a vector with each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulRowVector = function mulRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides the values of each row by those of a vector\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divRowVector = function divRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds the values of a vector to each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addColumnVector = function addColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the values of a vector from each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subColumnVector = function subColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a vector with each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulColumnVector = function mulColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides the values of each column by those of a vector\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divColumnVector = function divColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a row with a scalar\n\t * @param {number} index - Row index\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulRow = function mulRow(index, value) {\n\t    this.checkRowIndex(index);\n\t    var i = 0, l = this.columns;\n\t    for (; i < l; i++) {\n\t        this[index][i] *= value;\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a column with a scalar\n\t * @param {number} index - Column index\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulColumn = function mulColumn(index, value) {\n\t    this.checkColumnIndex(index);\n\t    var i = 0, l = this.rows;\n\t    for (; i < l; i++) {\n\t        this[i][index] *= value;\n\t    }\n\t};\n\t\n\t/**\n\t * A matrix index\n\t * @typedef {Object} MatrixIndex\n\t * @property {number} row\n\t * @property {number} column\n\t */\n\t\n\t/**\n\t * Returns the maximum value of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.max = function max() {\n\t    var v = -Infinity;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] > v) {\n\t                v = this[i][j];\n\t            }\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxIndex = function maxIndex() {\n\t    var v = -Infinity;\n\t    var idx = {};\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] > v) {\n\t                v = this[i][j];\n\t                idx.row = i;\n\t                idx.column = j;\n\t            }\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.min = function min() {\n\t    var v = Infinity;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] < v) {\n\t                v = this[i][j];\n\t            }\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the minimum value\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minIndex = function minIndex() {\n\t    var v = Infinity;\n\t    var idx = {};\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] < v) {\n\t                v = this[i][j];\n\t                idx.row = i;\n\t                idx.column = j;\n\t            }\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.maxRow = function maxRow(index) {\n\t    this.checkRowIndex(index);\n\t    var v = -Infinity;\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] > v) {\n\t            v = this[index][i];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxRowIndex = function maxRowIndex(index) {\n\t    this.checkRowIndex(index);\n\t    var v = -Infinity;\n\t    var idx = {\n\t            row: index\n\t        };\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] > v) {\n\t            v = this[index][i];\n\t            idx.column = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of one row\n\t * @param {number} index - Row index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.minRow = function minRow(index) {\n\t    this.checkRowIndex(index);\n\t    var v = Infinity;\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] < v) {\n\t            v = this[index][i];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minRowIndex = function minRowIndex(index) {\n\t    this.checkRowIndex(index);\n\t    var v = Infinity;\n\t    var idx = {\n\t        row: index,\n\t        column: 0\n\t    };\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] < v) {\n\t            v = this[index][i];\n\t            idx.column = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the maximum value of one column\n\t * @param {number} index - Column index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.maxColumn = function maxColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = -Infinity;\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] > v) {\n\t            v = this[i][index];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one column\n\t * @param {number} index - Column index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxColumnIndex = function maxColumnIndex(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = -Infinity;\n\t    var idx = {\n\t        row: 0,\n\t        column: index\n\t    };\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] > v) {\n\t            v = this[i][index];\n\t            idx.row = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of one column\n\t * @param {number} index - Column index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.minColumn = function minColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = Infinity;\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] < v) {\n\t            v = this[i][index];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the minimum value of one column\n\t * @param {number} index - Column index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minColumnIndex = function minColumnIndex(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = Infinity;\n\t    var idx = {\n\t        row: 0,\n\t        column: index\n\t    };\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] < v) {\n\t            v = this[i][index];\n\t            idx.row = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns an array containing the diagonal values of the matrix\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.diag = function diag() {\n\t    if (!this.isSquare())\n\t        throw new TypeError('Only square matrices have a diagonal.');\n\t    var diag = new Array(this.rows);\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        diag[i] = this[i][i];\n\t    }\n\t    return diag;\n\t};\n\t\n\t/**\n\t * Returns the sum of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.sum = function sum() {\n\t    var v = 0;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            v += this[i][j];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the mean of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.mean = function mean() {\n\t    return this.sum() / this.size;\n\t};\n\t\n\t/**\n\t * Returns the product of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.prod = function prod() {\n\t    var prod = 1;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            prod *= this[i][j];\n\t        }\n\t    }\n\t    return prod;\n\t};\n\t\n\t/**\n\t * Computes the cumulative sum of the matrix elements (in place, row by row)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.cumulativeSum = function cumulativeSum() {\n\t    var sum = 0;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            sum += this[i][j];\n\t            this[i][j] = sum;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Computes the dot (scalar) product between the matrix and another\n\t * @param {Matrix} other vector\n\t * @returns {number}\n\t */\n\tMatrix.prototype.dot = function dot(other) {\n\t    if (this.size !== other.size)\n\t        throw new RangeError('vectors do not have the same size');\n\t    var vector1 = this.to1DArray();\n\t    var vector2 = other.to1DArray();\n\t    var dot = 0, l = vector1.length;\n\t    for (var i = 0; i < l; i++) {\n\t        dot += vector1[i] * vector2[i];\n\t    }\n\t    return dot;\n\t};\n\t\n\t/**\n\t * Returns the matrix product between this and other\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.mmul = function mmul(other) {\n\t    if (!Matrix.isMatrix(other))\n\t        throw new TypeError('parameter \"other\" must be a matrix');\n\t    if (this.columns !== other.rows)\n\t        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n\t\n\t    var m = this.rows, n = this.columns, p = other.columns;\n\t    var result = new Matrix(m, p);\n\t\n\t    var Bcolj = new Array(n);\n\t    var i, j, k;\n\t    for (j = 0; j < p; j++) {\n\t        for (k = 0; k < n; k++)\n\t            Bcolj[k] = other[k][j];\n\t\n\t        for (i = 0; i < m; i++) {\n\t            var Arowi = this[i];\n\t\n\t            var s = 0;\n\t            for (k = 0; k < n; k++)\n\t                s += Arowi[k] * Bcolj[k];\n\t\n\t            result[i][j] = s;\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Sorts the rows (in place)\n\t * @param {function} compareFunction - usual Array.prototype.sort comparison function\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sortRows = function sortRows(compareFunction) {\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        this[i].sort(compareFunction);\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Sorts the columns (in place)\n\t * @param {function} compareFunction - usual Array.prototype.sort comparison function\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sortColumns = function sortColumns(compareFunction) {\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Transposes the matrix and returns a new one containing the result\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.transpose = function transpose() {\n\t    var result = new Matrix(this.columns, this.rows);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[j][i] = this[i][j];\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix\n\t * @param {number} startRow - First row index\n\t * @param {number} endRow - Last row index\n\t * @param {number} startColumn - First column index\n\t * @param {number} endColumn - Last column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrix = function subMatrix(startRow, endRow, startColumn, endColumn) {\n\t    if ((startRow > endRow) || (startColumn > endColumn) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n\t        throw new RangeError('Argument out of range');\n\t    var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n\t    for (var i = startRow; i <= endRow; i++) {\n\t        for (var j = startColumn; j <= endColumn; j++) {\n\t            newMatrix[i - startRow][j - startColumn] = this[i][j];\n\t        }\n\t    }\n\t    return newMatrix;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix based on an array of row indices\n\t * @param {Array} indices - Array containing the row indices\n\t * @param {number} [startColumn = 0] - First column index\n\t * @param {number} [endColumn = this.columns-1] - Last column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrixRow = function subMatrixRow(indices, startColumn, endColumn) {\n\t    if (typeof startColumn === 'undefined') {\n\t        startColumn = 0;\n\t        endColumn = this.columns - 1;\n\t    } else if (typeof endColumn === 'undefined') {\n\t        endColumn = this.columns - 1;\n\t    }\n\t    if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n\t        throw new RangeError('Argument out of range.');\n\t    var l = indices.length, rows = this.rows,\n\t        X = new Matrix(l, endColumn - startColumn + 1);\n\t    for (var i = 0; i < l; i++) {\n\t        for (var j = startColumn; j <= endColumn; j++) {\n\t            if ((indices[i] < 0) || (indices[i] >= rows))\n\t                throw new RangeError('Argument out of range.');\n\t            X[i][j - startColumn] = this[indices[i]][j];\n\t        }\n\t    }\n\t    return X;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix based on an array of column indices\n\t * @param {Array} indices - Array containing the column indices\n\t * @param {number} [startRow = 0] - First row index\n\t * @param {number} [endRow = this.rows-1] - Last row index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrixColumn = function subMatrixColumn(indices, startRow, endRow) {\n\t    if (typeof startRow === 'undefined') {\n\t        startRow = 0;\n\t        endRow = this.rows - 1;\n\t    } else if (typeof endRow === 'undefined') {\n\t        endRow = this.rows - 1;\n\t    }\n\t    if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows))\n\t        throw new RangeError('Argument out of range.');\n\t    var l = indices.length, columns = this.columns,\n\t        X = new Matrix(endRow - startRow + 1, l);\n\t    for (var i = 0; i < l; i++) {\n\t        for (var j = startRow; j <= endRow; j++) {\n\t            if ((indices[i] < 0) || (indices[i] >= columns))\n\t                throw new RangeError('Argument out of range.');\n\t            X[j - startRow][i] = this[j][indices[i]];\n\t        }\n\t    }\n\t    return X;\n\t};\n\t\n\t/**\n\t * Returns the trace of the matrix (sum of the diagonal elements)\n\t * @returns {number}\n\t */\n\tMatrix.prototype.trace = function trace() {\n\t    if (!this.isSquare())\n\t        throw new TypeError('The matrix is not square');\n\t    var trace = 0, i = 0, l = this.rows;\n\t    for (; i < l; i++) {\n\t        trace += this[i][i];\n\t    }\n\t    return trace;\n\t};\n\t\n\t/**\n\t * Sets each element of the matrix to its absolute value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.abs = function abs() {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] = Math.abs(this[i][j]);\n\t        }\n\t    }\n\t};\n\t\n\tmodule.exports = Matrix;\n\n\n/***/ },\n/* 119 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(118);\n\t\n\tvar SingularValueDecomposition = __webpack_require__(120);\n\tvar EigenvalueDecomposition = __webpack_require__(122);\n\tvar LuDecomposition = __webpack_require__(123);\n\tvar QrDecomposition = __webpack_require__(124);\n\tvar CholeskyDecomposition = __webpack_require__(125);\n\t\n\tfunction inverse(matrix) {\n\t    return solve(matrix, Matrix.eye(matrix.rows));\n\t}\n\t\n\tMatrix.prototype.inverse = function () {\n\t    return inverse(this);\n\t};\n\t\n\tfunction solve(leftHandSide, rightHandSide) {\n\t    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n\t}\n\t\n\tMatrix.prototype.solve = function (other) {\n\t    return solve(this, other);\n\t};\n\t\n\tmodule.exports = {\n\t    SingularValueDecomposition: SingularValueDecomposition,\n\t    SVD: SingularValueDecomposition,\n\t    EigenvalueDecomposition: EigenvalueDecomposition,\n\t    EVD: EigenvalueDecomposition,\n\t    LuDecomposition: LuDecomposition,\n\t    LU: LuDecomposition,\n\t    QrDecomposition: QrDecomposition,\n\t    QR: QrDecomposition,\n\t    CholeskyDecomposition: CholeskyDecomposition,\n\t    CHO: CholeskyDecomposition,\n\t    inverse: inverse,\n\t    solve: solve\n\t};\n\n\n/***/ },\n/* 120 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(118);\n\tvar hypotenuse = __webpack_require__(121).hypotenuse;\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\n\tfunction SingularValueDecomposition(value, options) {\n\t    if (!(this instanceof SingularValueDecomposition)) {\n\t        return new SingularValueDecomposition(value, options);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t\n\t    options = options || {};\n\t\n\t    var a = value.clone(),\n\t        m = value.rows,\n\t        n = value.columns,\n\t        nu = Math.min(m, n);\n\t\n\t    var wantu = true, wantv = true;\n\t    if (options.computeLeftSingularVectors === false)\n\t        wantu = false;\n\t    if (options.computeRightSingularVectors === false)\n\t        wantv = false;\n\t    var autoTranspose = options.autoTranspose === true;\n\t\n\t    var swapped = false;\n\t    if (m < n) {\n\t        if (!autoTranspose) {\n\t            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n\t        } else {\n\t            a = a.transpose();\n\t            m = a.rows;\n\t            n = a.columns;\n\t            swapped = true;\n\t            var aux = wantu;\n\t            wantu = wantv;\n\t            wantv = aux;\n\t        }\n\t    }\n\t\n\t    var s = new Array(Math.min(m + 1, n)),\n\t        U = Matrix.zeros(m, nu),\n\t        V = Matrix.zeros(n, n),\n\t        e = new Array(n),\n\t        work = new Array(m);\n\t\n\t    var nct = Math.min(m - 1, n);\n\t    var nrt = Math.max(0, Math.min(n - 2, m));\n\t\n\t    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n\t        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\t\n\t    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n\t        if (k < nct) {\n\t            s[k] = 0;\n\t            for (i = k; i < m; i++) {\n\t                s[k] = hypotenuse(s[k], a[i][k]);\n\t            }\n\t            if (s[k] !== 0) {\n\t                if (a[k][k] < 0) {\n\t                    s[k] = -s[k];\n\t                }\n\t                for (i = k; i < m; i++) {\n\t                    a[i][k] /= s[k];\n\t                }\n\t                a[k][k] += 1;\n\t            }\n\t            s[k] = -s[k];\n\t        }\n\t\n\t        for (j = k + 1; j < n; j++) {\n\t            if ((k < nct) && (s[k] !== 0)) {\n\t                t = 0;\n\t                for (i = k; i < m; i++) {\n\t                    t += a[i][k] * a[i][j];\n\t                }\n\t                t = -t / a[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    a[i][j] += t * a[i][k];\n\t                }\n\t            }\n\t            e[j] = a[k][j];\n\t        }\n\t\n\t        if (wantu && (k < nct)) {\n\t            for (i = k; i < m; i++) {\n\t                U[i][k] = a[i][k];\n\t            }\n\t        }\n\t\n\t        if (k < nrt) {\n\t            e[k] = 0;\n\t            for (i = k + 1; i < n; i++) {\n\t                e[k] = hypotenuse(e[k], e[i]);\n\t            }\n\t            if (e[k] !== 0) {\n\t                if (e[k + 1] < 0)\n\t                    e[k] = -e[k];\n\t                for (i = k + 1; i < n; i++) {\n\t                    e[i] /= e[k];\n\t                }\n\t                e[k + 1] += 1;\n\t            }\n\t            e[k] = -e[k];\n\t            if ((k + 1 < m) && (e[k] !== 0)) {\n\t                for (i = k + 1; i < m; i++) {\n\t                    work[i] = 0;\n\t                }\n\t                for (j = k + 1; j < n; j++) {\n\t                    for (i = k + 1; i < m; i++) {\n\t                        work[i] += e[j] * a[i][j];\n\t                    }\n\t                }\n\t                for (j = k + 1; j < n; j++) {\n\t                    t = -e[j] / e[k + 1];\n\t                    for (i = k + 1; i < m; i++) {\n\t                        a[i][j] += t * work[i];\n\t                    }\n\t                }\n\t            }\n\t            if (wantv) {\n\t                for (i = k + 1; i < n; i++) {\n\t                    V[i][k] = e[i];\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    p = Math.min(n, m + 1);\n\t    if (nct < n) {\n\t        s[nct] = a[nct][nct];\n\t    }\n\t    if (m < p) {\n\t        s[p - 1] = 0;\n\t    }\n\t    if (nrt + 1 < p) {\n\t        e[nrt] = a[nrt][p - 1];\n\t    }\n\t    e[p - 1] = 0;\n\t\n\t    if (wantu) {\n\t        for (j = nct; j < nu; j++) {\n\t            for (i = 0; i < m; i++) {\n\t                U[i][j] = 0;\n\t            }\n\t            U[j][j] = 1;\n\t        }\n\t        for (k = nct - 1; k >= 0; k--) {\n\t            if (s[k] !== 0) {\n\t                for (j = k + 1; j < nu; j++) {\n\t                    t = 0;\n\t                    for (i = k; i < m; i++) {\n\t                        t += U[i][k] * U[i][j];\n\t                    }\n\t                    t = -t / U[k][k];\n\t                    for (i = k; i < m; i++) {\n\t                        U[i][j] += t * U[i][k];\n\t                    }\n\t                }\n\t                for (i = k; i < m; i++) {\n\t                    U[i][k] = -U[i][k];\n\t                }\n\t                U[k][k] = 1 + U[k][k];\n\t                for (i = 0; i < k - 1; i++) {\n\t                    U[i][k] = 0;\n\t                }\n\t            } else {\n\t                for (i = 0; i < m; i++) {\n\t                    U[i][k] = 0;\n\t                }\n\t                U[k][k] = 1;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (wantv) {\n\t        for (k = n - 1; k >= 0; k--) {\n\t            if ((k < nrt) && (e[k] !== 0)) {\n\t                for (j = k + 1; j < n; j++) {\n\t                    t = 0;\n\t                    for (i = k + 1; i < n; i++) {\n\t                        t += V[i][k] * V[i][j];\n\t                    }\n\t                    t = -t / V[k + 1][k];\n\t                    for (i = k + 1; i < n; i++) {\n\t                        V[i][j] += t * V[i][k];\n\t                    }\n\t                }\n\t            }\n\t            for (i = 0; i < n; i++) {\n\t                V[i][k] = 0;\n\t            }\n\t            V[k][k] = 1;\n\t        }\n\t    }\n\t\n\t    var pp = p - 1,\n\t        iter = 0,\n\t        eps = Math.pow(2, -52);\n\t    while (p > 0) {\n\t        for (k = p - 2; k >= -1; k--) {\n\t            if (k === -1) {\n\t                break;\n\t            }\n\t            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n\t                e[k] = 0;\n\t                break;\n\t            }\n\t        }\n\t        if (k === p - 2) {\n\t            kase = 4;\n\t        } else {\n\t            for (ks = p - 1; ks >= k; ks--) {\n\t                if (ks === k) {\n\t                    break;\n\t                }\n\t                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n\t                if (Math.abs(s[ks]) <= eps * t) {\n\t                    s[ks] = 0;\n\t                    break;\n\t                }\n\t            }\n\t            if (ks === k) {\n\t                kase = 3;\n\t            } else if (ks === p - 1) {\n\t                kase = 1;\n\t            } else {\n\t                kase = 2;\n\t                k = ks;\n\t            }\n\t        }\n\t\n\t        k++;\n\t\n\t        switch (kase) {\n\t            case 1: {\n\t                f = e[p - 2];\n\t                e[p - 2] = 0;\n\t                for (j = p - 2; j >= k; j--) {\n\t                    t = hypotenuse(s[j], f);\n\t                    cs = s[j] / t;\n\t                    sn = f / t;\n\t                    s[j] = t;\n\t                    if (j !== k) {\n\t                        f = -sn * e[j - 1];\n\t                        e[j - 1] = cs * e[j - 1];\n\t                    }\n\t                    if (wantv) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = cs * V[i][j] + sn * V[i][p - 1];\n\t                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n\t                            V[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t            case 2 : {\n\t                f = e[k - 1];\n\t                e[k - 1] = 0;\n\t                for (j = k; j < p; j++) {\n\t                    t = hypotenuse(s[j], f);\n\t                    cs = s[j] / t;\n\t                    sn = f / t;\n\t                    s[j] = t;\n\t                    f = -sn * e[j];\n\t                    e[j] = cs * e[j];\n\t                    if (wantu) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = cs * U[i][j] + sn * U[i][k - 1];\n\t                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n\t                            U[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t            case 3 : {\n\t                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n\t                sp = s[p - 1] / scale;\n\t                spm1 = s[p - 2] / scale;\n\t                epm1 = e[p - 2] / scale;\n\t                sk = s[k] / scale;\n\t                ek = e[k] / scale;\n\t                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n\t                c = (sp * epm1) * (sp * epm1);\n\t                shift = 0;\n\t                if ((b !== 0) || (c !== 0)) {\n\t                    shift = Math.sqrt(b * b + c);\n\t                    if (b < 0) {\n\t                        shift = -shift;\n\t                    }\n\t                    shift = c / (b + shift);\n\t                }\n\t                f = (sk + sp) * (sk - sp) + shift;\n\t                g = sk * ek;\n\t                for (j = k; j < p - 1; j++) {\n\t                    t = hypotenuse(f, g);\n\t                    cs = f / t;\n\t                    sn = g / t;\n\t                    if (j !== k) {\n\t                        e[j - 1] = t;\n\t                    }\n\t                    f = cs * s[j] + sn * e[j];\n\t                    e[j] = cs * e[j] - sn * s[j];\n\t                    g = sn * s[j + 1];\n\t                    s[j + 1] = cs * s[j + 1];\n\t                    if (wantv) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = cs * V[i][j] + sn * V[i][j + 1];\n\t                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n\t                            V[i][j] = t;\n\t                        }\n\t                    }\n\t                    t = hypotenuse(f, g);\n\t                    cs = f / t;\n\t                    sn = g / t;\n\t                    s[j] = t;\n\t                    f = cs * e[j] + sn * s[j + 1];\n\t                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n\t                    g = sn * e[j + 1];\n\t                    e[j + 1] = cs * e[j + 1];\n\t                    if (wantu && (j < m - 1)) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = cs * U[i][j] + sn * U[i][j + 1];\n\t                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n\t                            U[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                e[p - 2] = f;\n\t                iter = iter + 1;\n\t                break;\n\t            }\n\t            case 4: {\n\t                if (s[k] <= 0) {\n\t                    s[k] = (s[k] < 0 ? -s[k] : 0);\n\t                    if (wantv) {\n\t                        for (i = 0; i <= pp; i++) {\n\t                            V[i][k] = -V[i][k];\n\t                        }\n\t                    }\n\t                }\n\t                while (k < pp) {\n\t                    if (s[k] >= s[k + 1]) {\n\t                        break;\n\t                    }\n\t                    t = s[k];\n\t                    s[k] = s[k + 1];\n\t                    s[k + 1] = t;\n\t                    if (wantv && (k < n - 1)) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = V[i][k + 1];\n\t                            V[i][k + 1] = V[i][k];\n\t                            V[i][k] = t;\n\t                        }\n\t                    }\n\t                    if (wantu && (k < m - 1)) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = U[i][k + 1];\n\t                            U[i][k + 1] = U[i][k];\n\t                            U[i][k] = t;\n\t                        }\n\t                    }\n\t                    k++;\n\t                }\n\t                iter = 0;\n\t                p--;\n\t                break;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (swapped) {\n\t        var tmp = V;\n\t        V = U;\n\t        U = tmp;\n\t    }\n\t\n\t    this.m = m;\n\t    this.n = n;\n\t    this.s = s;\n\t    this.U = U;\n\t    this.V = V;\n\t}\n\t\n\tSingularValueDecomposition.prototype = {\n\t    get condition() {\n\t        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n\t    },\n\t    get norm2() {\n\t        return this.s[0];\n\t    },\n\t    get rank() {\n\t        var eps = Math.pow(2, -52),\n\t            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n\t            r = 0,\n\t            s = this.s;\n\t        for (var i = 0, ii = s.length; i < ii; i++) {\n\t            if (s[i] > tol) {\n\t                r++;\n\t            }\n\t        }\n\t        return r;\n\t    },\n\t    get diagonal() {\n\t        return this.s;\n\t    },\n\t    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n\t    get threshold() {\n\t        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n\t    },\n\t    get leftSingularVectors() {\n\t        return this.U;\n\t    },\n\t    get rightSingularVectors() {\n\t        return this.V;\n\t    },\n\t    get diagonalMatrix() {\n\t        return Matrix.diag(this.s);\n\t    },\n\t    solve: function (value) {\n\t\n\t        var Y = value,\n\t            e = this.threshold,\n\t            scols = this.s.length,\n\t            Ls = Matrix.zeros(scols, scols),\n\t            i;\n\t\n\t        for (i = 0; i < scols; i++) {\n\t            if (Math.abs(this.s[i]) <= e) {\n\t                Ls[i][i] = 0;\n\t            } else {\n\t                Ls[i][i] = 1 / this.s[i];\n\t            }\n\t        }\n\t\n\t\n\t        var VL = this.V.mmul(Ls),\n\t            vrows = this.V.rows,\n\t            urows = this.U.rows,\n\t            VLU = Matrix.zeros(vrows, urows),\n\t            j, k, sum;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < urows; j++) {\n\t                sum = 0;\n\t                for (k = 0; k < scols; k++) {\n\t                    sum += VL[i][k] * this.U[j][k];\n\t                }\n\t                VLU[i][j] = sum;\n\t            }\n\t        }\n\t\n\t        return VLU.mmul(Y);\n\t    },\n\t    solveForDiagonal: function (value) {\n\t        return this.solve(Matrix.diag(value));\n\t    },\n\t    inverse: function () {\n\t        var e = this.threshold,\n\t            vrows = this.V.rows,\n\t            vcols = this.V.columns,\n\t            X = new Matrix(vrows, this.s.length),\n\t            i, j;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < vcols; j++) {\n\t                if (Math.abs(this.s[j]) > e) {\n\t                    X[i][j] = this.V[i][j] / this.s[j];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t\n\t        var urows = this.U.rows,\n\t            ucols = this.U.columns,\n\t            Y = new Matrix(vrows, urows),\n\t            k, sum;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < urows; j++) {\n\t                sum = 0;\n\t                for (k = 0; k < ucols; k++) {\n\t                    sum += X[i][k] * this.U[j][k];\n\t                }\n\t                Y[i][j] = sum;\n\t            }\n\t        }\n\t\n\t        return Y;\n\t    }\n\t};\n\t\n\tmodule.exports = SingularValueDecomposition;\n\n\n/***/ },\n/* 121 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.hypotenuse = function hypotenuse(a, b) {\n\t    var r;\n\t    if (Math.abs(a) > Math.abs(b)) {\n\t        r = b / a;\n\t        return Math.abs(a) * Math.sqrt(1 + r * r);\n\t    }\n\t    if (b !== 0) {\n\t        r = a / b;\n\t        return Math.abs(b) * Math.sqrt(1 + r * r);\n\t    }\n\t    return 0;\n\t};\n\n\n/***/ },\n/* 122 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(118);\n\tvar hypotenuse = __webpack_require__(121).hypotenuse;\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\n\tfunction EigenvalueDecomposition(matrix) {\n\t    if (!(this instanceof EigenvalueDecomposition)) {\n\t        return new EigenvalueDecomposition(matrix);\n\t    }\n\t    matrix = Matrix.checkMatrix(matrix);\n\t    if (!matrix.isSquare()) {\n\t        throw new Error('Matrix is not a square matrix');\n\t    }\n\t\n\t    var n = matrix.columns,\n\t        V = Matrix.zeros(n, n),\n\t        d = new Array(n),\n\t        e = new Array(n),\n\t        value = matrix,\n\t        i, j;\n\t\n\t    if (matrix.isSymmetric()) {\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                V[i][j] = value[i][j];\n\t            }\n\t        }\n\t        tred2(n, e, d, V);\n\t        tql2(n, e, d, V);\n\t    }\n\t    else {\n\t        var H = Matrix.zeros(n, n),\n\t            ort = new Array(n);\n\t        for (j = 0; j < n; j++) {\n\t            for (i = 0; i < n; i++) {\n\t                H[i][j] = value[i][j];\n\t            }\n\t        }\n\t        orthes(n, H, ort, V);\n\t        hqr2(n, e, d, V, H);\n\t    }\n\t\n\t    this.n = n;\n\t    this.e = e;\n\t    this.d = d;\n\t    this.V = V;\n\t}\n\t\n\tEigenvalueDecomposition.prototype = {\n\t    get realEigenvalues() {\n\t        return this.d;\n\t    },\n\t    get imaginaryEigenvalues() {\n\t        return this.e;\n\t    },\n\t    get eigenvectorMatrix() {\n\t        return this.V;\n\t    },\n\t    get diagonalMatrix() {\n\t        var n = this.n,\n\t            e = this.e,\n\t            d = this.d,\n\t            X = new Matrix(n, n),\n\t            i, j;\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                X[i][j] = 0;\n\t            }\n\t            X[i][i] = d[i];\n\t            if (e[i] > 0) {\n\t                X[i][i + 1] = e[i];\n\t            }\n\t            else if (e[i] < 0) {\n\t                X[i][i - 1] = e[i];\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tfunction tred2(n, e, d, V) {\n\t\n\t    var f, g, h, i, j, k,\n\t        hh, scale;\n\t\n\t    for (j = 0; j < n; j++) {\n\t        d[j] = V[n - 1][j];\n\t    }\n\t\n\t    for (i = n - 1; i > 0; i--) {\n\t        scale = 0;\n\t        h = 0;\n\t        for (k = 0; k < i; k++) {\n\t            scale = scale + Math.abs(d[k]);\n\t        }\n\t\n\t        if (scale === 0) {\n\t            e[i] = d[i - 1];\n\t            for (j = 0; j < i; j++) {\n\t                d[j] = V[i - 1][j];\n\t                V[i][j] = 0;\n\t                V[j][i] = 0;\n\t            }\n\t        } else {\n\t            for (k = 0; k < i; k++) {\n\t                d[k] /= scale;\n\t                h += d[k] * d[k];\n\t            }\n\t\n\t            f = d[i - 1];\n\t            g = Math.sqrt(h);\n\t            if (f > 0) {\n\t                g = -g;\n\t            }\n\t\n\t            e[i] = scale * g;\n\t            h = h - f * g;\n\t            d[i - 1] = f - g;\n\t            for (j = 0; j < i; j++) {\n\t                e[j] = 0;\n\t            }\n\t\n\t            for (j = 0; j < i; j++) {\n\t                f = d[j];\n\t                V[j][i] = f;\n\t                g = e[j] + V[j][j] * f;\n\t                for (k = j + 1; k <= i - 1; k++) {\n\t                    g += V[k][j] * d[k];\n\t                    e[k] += V[k][j] * f;\n\t                }\n\t                e[j] = g;\n\t            }\n\t\n\t            f = 0;\n\t            for (j = 0; j < i; j++) {\n\t                e[j] /= h;\n\t                f += e[j] * d[j];\n\t            }\n\t\n\t            hh = f / (h + h);\n\t            for (j = 0; j < i; j++) {\n\t                e[j] -= hh * d[j];\n\t            }\n\t\n\t            for (j = 0; j < i; j++) {\n\t                f = d[j];\n\t                g = e[j];\n\t                for (k = j; k <= i - 1; k++) {\n\t                    V[k][j] -= (f * e[k] + g * d[k]);\n\t                }\n\t                d[j] = V[i - 1][j];\n\t                V[i][j] = 0;\n\t            }\n\t        }\n\t        d[i] = h;\n\t    }\n\t\n\t    for (i = 0; i < n - 1; i++) {\n\t        V[n - 1][i] = V[i][i];\n\t        V[i][i] = 1;\n\t        h = d[i + 1];\n\t        if (h !== 0) {\n\t            for (k = 0; k <= i; k++) {\n\t                d[k] = V[k][i + 1] / h;\n\t            }\n\t\n\t            for (j = 0; j <= i; j++) {\n\t                g = 0;\n\t                for (k = 0; k <= i; k++) {\n\t                    g += V[k][i + 1] * V[k][j];\n\t                }\n\t                for (k = 0; k <= i; k++) {\n\t                    V[k][j] -= g * d[k];\n\t                }\n\t            }\n\t        }\n\t\n\t        for (k = 0; k <= i; k++) {\n\t            V[k][i + 1] = 0;\n\t        }\n\t    }\n\t\n\t    for (j = 0; j < n; j++) {\n\t        d[j] = V[n - 1][j];\n\t        V[n - 1][j] = 0;\n\t    }\n\t\n\t    V[n - 1][n - 1] = 1;\n\t    e[0] = 0;\n\t}\n\t\n\tfunction tql2(n, e, d, V) {\n\t\n\t    var g, h, i, j, k, l, m, p, r,\n\t        dl1, c, c2, c3, el1, s, s2,\n\t        iter;\n\t\n\t    for (i = 1; i < n; i++) {\n\t        e[i - 1] = e[i];\n\t    }\n\t\n\t    e[n - 1] = 0;\n\t\n\t    var f = 0,\n\t        tst1 = 0,\n\t        eps = Math.pow(2, -52);\n\t\n\t    for (l = 0; l < n; l++) {\n\t        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n\t        m = l;\n\t        while (m < n) {\n\t            if (Math.abs(e[m]) <= eps * tst1) {\n\t                break;\n\t            }\n\t            m++;\n\t        }\n\t\n\t        if (m > l) {\n\t            iter = 0;\n\t            do {\n\t                iter = iter + 1;\n\t\n\t                g = d[l];\n\t                p = (d[l + 1] - g) / (2 * e[l]);\n\t                r = hypotenuse(p, 1);\n\t                if (p < 0) {\n\t                    r = -r;\n\t                }\n\t\n\t                d[l] = e[l] / (p + r);\n\t                d[l + 1] = e[l] * (p + r);\n\t                dl1 = d[l + 1];\n\t                h = g - d[l];\n\t                for (i = l + 2; i < n; i++) {\n\t                    d[i] -= h;\n\t                }\n\t\n\t                f = f + h;\n\t\n\t                p = d[m];\n\t                c = 1;\n\t                c2 = c;\n\t                c3 = c;\n\t                el1 = e[l + 1];\n\t                s = 0;\n\t                s2 = 0;\n\t                for (i = m - 1; i >= l; i--) {\n\t                    c3 = c2;\n\t                    c2 = c;\n\t                    s2 = s;\n\t                    g = c * e[i];\n\t                    h = c * p;\n\t                    r = hypotenuse(p, e[i]);\n\t                    e[i + 1] = s * r;\n\t                    s = e[i] / r;\n\t                    c = p / r;\n\t                    p = c * d[i] - s * g;\n\t                    d[i + 1] = h + s * (c * g + s * d[i]);\n\t\n\t                    for (k = 0; k < n; k++) {\n\t                        h = V[k][i + 1];\n\t                        V[k][i + 1] = s * V[k][i] + c * h;\n\t                        V[k][i] = c * V[k][i] - s * h;\n\t                    }\n\t                }\n\t\n\t                p = -s * s2 * c3 * el1 * e[l] / dl1;\n\t                e[l] = s * p;\n\t                d[l] = c * p;\n\t\n\t            }\n\t            while (Math.abs(e[l]) > eps * tst1);\n\t        }\n\t        d[l] = d[l] + f;\n\t        e[l] = 0;\n\t    }\n\t\n\t    for (i = 0; i < n - 1; i++) {\n\t        k = i;\n\t        p = d[i];\n\t        for (j = i + 1; j < n; j++) {\n\t            if (d[j] < p) {\n\t                k = j;\n\t                p = d[j];\n\t            }\n\t        }\n\t\n\t        if (k !== i) {\n\t            d[k] = d[i];\n\t            d[i] = p;\n\t            for (j = 0; j < n; j++) {\n\t                p = V[j][i];\n\t                V[j][i] = V[j][k];\n\t                V[j][k] = p;\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction orthes(n, H, ort, V) {\n\t\n\t    var low = 0,\n\t        high = n - 1,\n\t        f, g, h, i, j, m,\n\t        scale;\n\t\n\t    for (m = low + 1; m <= high - 1; m++) {\n\t        scale = 0;\n\t        for (i = m; i <= high; i++) {\n\t            scale = scale + Math.abs(H[i][m - 1]);\n\t        }\n\t\n\t        if (scale !== 0) {\n\t            h = 0;\n\t            for (i = high; i >= m; i--) {\n\t                ort[i] = H[i][m - 1] / scale;\n\t                h += ort[i] * ort[i];\n\t            }\n\t\n\t            g = Math.sqrt(h);\n\t            if (ort[m] > 0) {\n\t                g = -g;\n\t            }\n\t\n\t            h = h - ort[m] * g;\n\t            ort[m] = ort[m] - g;\n\t\n\t            for (j = m; j < n; j++) {\n\t                f = 0;\n\t                for (i = high; i >= m; i--) {\n\t                    f += ort[i] * H[i][j];\n\t                }\n\t\n\t                f = f / h;\n\t                for (i = m; i <= high; i++) {\n\t                    H[i][j] -= f * ort[i];\n\t                }\n\t            }\n\t\n\t            for (i = 0; i <= high; i++) {\n\t                f = 0;\n\t                for (j = high; j >= m; j--) {\n\t                    f += ort[j] * H[i][j];\n\t                }\n\t\n\t                f = f / h;\n\t                for (j = m; j <= high; j++) {\n\t                    H[i][j] -= f * ort[j];\n\t                }\n\t            }\n\t\n\t            ort[m] = scale * ort[m];\n\t            H[m][m - 1] = scale * g;\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < n; i++) {\n\t        for (j = 0; j < n; j++) {\n\t            V[i][j] = (i === j ? 1 : 0);\n\t        }\n\t    }\n\t\n\t    for (m = high - 1; m >= low + 1; m--) {\n\t        if (H[m][m - 1] !== 0) {\n\t            for (i = m + 1; i <= high; i++) {\n\t                ort[i] = H[i][m - 1];\n\t            }\n\t\n\t            for (j = m; j <= high; j++) {\n\t                g = 0;\n\t                for (i = m; i <= high; i++) {\n\t                    g += ort[i] * V[i][j];\n\t                }\n\t\n\t                g = (g / ort[m]) / H[m][m - 1];\n\t                for (i = m; i <= high; i++) {\n\t                    V[i][j] += g * ort[i];\n\t                }\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction hqr2(nn, e, d, V, H) {\n\t    var n = nn - 1,\n\t        low = 0,\n\t        high = nn - 1,\n\t        eps = Math.pow(2, -52),\n\t        exshift = 0,\n\t        norm = 0,\n\t        p = 0,\n\t        q = 0,\n\t        r = 0,\n\t        s = 0,\n\t        z = 0,\n\t        iter = 0,\n\t        i, j, k, l, m, t, w, x, y,\n\t        ra, sa, vr, vi,\n\t        notlast, cdivres;\n\t\n\t    for (i = 0; i < nn; i++) {\n\t        if (i < low || i > high) {\n\t            d[i] = H[i][i];\n\t            e[i] = 0;\n\t        }\n\t\n\t        for (j = Math.max(i - 1, 0); j < nn; j++) {\n\t            norm = norm + Math.abs(H[i][j]);\n\t        }\n\t    }\n\t\n\t    while (n >= low) {\n\t        l = n;\n\t        while (l > low) {\n\t            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n\t            if (s === 0) {\n\t                s = norm;\n\t            }\n\t            if (Math.abs(H[l][l - 1]) < eps * s) {\n\t                break;\n\t            }\n\t            l--;\n\t        }\n\t\n\t        if (l === n) {\n\t            H[n][n] = H[n][n] + exshift;\n\t            d[n] = H[n][n];\n\t            e[n] = 0;\n\t            n--;\n\t            iter = 0;\n\t        } else if (l === n - 1) {\n\t            w = H[n][n - 1] * H[n - 1][n];\n\t            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n\t            q = p * p + w;\n\t            z = Math.sqrt(Math.abs(q));\n\t            H[n][n] = H[n][n] + exshift;\n\t            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n\t            x = H[n][n];\n\t\n\t            if (q >= 0) {\n\t                z = (p >= 0) ? (p + z) : (p - z);\n\t                d[n - 1] = x + z;\n\t                d[n] = d[n - 1];\n\t                if (z !== 0) {\n\t                    d[n] = x - w / z;\n\t                }\n\t                e[n - 1] = 0;\n\t                e[n] = 0;\n\t                x = H[n][n - 1];\n\t                s = Math.abs(x) + Math.abs(z);\n\t                p = x / s;\n\t                q = z / s;\n\t                r = Math.sqrt(p * p + q * q);\n\t                p = p / r;\n\t                q = q / r;\n\t\n\t                for (j = n - 1; j < nn; j++) {\n\t                    z = H[n - 1][j];\n\t                    H[n - 1][j] = q * z + p * H[n][j];\n\t                    H[n][j] = q * H[n][j] - p * z;\n\t                }\n\t\n\t                for (i = 0; i <= n; i++) {\n\t                    z = H[i][n - 1];\n\t                    H[i][n - 1] = q * z + p * H[i][n];\n\t                    H[i][n] = q * H[i][n] - p * z;\n\t                }\n\t\n\t                for (i = low; i <= high; i++) {\n\t                    z = V[i][n - 1];\n\t                    V[i][n - 1] = q * z + p * V[i][n];\n\t                    V[i][n] = q * V[i][n] - p * z;\n\t                }\n\t            } else {\n\t                d[n - 1] = x + p;\n\t                d[n] = x + p;\n\t                e[n - 1] = z;\n\t                e[n] = -z;\n\t            }\n\t\n\t            n = n - 2;\n\t            iter = 0;\n\t        } else {\n\t            x = H[n][n];\n\t            y = 0;\n\t            w = 0;\n\t            if (l < n) {\n\t                y = H[n - 1][n - 1];\n\t                w = H[n][n - 1] * H[n - 1][n];\n\t            }\n\t\n\t            if (iter === 10) {\n\t                exshift += x;\n\t                for (i = low; i <= n; i++) {\n\t                    H[i][i] -= x;\n\t                }\n\t                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n\t                x = y = 0.75 * s;\n\t                w = -0.4375 * s * s;\n\t            }\n\t\n\t            if (iter === 30) {\n\t                s = (y - x) / 2;\n\t                s = s * s + w;\n\t                if (s > 0) {\n\t                    s = Math.sqrt(s);\n\t                    if (y < x) {\n\t                        s = -s;\n\t                    }\n\t                    s = x - w / ((y - x) / 2 + s);\n\t                    for (i = low; i <= n; i++) {\n\t                        H[i][i] -= s;\n\t                    }\n\t                    exshift += s;\n\t                    x = y = w = 0.964;\n\t                }\n\t            }\n\t\n\t            iter = iter + 1;\n\t\n\t            m = n - 2;\n\t            while (m >= l) {\n\t                z = H[m][m];\n\t                r = x - z;\n\t                s = y - z;\n\t                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n\t                q = H[m + 1][m + 1] - z - r - s;\n\t                r = H[m + 2][m + 1];\n\t                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n\t                p = p / s;\n\t                q = q / s;\n\t                r = r / s;\n\t                if (m === l) {\n\t                    break;\n\t                }\n\t                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n\t                    break;\n\t                }\n\t                m--;\n\t            }\n\t\n\t            for (i = m + 2; i <= n; i++) {\n\t                H[i][i - 2] = 0;\n\t                if (i > m + 2) {\n\t                    H[i][i - 3] = 0;\n\t                }\n\t            }\n\t\n\t            for (k = m; k <= n - 1; k++) {\n\t                notlast = (k !== n - 1);\n\t                if (k !== m) {\n\t                    p = H[k][k - 1];\n\t                    q = H[k + 1][k - 1];\n\t                    r = (notlast ? H[k + 2][k - 1] : 0);\n\t                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n\t                    if (x !== 0) {\n\t                        p = p / x;\n\t                        q = q / x;\n\t                        r = r / x;\n\t                    }\n\t                }\n\t\n\t                if (x === 0) {\n\t                    break;\n\t                }\n\t\n\t                s = Math.sqrt(p * p + q * q + r * r);\n\t                if (p < 0) {\n\t                    s = -s;\n\t                }\n\t\n\t                if (s !== 0) {\n\t                    if (k !== m) {\n\t                        H[k][k - 1] = -s * x;\n\t                    } else if (l !== m) {\n\t                        H[k][k - 1] = -H[k][k - 1];\n\t                    }\n\t\n\t                    p = p + s;\n\t                    x = p / s;\n\t                    y = q / s;\n\t                    z = r / s;\n\t                    q = q / p;\n\t                    r = r / p;\n\t\n\t                    for (j = k; j < nn; j++) {\n\t                        p = H[k][j] + q * H[k + 1][j];\n\t                        if (notlast) {\n\t                            p = p + r * H[k + 2][j];\n\t                            H[k + 2][j] = H[k + 2][j] - p * z;\n\t                        }\n\t\n\t                        H[k][j] = H[k][j] - p * x;\n\t                        H[k + 1][j] = H[k + 1][j] - p * y;\n\t                    }\n\t\n\t                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n\t                        p = x * H[i][k] + y * H[i][k + 1];\n\t                        if (notlast) {\n\t                            p = p + z * H[i][k + 2];\n\t                            H[i][k + 2] = H[i][k + 2] - p * r;\n\t                        }\n\t\n\t                        H[i][k] = H[i][k] - p;\n\t                        H[i][k + 1] = H[i][k + 1] - p * q;\n\t                    }\n\t\n\t                    for (i = low; i <= high; i++) {\n\t                        p = x * V[i][k] + y * V[i][k + 1];\n\t                        if (notlast) {\n\t                            p = p + z * V[i][k + 2];\n\t                            V[i][k + 2] = V[i][k + 2] - p * r;\n\t                        }\n\t\n\t                        V[i][k] = V[i][k] - p;\n\t                        V[i][k + 1] = V[i][k + 1] - p * q;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    if (norm === 0) {\n\t        return;\n\t    }\n\t\n\t    for (n = nn - 1; n >= 0; n--) {\n\t        p = d[n];\n\t        q = e[n];\n\t\n\t        if (q === 0) {\n\t            l = n;\n\t            H[n][n] = 1;\n\t            for (i = n - 1; i >= 0; i--) {\n\t                w = H[i][i] - p;\n\t                r = 0;\n\t                for (j = l; j <= n; j++) {\n\t                    r = r + H[i][j] * H[j][n];\n\t                }\n\t\n\t                if (e[i] < 0) {\n\t                    z = w;\n\t                    s = r;\n\t                } else {\n\t                    l = i;\n\t                    if (e[i] === 0) {\n\t                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n\t                    } else {\n\t                        x = H[i][i + 1];\n\t                        y = H[i + 1][i];\n\t                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n\t                        t = (x * s - z * r) / q;\n\t                        H[i][n] = t;\n\t                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n\t                    }\n\t\n\t                    t = Math.abs(H[i][n]);\n\t                    if ((eps * t) * t > 1) {\n\t                        for (j = i; j <= n; j++) {\n\t                            H[j][n] = H[j][n] / t;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        } else if (q < 0) {\n\t            l = n - 1;\n\t\n\t            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n\t                H[n - 1][n - 1] = q / H[n][n - 1];\n\t                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n\t            } else {\n\t                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n\t                H[n - 1][n - 1] = cdivres[0];\n\t                H[n - 1][n] = cdivres[1];\n\t            }\n\t\n\t            H[n][n - 1] = 0;\n\t            H[n][n] = 1;\n\t            for (i = n - 2; i >= 0; i--) {\n\t                ra = 0;\n\t                sa = 0;\n\t                for (j = l; j <= n; j++) {\n\t                    ra = ra + H[i][j] * H[j][n - 1];\n\t                    sa = sa + H[i][j] * H[j][n];\n\t                }\n\t\n\t                w = H[i][i] - p;\n\t\n\t                if (e[i] < 0) {\n\t                    z = w;\n\t                    r = ra;\n\t                    s = sa;\n\t                } else {\n\t                    l = i;\n\t                    if (e[i] === 0) {\n\t                        cdivres = cdiv(-ra, -sa, w, q);\n\t                        H[i][n - 1] = cdivres[0];\n\t                        H[i][n] = cdivres[1];\n\t                    } else {\n\t                        x = H[i][i + 1];\n\t                        y = H[i + 1][i];\n\t                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n\t                        vi = (d[i] - p) * 2 * q;\n\t                        if (vr === 0 && vi === 0) {\n\t                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n\t                        }\n\t                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n\t                        H[i][n - 1] = cdivres[0];\n\t                        H[i][n] = cdivres[1];\n\t                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n\t                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n\t                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n\t                        } else {\n\t                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n\t                            H[i + 1][n - 1] = cdivres[0];\n\t                            H[i + 1][n] = cdivres[1];\n\t                        }\n\t                    }\n\t\n\t                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n\t                    if ((eps * t) * t > 1) {\n\t                        for (j = i; j <= n; j++) {\n\t                            H[j][n - 1] = H[j][n - 1] / t;\n\t                            H[j][n] = H[j][n] / t;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < nn; i++) {\n\t        if (i < low || i > high) {\n\t            for (j = i; j < nn; j++) {\n\t                V[i][j] = H[i][j];\n\t            }\n\t        }\n\t    }\n\t\n\t    for (j = nn - 1; j >= low; j--) {\n\t        for (i = low; i <= high; i++) {\n\t            z = 0;\n\t            for (k = low; k <= Math.min(j, high); k++) {\n\t                z = z + V[i][k] * H[k][j];\n\t            }\n\t            V[i][j] = z;\n\t        }\n\t    }\n\t}\n\t\n\tfunction cdiv(xr, xi, yr, yi) {\n\t    var r, d;\n\t    if (Math.abs(yr) > Math.abs(yi)) {\n\t        r = yi / yr;\n\t        d = yr + r * yi;\n\t        return [(xr + r * xi) / d, (xi - r * xr) / d];\n\t    }\n\t    else {\n\t        r = yr / yi;\n\t        d = yi + r * yr;\n\t        return [(r * xr + xi) / d, (r * xi - xr) / d];\n\t    }\n\t}\n\t\n\tmodule.exports = EigenvalueDecomposition;\n\n\n/***/ },\n/* 123 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(118);\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\n\tfunction LuDecomposition(matrix) {\n\t    if (!(this instanceof LuDecomposition)) {\n\t        return new LuDecomposition(matrix);\n\t    }\n\t    matrix = Matrix.checkMatrix(matrix);\n\t\n\t    var lu = matrix.clone(),\n\t        rows = lu.rows,\n\t        columns = lu.columns,\n\t        pivotVector = new Array(rows),\n\t        pivotSign = 1,\n\t        i, j, k, p, s, t, v,\n\t        LUrowi, LUcolj, kmax;\n\t\n\t    for (i = 0; i < rows; i++) {\n\t        pivotVector[i] = i;\n\t    }\n\t\n\t    LUcolj = new Array(rows);\n\t\n\t    for (j = 0; j < columns; j++) {\n\t\n\t        for (i = 0; i < rows; i++) {\n\t            LUcolj[i] = lu[i][j];\n\t        }\n\t\n\t        for (i = 0; i < rows; i++) {\n\t            LUrowi = lu[i];\n\t            kmax = Math.min(i, j);\n\t            s = 0;\n\t            for (k = 0; k < kmax; k++) {\n\t                s += LUrowi[k] * LUcolj[k];\n\t            }\n\t            LUrowi[j] = LUcolj[i] -= s;\n\t        }\n\t\n\t        p = j;\n\t        for (i = j + 1; i < rows; i++) {\n\t            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n\t                p = i;\n\t            }\n\t        }\n\t\n\t        if (p !== j) {\n\t            for (k = 0; k < columns; k++) {\n\t                t = lu[p][k];\n\t                lu[p][k] = lu[j][k];\n\t                lu[j][k] = t;\n\t            }\n\t\n\t            v = pivotVector[p];\n\t            pivotVector[p] = pivotVector[j];\n\t            pivotVector[j] = v;\n\t\n\t            pivotSign = -pivotSign;\n\t        }\n\t\n\t        if (j < rows && lu[j][j] !== 0) {\n\t            for (i = j + 1; i < rows; i++) {\n\t                lu[i][j] /= lu[j][j];\n\t            }\n\t        }\n\t    }\n\t\n\t    this.LU = lu;\n\t    this.pivotVector = pivotVector;\n\t    this.pivotSign = pivotSign;\n\t}\n\t\n\tLuDecomposition.prototype = {\n\t    isSingular: function () {\n\t        var data = this.LU,\n\t            col = data.columns;\n\t        for (var j = 0; j < col; j++) {\n\t            if (data[j][j] === 0) {\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    },\n\t    get determinant() {\n\t        var data = this.LU;\n\t        if (!data.isSquare())\n\t            throw new Error('Matrix must be square');\n\t        var determinant = this.pivotSign, col = data.columns;\n\t        for (var j = 0; j < col; j++)\n\t            determinant *= data[j][j];\n\t        return determinant;\n\t    },\n\t    get lowerTriangularFactor() {\n\t        var data = this.LU,\n\t            rows = data.rows,\n\t            columns = data.columns,\n\t            X = new Matrix(rows, columns);\n\t        for (var i = 0; i < rows; i++) {\n\t            for (var j = 0; j < columns; j++) {\n\t                if (i > j) {\n\t                    X[i][j] = data[i][j];\n\t                } else if (i === j) {\n\t                    X[i][j] = 1;\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get upperTriangularFactor() {\n\t        var data = this.LU,\n\t            rows = data.rows,\n\t            columns = data.columns,\n\t            X = new Matrix(rows, columns);\n\t        for (var i = 0; i < rows; i++) {\n\t            for (var j = 0; j < columns; j++) {\n\t                if (i <= j) {\n\t                    X[i][j] = data[i][j];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get pivotPermutationVector() {\n\t        return this.pivotVector.slice();\n\t    },\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var lu = this.LU,\n\t            rows = lu.rows;\n\t\n\t        if (rows !== value.rows)\n\t            throw new Error('Invalid matrix dimensions');\n\t        if (this.isSingular())\n\t            throw new Error('LU matrix is singular');\n\t\n\t        var count = value.columns,\n\t            X = value.subMatrixRow(this.pivotVector, 0, count - 1),\n\t            columns = lu.columns,\n\t            i, j, k;\n\t\n\t        for (k = 0; k < columns; k++) {\n\t            for (i = k + 1; i < columns; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * lu[i][k];\n\t                }\n\t            }\n\t        }\n\t        for (k = columns - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                X[k][j] /= lu[k][k];\n\t            }\n\t            for (i = 0; i < k; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * lu[i][k];\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tmodule.exports = LuDecomposition;\n\n\n/***/ },\n/* 124 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(118);\n\tvar hypotenuse = __webpack_require__(121).hypotenuse;\n\t\n\t//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\n\tfunction QrDecomposition(value) {\n\t    if (!(this instanceof QrDecomposition)) {\n\t        return new QrDecomposition(value);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t\n\t    var qr = value.clone(),\n\t        m = value.rows,\n\t        n = value.columns,\n\t        rdiag = new Array(n),\n\t        i, j, k, s;\n\t\n\t    for (k = 0; k < n; k++) {\n\t        var nrm = 0;\n\t        for (i = k; i < m; i++) {\n\t            nrm = hypotenuse(nrm, qr[i][k]);\n\t        }\n\t        if (nrm !== 0) {\n\t            if (qr[k][k] < 0) {\n\t                nrm = -nrm;\n\t            }\n\t            for (i = k; i < m; i++) {\n\t                qr[i][k] /= nrm;\n\t            }\n\t            qr[k][k] += 1;\n\t            for (j = k + 1; j < n; j++) {\n\t                s = 0;\n\t                for (i = k; i < m; i++) {\n\t                    s += qr[i][k] * qr[i][j];\n\t                }\n\t                s = -s / qr[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    qr[i][j] += s * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t        rdiag[k] = -nrm;\n\t    }\n\t\n\t    this.QR = qr;\n\t    this.Rdiag = rdiag;\n\t}\n\t\n\tQrDecomposition.prototype = {\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var qr = this.QR,\n\t            m = qr.rows;\n\t\n\t        if (value.rows !== m)\n\t            throw new Error('Matrix row dimensions must agree');\n\t        if (!this.isFullRank())\n\t            throw new Error('Matrix is rank deficient');\n\t\n\t        var count = value.columns,\n\t            X = value.clone(),\n\t            n = qr.columns,\n\t            i, j, k, s;\n\t\n\t        for (k = 0; k < n; k++) {\n\t            for (j = 0; j < count; j++) {\n\t                s = 0;\n\t                for (i = k; i < m; i++) {\n\t                    s += qr[i][k] * X[i][j];\n\t                }\n\t                s = -s / qr[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    X[i][j] += s * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t        for (k = n - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                X[k][j] /= this.Rdiag[k];\n\t            }\n\t            for (i = 0; i < k; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t\n\t        return X.subMatrix(0, n - 1, 0, count - 1);\n\t    },\n\t    isFullRank: function () {\n\t        var columns = this.QR.columns;\n\t        for (var i = 0; i < columns; i++) {\n\t            if (this.Rdiag[i] === 0) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    },\n\t    get upperTriangularFactor() {\n\t        var qr = this.QR,\n\t            n = qr.columns,\n\t            X = new Matrix(n, n),\n\t            i, j;\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                if (i < j) {\n\t                    X[i][j] = qr[i][j];\n\t                } else if (i === j) {\n\t                    X[i][j] = this.Rdiag[i];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get orthogonalFactor() {\n\t        var qr = this.QR,\n\t            rows = qr.rows,\n\t            columns = qr.columns,\n\t            X = new Matrix(rows, columns),\n\t            i, j, k, s;\n\t\n\t        for (k = columns - 1; k >= 0; k--) {\n\t            for (i = 0; i < rows; i++) {\n\t                X[i][k] = 0;\n\t            }\n\t            X[k][k] = 1;\n\t            for (j = k; j < columns; j++) {\n\t                if (qr[k][k] !== 0) {\n\t                    s = 0;\n\t                    for (i = k; i < rows; i++) {\n\t                        s += qr[i][k] * X[i][j];\n\t                    }\n\t\n\t                    s = -s / qr[k][k];\n\t\n\t                    for (i = k; i < rows; i++) {\n\t                        X[i][j] += s * qr[i][k];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tmodule.exports = QrDecomposition;\n\n\n/***/ },\n/* 125 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(118);\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\n\tfunction CholeskyDecomposition(value) {\n\t    if (!(this instanceof CholeskyDecomposition)) {\n\t        return new CholeskyDecomposition(value);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t    if (!value.isSymmetric())\n\t        throw new Error('Matrix is not symmetric');\n\t\n\t    var a = value,\n\t        dimension = a.rows,\n\t        l = new Matrix(dimension, dimension),\n\t        positiveDefinite = true,\n\t        i, j, k;\n\t\n\t    for (j = 0; j < dimension; j++) {\n\t        var Lrowj = l[j];\n\t        var d = 0;\n\t        for (k = 0; k < j; k++) {\n\t            var Lrowk = l[k];\n\t            var s = 0;\n\t            for (i = 0; i < k; i++) {\n\t                s += Lrowk[i] * Lrowj[i];\n\t            }\n\t            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n\t            d = d + s * s;\n\t        }\n\t\n\t        d = a[j][j] - d;\n\t\n\t        positiveDefinite &= (d > 0);\n\t        l[j][j] = Math.sqrt(Math.max(d, 0));\n\t        for (k = j + 1; k < dimension; k++) {\n\t            l[j][k] = 0;\n\t        }\n\t    }\n\t\n\t    if (!positiveDefinite) {\n\t        throw new Error('Matrix is not positive definite');\n\t    }\n\t\n\t    this.L = l;\n\t}\n\t\n\tCholeskyDecomposition.prototype = {\n\t    get leftTriangularFactor() {\n\t        return this.L;\n\t    },\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var l = this.L,\n\t            dimension = l.rows;\n\t\n\t        if (value.rows !== dimension) {\n\t            throw new Error('Matrix dimensions do not match');\n\t        }\n\t\n\t        var count = value.columns,\n\t            B = value.clone(),\n\t            i, j, k;\n\t\n\t        for (k = 0; k < dimension; k++) {\n\t            for (j = 0; j < count; j++) {\n\t                for (i = 0; i < k; i++) {\n\t                    B[k][j] -= B[i][j] * l[k][i];\n\t                }\n\t                B[k][j] /= l[k][k];\n\t            }\n\t        }\n\t\n\t        for (k = dimension - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                for (i = k + 1; i < dimension; i++) {\n\t                    B[k][j] -= B[i][j] * l[i][k];\n\t                }\n\t                B[k][j] /= l[k][k];\n\t            }\n\t        }\n\t\n\t        return B;\n\t    }\n\t};\n\t\n\tmodule.exports = CholeskyDecomposition;\n\n\n/***/ },\n/* 126 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(117);\n\tvar Stat = __webpack_require__(5);\n\t\n\t/**\n\t * Function that given vector, returns his norm\n\t * @param {Vector} X\n\t * @returns {number} Norm of the vector\n\t */\n\tfunction norm(X) {\n\t    return Math.sqrt(X.clone().apply(pow2array).sum());\n\t}\n\t\n\t/**\n\t * Function that pow 2 each element of a Matrix or a Vector,\n\t * used in the apply method of the Matrix object\n\t * @param i - index i.\n\t * @param j - index j.\n\t * @return The Matrix object modified at the index i, j.\n\t * */\n\tfunction pow2array(i, j) {\n\t    this[i][j] = this[i][j] * this[i][j];\n\t    return this;\n\t}\n\t\n\t/**\n\t * Function that normalize the dataset and return the means and\n\t * standard deviation of each feature.\n\t * @param dataset\n\t * @returns {{result: Matrix, means: (*|number), std: Matrix}} dataset normalized, means\n\t *                                                             and standard deviations\n\t */\n\tfunction featureNormalize(dataset) {\n\t    var means = Stat.matrix.mean(dataset);\n\t    var std = Matrix.rowVector(Stat.matrix.standardDeviation(dataset, means, true));\n\t    means = Matrix.rowVector(means);\n\t\n\t    var result = dataset.addRowVector(means.neg());\n\t    return {result: result.divRowVector(std), means: means, std: std};\n\t}\n\t\n\tmodule.exports = {\n\t    norm: norm,\n\t    pow2array: pow2array,\n\t    featureNormalize: featureNormalize\n\t};\n\t\n\n\n/***/ },\n/* 127 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(117);\n\tvar Utils = __webpack_require__(126);\n\t\n\tmodule.exports = OPLS;\n\t\n\tfunction OPLS(dataset, predictions, numberOSC) {\n\t    var X = Matrix(dataset).clone();\n\t    var y = Matrix(predictions).clone();\n\t\n\t    X = Utils.featureNormalize(X).result;\n\t    y = Utils.featureNormalize(y).result;\n\t\n\t    var rows = X.rows;\n\t    var columns = X.columns;\n\t\n\t    var sumOfSquaresX = X.clone().mul(X).sum();\n\t    var w = X.transpose().mmul(y);\n\t    w.div(Utils.norm(w));\n\t\n\t    var orthoW = new Array(numberOSC);\n\t    var orthoT = new Array(numberOSC);\n\t    var orthoP = new Array(numberOSC);\n\t    for (var i = 0; i < numberOSC; i++) {\n\t        var t = X.mmul(w);\n\t\n\t        var numerator = X.transpose().mmul(t);\n\t        var denominator = t.transpose().mmul(t)[0][0];\n\t        var p =  numerator.div(denominator);\n\t\n\t        numerator = w.transpose().mmul(p)[0][0];\n\t        denominator = w.transpose().mmul(w)[0][0];\n\t        var wOsc = p.sub(w.clone().mul(numerator / denominator));\n\t        wOsc.div(Utils.norm(wOsc));\n\t\n\t        var tOsc = X.mmul(wOsc);\n\t\n\t        numerator = X.transpose().mmul(tOsc);\n\t        denominator = tOsc.transpose().mmul(tOsc)[0][0];\n\t        var pOsc = numerator.div(denominator);\n\t\n\t        X.sub(tOsc.mmul(pOsc.transpose()));\n\t        orthoW[i] = wOsc.getColumn(0);\n\t        orthoT[i] = tOsc.getColumn(0);\n\t        orthoP[i] = pOsc.getColumn(0);\n\t    }\n\t\n\t    this.Xosc = X;\n\t\n\t    var sumOfSquaresXosx = this.Xosc.clone().mul(this.Xosc).sum();\n\t    this.R2X = 1 - sumOfSquaresXosx/sumOfSquaresX;\n\t\n\t    this.W = orthoW;\n\t    this.T = orthoT;\n\t    this.P = orthoP;\n\t    this.numberOSC = numberOSC;\n\t}\n\t\n\tOPLS.prototype.correctDataset = function (dataset) {\n\t    var X = Matrix(dataset).clone();\n\t    //X = Utils.featureNormalize(dataset).result;\n\t\n\t    var sumOfSquaresX = X.clone().mul(X).sum();\n\t    for (var i = 0; i < this.numberOSC; i++) {\n\t        var currentW = this.W.getColumnVector(i);\n\t        var currentP = this.P.getColumnVector(i);\n\t\n\t        var t = X.mmul(currentW);\n\t        X.sub(t.mmul(currentP));\n\t    }\n\t    var sumOfSquaresXosx = X.clone().mul(X).sum();\n\t\n\t    var R2X = 1 - sumOfSquaresXosx / sumOfSquaresX;\n\t\n\t    return {\n\t        datasetOsc: X,\n\t        R2Dataset: R2X\n\t    };\n\t};\n\n/***/ },\n/* 128 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(129);\n\n/***/ },\n/* 129 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\t/**\n\t * Calculates the squared distance between two vectors\n\t * @param {Array<number>} vec1 - the x vector\n\t * @param {Array<number>} vec2 - the y vector\n\t * @returns {number} sum - the calculated distance\n\t */\n\tfunction squaredDistance(vec1, vec2) {\n\t    var sum = 0;\n\t    var dim = vec1.length;\n\t    for (var i = 0; i < dim; i++)\n\t        sum += (vec1[i] - vec2[i]) * (vec1[i] - vec2[i]);\n\t    return sum;\n\t}\n\t\n\t/**\n\t * Calculates the sum of squared errors\n\t * @param {Array <Array <number>>} data - the (x,y) points to cluster\n\t * @param {Array <Array <number>>} centers - the K centers in format (x,y)\n\t * @param {Array <number>} clusterID - the cluster identifier for each data dot\n\t * @returns {number} the sum of squared errors\n\t */\n\tfunction computeSSE(data, centers, clusterID) {\n\t    var sse = 0;\n\t    var nData = data.length;\n\t    var c = 0;\n\t    for (var i = 0; i < nData;i++) {\n\t        c = clusterID[i];\n\t        sse += squaredDistance(data[i], centers[c]);\n\t    }\n\t    return sse;\n\t}\n\t\n\t/**\n\t * Updates the cluster identifier based in the new data\n\t * @param {Array <Array <number>>} data - the (x,y) points to cluster\n\t * @param {Array <Array <number>>} centers - the K centers in format (x,y)\n\t * @returns {Array} the cluster identifier for each data dot\n\t */\n\tfunction updateClusterID (data, centers) {\n\t    var nData = data.length;\n\t    var k = centers.length;\n\t    var aux = 0;\n\t    var clusterID = new Array(nData);\n\t    for (var i = 0; i < nData; i++)\n\t        clusterID[i] = 0;\n\t    var d = new Array(nData);\n\t    for (var i = 0; i < nData; i++) {\n\t        d[i] = new Array(k);\n\t        for (var j = 0; j < k; j++) {\n\t            aux = squaredDistance(data[i], centers[j]);\n\t            d[i][j] = new Array(2);\n\t            d[i][j][0] = aux;\n\t            d[i][j][1] = j;\n\t        }\n\t        var min = d[i][0][0];\n\t        var id = 0;\n\t        for (var j = 0; j < k; j++)\n\t            if (d[i][j][0] < min) {\n\t                min  = d[i][j][0];\n\t                id = d[i][j][1];\n\t            }\n\t        clusterID[i] = id;\n\t    }\n\t    return clusterID;\n\t}\n\t\n\t/**\n\t * Update the center values based in the new configurations of the clusters\n\t * @param {Array <Array <number>>} data - the (x,y) points to cluster\n\t * @param {Array <number>} clusterID - the cluster identifier for each data dot\n\t * @param K - number of clusters\n\t * @returns {Array} he K centers in format (x,y)\n\t */\n\tfunction updateCenters(data, clusterID, K) {\n\t    var nDim = data[0].length;\n\t    var nData = data.length;\n\t    var centers = new Array(K);\n\t    for (var i = 0; i < K; i++) {\n\t        centers[i] = new Array(nDim);\n\t        for (var j = 0; j < nDim; j++)\n\t            centers[i][j] = 0;\n\t    }\n\t\n\t    for (var k = 0; k < K; k++) {\n\t        var cluster = [];\n\t        for (var i = 0; i < nData;i++)\n\t            if (clusterID[i] == k)\n\t                cluster.push(data[i]);\n\t        for (var d = 0; d < nDim; d++) {\n\t            var x = [];\n\t            for (var i = 0; i < nData; i++)\n\t                if (clusterID[i] == k)\n\t                    x.push(data[i][d]);\n\t            var sum = 0;\n\t            var l = x.length;\n\t            for (var i = 0; i < l; i++)\n\t                sum += x[i];\n\t            centers[k][d] = sum / l;\n\t        }\n\t    }\n\t    return centers;\n\t}\n\t\n\t/**\n\t * K-means algorithm\n\t * @param {Array <Array <number>>} data - the (x,y) points to cluster\n\t * @param {Array <Array <number>>} centers - the K centers in format (x,y)\n\t * @param {Object} props - properties\n\t * @param {number} maxIter - maximum of iterations allowed\n\t * @param {number} tol - the error tolerance\n\t * @param {boolean} withIter - store clusters and centroids for each iteration\n\t * @returns {Object} the cluster identifier for each data dot and centroids\n\t */\n\tfunction kmeans(data, centers, props) {\n\t    var maxIter, tol, withIter;\n\t    if (typeof props === \"undefined\") {\n\t        maxIter = 100;\n\t        tol = 1e-6;\n\t        withIter = false;\n\t    } else {\n\t        maxIter = (typeof props.maxIter === \"undefined\") ? 100 : props.maxIter;\n\t        tol = (typeof props.tol === \"undefined\") ? 1e-6 : props.tol;\n\t        withIter = (typeof props.withIter === \"undefined\") ? false : props.withIter;\n\t    }\n\t\n\t    var nData = data.length;\n\t    if (nData == 0) {\n\t        return [];\n\t    }\n\t    var K = centers.length;\n\t    var clusterID = new Array(nData);\n\t    for (var i = 0; i < nData; i++)\n\t        clusterID[i] = 0;\n\t    if (K >= nData) {\n\t        for (var i = 0; i < nData; i++)\n\t            clusterID[i] = i;\n\t        return clusterID;\n\t    }\n\t    var lastDistance;\n\t    lastDistance = 1e100;\n\t    var curDistance = 0;\n\t    var iterations = [];\n\t    for (var iter = 0; iter < maxIter; iter++) {\n\t        clusterID = updateClusterID(data, centers);\n\t        centers = updateCenters(data, clusterID, K);\n\t        curDistance = computeSSE(data, centers, clusterID);\n\t        if (withIter) {\n\t            iterations.push({\n\t                \"clusters\": clusterID,\n\t                \"centroids\": centers\n\t            });\n\t        }\n\t\n\t        if ((lastDistance - curDistance < tol) || ((lastDistance - curDistance)/lastDistance < tol)) {\n\t            if (withIter) {\n\t                return {\n\t                    \"clusters\": clusterID,\n\t                    \"centroids\": centers,\n\t                    \"iterations\": iterations\n\t                };\n\t            } else {\n\t                return {\n\t                    \"clusters\": clusterID,\n\t                    \"centroids\": centers\n\t                };\n\t            }\n\t        }\n\t        lastDistance = curDistance;\n\t    }\n\t    if (withIter) {\n\t        return {\n\t            \"clusters\": clusterID,\n\t            \"centroids\": centers,\n\t            \"iterations\": iterations\n\t        };\n\t    } else {\n\t        return {\n\t            \"clusters\": clusterID,\n\t            \"centroids\": centers\n\t        };\n\t    }\n\t}\n\t\n\tmodule.exports = kmeans;\n\n\n/***/ },\n/* 130 */\n/***/ function(module, exports, __webpack_require__) {\n\n\texports.agnes = __webpack_require__(131);\n\texports.diana = __webpack_require__(139);\n\t//exports.birch = require('./birch');\n\t//exports.cure = require('./cure');\n\t//exports.chameleon = require('./chameleon');\n\n/***/ },\n/* 131 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar euclidean = __webpack_require__(132);\n\tvar ClusterLeaf = __webpack_require__(133);\n\tvar Cluster = __webpack_require__(134);\n\t\n\t/**\n\t * @param cluster1\n\t * @param cluster2\n\t * @param disFun\n\t * @returns {number}\n\t */\n\tfunction simpleLink(cluster1, cluster2, disFun) {\n\t    var m = 10e100;\n\t    for (var i = 0; i < cluster1.length; i++)\n\t        for (var j = i; j < cluster2.length; j++) {\n\t            var d = disFun(cluster1[i], cluster2[j]);\n\t            m = Math.min(d,m);\n\t        }\n\t    return m;\n\t}\n\t\n\t/**\n\t * @param cluster1\n\t * @param cluster2\n\t * @param disFun\n\t * @returns {number}\n\t */\n\tfunction completeLink(cluster1, cluster2, disFun) {\n\t    var m = -1;\n\t    for (var i = 0; i < cluster1.length; i++)\n\t        for (var j = i; j < cluster2.length; j++) {\n\t            var d = disFun(cluster1[i], cluster2[j]);\n\t            m = Math.max(d,m);\n\t        }\n\t    return m;\n\t}\n\t\n\t/**\n\t * @param cluster1\n\t * @param cluster2\n\t * @param disFun\n\t * @returns {number}\n\t */\n\tfunction averageLink(cluster1, cluster2, disFun) {\n\t    var m = 0;\n\t    for (var i = 0; i < cluster1.length; i++)\n\t        for (var j = 0; j < cluster2.length; j++)\n\t            m += disFun(cluster1[i], cluster2[j]);\n\t    return m / (cluster1.length * cluster2.length);\n\t}\n\t\n\t/**\n\t * @param cluster1\n\t * @param cluster2\n\t * @param disFun\n\t * @returns {*}\n\t */\n\tfunction centroidLink(cluster1, cluster2, disFun) {\n\t    var x1 = 0,\n\t        y1 = 0,\n\t        x2 = 0,\n\t        y2 = 0;\n\t    for (var i = 0; i < cluster1.length; i++) {\n\t        x1 += cluster1[i][0];\n\t        y1 += cluster1[i][1];\n\t    }\n\t    for (var j = 0; j < cluster2.length; j++) {\n\t        x2 += cluster2[j][0];\n\t        y2 += cluster2[j][1];\n\t    }\n\t    x1 /= cluster1.length;\n\t    y1 /= cluster1.length;\n\t    x2 /= cluster2.length;\n\t    y2 /= cluster2.length;\n\t    return disFun([x1,y1], [x2,y2]);\n\t}\n\t\n\t/**\n\t * @param cluster1\n\t * @param cluster2\n\t * @param disFun\n\t * @returns {number}\n\t */\n\tfunction wardLink(cluster1, cluster2, disFun) {\n\t    var x1 = 0,\n\t        y1 = 0,\n\t        x2 = 0,\n\t        y2 = 0;\n\t    for (var i = 0; i < cluster1.length; i++) {\n\t        x1 += cluster1[i][0];\n\t        y1 += cluster1[i][1];\n\t    }\n\t    for (var j = 0; j < cluster2.length; j++) {\n\t        x2 += cluster2[j][0];\n\t        y2 += cluster2[j][1];\n\t    }\n\t    x1 /= cluster1.length;\n\t    y1 /= cluster1.length;\n\t    x2 /= cluster2.length;\n\t    y2 /= cluster2.length;\n\t    return disFun([x1,y1], [x2,y2])*cluster1.length*cluster2.length / (cluster1.length+cluster2.length);\n\t}\n\t\n\tvar defaultOptions = {\n\t    disFunc: euclidean,\n\t    kind: 'single'\n\t};\n\t\n\t/**\n\t * Continuously merge nodes that have the least dissimilarity\n\t * @param {Array <Array <number>>} data - Array of points to be clustered\n\t * @param {json} options\n\t * @constructor\n\t */\n\tfunction agnes(data, options) {\n\t    options = options || {};\n\t    for (var o in defaultOptions)\n\t        if (!(options.hasOwnProperty(o)))\n\t            options[o] = defaultOptions[o];\n\t    var len = data.length;\n\t\n\t    // allows to use a string or a given function\n\t    if (typeof options.kind === \"string\") {\n\t        switch (options.kind) {\n\t            case 'single':\n\t                options.kind = simpleLink;\n\t                break;\n\t            case 'complete':\n\t                options.kind = completeLink;\n\t                break;\n\t            case 'average':\n\t                options.kind = averageLink;\n\t                break;\n\t            case 'centroid':\n\t                options.kind = centroidLink;\n\t                break;\n\t            case 'ward':\n\t                options.kind = wardLink;\n\t                break;\n\t            default:\n\t                throw new RangeError('Unknown kind of similarity');\n\t        }\n\t    }\n\t    else if (typeof options.kind !== \"function\")\n\t        throw new TypeError('Undefined kind of similarity');\n\t\n\t    var list = new Array(len);\n\t    for (var i = 0; i < data.length; i++)\n\t        list[i] = new ClusterLeaf(i);\n\t    var min  = 10e5,\n\t        d = {},\n\t        dis = 0;\n\t\n\t    while (list.length > 1) {\n\t\n\t        // calculates the minimum distance\n\t        d = {};\n\t        min = 10e5;\n\t        for (var j = 0; j < list.length; j++)\n\t            for (var k = j + 1; k < list.length; k++) {\n\t                var fData, sData;\n\t                if (list[j] instanceof ClusterLeaf)\n\t                    fData = [data[list[j].index]];\n\t                else {\n\t                    fData = new Array(list[j].index.length);\n\t                    for (var e = 0; e < fData.length; e++)\n\t                        fData[e] = data[list[j].index[e].index];\n\t                }\n\t                if (list[k] instanceof ClusterLeaf)\n\t                    sData = [data[list[k].index]];\n\t                else {\n\t                    sData = new Array(list[k].index.length);\n\t                    for (var f = 0; f < sData.length; f++)\n\t                        sData[f] = data[list[k].index[f].index];\n\t                }\n\t                dis = options.kind(fData, sData, options.disFunc).toFixed(4);\n\t                if (dis in d) {\n\t                    d[dis].push([list[j], list[k]]);\n\t                }\n\t                else {\n\t                    d[dis] = [[list[j], list[k]]];\n\t                }\n\t                min = Math.min(dis, min);\n\t            }\n\t\n\t        // cluster dots\n\t        var dmin = d[min.toFixed(4)];\n\t        var clustered = new Array(dmin.length);\n\t        var aux,\n\t            count = 0;\n\t        while (dmin.length > 0) {\n\t            aux = dmin.shift();\n\t            for (var q = 0; q < dmin.length; q++) {\n\t                var int = dmin[q].filter(function(n) {\n\t                    //noinspection JSReferencingMutableVariableFromClosure\n\t                    return aux.indexOf(n) !== -1\n\t                });\n\t                if (int.length > 0) {\n\t                    var diff = dmin[q].filter(function(n) {\n\t                        //noinspection JSReferencingMutableVariableFromClosure\n\t                        return aux.indexOf(n) === -1\n\t                    });\n\t                    aux = aux.concat(diff);\n\t                    dmin.splice(q-- ,1);\n\t                }\n\t            }\n\t            clustered[count++] = aux;\n\t        }\n\t        clustered.length = count;\n\t\n\t        for (var ii = 0; ii < clustered.length; ii++) {\n\t            var obj = new Cluster();\n\t            obj.children = clustered[ii].concat();\n\t            obj.distance = min;\n\t            obj.index = new Array(len);\n\t            var indCount = 0;\n\t            for (var jj = 0; jj < clustered[ii].length; jj++) {\n\t                if (clustered[ii][jj] instanceof ClusterLeaf)\n\t                    obj.index[indCount++] = clustered[ii][jj];\n\t                else {\n\t                    indCount += clustered[ii][jj].index.length;\n\t                    obj.index = clustered[ii][jj].index.concat(obj.index);\n\t                }\n\t                list.splice((list.indexOf(clustered[ii][jj])), 1);\n\t            }\n\t            obj.index.length = indCount;\n\t            list.push(obj);\n\t        }\n\t    }\n\t    return list[0];\n\t}\n\t\n\tmodule.exports = agnes;\n\n/***/ },\n/* 132 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tfunction squaredEuclidean(p, q) {\n\t    var d = 0;\n\t    for (var i = 0; i < p.length; i++) {\n\t        d += (p[i] - q[i]) * (p[i] - q[i]);\n\t    }\n\t    return d;\n\t}\n\t\n\tfunction euclidean(p, q) {\n\t    return Math.sqrt(squaredEuclidean(p, q));\n\t}\n\t\n\tmodule.exports = euclidean;\n\teuclidean.squared = squaredEuclidean;\n\n\n/***/ },\n/* 133 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Cluster = __webpack_require__(134);\n\tvar util = __webpack_require__(135);\n\t\n\tfunction ClusterLeaf (index) {\n\t    Cluster.call(this);\n\t    this.index = index;\n\t    this.distance = 0;\n\t    this.children = undefined;\n\t}\n\t\n\tutil.inherits(ClusterLeaf, Cluster);\n\t\n\tmodule.exports = ClusterLeaf;\n\n\n/***/ },\n/* 134 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tfunction Cluster () {\n\t    this.children = [];\n\t    this.distance = -1;\n\t    this.index = [];\n\t}\n\t\n\t/**\n\t * Creates an array of values where maximum distance smaller than the threshold\n\t * @param {number} threshold\n\t * @return {Array <Cluster>}\n\t */\n\tCluster.prototype.cut = function (threshold) {\n\t    if (threshold < 0) throw new RangeError('Threshold too small');\n\t    var root = new Cluster();\n\t    root.children = this.children;\n\t    root.distance = this.distance;\n\t    root.index = this.index;\n\t    var list = [root];\n\t    var ans = [];\n\t    while (list.length > 0) {\n\t        var aux = list.shift();\n\t        if (threshold >= aux.distance)\n\t            ans.push(aux);\n\t        else\n\t            list = list.concat(aux.children);\n\t    }\n\t    return ans;\n\t};\n\t\n\t/**\n\t * Merge the leaves in the minimum way to have 'minGroups' number of clusters\n\t * @param {number} minGroups\n\t * @return {Cluster}\n\t */\n\tCluster.prototype.group = function (minGroups) {\n\t    if (minGroups < 1) throw new RangeError('Number of groups too small');\n\t    var root = new Cluster();\n\t    root.children = this.children;\n\t    root.distance = this.distance;\n\t    root.index = this.index;\n\t    if (minGroups === 1)\n\t        return root;\n\t    var list = [root];\n\t    var aux;\n\t    while (list.length < minGroups && list.length !== 0) {\n\t        aux = list.shift();\n\t        list = list.concat(aux.children);\n\t    }\n\t    if (list.length === 0) throw new RangeError('Number of groups too big');\n\t    for (var i = 0; i < list.length; i++)\n\t        if (list[i].distance === aux.distance) {\n\t            list.concat(list[i].children.slice(1));\n\t            list[i] = list[i].children[0];\n\t        }\n\t    for (var j = 0; j < list.length; j++)\n\t        if (list[j].distance !== 0) {\n\t            var obj = list[j];\n\t            obj.children = obj.index;\n\t        }\n\t    return root;\n\t};\n\t\n\tmodule.exports = Cluster;\n\n\n/***/ },\n/* 135 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.\n\t//\n\t// Permission is hereby granted, free of charge, to any person obtaining a\n\t// copy of this software and associated documentation files (the\n\t// \"Software\"), to deal in the Software without restriction, including\n\t// without limitation the rights to use, copy, modify, merge, publish,\n\t// distribute, sublicense, and/or sell copies of the Software, and to permit\n\t// persons to whom the Software is furnished to do so, subject to the\n\t// following conditions:\n\t//\n\t// The above copyright notice and this permission notice shall be included\n\t// in all copies or substantial portions of the Software.\n\t//\n\t// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\t// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\t// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n\t// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n\t// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n\t// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n\t// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\t\n\tvar formatRegExp = /%[sdj%]/g;\n\texports.format = function(f) {\n\t  if (!isString(f)) {\n\t    var objects = [];\n\t    for (var i = 0; i < arguments.length; i++) {\n\t      objects.push(inspect(arguments[i]));\n\t    }\n\t    return objects.join(' ');\n\t  }\n\t\n\t  var i = 1;\n\t  var args = arguments;\n\t  var len = args.length;\n\t  var str = String(f).replace(formatRegExp, function(x) {\n\t    if (x === '%%') return '%';\n\t    if (i >= len) return x;\n\t    switch (x) {\n\t      case '%s': return String(args[i++]);\n\t      case '%d': return Number(args[i++]);\n\t      case '%j':\n\t        try {\n\t          return JSON.stringify(args[i++]);\n\t        } catch (_) {\n\t          return '[Circular]';\n\t        }\n\t      default:\n\t        return x;\n\t    }\n\t  });\n\t  for (var x = args[i]; i < len; x = args[++i]) {\n\t    if (isNull(x) || !isObject(x)) {\n\t      str += ' ' + x;\n\t    } else {\n\t      str += ' ' + inspect(x);\n\t    }\n\t  }\n\t  return str;\n\t};\n\t\n\t\n\t// Mark that a method should not be used.\n\t// Returns a modified function which warns once by default.\n\t// If --no-deprecation is set, then it is a no-op.\n\texports.deprecate = function(fn, msg) {\n\t  // Allow for deprecating things in the process of starting up.\n\t  if (isUndefined(global.process)) {\n\t    return function() {\n\t      return exports.deprecate(fn, msg).apply(this, arguments);\n\t    };\n\t  }\n\t\n\t  if (process.noDeprecation === true) {\n\t    return fn;\n\t  }\n\t\n\t  var warned = false;\n\t  function deprecated() {\n\t    if (!warned) {\n\t      if (process.throwDeprecation) {\n\t        throw new Error(msg);\n\t      } else if (process.traceDeprecation) {\n\t        console.trace(msg);\n\t      } else {\n\t        console.error(msg);\n\t      }\n\t      warned = true;\n\t    }\n\t    return fn.apply(this, arguments);\n\t  }\n\t\n\t  return deprecated;\n\t};\n\t\n\t\n\tvar debugs = {};\n\tvar debugEnviron;\n\texports.debuglog = function(set) {\n\t  if (isUndefined(debugEnviron))\n\t    debugEnviron = process.env.NODE_DEBUG || '';\n\t  set = set.toUpperCase();\n\t  if (!debugs[set]) {\n\t    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n\t      var pid = process.pid;\n\t      debugs[set] = function() {\n\t        var msg = exports.format.apply(exports, arguments);\n\t        console.error('%s %d: %s', set, pid, msg);\n\t      };\n\t    } else {\n\t      debugs[set] = function() {};\n\t    }\n\t  }\n\t  return debugs[set];\n\t};\n\t\n\t\n\t/**\n\t * Echos the value of a value. Trys to print the value out\n\t * in the best way possible given the different types.\n\t *\n\t * @param {Object} obj The object to print out.\n\t * @param {Object} opts Optional options object that alters the output.\n\t */\n\t/* legacy: obj, showHidden, depth, colors*/\n\tfunction inspect(obj, opts) {\n\t  // default options\n\t  var ctx = {\n\t    seen: [],\n\t    stylize: stylizeNoColor\n\t  };\n\t  // legacy...\n\t  if (arguments.length >= 3) ctx.depth = arguments[2];\n\t  if (arguments.length >= 4) ctx.colors = arguments[3];\n\t  if (isBoolean(opts)) {\n\t    // legacy...\n\t    ctx.showHidden = opts;\n\t  } else if (opts) {\n\t    // got an \"options\" object\n\t    exports._extend(ctx, opts);\n\t  }\n\t  // set default options\n\t  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n\t  if (isUndefined(ctx.depth)) ctx.depth = 2;\n\t  if (isUndefined(ctx.colors)) ctx.colors = false;\n\t  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n\t  if (ctx.colors) ctx.stylize = stylizeWithColor;\n\t  return formatValue(ctx, obj, ctx.depth);\n\t}\n\texports.inspect = inspect;\n\t\n\t\n\t// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\n\tinspect.colors = {\n\t  'bold' : [1, 22],\n\t  'italic' : [3, 23],\n\t  'underline' : [4, 24],\n\t  'inverse' : [7, 27],\n\t  'white' : [37, 39],\n\t  'grey' : [90, 39],\n\t  'black' : [30, 39],\n\t  'blue' : [34, 39],\n\t  'cyan' : [36, 39],\n\t  'green' : [32, 39],\n\t  'magenta' : [35, 39],\n\t  'red' : [31, 39],\n\t  'yellow' : [33, 39]\n\t};\n\t\n\t// Don't use 'blue' not visible on cmd.exe\n\tinspect.styles = {\n\t  'special': 'cyan',\n\t  'number': 'yellow',\n\t  'boolean': 'yellow',\n\t  'undefined': 'grey',\n\t  'null': 'bold',\n\t  'string': 'green',\n\t  'date': 'magenta',\n\t  // \"name\": intentionally not styling\n\t  'regexp': 'red'\n\t};\n\t\n\t\n\tfunction stylizeWithColor(str, styleType) {\n\t  var style = inspect.styles[styleType];\n\t\n\t  if (style) {\n\t    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n\t           '\\u001b[' + inspect.colors[style][1] + 'm';\n\t  } else {\n\t    return str;\n\t  }\n\t}\n\t\n\t\n\tfunction stylizeNoColor(str, styleType) {\n\t  return str;\n\t}\n\t\n\t\n\tfunction arrayToHash(array) {\n\t  var hash = {};\n\t\n\t  array.forEach(function(val, idx) {\n\t    hash[val] = true;\n\t  });\n\t\n\t  return hash;\n\t}\n\t\n\t\n\tfunction formatValue(ctx, value, recurseTimes) {\n\t  // Provide a hook for user-specified inspect functions.\n\t  // Check that value is an object with an inspect function on it\n\t  if (ctx.customInspect &&\n\t      value &&\n\t      isFunction(value.inspect) &&\n\t      // Filter out the util module, it's inspect function is special\n\t      value.inspect !== exports.inspect &&\n\t      // Also filter out any prototype objects using the circular check.\n\t      !(value.constructor && value.constructor.prototype === value)) {\n\t    var ret = value.inspect(recurseTimes, ctx);\n\t    if (!isString(ret)) {\n\t      ret = formatValue(ctx, ret, recurseTimes);\n\t    }\n\t    return ret;\n\t  }\n\t\n\t  // Primitive types cannot have properties\n\t  var primitive = formatPrimitive(ctx, value);\n\t  if (primitive) {\n\t    return primitive;\n\t  }\n\t\n\t  // Look up the keys of the object.\n\t  var keys = Object.keys(value);\n\t  var visibleKeys = arrayToHash(keys);\n\t\n\t  if (ctx.showHidden) {\n\t    keys = Object.getOwnPropertyNames(value);\n\t  }\n\t\n\t  // IE doesn't make error fields non-enumerable\n\t  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n\t  if (isError(value)\n\t      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n\t    return formatError(value);\n\t  }\n\t\n\t  // Some type of object without properties can be shortcutted.\n\t  if (keys.length === 0) {\n\t    if (isFunction(value)) {\n\t      var name = value.name ? ': ' + value.name : '';\n\t      return ctx.stylize('[Function' + name + ']', 'special');\n\t    }\n\t    if (isRegExp(value)) {\n\t      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n\t    }\n\t    if (isDate(value)) {\n\t      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n\t    }\n\t    if (isError(value)) {\n\t      return formatError(value);\n\t    }\n\t  }\n\t\n\t  var base = '', array = false, braces = ['{', '}'];\n\t\n\t  // Make Array say that they are Array\n\t  if (isArray(value)) {\n\t    array = true;\n\t    braces = ['[', ']'];\n\t  }\n\t\n\t  // Make functions say that they are functions\n\t  if (isFunction(value)) {\n\t    var n = value.name ? ': ' + value.name : '';\n\t    base = ' [Function' + n + ']';\n\t  }\n\t\n\t  // Make RegExps say that they are RegExps\n\t  if (isRegExp(value)) {\n\t    base = ' ' + RegExp.prototype.toString.call(value);\n\t  }\n\t\n\t  // Make dates with properties first say the date\n\t  if (isDate(value)) {\n\t    base = ' ' + Date.prototype.toUTCString.call(value);\n\t  }\n\t\n\t  // Make error with message first say the error\n\t  if (isError(value)) {\n\t    base = ' ' + formatError(value);\n\t  }\n\t\n\t  if (keys.length === 0 && (!array || value.length == 0)) {\n\t    return braces[0] + base + braces[1];\n\t  }\n\t\n\t  if (recurseTimes < 0) {\n\t    if (isRegExp(value)) {\n\t      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n\t    } else {\n\t      return ctx.stylize('[Object]', 'special');\n\t    }\n\t  }\n\t\n\t  ctx.seen.push(value);\n\t\n\t  var output;\n\t  if (array) {\n\t    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n\t  } else {\n\t    output = keys.map(function(key) {\n\t      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n\t    });\n\t  }\n\t\n\t  ctx.seen.pop();\n\t\n\t  return reduceToSingleString(output, base, braces);\n\t}\n\t\n\t\n\tfunction formatPrimitive(ctx, value) {\n\t  if (isUndefined(value))\n\t    return ctx.stylize('undefined', 'undefined');\n\t  if (isString(value)) {\n\t    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n\t                                             .replace(/'/g, \"\\\\'\")\n\t                                             .replace(/\\\\\"/g, '\"') + '\\'';\n\t    return ctx.stylize(simple, 'string');\n\t  }\n\t  if (isNumber(value))\n\t    return ctx.stylize('' + value, 'number');\n\t  if (isBoolean(value))\n\t    return ctx.stylize('' + value, 'boolean');\n\t  // For some reason typeof null is \"object\", so special case here.\n\t  if (isNull(value))\n\t    return ctx.stylize('null', 'null');\n\t}\n\t\n\t\n\tfunction formatError(value) {\n\t  return '[' + Error.prototype.toString.call(value) + ']';\n\t}\n\t\n\t\n\tfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n\t  var output = [];\n\t  for (var i = 0, l = value.length; i < l; ++i) {\n\t    if (hasOwnProperty(value, String(i))) {\n\t      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n\t          String(i), true));\n\t    } else {\n\t      output.push('');\n\t    }\n\t  }\n\t  keys.forEach(function(key) {\n\t    if (!key.match(/^\\d+$/)) {\n\t      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n\t          key, true));\n\t    }\n\t  });\n\t  return output;\n\t}\n\t\n\t\n\tfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n\t  var name, str, desc;\n\t  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n\t  if (desc.get) {\n\t    if (desc.set) {\n\t      str = ctx.stylize('[Getter/Setter]', 'special');\n\t    } else {\n\t      str = ctx.stylize('[Getter]', 'special');\n\t    }\n\t  } else {\n\t    if (desc.set) {\n\t      str = ctx.stylize('[Setter]', 'special');\n\t    }\n\t  }\n\t  if (!hasOwnProperty(visibleKeys, key)) {\n\t    name = '[' + key + ']';\n\t  }\n\t  if (!str) {\n\t    if (ctx.seen.indexOf(desc.value) < 0) {\n\t      if (isNull(recurseTimes)) {\n\t        str = formatValue(ctx, desc.value, null);\n\t      } else {\n\t        str = formatValue(ctx, desc.value, recurseTimes - 1);\n\t      }\n\t      if (str.indexOf('\\n') > -1) {\n\t        if (array) {\n\t          str = str.split('\\n').map(function(line) {\n\t            return '  ' + line;\n\t          }).join('\\n').substr(2);\n\t        } else {\n\t          str = '\\n' + str.split('\\n').map(function(line) {\n\t            return '   ' + line;\n\t          }).join('\\n');\n\t        }\n\t      }\n\t    } else {\n\t      str = ctx.stylize('[Circular]', 'special');\n\t    }\n\t  }\n\t  if (isUndefined(name)) {\n\t    if (array && key.match(/^\\d+$/)) {\n\t      return str;\n\t    }\n\t    name = JSON.stringify('' + key);\n\t    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n\t      name = name.substr(1, name.length - 2);\n\t      name = ctx.stylize(name, 'name');\n\t    } else {\n\t      name = name.replace(/'/g, \"\\\\'\")\n\t                 .replace(/\\\\\"/g, '\"')\n\t                 .replace(/(^\"|\"$)/g, \"'\");\n\t      name = ctx.stylize(name, 'string');\n\t    }\n\t  }\n\t\n\t  return name + ': ' + str;\n\t}\n\t\n\t\n\tfunction reduceToSingleString(output, base, braces) {\n\t  var numLinesEst = 0;\n\t  var length = output.reduce(function(prev, cur) {\n\t    numLinesEst++;\n\t    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n\t    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n\t  }, 0);\n\t\n\t  if (length > 60) {\n\t    return braces[0] +\n\t           (base === '' ? '' : base + '\\n ') +\n\t           ' ' +\n\t           output.join(',\\n  ') +\n\t           ' ' +\n\t           braces[1];\n\t  }\n\t\n\t  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n\t}\n\t\n\t\n\t// NOTE: These type checking functions intentionally don't use `instanceof`\n\t// because it is fragile and can be easily faked with `Object.create()`.\n\tfunction isArray(ar) {\n\t  return Array.isArray(ar);\n\t}\n\texports.isArray = isArray;\n\t\n\tfunction isBoolean(arg) {\n\t  return typeof arg === 'boolean';\n\t}\n\texports.isBoolean = isBoolean;\n\t\n\tfunction isNull(arg) {\n\t  return arg === null;\n\t}\n\texports.isNull = isNull;\n\t\n\tfunction isNullOrUndefined(arg) {\n\t  return arg == null;\n\t}\n\texports.isNullOrUndefined = isNullOrUndefined;\n\t\n\tfunction isNumber(arg) {\n\t  return typeof arg === 'number';\n\t}\n\texports.isNumber = isNumber;\n\t\n\tfunction isString(arg) {\n\t  return typeof arg === 'string';\n\t}\n\texports.isString = isString;\n\t\n\tfunction isSymbol(arg) {\n\t  return typeof arg === 'symbol';\n\t}\n\texports.isSymbol = isSymbol;\n\t\n\tfunction isUndefined(arg) {\n\t  return arg === void 0;\n\t}\n\texports.isUndefined = isUndefined;\n\t\n\tfunction isRegExp(re) {\n\t  return isObject(re) && objectToString(re) === '[object RegExp]';\n\t}\n\texports.isRegExp = isRegExp;\n\t\n\tfunction isObject(arg) {\n\t  return typeof arg === 'object' && arg !== null;\n\t}\n\texports.isObject = isObject;\n\t\n\tfunction isDate(d) {\n\t  return isObject(d) && objectToString(d) === '[object Date]';\n\t}\n\texports.isDate = isDate;\n\t\n\tfunction isError(e) {\n\t  return isObject(e) &&\n\t      (objectToString(e) === '[object Error]' || e instanceof Error);\n\t}\n\texports.isError = isError;\n\t\n\tfunction isFunction(arg) {\n\t  return typeof arg === 'function';\n\t}\n\texports.isFunction = isFunction;\n\t\n\tfunction isPrimitive(arg) {\n\t  return arg === null ||\n\t         typeof arg === 'boolean' ||\n\t         typeof arg === 'number' ||\n\t         typeof arg === 'string' ||\n\t         typeof arg === 'symbol' ||  // ES6 symbol\n\t         typeof arg === 'undefined';\n\t}\n\texports.isPrimitive = isPrimitive;\n\t\n\texports.isBuffer = __webpack_require__(137);\n\t\n\tfunction objectToString(o) {\n\t  return Object.prototype.toString.call(o);\n\t}\n\t\n\t\n\tfunction pad(n) {\n\t  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n\t}\n\t\n\t\n\tvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n\t              'Oct', 'Nov', 'Dec'];\n\t\n\t// 26 Feb 16:19:34\n\tfunction timestamp() {\n\t  var d = new Date();\n\t  var time = [pad(d.getHours()),\n\t              pad(d.getMinutes()),\n\t              pad(d.getSeconds())].join(':');\n\t  return [d.getDate(), months[d.getMonth()], time].join(' ');\n\t}\n\t\n\t\n\t// log is just a thin wrapper to console.log that prepends a timestamp\n\texports.log = function() {\n\t  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n\t};\n\t\n\t\n\t/**\n\t * Inherit the prototype methods from one constructor into another.\n\t *\n\t * The Function.prototype.inherits from lang.js rewritten as a standalone\n\t * function (not on Function.prototype). NOTE: If this file is to be loaded\n\t * during bootstrapping this function needs to be rewritten using some native\n\t * functions as prototype setup using normal JavaScript does not work as\n\t * expected during bootstrapping (see mirror.js in r114903).\n\t *\n\t * @param {function} ctor Constructor function which needs to inherit the\n\t *     prototype.\n\t * @param {function} superCtor Constructor function to inherit prototype from.\n\t */\n\texports.inherits = __webpack_require__(138);\n\t\n\texports._extend = function(origin, add) {\n\t  // Don't do anything if add isn't an object\n\t  if (!add || !isObject(add)) return origin;\n\t\n\t  var keys = Object.keys(add);\n\t  var i = keys.length;\n\t  while (i--) {\n\t    origin[keys[i]] = add[keys[i]];\n\t  }\n\t  return origin;\n\t};\n\t\n\tfunction hasOwnProperty(obj, prop) {\n\t  return Object.prototype.hasOwnProperty.call(obj, prop);\n\t}\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(136)))\n\n/***/ },\n/* 136 */\n/***/ function(module, exports) {\n\n\t// shim for using process in browser\n\t\n\tvar process = module.exports = {};\n\tvar queue = [];\n\tvar draining = false;\n\tvar currentQueue;\n\tvar queueIndex = -1;\n\t\n\tfunction cleanUpNextTick() {\n\t    draining = false;\n\t    if (currentQueue.length) {\n\t        queue = currentQueue.concat(queue);\n\t    } else {\n\t        queueIndex = -1;\n\t    }\n\t    if (queue.length) {\n\t        drainQueue();\n\t    }\n\t}\n\t\n\tfunction drainQueue() {\n\t    if (draining) {\n\t        return;\n\t    }\n\t    var timeout = setTimeout(cleanUpNextTick);\n\t    draining = true;\n\t\n\t    var len = queue.length;\n\t    while(len) {\n\t        currentQueue = queue;\n\t        queue = [];\n\t        while (++queueIndex < len) {\n\t            currentQueue[queueIndex].run();\n\t        }\n\t        queueIndex = -1;\n\t        len = queue.length;\n\t    }\n\t    currentQueue = null;\n\t    draining = false;\n\t    clearTimeout(timeout);\n\t}\n\t\n\tprocess.nextTick = function (fun) {\n\t    var args = new Array(arguments.length - 1);\n\t    if (arguments.length > 1) {\n\t        for (var i = 1; i < arguments.length; i++) {\n\t            args[i - 1] = arguments[i];\n\t        }\n\t    }\n\t    queue.push(new Item(fun, args));\n\t    if (queue.length === 1 && !draining) {\n\t        setTimeout(drainQueue, 0);\n\t    }\n\t};\n\t\n\t// v8 likes predictible objects\n\tfunction Item(fun, array) {\n\t    this.fun = fun;\n\t    this.array = array;\n\t}\n\tItem.prototype.run = function () {\n\t    this.fun.apply(null, this.array);\n\t};\n\tprocess.title = 'browser';\n\tprocess.browser = true;\n\tprocess.env = {};\n\tprocess.argv = [];\n\tprocess.version = ''; // empty string to avoid regexp issues\n\tprocess.versions = {};\n\t\n\tfunction noop() {}\n\t\n\tprocess.on = noop;\n\tprocess.addListener = noop;\n\tprocess.once = noop;\n\tprocess.off = noop;\n\tprocess.removeListener = noop;\n\tprocess.removeAllListeners = noop;\n\tprocess.emit = noop;\n\t\n\tprocess.binding = function (name) {\n\t    throw new Error('process.binding is not supported');\n\t};\n\t\n\t// TODO(shtylman)\n\tprocess.cwd = function () { return '/' };\n\tprocess.chdir = function (dir) {\n\t    throw new Error('process.chdir is not supported');\n\t};\n\tprocess.umask = function() { return 0; };\n\n\n/***/ },\n/* 137 */\n/***/ function(module, exports) {\n\n\tmodule.exports = function isBuffer(arg) {\n\t  return arg && typeof arg === 'object'\n\t    && typeof arg.copy === 'function'\n\t    && typeof arg.fill === 'function'\n\t    && typeof arg.readUInt8 === 'function';\n\t}\n\n/***/ },\n/* 138 */\n/***/ function(module, exports) {\n\n\tif (typeof Object.create === 'function') {\n\t  // implementation from standard node.js 'util' module\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    ctor.prototype = Object.create(superCtor.prototype, {\n\t      constructor: {\n\t        value: ctor,\n\t        enumerable: false,\n\t        writable: true,\n\t        configurable: true\n\t      }\n\t    });\n\t  };\n\t} else {\n\t  // old school shim for old browsers\n\t  module.exports = function inherits(ctor, superCtor) {\n\t    ctor.super_ = superCtor\n\t    var TempCtor = function () {}\n\t    TempCtor.prototype = superCtor.prototype\n\t    ctor.prototype = new TempCtor()\n\t    ctor.prototype.constructor = ctor\n\t  }\n\t}\n\n\n/***/ },\n/* 139 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar euclidean = __webpack_require__(132);\n\tvar ClusterLeaf = __webpack_require__(133);\n\tvar Cluster = __webpack_require__(134);\n\t\n\t/**\n\t * @param {Array <Array <number>>} cluster1\n\t * @param {Array <Array <number>>} cluster2\n\t * @param {function} disFun\n\t * @returns {number}\n\t */\n\tfunction simpleLink(cluster1, cluster2, disFun) {\n\t    var m = 10e100;\n\t    for (var i = 0; i < cluster1.length; i++)\n\t        for (var j = i; j < cluster2.length; j++) {\n\t            var d = disFun(cluster1[i], cluster2[j]);\n\t            m = Math.min(d,m);\n\t        }\n\t    return m;\n\t}\n\t\n\t/**\n\t * @param {Array <Array <number>>} cluster1\n\t * @param {Array <Array <number>>} cluster2\n\t * @param {function} disFun\n\t * @returns {number}\n\t */\n\tfunction completeLink(cluster1, cluster2, disFun) {\n\t    var m = -1;\n\t    for (var i = 0; i < cluster1.length; i++)\n\t        for (var j = i; j < cluster2.length; j++) {\n\t            var d = disFun(cluster1[i], cluster2[j]);\n\t            m = Math.max(d,m);\n\t        }\n\t    return m;\n\t}\n\t\n\t/**\n\t * @param {Array <Array <number>>} cluster1\n\t * @param {Array <Array <number>>} cluster2\n\t * @param {function} disFun\n\t * @returns {number}\n\t */\n\tfunction averageLink(cluster1, cluster2, disFun) {\n\t    var m = 0;\n\t    for (var i = 0; i < cluster1.length; i++)\n\t        for (var j = 0; j < cluster2.length; j++)\n\t            m += disFun(cluster1[i], cluster2[j]);\n\t    return m / (cluster1.length * cluster2.length);\n\t}\n\t\n\t/**\n\t * @param {Array <Array <number>>} cluster1\n\t * @param {Array <Array <number>>} cluster2\n\t * @param {function} disFun\n\t * @returns {number}\n\t */\n\tfunction centroidLink(cluster1, cluster2, disFun) {\n\t    var x1 = 0,\n\t        y1 = 0,\n\t        x2 = 0,\n\t        y2 = 0;\n\t    for (var i = 0; i < cluster1.length; i++) {\n\t        x1 += cluster1[i][0];\n\t        y1 += cluster1[i][1];\n\t    }\n\t    for (var j = 0; j < cluster2.length; j++) {\n\t        x2 += cluster2[j][0];\n\t        y2 += cluster2[j][1];\n\t    }\n\t    x1 /= cluster1.length;\n\t    y1 /= cluster1.length;\n\t    x2 /= cluster2.length;\n\t    y2 /= cluster2.length;\n\t    return disFun([x1,y1], [x2,y2]);\n\t}\n\t\n\t/**\n\t * @param {Array <Array <number>>} cluster1\n\t * @param {Array <Array <number>>} cluster2\n\t * @param {function} disFun\n\t * @returns {number}\n\t */\n\tfunction wardLink(cluster1, cluster2, disFun) {\n\t    var x1 = 0,\n\t        y1 = 0,\n\t        x2 = 0,\n\t        y2 = 0;\n\t    for (var i = 0; i < cluster1.length; i++) {\n\t        x1 += cluster1[i][0];\n\t        y1 += cluster1[i][1];\n\t    }\n\t    for (var j = 0; j < cluster2.length; j++) {\n\t        x2 += cluster2[j][0];\n\t        y2 += cluster2[j][1];\n\t    }\n\t    x1 /= cluster1.length;\n\t    y1 /= cluster1.length;\n\t    x2 /= cluster2.length;\n\t    y2 /= cluster2.length;\n\t    return disFun([x1,y1], [x2,y2])*cluster1.length*cluster2.length / (cluster1.length+cluster2.length);\n\t}\n\t\n\t/**\n\t * Returns the most distant point and his distance\n\t * @param {Array <Array <number>>} splitting - Clusters to split\n\t * @param {Array <Array <number>>} data - Original data\n\t * @param {function} disFun - Distance function\n\t * @returns {{d: number, p: number}} - d: maximum difference between points, p: the point more distant\n\t */\n\tfunction diff(splitting, data, disFun) {\n\t    var ans = {\n\t        d:0,\n\t        p:0\n\t    };\n\t\n\t    var Ci = new Array(splitting[0].length);\n\t    for (var e = 0; e < splitting[0].length; e++)\n\t        Ci[e] = data[splitting[0][e]];\n\t    var Cj = new Array(splitting[1].length);\n\t    for (var f = 0; f < splitting[1].length; f++)\n\t        Cj[f] = data[splitting[1][f]];\n\t\n\t    var dist, ndist;\n\t    for (var i = 0; i < Ci.length; i++) {\n\t        dist = 0;\n\t        for (var j = 0; j < Ci.length; j++)\n\t            if (i !== j)\n\t                dist += disFun(Ci[i], Ci[j]);\n\t        dist /= (Ci.length - 1);\n\t        ndist = 0;\n\t        for (var k = 0; k < Cj.length; k++)\n\t            ndist += disFun(Ci[i], Cj[k]);\n\t        ndist /= Cj.length;\n\t        if ((dist - ndist) > ans.d) {\n\t            ans.d = (dist - ndist);\n\t            ans.p = i;\n\t        }\n\t    }\n\t    return ans;\n\t}\n\t\n\tvar defaultOptions = {\n\t    dist: euclidean,\n\t    kind: 'single'\n\t};\n\t\n\t/**\n\t * Intra-cluster distance\n\t * @param {Array} index\n\t * @param {Array} data\n\t * @param {function} disFun\n\t * @returns {number}\n\t */\n\tfunction intrDist(index, data, disFun) {\n\t    var dist = 0,\n\t        count = 0;\n\t    for (var i = 0; i < index.length; i++)\n\t        for (var j = i; j < index.length; j++) {\n\t            dist += disFun(data[index[i].index], data[index[j].index]);\n\t            count++\n\t        }\n\t    return dist / count;\n\t}\n\t\n\t/**\n\t * Splits the higher level clusters\n\t * @param {Array <Array <number>>} data - Array of points to be clustered\n\t * @param {json} options\n\t * @constructor\n\t */\n\tfunction diana(data, options) {\n\t    options = options || {};\n\t    for (var o in defaultOptions)\n\t        if (!(options.hasOwnProperty(o)))\n\t            options[o] = defaultOptions[o];\n\t    if (typeof options.kind === \"string\") {\n\t        switch (options.kind) {\n\t            case 'single':\n\t                options.kind = simpleLink;\n\t                break;\n\t            case 'complete':\n\t                options.kind = completeLink;\n\t                break;\n\t            case 'average':\n\t                options.kind = averageLink;\n\t                break;\n\t            case 'centroid':\n\t                options.kind = centroidLink;\n\t                break;\n\t            case 'ward':\n\t                options.kind = wardLink;\n\t                break;\n\t            default:\n\t                throw new RangeError('Unknown kind of similarity');\n\t        }\n\t    }\n\t    else if (typeof options.kind !== \"function\")\n\t        throw new TypeError('Undefined kind of similarity');\n\t    var tree = new Cluster();\n\t    tree.children = new Array(data.length);\n\t    tree.index = new Array(data.length);\n\t    for (var ind = 0; ind < data.length; ind++) {\n\t        tree.children[ind] = new ClusterLeaf(ind);\n\t        tree.index[ind] = new ClusterLeaf(ind);\n\t    }\n\t\n\t    tree.distance = intrDist(tree.index, data, options.dist);\n\t    var m, M, clId,\n\t        dist, rebel;\n\t    var list = [tree];\n\t    while (list.length > 0) {\n\t        M = 0;\n\t        clId = 0;\n\t        for (var i = 0; i < list.length; i++) {\n\t            m = 0;\n\t            for (var j = 0; j < list[i].length; j++) {\n\t                for (var l = (j + 1); l < list[i].length; l++) {\n\t                    m = Math.max(options.dist(data[list[i].index[j].index], data[list[i].index[l].index]), m);\n\t                }\n\t            }\n\t            if (m > M) {\n\t                M = m;\n\t                clId = i;\n\t            }\n\t        }\n\t        M = 0;\n\t        if (list[clId].index.length === 2) {\n\t            list[clId].children = [list[clId].index[0], list[clId].index[1]];\n\t            list[clId].distance = options.dist(data[list[clId].index[0].index], data[list[clId].index[1].index]);\n\t        }\n\t        else if (list[clId].index.length === 3) {\n\t            list[clId].children = [list[clId].index[0], list[clId].index[1], list[clId].index[2]];\n\t            var d = [\n\t                options.dist(data[list[clId].index[0].index], data[list[clId].index[1].index]),\n\t                options.dist(data[list[clId].index[1].index], data[list[clId].index[2].index])\n\t            ];\n\t            list[clId].distance = (d[0] + d[1]) / 2;\n\t        }\n\t        else {\n\t            var C = new Cluster();\n\t            var sG = new Cluster();\n\t            var splitting = [new Array(list[clId].index.length), []];\n\t            for (var spl = 0; spl < splitting[0].length; spl++)\n\t                splitting[0][spl] = spl;\n\t            for (var ii = 0; ii < splitting[0].length; ii++) {\n\t                dist = 0;\n\t                for (var jj = 0; jj < splitting[0].length; jj++)\n\t                    if (ii !== jj)\n\t                        dist += options.dist(data[list[clId].index[splitting[0][jj]].index], data[list[clId].index[splitting[0][ii]].index]);\n\t                dist /= (splitting[0].length - 1);\n\t                if (dist > M) {\n\t                    M = dist;\n\t                    rebel = ii;\n\t                }\n\t            }\n\t            splitting[1] = [rebel];\n\t            splitting[0].splice(rebel, 1);\n\t            dist = diff(splitting, data, options.dist);\n\t            while (dist.d > 0) {\n\t                splitting[1].push(splitting[0][dist.p]);\n\t                splitting[0].splice(dist.p, 1);\n\t                dist = diff(splitting, data, options.dist);\n\t            }\n\t            var fData = new Array(splitting[0].length);\n\t            C.index = new Array(splitting[0].length);\n\t            for (var e = 0; e < fData.length; e++) {\n\t                fData[e] = data[list[clId].index[splitting[0][e]].index];\n\t                C.index[e] = list[clId].index[splitting[0][e]];\n\t                C.children[e] = list[clId].index[splitting[0][e]];\n\t            }\n\t            var sData = new Array(splitting[1].length);\n\t            sG.index = new Array(splitting[1].length);\n\t            for (var f = 0; f < sData.length; f++) {\n\t                sData[f] = data[list[clId].index[splitting[1][f]].index];\n\t                sG.index[f] = list[clId].index[splitting[1][f]];\n\t                sG.children[f] = list[clId].index[splitting[1][f]];\n\t            }\n\t            C.distance = intrDist(C.index, data, options.dist);\n\t            sG.distance = intrDist(sG.index, data, options.dist);\n\t            list.push(C);\n\t            list.push(sG);\n\t            list[clId].children = [C, sG];\n\t        }\n\t        list.splice(clId, 1);\n\t    }\n\t    return tree;\n\t}\n\t\n\tmodule.exports = diana;\n\n/***/ },\n/* 140 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar NodeSquare = __webpack_require__(141),\n\t    NodeHexagonal = __webpack_require__(142);\n\t\n\tvar defaultOptions = {\n\t    fields: 3,\n\t    randomizer: Math.random,\n\t    distance: squareEuclidean,\n\t    iterations: 10,\n\t    learningRate: 0.1,\n\t    gridType: 'rect',\n\t    torus: true,\n\t    method: 'random'\n\t};\n\t\n\tfunction SOM(x, y, options, reload) {\n\t\n\t    this.x = x;\n\t    this.y = y;\n\t\n\t    options = options || {};\n\t    this.options = {};\n\t    for (var i in defaultOptions) {\n\t        if (options.hasOwnProperty(i)) {\n\t            this.options[i] = options[i];\n\t        } else {\n\t            this.options[i] = defaultOptions[i];\n\t        }\n\t    }\n\t\n\t    if (typeof this.options.fields === 'number') {\n\t        this.numWeights = this.options.fields;\n\t    } else if (Array.isArray(this.options.fields)) {\n\t        this.numWeights = this.options.fields.length;\n\t        var converters = getConverters(this.options.fields);\n\t        this.extractor = converters.extractor;\n\t        this.creator = converters.creator;\n\t    } else {\n\t        throw new Error('Invalid fields definition');\n\t    }\n\t\n\t    if (this.options.gridType === 'rect') {\n\t        this.nodeType = NodeSquare;\n\t        this.gridDim = {\n\t            x: x,\n\t            y: y\n\t        };\n\t    } else {\n\t        this.nodeType = NodeHexagonal;\n\t        var hx = this.x - Math.floor(this.y / 2);\n\t        this.gridDim = {\n\t            x: hx,\n\t            y: this.y,\n\t            z: -(0 - hx - this.y)\n\t        };\n\t    }\n\t\n\t    this.torus = this.options.torus;\n\t    this.distanceMethod = this.torus ? 'getDistanceTorus' : 'getDistance';\n\t\n\t    this.distance = this.options.distance;\n\t\n\t    this.maxDistance = getMaxDistance(this.distance, this.numWeights);\n\t\n\t    if (reload === true) { // For model loading\n\t        this.done = true;\n\t        return;\n\t    }\n\t    if (!(x > 0 && y > 0)) {\n\t        throw new Error('x and y must be positive');\n\t    }\n\t\n\t    this.times = {\n\t        findBMU: 0,\n\t        adjust: 0\n\t    };\n\t\n\t    this.randomizer = this.options.randomizer;\n\t\n\t    this.iterationCount = 0;\n\t    this.iterations = this.options.iterations;\n\t\n\t    this.startLearningRate = this.learningRate = this.options.learningRate;\n\t\n\t    this.mapRadius = Math.floor(Math.max(x, y) / 2);\n\t\n\t    this.algorithmMethod = this.options.method;\n\t\n\t    this._initNodes();\n\t\n\t    this.done = false;\n\t}\n\t\n\tSOM.load = function loadModel(model, distance) {\n\t    if (model.name === 'SOM') {\n\t        var x = model.data.length,\n\t            y = model.data[0].length;\n\t        if (distance) {\n\t            model.options.distance = distance;\n\t        } else if (model.options.distance) {\n\t            model.options.distance = eval('(' + model.options.distance + ')');\n\t        }\n\t        var som = new SOM(x, y, model.options, true);\n\t        som.nodes = new Array(x);\n\t        for (var i = 0; i < x; i++) {\n\t            som.nodes[i] = new Array(y);\n\t            for (var j = 0; j < y; j++) {\n\t                som.nodes[i][j] = new som.nodeType(i, j, model.data[i][j], som);\n\t            }\n\t        }\n\t        return som;\n\t    } else {\n\t        throw new Error('expecting a SOM model');\n\t    }\n\t};\n\t\n\tSOM.prototype.export = function exportModel(includeDistance) {\n\t    if (!this.done) {\n\t        throw new Error('model is not ready yet');\n\t    }\n\t    var model = {\n\t        name: 'SOM'\n\t    };\n\t    model.options = {\n\t        fields: this.options.fields,\n\t        gridType: this.options.gridType,\n\t        torus: this.options.torus\n\t    };\n\t    model.data = new Array(this.x);\n\t    for (var i = 0; i < this.x; i++) {\n\t        model.data[i] = new Array(this.y);\n\t        for (var j = 0; j < this.y; j++) {\n\t            model.data[i][j] = this.nodes[i][j].weights;\n\t        }\n\t    }\n\t    if (includeDistance) {\n\t        model.options.distance = this.distance.toString();\n\t    }\n\t    return model;\n\t};\n\t\n\tSOM.prototype._initNodes = function initNodes() {\n\t    var now = Date.now(),\n\t        i, j, k;\n\t    this.nodes = new Array(this.x);\n\t    for (i = 0; i < this.x; i++) {\n\t        this.nodes[i] = new Array(this.y);\n\t        for (j = 0; j < this.y; j++) {\n\t            var weights = new Array(this.numWeights);\n\t            for (k = 0; k < this.numWeights; k++) {\n\t                weights[k] = this.randomizer();\n\t            }\n\t            this.nodes[i][j] = new this.nodeType(i, j, weights, this);\n\t        }\n\t    }\n\t    this.times.initNodes = Date.now() - now;\n\t};\n\t\n\tSOM.prototype.setTraining = function setTraining(trainingSet) {\n\t    if (this.trainingSet) {\n\t        throw new Error('training set has already been set');\n\t    }\n\t    var now = Date.now();\n\t    var convertedSet = trainingSet;\n\t    var i, l = trainingSet.length;\n\t    if (this.extractor) {\n\t        convertedSet = new Array(l);\n\t        for (i = 0; i < l; i++) {\n\t            convertedSet[i] = this.extractor(trainingSet[i]);\n\t        }\n\t    }\n\t    this.numIterations = this.iterations * l;\n\t\n\t    if (this.algorithmMethod === 'random') {\n\t        this.timeConstant = this.numIterations / Math.log(this.mapRadius);\n\t    } else {\n\t        this.timeConstant = l / Math.log(this.mapRadius);\n\t    }\n\t    this.trainingSet = convertedSet;\n\t    this.times.setTraining = Date.now() - now;\n\t};\n\t\n\tSOM.prototype.trainOne = function trainOne() {\n\t    if (this.done) {\n\t\n\t        return false;\n\t\n\t    } else if (this.numIterations-- > 0) {\n\t\n\t        var neighbourhoodRadius,\n\t            trainingValue,\n\t            trainingSetFactor;\n\t\n\t        if (this.algorithmMethod === 'random') { // Pick a random value of the training set at each step\n\t            neighbourhoodRadius = this.mapRadius * Math.exp(-this.iterationCount / this.timeConstant);\n\t            trainingValue = getRandomValue(this.trainingSet, this.randomizer);\n\t            this._adjust(trainingValue, neighbourhoodRadius);\n\t            this.learningRate = this.startLearningRate * Math.exp(-this.iterationCount / this.numIterations);\n\t        } else { // Get next input vector\n\t            trainingSetFactor = -Math.floor(this.iterationCount / this.trainingSet.length);\n\t            neighbourhoodRadius = this.mapRadius * Math.exp(trainingSetFactor / this.timeConstant);\n\t            trainingValue = this.trainingSet[this.iterationCount % this.trainingSet.length];\n\t            this._adjust(trainingValue, neighbourhoodRadius);\n\t            if (((this.iterationCount + 1) % this.trainingSet.length) === 0) {\n\t                this.learningRate = this.startLearningRate * Math.exp(trainingSetFactor / Math.floor(this.numIterations / this.trainingSet.length));\n\t            }\n\t        }\n\t\n\t        this.iterationCount++;\n\t\n\t        return true;\n\t\n\t    } else {\n\t\n\t        this.done = true;\n\t        return false;\n\t\n\t    }\n\t};\n\t\n\tSOM.prototype._adjust = function adjust(trainingValue, neighbourhoodRadius) {\n\t    var now = Date.now(),\n\t        x, y, dist, influence;\n\t\n\t    var bmu = this._findBestMatchingUnit(trainingValue);\n\t\n\t    var now2 = Date.now();\n\t    this.times.findBMU += now2 - now;\n\t\n\t    var radiusLimit = Math.floor(neighbourhoodRadius);\n\t    var xMin = bmu.x - radiusLimit,\n\t        xMax = bmu.x + radiusLimit,\n\t        yMin = bmu.y - radiusLimit,\n\t        yMax = bmu.y + radiusLimit;\n\t\n\t    for (x = xMin; x <= xMax; x++) {\n\t        var theX = x;\n\t        if (x < 0) {\n\t            theX += this.x;\n\t        } else if (x >= this.x) {\n\t            theX -= this.x;\n\t        }\n\t        for (y = yMin; y <= yMax; y++) {\n\t            var theY = y;\n\t            if (y < 0) {\n\t                theY += this.y;\n\t            } else if (y >= this.y) {\n\t                theY -= this.y;\n\t            }\n\t\n\t            dist = bmu[this.distanceMethod](this.nodes[theX][theY]);\n\t\n\t            if (dist < neighbourhoodRadius) {\n\t                influence = Math.exp(-dist / (2 * neighbourhoodRadius));\n\t                this.nodes[theX][theY].adjustWeights(trainingValue, this.learningRate, influence);\n\t            }\n\t\n\t        }\n\t    }\n\t\n\t    this.times.adjust += (Date.now() - now2);\n\t\n\t};\n\t\n\tSOM.prototype.train = function train(trainingSet) {\n\t    if (!this.done) {\n\t        this.setTraining(trainingSet);\n\t        while (this.trainOne()) {\n\t        }\n\t    }\n\t};\n\t\n\tSOM.prototype.getConvertedNodes = function getConvertedNodes() {\n\t    var result = new Array(this.x);\n\t    for (var i = 0; i < this.x; i++) {\n\t        result[i] = new Array(this.y);\n\t        for (var j = 0; j < this.y; j++) {\n\t            var node = this.nodes[i][j];\n\t            result[i][j] = this.creator ? this.creator(node.weights) : node.weights;\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\tSOM.prototype._findBestMatchingUnit = function findBestMatchingUnit(candidate) {\n\t\n\t    var bmu,\n\t        lowest = Infinity,\n\t        dist;\n\t\n\t    for (var i = 0; i < this.x; i++) {\n\t        for (var j = 0; j < this.y; j++) {\n\t            dist = this.distance(this.nodes[i][j].weights, candidate);\n\t            if (dist < lowest) {\n\t                lowest = dist;\n\t                bmu = this.nodes[i][j];\n\t            }\n\t        }\n\t    }\n\t\n\t    return bmu;\n\t\n\t};\n\t\n\tSOM.prototype.predict = function predict(data, computePosition) {\n\t    if (typeof data === 'boolean') {\n\t        computePosition = data;\n\t        data = null;\n\t    }\n\t    if (!data) {\n\t        data = this.trainingSet;\n\t    }\n\t    if (Array.isArray(data) && (Array.isArray(data[0]) || (typeof data[0] === 'object'))) { // predict a dataset\n\t        var self = this;\n\t        return data.map(function (element) {\n\t            return self._predict(element, computePosition);\n\t        });\n\t    } else { // predict a single element\n\t        return this._predict(data, computePosition);\n\t    }\n\t};\n\t\n\tSOM.prototype._predict = function _predict(element, computePosition) {\n\t    if (!Array.isArray(element)) {\n\t        element = this.extractor(element);\n\t    }\n\t    var bmu = this._findBestMatchingUnit(element);\n\t    var result = [bmu.x, bmu.y];\n\t    if (computePosition) {\n\t        result[2] = bmu.getPosition(element);\n\t    }\n\t    return result;\n\t};\n\t\n\t// As seen in http://www.scholarpedia.org/article/Kohonen_network\n\tSOM.prototype.getQuantizationError = function getQuantizationError() {\n\t    var fit = this.getFit(),\n\t        l = fit.length,\n\t        sum = 0;\n\t    for (var i = 0; i < l; i++) {\n\t        sum += fit[i];\n\t    }\n\t    return sum / l;\n\t};\n\t\n\tSOM.prototype.getFit = function getFit(dataset) {\n\t    if (!dataset) {\n\t        dataset = this.trainingSet;\n\t    }\n\t    var l = dataset.length,\n\t        bmu,\n\t        result = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        bmu = this._findBestMatchingUnit(dataset[i]);\n\t        result[i] = Math.sqrt(this.distance(dataset[i], bmu.weights));\n\t    }\n\t    return result;\n\t};\n\t\n\tfunction getConverters(fields) {\n\t    var l = fields.length,\n\t        normalizers = new Array(l),\n\t        denormalizers = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        normalizers[i] = getNormalizer(fields[i].range);\n\t        denormalizers[i] = getDenormalizer(fields[i].range);\n\t    }\n\t    return {\n\t        extractor: function extractor(value) {\n\t            var result = new Array(l);\n\t            for (var i = 0; i < l; i++) {\n\t                result[i] = normalizers[i](value[fields[i].name]);\n\t            }\n\t            return result;\n\t        },\n\t        creator: function creator(value) {\n\t            var result = {};\n\t            for (var i = 0; i < l; i++) {\n\t                result[fields[i].name] = denormalizers[i](value[i]);\n\t            }\n\t            return result;\n\t        }\n\t    };\n\t}\n\t\n\tfunction getNormalizer(minMax) {\n\t    return function normalizer(value) {\n\t        return (value - minMax[0]) / (minMax[1] - minMax[0]);\n\t    };\n\t}\n\t\n\tfunction getDenormalizer(minMax) {\n\t    return function denormalizer(value) {\n\t        return (minMax[0] + value * (minMax[1] - minMax[0]));\n\t    };\n\t}\n\t\n\tfunction squareEuclidean(a, b) {\n\t    var d = 0;\n\t    for (var i = 0, ii = a.length; i < ii; i++) {\n\t        d += (a[i] - b[i]) * (a[i] - b[i]);\n\t    }\n\t    return d;\n\t}\n\t\n\tfunction getRandomValue(arr, randomizer) {\n\t    return arr[Math.floor(randomizer() * arr.length)];\n\t}\n\t\n\tfunction getMaxDistance(distance, numWeights) {\n\t    var zero = new Array(numWeights),\n\t        one = new Array(numWeights);\n\t    for (var i = 0; i < numWeights; i++) {\n\t        zero[i] = 0;\n\t        one[i] = 1;\n\t    }\n\t    return distance(zero, one);\n\t}\n\t\n\tmodule.exports = SOM;\n\n/***/ },\n/* 141 */\n/***/ function(module, exports) {\n\n\tfunction NodeSquare(x, y, weights, som) {\n\t    this.x = x;\n\t    this.y = y;\n\t    this.weights = weights;\n\t    this.som = som;\n\t    this.neighbors = {};\n\t}\n\t\n\tNodeSquare.prototype.adjustWeights = function adjustWeights(target, learningRate, influence) {\n\t    for (var i = 0, ii = this.weights.length; i < ii; i++) {\n\t        this.weights[i] += learningRate * influence * (target[i] - this.weights[i]);\n\t    }\n\t};\n\t\n\tNodeSquare.prototype.getDistance = function getDistance(otherNode) {\n\t    return Math.max(Math.abs(this.x - otherNode.x), Math.abs(this.y - otherNode.y));\n\t};\n\t\n\tNodeSquare.prototype.getDistanceTorus = function getDistanceTorus(otherNode) {\n\t    var distX = Math.abs(this.x - otherNode.x),\n\t        distY = Math.abs(this.y - otherNode.y);\n\t    return Math.max(Math.min(distX, this.som.gridDim.x - distX), Math.min(distY, this.som.gridDim.y - distY));\n\t};\n\t\n\tNodeSquare.prototype.getNeighbors = function getNeighbors(xy) {\n\t    if (!this.neighbors[xy]) {\n\t        this.neighbors[xy] = new Array(2);\n\t\n\t        // left or bottom neighbor\n\t        var v;\n\t        if (this[xy] > 0) {\n\t            v = this[xy] - 1;\n\t        } else if (this.som.torus) {\n\t            v = this.som.gridDim[xy] - 1\n\t        }\n\t        if (typeof v !== 'undefined') {\n\t            var x, y;\n\t            if (xy === 'x') {\n\t                x = v;\n\t                y = this.y;\n\t            } else {\n\t                x = this.x;\n\t                y = v;\n\t            }\n\t            this.neighbors[xy][0] = this.som.nodes[x][y];\n\t        }\n\t\n\t        // top or right neighbor\n\t        var w;\n\t        if (this[xy] < (this.som.gridDim[xy] - 1)) {\n\t            w = this[xy] + 1;\n\t        } else if (this.som.torus) {\n\t            w = 0;\n\t        }\n\t        if (typeof w !== 'undefined') {\n\t            if (xy === 'x') {\n\t                x = w;\n\t                y = this.y;\n\t            } else {\n\t                x = this.x;\n\t                y = w;\n\t            }\n\t            this.neighbors[xy][1] = this.som.nodes[x][y];\n\t        }\n\t    }\n\t    return this.neighbors[xy];\n\t};\n\t\n\tNodeSquare.prototype.getPos = function getPos(xy, element) {\n\t    var neighbors = this.getNeighbors(xy),\n\t        distance = this.som.distance,\n\t        bestNeighbor,\n\t        direction;\n\t    if(neighbors[0]) {\n\t        if (neighbors[1]) {\n\t            var dist1 = distance(element, neighbors[0].weights),\n\t                dist2 = distance(element, neighbors[1].weights);\n\t            if(dist1 < dist2) {\n\t                bestNeighbor = neighbors[0];\n\t                direction = -1;\n\t            } else {\n\t                bestNeighbor = neighbors[1];\n\t                direction = 1;\n\t            }\n\t        } else {\n\t            bestNeighbor = neighbors[0];\n\t            direction = -1;\n\t        }\n\t    } else {\n\t        bestNeighbor = neighbors[1];\n\t        direction = 1;\n\t    }\n\t    var simA = 1 - distance(element, this.weights),\n\t        simB = 1 - distance(element, bestNeighbor.weights);\n\t    var factor = ((simA - simB) / (2 - simA - simB));\n\t    return 0.5 + 0.5 * factor * direction;\n\t};\n\t\n\tNodeSquare.prototype.getPosition = function getPosition(element) {\n\t    return [\n\t        this.getPos('x', element),\n\t        this.getPos('y', element)\n\t    ];\n\t};\n\t\n\tmodule.exports = NodeSquare;\n\n/***/ },\n/* 142 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar NodeSquare = __webpack_require__(141);\n\t\n\tfunction NodeHexagonal(x, y, weights, som) {\n\t\n\t    NodeSquare.call(this, x, y, weights, som);\n\t\n\t    this.hX = x - Math.floor(y / 2);\n\t    this.z = 0 - this.hX - y;\n\t\n\t}\n\t\n\tNodeHexagonal.prototype = new NodeSquare;\n\tNodeHexagonal.prototype.constructor = NodeHexagonal;\n\t\n\tNodeHexagonal.prototype.getDistance = function getDistanceHexagonal(otherNode) {\n\t    return Math.max(Math.abs(this.hX - otherNode.hX), Math.abs(this.y - otherNode.y), Math.abs(this.z - otherNode.z));\n\t};\n\t\n\tNodeHexagonal.prototype.getDistanceTorus = function getDistanceTorus(otherNode) {\n\t    var distX = Math.abs(this.hX - otherNode.hX),\n\t        distY = Math.abs(this.y - otherNode.y),\n\t        distZ = Math.abs(this.z - otherNode.z);\n\t    return Math.max(Math.min(distX, this.som.gridDim.x - distX), Math.min(distY, this.som.gridDim.y - distY), Math.min(distZ, this.som.gridDim.z - distZ));\n\t};\n\t\n\tNodeHexagonal.prototype.getPosition = function getPosition() {\n\t    throw new Error('Unimplemented : cannot get position of the points for hexagonal grid');\n\t};\n\t\n\tmodule.exports = NodeHexagonal;\n\n/***/ },\n/* 143 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(144);\n\n/***/ },\n/* 144 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar Layer = __webpack_require__(145);\n\tvar Matrix = __webpack_require__(146);\n\t\n\tmodule.exports = FeedforwardNeuralNetwork;\n\t\n\t/**\n\t * Function that returns a random number between two numbers (inclusive)\n\t * @param {number} min - lower bound\n\t * @param {number} max - upper bound.\n\t * @returns {number} random number\n\t */\n\tfunction randomIntegerFromInterval(min, max) {\n\t    return Math.floor(Math.random()*(max - min + 1) + min);\n\t}\n\t\n\t/**\n\t * Constructor for the FNN (Feedforward Neural Networks) that takes an Array of Numbers,\n\t * those numbers corresponds to the size of each layer in the FNN, the first and the last number of the array corresponds to the input and the\n\t * output layer respectively.\n\t *\n\t * @param reload - for load purposes.\n\t * @param model - for load purposes.\n\t * @constructor\n\t */\n\tfunction FeedforwardNeuralNetwork(reload, model) {\n\t    if(reload) {\n\t        this.layers = model.layers;\n\t        this.inputSize = model.inputSize;\n\t        this.outputSize = model.outputSize;\n\t    }\n\t}\n\t\n\t/**\n\t * Build the Neural Network with an array that represent each hidden layer size.\n\t *\n\t * @param {Array} layersSize - Array of sizes of each layer.\n\t */\n\tFeedforwardNeuralNetwork.prototype.buildNetwork = function (layersSize) {\n\t    layersSize.push(this.outputSize);\n\t\n\t    this.layers = new Array(layersSize.length);\n\t\n\t    for (var i = 0; i < layersSize.length; ++i) {\n\t        var inSize = (i == 0) ? this.inputSize : layersSize[i - 1];\n\t        this.layers[i] = new Layer(inSize, layersSize[i]);\n\t    }\n\t\n\t    this.layers[this.layers.length - 1].isSigmoid = false;\n\t};\n\t\n\t/**\n\t * Function that applies a forward propagation over the Neural Network\n\t * with one case of the dataset.\n\t * @param {Array} input - case of the dataset.\n\t * @returns {Array} result of the forward propagation.\n\t */\n\tFeedforwardNeuralNetwork.prototype.forwardNN = function (input) {\n\t    var results = input.slice();\n\t\n\t    for(var i = 0; i < this.layers.length; ++i) {\n\t        results = this.layers[i].forward(results);\n\t    }\n\t\n\t    return results;\n\t};\n\t\n\t/**\n\t * Function that makes one iteration (epoch) over the Neural Network with one element\n\t * of the dataset with corresponding prediction; the other two arguments are the\n\t * learning rate and the momentum that is the regularization term for the parameters\n\t * of each perceptron in the Neural Network.\n\t * @param {Array} data - Element of the dataset.\n\t * @param {Array} prediction - Prediction over the data object.\n\t * @param {Number} learningRate\n\t * @param momentum - the regularization term.\n\t */\n\tFeedforwardNeuralNetwork.prototype.iteration = function (data, prediction, learningRate, momentum) {\n\t    var forwardResult = this.forwardNN(data);\n\t    var error = new Array(forwardResult.length);\n\t\n\t    if(typeof(prediction) === 'number')\n\t        prediction = [prediction];\n\t\n\t    for (var i = 0; i < error.length; i++) {\n\t        error[i] = prediction[i] - forwardResult[i];\n\t    }\n\t\n\t    var lengthLayers = this.layers.length;\n\t\n\t    for(i = 0; i < lengthLayers; ++i) {\n\t        error = this.layers[lengthLayers - 1 - i].train(error, learningRate, momentum);\n\t    }\n\t};\n\t\n\t/**\n\t * Method that train the neural network with a given training set with corresponding\n\t * predictions. The options argument has an array of the number of perceptrons that we want in each hidden layer, the\n\t * number of iterations (default 50) that we want to perform, the learning rate and the momentum that is the\n\t * regularization term (default 0.1 for both) for the parameters of each perceptron in the Neural Network.\n\t *\n\t * options:\n\t * * hiddenLayers - Array of number with each hidden layer size.\n\t * * iterations - Number\n\t * * learningRate - Number\n\t * * momentum - Number\n\t *\n\t * @param {Matrix} trainingSet\n\t * @param {Matrix} predictions\n\t * @param {Number} options\n\t */\n\tFeedforwardNeuralNetwork.prototype.train = function (trainingSet, predictions, options) {\n\t    if(options === undefined) options = {};\n\t\n\t    if(trainingSet.length !== predictions.length)\n\t        throw new RangeError(\"the training and prediction set must have the same size.\");\n\t\n\t    this.inputSize = trainingSet[0].length;\n\t    this.outputSize = predictions[0].length;\n\t\n\t    var hiddenLayers = options.hiddenLayers === undefined ? [10] : options.hiddenLayers;\n\t    var iterations = options.iterations === undefined ? 50 : options.iterations;\n\t    var learningRate = options.learningRate === undefined ? 0.1 : options.learningRate;\n\t    var momentum = options.momentum === undefined ? 0.1 : options.momentum;\n\t\n\t    this.buildNetwork(options.hiddenLayers);\n\t\n\t    for(var i = 0; i < iterations; ++i) {\n\t        for(var j = 0; j < predictions.length; ++j) {\n\t            var index = randomIntegerFromInterval(0, predictions.length - 1);\n\t            this.iteration(trainingSet[index], predictions[index], learningRate, momentum);\n\t        }\n\t    }\n\t};\n\t\n\t/**\n\t * Function that with a dataset, gives all the predictions for this dataset.\n\t * @param {Matrix} dataset.\n\t * @returns {Array} predictions\n\t */\n\tFeedforwardNeuralNetwork.prototype.predict = function (dataset) {\n\t    if(dataset[0].length !== this.inputSize)\n\t        throw new RangeError(\"The dataset columns must have the same size of the \" +\n\t                             \"input layer\");\n\t    var result = new Array(dataset.length);\n\t    for (var i = 0; i < dataset.length; i++) {\n\t        result[i] = this.forwardNN(dataset[i]);\n\t    }\n\t\n\t    result = Matrix(result);\n\t    return result.columns === 1 ? result.getColumn(0) : result;\n\t};\n\t\n\t/**\n\t * function that loads a object model into the Neural Network.\n\t * @param model\n\t * @returns {FeedforwardNeuralNetwork} with the provided model.\n\t */\n\tFeedforwardNeuralNetwork.load = function (model) {\n\t    if(model.modelName !== \"FNN\")\n\t        throw new RangeError(\"The given model is invalid!\");\n\t\n\t    return new FeedforwardNeuralNetwork(true, model);\n\t};\n\t\n\t/**\n\t * Function that exports the actual Neural Network to an object.\n\t * @returns {{modelName: string, layers: *, inputSize: *, outputSize: *}}\n\t */\n\tFeedforwardNeuralNetwork.prototype.export = function () {\n\t    return {\n\t        modelName: \"FNN\",\n\t        layers: this.layers,\n\t        inputSize: this.inputSize,\n\t        outputSize: this.outputSize\n\t    };\n\t};\n\n/***/ },\n/* 145 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar Matrix = __webpack_require__(146);\n\t\n\tmodule.exports = Layer;\n\t\n\t/**\n\t * Function that create a random array of numbers between value depending\n\t * on the input and output size given the following formula:\n\t *\n\t *    sqrt(6) / sqrt(l_in + l_out);\n\t *\n\t * Taken from the coursera course of machine learning from Andrew Ng,\n\t * Exercise 4, Page 7 of the exercise PDF.\n\t *\n\t * @param numberOfWeights - size of the array.\n\t * @param inputSize - number of input of the current layer\n\t * @param outputSize - number of output of the current layer\n\t * @returns {Array} random array of numbers.\n\t */\n\tfunction randomInitialzeWeights(numberOfWeights, inputSize, outputSize) {\n\t    var epsilon = 2.449489742783 / Math.sqrt(inputSize + outputSize);\n\t    return Matrix.rand(1, numberOfWeights).mul(2 * epsilon).sub(epsilon).getRow(0);\n\t}\n\t\n\t/**\n\t * Function that calculates the sigmoid (logistic) function.\n\t * @param value\n\t * @returns {number}\n\t */\n\tfunction sigmoid(value) {\n\t    return 1.0 / (1 + Math.exp(-value));\n\t}\n\t\n\t/**\n\t * Function that calculates the derivate of the sigmoid function.\n\t * @param value\n\t * @returns {number}\n\t */\n\tfunction sigmoidGradient(value) {\n\t    return value * (1 - value);\n\t}\n\t\n\t/**\n\t * Constructor that creates a layer for the neural network given the number of inputs\n\t * and outputs.\n\t * @param inputSize\n\t * @param outputSize\n\t * @constructor\n\t */\n\tfunction Layer(inputSize, outputSize) {\n\t    this.output = Matrix.zeros(1, outputSize).getRow(0);\n\t    this.input = Matrix.zeros(1, inputSize + 1).getRow(0); //+1 for bias term\n\t    this.deltaWeights = Matrix.zeros(1, (1 + inputSize) * outputSize).getRow(0);\n\t    this.weights = randomInitialzeWeights(this.deltaWeights.length, inputSize, outputSize);\n\t    this.isSigmoid = true;\n\t}\n\t\n\t/**\n\t * Function that performs the forward propagation for the current layer\n\t * @param {Array} input - output from the previous layer.\n\t * @returns {Array} output - output for the next layer.\n\t */\n\tLayer.prototype.forward = function (input) {\n\t    this.input = input.slice();\n\t    this.input.push(1); // bias\n\t    var offs = 0; // offset used to get the current weights in the current perceptron\n\t    this.output = Matrix.zeros(1, this.output.length).getRow(0);\n\t\n\t    for(var i = 0; i < this.output.length; ++i) {\n\t        for(var j = 0 ; j < this.input.length; ++j) {\n\t            this.output[i] += this.weights[offs + j] * this.input[j];\n\t        }\n\t        if(this.isSigmoid)\n\t            this.output[i] = sigmoid(this.output[i]);\n\t\n\t        offs += this.input.length;\n\t    }\n\t\n\t    return this.output.slice();\n\t};\n\t\n\t/**\n\t * Function that performs the backpropagation algorithm for the current layer.\n\t * @param {Array} error - errors from the previous layer.\n\t * @param {Number} learningRate - Learning rate for the actual layer.\n\t * @param {Number} momentum - The regularizarion term.\n\t * @returns {Array} the error for the next layer.\n\t */\n\tLayer.prototype.train = function (error, learningRate, momentum) {\n\t    var offs = 0;\n\t    var nextError = Matrix.zeros(1, this.input.length).getRow(0);//new Array(this.input.length);\n\t\n\t    for(var i = 0; i < this.output.length; ++i) {\n\t        var delta = error[i];\n\t\n\t        if(this.isSigmoid)\n\t            delta *= sigmoidGradient(this.output[i]);\n\t\n\t        for(var j = 0; j < this.input.length; ++j) {\n\t            var index = offs + j;\n\t            nextError[j] += this.weights[index] * delta;\n\t\n\t            var deltaWeight = this.input[j] * delta * learningRate;\n\t            this.weights[index] += this.deltaWeights[index] * momentum + deltaWeight;\n\t            this.deltaWeights[index] = deltaWeight;\n\t        }\n\t\n\t        offs += this.input.length;\n\t    }\n\t\n\t    return nextError;\n\t};\n\n/***/ },\n/* 146 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(147);\n\tmodule.exports.Decompositions = module.exports.DC = __webpack_require__(148);\n\n\n/***/ },\n/* 147 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar Asplice = Array.prototype.splice,\n\t    Aconcat = Array.prototype.concat;\n\t\n\t// For performance : http://jsperf.com/clone-array-slice-vs-while-vs-for\n\tfunction slice(arr) {\n\t    var i = 0,\n\t        ii = arr.length,\n\t        result = new Array(ii);\n\t    for (; i < ii; i++) {\n\t        result[i] = arr[i];\n\t    }\n\t    return result;\n\t}\n\t\n\t/**\n\t * Real matrix.\n\t * @constructor\n\t * @param {number|Array} nRows - Number of rows of the new matrix or a 2D array containing the data.\n\t * @param {number|boolean} [nColumns] - Number of columns of the new matrix or a boolean specifying if the input array should be cloned\n\t */\n\tfunction Matrix(nRows, nColumns) {\n\t    var i = 0, rows, columns, matrix, newInstance;\n\t    if (Array.isArray(nRows)) {\n\t        newInstance = nColumns;\n\t        matrix = newInstance ? slice(nRows) : nRows;\n\t        nRows = matrix.length;\n\t        nColumns = matrix[0].length;\n\t        if (typeof nColumns === 'undefined') {\n\t            throw new TypeError('Data must be a 2D array');\n\t        }\n\t        if (nRows > 0 && nColumns > 0) {\n\t            for (; i < nRows; i++) {\n\t                if (matrix[i].length !== nColumns) {\n\t                    throw new RangeError('Inconsistent array dimensions');\n\t                } else if (newInstance) {\n\t                    matrix[i] = slice(matrix[i]);\n\t                }\n\t            }\n\t        } else {\n\t            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n\t        }\n\t    } else if (typeof nRows === 'number') { // Create empty matrix\n\t        if (nRows > 0 && nColumns > 0) {\n\t            matrix = new Array(nRows);\n\t            for (; i < nRows; i++) {\n\t                matrix[i] = new Array(nColumns);\n\t            }\n\t        } else {\n\t            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n\t        }\n\t    } else {\n\t        throw new TypeError('Invalid arguments');\n\t    }\n\t\n\t    Object.defineProperty(matrix, 'rows', {writable: true, value: nRows});\n\t    Object.defineProperty(matrix, 'columns', {writable: true, value: nColumns});\n\t\n\t    matrix.__proto__ = Matrix.prototype;\n\t\n\t    return matrix;\n\t}\n\t\n\t/**\n\t * Constructs a Matrix with the chosen dimensions from a 1D array.\n\t * @param {number} newRows - Number of rows\n\t * @param {number} newColumns - Number of columns\n\t * @param {Array} newData - A 1D array containing data for the matrix\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.from1DArray = function from1DArray(newRows, newColumns, newData) {\n\t    var length, data, i = 0;\n\t\n\t    length = newRows * newColumns;\n\t    if (length !== newData.length)\n\t        throw new RangeError('Data length does not match given dimensions');\n\t\n\t    data = new Array(newRows);\n\t    for (; i < newRows; i++) {\n\t        data[i] = newData.slice(i * newColumns, (i + 1) * newColumns);\n\t    }\n\t    return new Matrix(data);\n\t};\n\t\n\t/**\n\t * Creates a row vector, a matrix with only one row.\n\t * @param {Array} newData - A 1D array containing data for the vector\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.rowVector = function rowVector(newData) {\n\t    return new Matrix([newData]);\n\t};\n\t\n\t/**\n\t * Creates a column vector, a matrix with only one column.\n\t * @param {Array} newData - A 1D array containing data for the vector\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.columnVector = function columnVector(newData) {\n\t    var l = newData.length, vector = new Array(l);\n\t    for (var i = 0; i < l; i++)\n\t        vector[i] = [newData[i]];\n\t    return new Matrix(vector);\n\t};\n\t\n\t/**\n\t * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.empty = function empty(rows, columns) {\n\t    return new Matrix(rows, columns);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be set to zero.\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.zeros = function zeros(rows, columns) {\n\t    return Matrix.empty(rows, columns).fill(0);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be set to one.\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.ones = function ones(rows, columns) {\n\t    return Matrix.empty(rows, columns).fill(1);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be randomly set using Math.random().\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} The new matrix\n\t */\n\tMatrix.rand = function rand(rows, columns) {\n\t    var matrix = Matrix.empty(rows, columns);\n\t    for (var i = 0, ii = matrix.rows; i < ii; i++) {\n\t        for (var j = 0, jj = matrix.columns; j < jj; j++) {\n\t            matrix[i][j] = Math.random();\n\t        }\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and other will be 0.\n\t * @param {number} n - Number of rows and columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.eye = function eye(n) {\n\t    var matrix = Matrix.zeros(n, n), l = matrix.rows;\n\t    for (var i = 0; i < l; i++) {\n\t        matrix[i][i] = 1;\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates a diagonal matrix based on the given array.\n\t * @param {Array} data - Array containing the data for the diagonal\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.diag = function diag(data) {\n\t    var l = data.length, matrix = Matrix.zeros(l, l);\n\t    for (var i = 0; i < l; i++) {\n\t        matrix[i][i] = data[i];\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates an array of indices between two values\n\t * @param {number} from\n\t * @param {number} to\n\t * @returns {Array}\n\t */\n\tMatrix.indices = function indices(from, to) {\n\t    var vector = new Array(to - from);\n\t    for (var i = 0; i < vector.length; i++)\n\t        vector[i] = from++;\n\t    return vector;\n\t};\n\t\n\t// TODO DOC\n\tMatrix.stack = function stack(arg1) {\n\t    var i, j, k;\n\t    if (Matrix.isMatrix(arg1)) {\n\t        var rows = 0,\n\t            cols = 0;\n\t        for (i = 0; i < arguments.length; i++) {\n\t            rows += arguments[i].rows;\n\t            if (arguments[i].columns > cols)\n\t                cols = arguments[i].columns;\n\t        }\n\t\n\t        var r = Matrix.zeros(rows, cols);\n\t        var c = 0;\n\t        for (i = 0; i < arguments.length; i++) {\n\t            var current = arguments[i];\n\t            for (j = 0; j < current.rows; j++) {\n\t                for (k = 0; k < current.columns; k++)\n\t                    r[c][k] = current[j][k];\n\t                c++;\n\t            }\n\t        }\n\t        return r;\n\t    }\n\t    else if (Array.isArray(arg1)) {\n\t        var matrix = Matrix.empty(arguments.length, arg1.length);\n\t        for (i = 0; i < arguments.length; i++)\n\t            matrix.setRow(i, arguments[i]);\n\t        return matrix;\n\t    }\n\t};\n\t\n\t// TODO DOC\n\tMatrix.expand = function expand(base, count) {\n\t    var expansion = [];\n\t    for (var i = 0; i < count.length; i++)\n\t        for (var j = 0; j < count[i]; j++)\n\t            expansion.push(base[i]);\n\t    return new Matrix(expansion);\n\t};\n\t\n\t/**\n\t * Check that the provided value is a Matrix and tries to instantiate one if not\n\t * @param value - The value to check\n\t * @returns {Matrix}\n\t * @throws {TypeError}\n\t */\n\tMatrix.checkMatrix = function checkMatrix(value) {\n\t    if (!value) {\n\t        throw new TypeError('Argument has to be a matrix');\n\t    }\n\t    if (value.klass !== 'Matrix') {\n\t        value = new Matrix(value);\n\t    }\n\t    return value;\n\t};\n\t\n\t/**\n\t * Returns true if the argument is a Matrix, false otherwise\n\t * @param value - The value to check\n\t * @returns {boolean}\n\t */\n\tMatrix.isMatrix = function isMatrix(value) {\n\t    return value ? value.klass === 'Matrix' : false;\n\t};\n\t\n\t/**\n\t * @property {string} - The name of this class.\n\t */\n\tObject.defineProperty(Matrix.prototype, 'klass', {\n\t    get: function klass() {\n\t        return 'Matrix';\n\t    }\n\t});\n\t\n\t/**\n\t * @property {number} - The number of elements in the matrix.\n\t */\n\tObject.defineProperty(Matrix.prototype, 'size', {\n\t    get: function size() {\n\t        return this.rows * this.columns;\n\t    }\n\t});\n\t\n\t/**\n\t * @private\n\t * Internal check that a row index is not out of bounds\n\t * @param {number} index\n\t */\n\tMatrix.prototype.checkRowIndex = function checkRowIndex(index) {\n\t    if (index < 0 || index > this.rows - 1)\n\t        throw new RangeError('Row index out of range.');\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that a column index is not out of bounds\n\t * @param {number} index\n\t */\n\tMatrix.prototype.checkColumnIndex = function checkColumnIndex(index) {\n\t    if (index < 0 || index > this.columns - 1)\n\t        throw new RangeError('Column index out of range.');\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that two matrices have the same dimensions\n\t * @param {Matrix} otherMatrix\n\t */\n\tMatrix.prototype.checkDimensions = function checkDimensions(otherMatrix) {\n\t    if ((this.rows !== otherMatrix.rows) || (this.columns !== otherMatrix.columns))\n\t        throw new RangeError('Matrices dimensions must be equal.');\n\t};\n\t\n\t/**\n\t * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n\t * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.apply = function apply(callback) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            callback.call(this, i, j);\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Creates an exact and independent copy of the matrix\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.clone = function clone() {\n\t    return new Matrix(this.to2DArray());\n\t};\n\t\n\t/**\n\t * Returns a new 1D array filled row by row with the matrix values\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.to1DArray = function to1DArray() {\n\t    return Aconcat.apply([], this);\n\t};\n\t\n\t/**\n\t * Returns a 2D array containing a copy of the data\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.to2DArray = function to2DArray() {\n\t    var l = this.rows, copy = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        copy[i] = slice(this[i]);\n\t    }\n\t    return copy;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one row\n\t */\n\tMatrix.prototype.isRowVector = function isRowVector() {\n\t    return this.rows === 1;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one column\n\t */\n\tMatrix.prototype.isColumnVector = function isColumnVector() {\n\t    return this.columns === 1;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one row or one column\n\t */\n\tMatrix.prototype.isVector = function isVector() {\n\t    return (this.rows === 1) || (this.columns === 1);\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has the same number of rows and columns\n\t */\n\tMatrix.prototype.isSquare = function isSquare() {\n\t    return this.rows === this.columns;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n\t */\n\tMatrix.prototype.isSymmetric = function isSymmetric() {\n\t    if (this.isSquare()) {\n\t        var l = this.rows;\n\t        for (var i = 0; i < l; i++) {\n\t            for (var j = 0; j <= i; j++) {\n\t                if (this[i][j] !== this[j][i]) {\n\t                    return false;\n\t                }\n\t            }\n\t        }\n\t        return true;\n\t    }\n\t    return false;\n\t};\n\t\n\t/**\n\t * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n\t * @param {number} rowIndex - Index of the row\n\t * @param {number} columnIndex - Index of the column\n\t * @param {number} value - The new value for the element\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.set = function set(rowIndex, columnIndex, value) {\n\t    this[rowIndex][columnIndex] = value;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n\t * @param {number} rowIndex - Index of the row\n\t * @param {number} columnIndex - Index of the column\n\t * @returns {number}\n\t */\n\tMatrix.prototype.get = function get(rowIndex, columnIndex) {\n\t    return this[rowIndex][columnIndex];\n\t};\n\t\n\t/**\n\t * Fills the matrix with a given value. All elements will be set to this value.\n\t * @param {number} value - New value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.fill = function fill(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] = value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Negates the matrix. All elements will be multiplied by (-1)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.neg = function neg() {\n\t    return this.mulS(-1);\n\t};\n\t\n\t/**\n\t * Adds a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.add = function add(value) {\n\t    if (typeof value === 'number')\n\t        return this.addS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.addM(value);\n\t};\n\t\n\t/**\n\t * Adds a scalar to each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addS = function addS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds the value of each element of matrix to the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addM = function addM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sub = function sub(value) {\n\t    if (typeof value === 'number')\n\t        return this.subS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.subM(value);\n\t};\n\t\n\t/**\n\t * Subtracts a scalar from each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subS = function subS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the value of each element of matrix from the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subM = function subM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mul = function mul(value) {\n\t    if (typeof value === 'number')\n\t        return this.mulS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.mulM(value);\n\t};\n\t\n\t/**\n\t * Multiplies a scalar with each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulS = function mulS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the value of each element of matrix with the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulM = function mulM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides by a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.div = function div(value) {\n\t    if (typeof value === 'number')\n\t        return this.divS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.divM(value);\n\t};\n\t\n\t/**\n\t * Divides each element of the matrix by a scalar\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divS = function divS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides each element of this by the corresponding element of matrix\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divM = function divM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns a new array from the given row index\n\t * @param {number} index - Row index\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.getRow = function getRow(index) {\n\t    this.checkRowIndex(index);\n\t    return slice(this[index]);\n\t};\n\t\n\t/**\n\t * Returns a new row vector from the given row index\n\t * @param {number} index - Row index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.getRowVector = function getRowVector(index) {\n\t    return Matrix.rowVector(this.getRow(index));\n\t};\n\t\n\t/**\n\t * Sets a row at the given index\n\t * @param {number} index - Row index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.setRow = function setRow(index, array) {\n\t    this.checkRowIndex(index);\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    if (array.length !== this.columns)\n\t        throw new RangeError('Invalid row size');\n\t    this[index] = slice(array);\n\t    return this;\n\t};\n\t\n\t/**\n\t * Removes a row from the given index\n\t * @param {number} index - Row index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.removeRow = function removeRow(index) {\n\t    this.checkRowIndex(index);\n\t    if (this.rows === 1)\n\t        throw new RangeError('A matrix cannot have less than one row');\n\t    Asplice.call(this, index, 1);\n\t    this.rows -= 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds a row at the given index\n\t * @param {number} [index = this.rows] - Row index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addRow = function addRow(index, array) {\n\t    if (typeof array === 'undefined') {\n\t        array = index;\n\t        index = this.rows;\n\t    }\n\t    if (index < 0 || index > this.rows)\n\t        throw new RangeError('Row index out of range.');\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    if (array.length !== this.columns)\n\t        throw new RangeError('Invalid row size');\n\t    Asplice.call(this, index, 0, slice(array));\n\t    this.rows += 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Swaps two rows\n\t * @param {number} row1 - First row index\n\t * @param {number} row2 - Second row index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.swapRows = function swapRows(row1, row2) {\n\t    this.checkRowIndex(row1);\n\t    this.checkRowIndex(row2);\n\t    var temp = this[row1];\n\t    this[row1] = this[row2];\n\t    this[row2] = temp;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns a new array from the given column index\n\t * @param {number} index - Column index\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.getColumn = function getColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var l = this.rows, column = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        column[i] = this[i][index];\n\t    }\n\t    return column;\n\t};\n\t\n\t/**\n\t * Returns a new column vector from the given column index\n\t * @param {number} index - Column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.getColumnVector = function getColumnVector(index) {\n\t    return Matrix.columnVector(this.getColumn(index));\n\t};\n\t\n\t/**\n\t * Sets a column at the given index\n\t * @param {number} index - Column index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.setColumn = function setColumn(index, array) {\n\t    this.checkColumnIndex(index);\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    var l = this.rows;\n\t    if (array.length !== l)\n\t        throw new RangeError('Invalid column size');\n\t    for (var i = 0; i < l; i++) {\n\t        this[i][index] = array[i];\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Removes a column from the given index\n\t * @param {number} index - Column index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.removeColumn = function removeColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    if (this.columns === 1)\n\t        throw new RangeError('A matrix cannot have less than one column');\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        this[i].splice(index, 1);\n\t    }\n\t    this.columns -= 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds a column at the given index\n\t * @param {number} [index = this.columns] - Column index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addColumn = function addColumn(index, array) {\n\t    if (typeof array === 'undefined') {\n\t        array = index;\n\t        index = this.columns;\n\t    }\n\t    if (index < 0 || index > this.columns)\n\t        throw new RangeError('Column index out of range.');\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    var l = this.rows;\n\t    if (array.length !== l)\n\t        throw new RangeError('Invalid column size');\n\t    for (var i = 0; i < l; i++) {\n\t        this[i].splice(index, 0, array[i]);\n\t    }\n\t    this.columns += 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Swaps two columns\n\t * @param {number} column1 - First column index\n\t * @param {number} column2 - Second column index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.swapColumns = function swapColumns(column1, column2) {\n\t    this.checkRowIndex(column1);\n\t    this.checkRowIndex(column2);\n\t    var l = this.rows, temp, row;\n\t    for (var i = 0; i < l; i++) {\n\t        row = this[i];\n\t        temp = row[column1];\n\t        row[column1] = row[column2];\n\t        row[column2] = temp;\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that the provided vector is an array with the right length\n\t * @param {Array|Matrix} vector\n\t * @returns {Array}\n\t * @throws {RangeError}\n\t */\n\tMatrix.prototype.checkRowVector = function checkRowVector(vector) {\n\t    if (Matrix.isMatrix(vector))\n\t        vector = vector.to1DArray();\n\t    if (vector.length !== this.columns)\n\t        throw new RangeError('vector size must be the same as the number of columns');\n\t    return vector;\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that the provided vector is an array with the right length\n\t * @param {Array|Matrix} vector\n\t * @returns {Array}\n\t * @throws {RangeError}\n\t */\n\tMatrix.prototype.checkColumnVector = function checkColumnVector(vector) {\n\t    if (Matrix.isMatrix(vector))\n\t        vector = vector.to1DArray();\n\t    if (vector.length !== this.rows)\n\t        throw new RangeError('vector size must be the same as the number of rows');\n\t    return vector;\n\t};\n\t\n\t/**\n\t * Adds the values of a vector to each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addRowVector = function addRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the values of a vector from each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subRowVector = function subRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a vector with each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulRowVector = function mulRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides the values of each row by those of a vector\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divRowVector = function divRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds the values of a vector to each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addColumnVector = function addColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the values of a vector from each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subColumnVector = function subColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a vector with each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulColumnVector = function mulColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides the values of each column by those of a vector\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divColumnVector = function divColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a row with a scalar\n\t * @param {number} index - Row index\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulRow = function mulRow(index, value) {\n\t    this.checkRowIndex(index);\n\t    var i = 0, l = this.columns;\n\t    for (; i < l; i++) {\n\t        this[index][i] *= value;\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a column with a scalar\n\t * @param {number} index - Column index\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulColumn = function mulColumn(index, value) {\n\t    this.checkColumnIndex(index);\n\t    var i = 0, l = this.rows;\n\t    for (; i < l; i++) {\n\t        this[i][index] *= value;\n\t    }\n\t};\n\t\n\t/**\n\t * A matrix index\n\t * @typedef {Object} MatrixIndex\n\t * @property {number} row\n\t * @property {number} column\n\t */\n\t\n\t/**\n\t * Returns the maximum value of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.max = function max() {\n\t    var v = -Infinity;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] > v) {\n\t                v = this[i][j];\n\t            }\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxIndex = function maxIndex() {\n\t    var v = -Infinity;\n\t    var idx = {};\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] > v) {\n\t                v = this[i][j];\n\t                idx.row = i;\n\t                idx.column = j;\n\t            }\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.min = function min() {\n\t    var v = Infinity;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] < v) {\n\t                v = this[i][j];\n\t            }\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the minimum value\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minIndex = function minIndex() {\n\t    var v = Infinity;\n\t    var idx = {};\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] < v) {\n\t                v = this[i][j];\n\t                idx.row = i;\n\t                idx.column = j;\n\t            }\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.maxRow = function maxRow(index) {\n\t    this.checkRowIndex(index);\n\t    var v = -Infinity;\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] > v) {\n\t            v = this[index][i];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxRowIndex = function maxRowIndex(index) {\n\t    this.checkRowIndex(index);\n\t    var v = -Infinity;\n\t    var idx = {\n\t            row: index\n\t        };\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] > v) {\n\t            v = this[index][i];\n\t            idx.column = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of one row\n\t * @param {number} index - Row index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.minRow = function minRow(index) {\n\t    this.checkRowIndex(index);\n\t    var v = Infinity;\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] < v) {\n\t            v = this[index][i];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minRowIndex = function minRowIndex(index) {\n\t    this.checkRowIndex(index);\n\t    var v = Infinity;\n\t    var idx = {\n\t        row: index,\n\t        column: 0\n\t    };\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] < v) {\n\t            v = this[index][i];\n\t            idx.column = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the maximum value of one column\n\t * @param {number} index - Column index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.maxColumn = function maxColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = -Infinity;\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] > v) {\n\t            v = this[i][index];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one column\n\t * @param {number} index - Column index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxColumnIndex = function maxColumnIndex(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = -Infinity;\n\t    var idx = {\n\t        row: 0,\n\t        column: index\n\t    };\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] > v) {\n\t            v = this[i][index];\n\t            idx.row = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of one column\n\t * @param {number} index - Column index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.minColumn = function minColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = Infinity;\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] < v) {\n\t            v = this[i][index];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the minimum value of one column\n\t * @param {number} index - Column index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minColumnIndex = function minColumnIndex(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = Infinity;\n\t    var idx = {\n\t        row: 0,\n\t        column: index\n\t    };\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] < v) {\n\t            v = this[i][index];\n\t            idx.row = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns an array containing the diagonal values of the matrix\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.diag = function diag() {\n\t    if (!this.isSquare())\n\t        throw new TypeError('Only square matrices have a diagonal.');\n\t    var diag = new Array(this.rows);\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        diag[i] = this[i][i];\n\t    }\n\t    return diag;\n\t};\n\t\n\t/**\n\t * Returns the sum of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.sum = function sum() {\n\t    var v = 0;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            v += this[i][j];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the mean of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.mean = function mean() {\n\t    return this.sum() / this.size;\n\t};\n\t\n\t/**\n\t * Returns the product of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.prod = function prod() {\n\t    var prod = 1;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            prod *= this[i][j];\n\t        }\n\t    }\n\t    return prod;\n\t};\n\t\n\t/**\n\t * Computes the cumulative sum of the matrix elements (in place, row by row)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.cumulativeSum = function cumulativeSum() {\n\t    var sum = 0;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            sum += this[i][j];\n\t            this[i][j] = sum;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Computes the dot (scalar) product between the matrix and another\n\t * @param {Matrix} other vector\n\t * @returns {number}\n\t */\n\tMatrix.prototype.dot = function dot(other) {\n\t    if (this.size !== other.size)\n\t        throw new RangeError('vectors do not have the same size');\n\t    var vector1 = this.to1DArray();\n\t    var vector2 = other.to1DArray();\n\t    var dot = 0, l = vector1.length;\n\t    for (var i = 0; i < l; i++) {\n\t        dot += vector1[i] * vector2[i];\n\t    }\n\t    return dot;\n\t};\n\t\n\t/**\n\t * Returns the matrix product between this and other\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.mmul = function mmul(other) {\n\t    if (!Matrix.isMatrix(other))\n\t        throw new TypeError('parameter \"other\" must be a matrix');\n\t    if (this.columns !== other.rows)\n\t        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n\t\n\t    var m = this.rows, n = this.columns, p = other.columns;\n\t    var result = new Matrix(m, p);\n\t\n\t    var Bcolj = new Array(n);\n\t    var i, j, k;\n\t    for (j = 0; j < p; j++) {\n\t        for (k = 0; k < n; k++)\n\t            Bcolj[k] = other[k][j];\n\t\n\t        for (i = 0; i < m; i++) {\n\t            var Arowi = this[i];\n\t\n\t            var s = 0;\n\t            for (k = 0; k < n; k++)\n\t                s += Arowi[k] * Bcolj[k];\n\t\n\t            result[i][j] = s;\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Sorts the rows (in place)\n\t * @param {function} compareFunction - usual Array.prototype.sort comparison function\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sortRows = function sortRows(compareFunction) {\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        this[i].sort(compareFunction);\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Sorts the columns (in place)\n\t * @param {function} compareFunction - usual Array.prototype.sort comparison function\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sortColumns = function sortColumns(compareFunction) {\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Transposes the matrix and returns a new one containing the result\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.transpose = function transpose() {\n\t    var result = new Matrix(this.columns, this.rows);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[j][i] = this[i][j];\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix\n\t * @param {number} startRow - First row index\n\t * @param {number} endRow - Last row index\n\t * @param {number} startColumn - First column index\n\t * @param {number} endColumn - Last column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrix = function subMatrix(startRow, endRow, startColumn, endColumn) {\n\t    if ((startRow > endRow) || (startColumn > endColumn) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n\t        throw new RangeError('Argument out of range');\n\t    var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n\t    for (var i = startRow; i <= endRow; i++) {\n\t        for (var j = startColumn; j <= endColumn; j++) {\n\t            newMatrix[i - startRow][j - startColumn] = this[i][j];\n\t        }\n\t    }\n\t    return newMatrix;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix based on an array of row indices\n\t * @param {Array} indices - Array containing the row indices\n\t * @param {number} [startColumn = 0] - First column index\n\t * @param {number} [endColumn = this.columns-1] - Last column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrixRow = function subMatrixRow(indices, startColumn, endColumn) {\n\t    if (typeof startColumn === 'undefined') {\n\t        startColumn = 0;\n\t        endColumn = this.columns - 1;\n\t    } else if (typeof endColumn === 'undefined') {\n\t        endColumn = this.columns - 1;\n\t    }\n\t    if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n\t        throw new RangeError('Argument out of range.');\n\t    var l = indices.length, rows = this.rows,\n\t        X = new Matrix(l, endColumn - startColumn + 1);\n\t    for (var i = 0; i < l; i++) {\n\t        for (var j = startColumn; j <= endColumn; j++) {\n\t            if ((indices[i] < 0) || (indices[i] >= rows))\n\t                throw new RangeError('Argument out of range.');\n\t            X[i][j - startColumn] = this[indices[i]][j];\n\t        }\n\t    }\n\t    return X;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix based on an array of column indices\n\t * @param {Array} indices - Array containing the column indices\n\t * @param {number} [startRow = 0] - First row index\n\t * @param {number} [endRow = this.rows-1] - Last row index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrixColumn = function subMatrixColumn(indices, startRow, endRow) {\n\t    if (typeof startRow === 'undefined') {\n\t        startRow = 0;\n\t        endRow = this.rows - 1;\n\t    } else if (typeof endRow === 'undefined') {\n\t        endRow = this.rows - 1;\n\t    }\n\t    if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows))\n\t        throw new RangeError('Argument out of range.');\n\t    var l = indices.length, columns = this.columns,\n\t        X = new Matrix(endRow - startRow + 1, l);\n\t    for (var i = 0; i < l; i++) {\n\t        for (var j = startRow; j <= endRow; j++) {\n\t            if ((indices[i] < 0) || (indices[i] >= columns))\n\t                throw new RangeError('Argument out of range.');\n\t            X[j - startRow][i] = this[j][indices[i]];\n\t        }\n\t    }\n\t    return X;\n\t};\n\t\n\t/**\n\t * Returns the trace of the matrix (sum of the diagonal elements)\n\t * @returns {number}\n\t */\n\tMatrix.prototype.trace = function trace() {\n\t    if (!this.isSquare())\n\t        throw new TypeError('The matrix is not square');\n\t    var trace = 0, i = 0, l = this.rows;\n\t    for (; i < l; i++) {\n\t        trace += this[i][i];\n\t    }\n\t    return trace;\n\t};\n\t\n\t/**\n\t * Sets each element of the matrix to its absolute value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.abs = function abs() {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] = Math.abs(this[i][j]);\n\t        }\n\t    }\n\t};\n\t\n\tmodule.exports = Matrix;\n\n\n/***/ },\n/* 148 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(147);\n\t\n\tvar SingularValueDecomposition = __webpack_require__(149);\n\tvar EigenvalueDecomposition = __webpack_require__(151);\n\tvar LuDecomposition = __webpack_require__(152);\n\tvar QrDecomposition = __webpack_require__(153);\n\tvar CholeskyDecomposition = __webpack_require__(154);\n\t\n\tfunction inverse(matrix) {\n\t    return solve(matrix, Matrix.eye(matrix.rows));\n\t}\n\t\n\tMatrix.prototype.inverse = function () {\n\t    return inverse(this);\n\t};\n\t\n\tfunction solve(leftHandSide, rightHandSide) {\n\t    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n\t}\n\t\n\tMatrix.prototype.solve = function (other) {\n\t    return solve(this, other);\n\t};\n\t\n\tmodule.exports = {\n\t    SingularValueDecomposition: SingularValueDecomposition,\n\t    SVD: SingularValueDecomposition,\n\t    EigenvalueDecomposition: EigenvalueDecomposition,\n\t    EVD: EigenvalueDecomposition,\n\t    LuDecomposition: LuDecomposition,\n\t    LU: LuDecomposition,\n\t    QrDecomposition: QrDecomposition,\n\t    QR: QrDecomposition,\n\t    CholeskyDecomposition: CholeskyDecomposition,\n\t    CHO: CholeskyDecomposition,\n\t    inverse: inverse,\n\t    solve: solve\n\t};\n\n\n/***/ },\n/* 149 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(147);\n\tvar hypotenuse = __webpack_require__(150).hypotenuse;\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\n\tfunction SingularValueDecomposition(value, options) {\n\t    if (!(this instanceof SingularValueDecomposition)) {\n\t        return new SingularValueDecomposition(value, options);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t\n\t    options = options || {};\n\t\n\t    var a = value.clone(),\n\t        m = value.rows,\n\t        n = value.columns,\n\t        nu = Math.min(m, n);\n\t\n\t    var wantu = true, wantv = true;\n\t    if (options.computeLeftSingularVectors === false)\n\t        wantu = false;\n\t    if (options.computeRightSingularVectors === false)\n\t        wantv = false;\n\t    var autoTranspose = options.autoTranspose === true;\n\t\n\t    var swapped = false;\n\t    if (m < n) {\n\t        if (!autoTranspose) {\n\t            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n\t        } else {\n\t            a = a.transpose();\n\t            m = a.rows;\n\t            n = a.columns;\n\t            swapped = true;\n\t            var aux = wantu;\n\t            wantu = wantv;\n\t            wantv = aux;\n\t        }\n\t    }\n\t\n\t    var s = new Array(Math.min(m + 1, n)),\n\t        U = Matrix.zeros(m, nu),\n\t        V = Matrix.zeros(n, n),\n\t        e = new Array(n),\n\t        work = new Array(m);\n\t\n\t    var nct = Math.min(m - 1, n);\n\t    var nrt = Math.max(0, Math.min(n - 2, m));\n\t\n\t    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n\t        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\t\n\t    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n\t        if (k < nct) {\n\t            s[k] = 0;\n\t            for (i = k; i < m; i++) {\n\t                s[k] = hypotenuse(s[k], a[i][k]);\n\t            }\n\t            if (s[k] !== 0) {\n\t                if (a[k][k] < 0) {\n\t                    s[k] = -s[k];\n\t                }\n\t                for (i = k; i < m; i++) {\n\t                    a[i][k] /= s[k];\n\t                }\n\t                a[k][k] += 1;\n\t            }\n\t            s[k] = -s[k];\n\t        }\n\t\n\t        for (j = k + 1; j < n; j++) {\n\t            if ((k < nct) && (s[k] !== 0)) {\n\t                t = 0;\n\t                for (i = k; i < m; i++) {\n\t                    t += a[i][k] * a[i][j];\n\t                }\n\t                t = -t / a[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    a[i][j] += t * a[i][k];\n\t                }\n\t            }\n\t            e[j] = a[k][j];\n\t        }\n\t\n\t        if (wantu && (k < nct)) {\n\t            for (i = k; i < m; i++) {\n\t                U[i][k] = a[i][k];\n\t            }\n\t        }\n\t\n\t        if (k < nrt) {\n\t            e[k] = 0;\n\t            for (i = k + 1; i < n; i++) {\n\t                e[k] = hypotenuse(e[k], e[i]);\n\t            }\n\t            if (e[k] !== 0) {\n\t                if (e[k + 1] < 0)\n\t                    e[k] = -e[k];\n\t                for (i = k + 1; i < n; i++) {\n\t                    e[i] /= e[k];\n\t                }\n\t                e[k + 1] += 1;\n\t            }\n\t            e[k] = -e[k];\n\t            if ((k + 1 < m) && (e[k] !== 0)) {\n\t                for (i = k + 1; i < m; i++) {\n\t                    work[i] = 0;\n\t                }\n\t                for (j = k + 1; j < n; j++) {\n\t                    for (i = k + 1; i < m; i++) {\n\t                        work[i] += e[j] * a[i][j];\n\t                    }\n\t                }\n\t                for (j = k + 1; j < n; j++) {\n\t                    t = -e[j] / e[k + 1];\n\t                    for (i = k + 1; i < m; i++) {\n\t                        a[i][j] += t * work[i];\n\t                    }\n\t                }\n\t            }\n\t            if (wantv) {\n\t                for (i = k + 1; i < n; i++) {\n\t                    V[i][k] = e[i];\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    p = Math.min(n, m + 1);\n\t    if (nct < n) {\n\t        s[nct] = a[nct][nct];\n\t    }\n\t    if (m < p) {\n\t        s[p - 1] = 0;\n\t    }\n\t    if (nrt + 1 < p) {\n\t        e[nrt] = a[nrt][p - 1];\n\t    }\n\t    e[p - 1] = 0;\n\t\n\t    if (wantu) {\n\t        for (j = nct; j < nu; j++) {\n\t            for (i = 0; i < m; i++) {\n\t                U[i][j] = 0;\n\t            }\n\t            U[j][j] = 1;\n\t        }\n\t        for (k = nct - 1; k >= 0; k--) {\n\t            if (s[k] !== 0) {\n\t                for (j = k + 1; j < nu; j++) {\n\t                    t = 0;\n\t                    for (i = k; i < m; i++) {\n\t                        t += U[i][k] * U[i][j];\n\t                    }\n\t                    t = -t / U[k][k];\n\t                    for (i = k; i < m; i++) {\n\t                        U[i][j] += t * U[i][k];\n\t                    }\n\t                }\n\t                for (i = k; i < m; i++) {\n\t                    U[i][k] = -U[i][k];\n\t                }\n\t                U[k][k] = 1 + U[k][k];\n\t                for (i = 0; i < k - 1; i++) {\n\t                    U[i][k] = 0;\n\t                }\n\t            } else {\n\t                for (i = 0; i < m; i++) {\n\t                    U[i][k] = 0;\n\t                }\n\t                U[k][k] = 1;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (wantv) {\n\t        for (k = n - 1; k >= 0; k--) {\n\t            if ((k < nrt) && (e[k] !== 0)) {\n\t                for (j = k + 1; j < n; j++) {\n\t                    t = 0;\n\t                    for (i = k + 1; i < n; i++) {\n\t                        t += V[i][k] * V[i][j];\n\t                    }\n\t                    t = -t / V[k + 1][k];\n\t                    for (i = k + 1; i < n; i++) {\n\t                        V[i][j] += t * V[i][k];\n\t                    }\n\t                }\n\t            }\n\t            for (i = 0; i < n; i++) {\n\t                V[i][k] = 0;\n\t            }\n\t            V[k][k] = 1;\n\t        }\n\t    }\n\t\n\t    var pp = p - 1,\n\t        iter = 0,\n\t        eps = Math.pow(2, -52);\n\t    while (p > 0) {\n\t        for (k = p - 2; k >= -1; k--) {\n\t            if (k === -1) {\n\t                break;\n\t            }\n\t            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n\t                e[k] = 0;\n\t                break;\n\t            }\n\t        }\n\t        if (k === p - 2) {\n\t            kase = 4;\n\t        } else {\n\t            for (ks = p - 1; ks >= k; ks--) {\n\t                if (ks === k) {\n\t                    break;\n\t                }\n\t                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n\t                if (Math.abs(s[ks]) <= eps * t) {\n\t                    s[ks] = 0;\n\t                    break;\n\t                }\n\t            }\n\t            if (ks === k) {\n\t                kase = 3;\n\t            } else if (ks === p - 1) {\n\t                kase = 1;\n\t            } else {\n\t                kase = 2;\n\t                k = ks;\n\t            }\n\t        }\n\t\n\t        k++;\n\t\n\t        switch (kase) {\n\t            case 1: {\n\t                f = e[p - 2];\n\t                e[p - 2] = 0;\n\t                for (j = p - 2; j >= k; j--) {\n\t                    t = hypotenuse(s[j], f);\n\t                    cs = s[j] / t;\n\t                    sn = f / t;\n\t                    s[j] = t;\n\t                    if (j !== k) {\n\t                        f = -sn * e[j - 1];\n\t                        e[j - 1] = cs * e[j - 1];\n\t                    }\n\t                    if (wantv) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = cs * V[i][j] + sn * V[i][p - 1];\n\t                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n\t                            V[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t            case 2 : {\n\t                f = e[k - 1];\n\t                e[k - 1] = 0;\n\t                for (j = k; j < p; j++) {\n\t                    t = hypotenuse(s[j], f);\n\t                    cs = s[j] / t;\n\t                    sn = f / t;\n\t                    s[j] = t;\n\t                    f = -sn * e[j];\n\t                    e[j] = cs * e[j];\n\t                    if (wantu) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = cs * U[i][j] + sn * U[i][k - 1];\n\t                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n\t                            U[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t            case 3 : {\n\t                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n\t                sp = s[p - 1] / scale;\n\t                spm1 = s[p - 2] / scale;\n\t                epm1 = e[p - 2] / scale;\n\t                sk = s[k] / scale;\n\t                ek = e[k] / scale;\n\t                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n\t                c = (sp * epm1) * (sp * epm1);\n\t                shift = 0;\n\t                if ((b !== 0) || (c !== 0)) {\n\t                    shift = Math.sqrt(b * b + c);\n\t                    if (b < 0) {\n\t                        shift = -shift;\n\t                    }\n\t                    shift = c / (b + shift);\n\t                }\n\t                f = (sk + sp) * (sk - sp) + shift;\n\t                g = sk * ek;\n\t                for (j = k; j < p - 1; j++) {\n\t                    t = hypotenuse(f, g);\n\t                    cs = f / t;\n\t                    sn = g / t;\n\t                    if (j !== k) {\n\t                        e[j - 1] = t;\n\t                    }\n\t                    f = cs * s[j] + sn * e[j];\n\t                    e[j] = cs * e[j] - sn * s[j];\n\t                    g = sn * s[j + 1];\n\t                    s[j + 1] = cs * s[j + 1];\n\t                    if (wantv) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = cs * V[i][j] + sn * V[i][j + 1];\n\t                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n\t                            V[i][j] = t;\n\t                        }\n\t                    }\n\t                    t = hypotenuse(f, g);\n\t                    cs = f / t;\n\t                    sn = g / t;\n\t                    s[j] = t;\n\t                    f = cs * e[j] + sn * s[j + 1];\n\t                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n\t                    g = sn * e[j + 1];\n\t                    e[j + 1] = cs * e[j + 1];\n\t                    if (wantu && (j < m - 1)) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = cs * U[i][j] + sn * U[i][j + 1];\n\t                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n\t                            U[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                e[p - 2] = f;\n\t                iter = iter + 1;\n\t                break;\n\t            }\n\t            case 4: {\n\t                if (s[k] <= 0) {\n\t                    s[k] = (s[k] < 0 ? -s[k] : 0);\n\t                    if (wantv) {\n\t                        for (i = 0; i <= pp; i++) {\n\t                            V[i][k] = -V[i][k];\n\t                        }\n\t                    }\n\t                }\n\t                while (k < pp) {\n\t                    if (s[k] >= s[k + 1]) {\n\t                        break;\n\t                    }\n\t                    t = s[k];\n\t                    s[k] = s[k + 1];\n\t                    s[k + 1] = t;\n\t                    if (wantv && (k < n - 1)) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = V[i][k + 1];\n\t                            V[i][k + 1] = V[i][k];\n\t                            V[i][k] = t;\n\t                        }\n\t                    }\n\t                    if (wantu && (k < m - 1)) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = U[i][k + 1];\n\t                            U[i][k + 1] = U[i][k];\n\t                            U[i][k] = t;\n\t                        }\n\t                    }\n\t                    k++;\n\t                }\n\t                iter = 0;\n\t                p--;\n\t                break;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (swapped) {\n\t        var tmp = V;\n\t        V = U;\n\t        U = tmp;\n\t    }\n\t\n\t    this.m = m;\n\t    this.n = n;\n\t    this.s = s;\n\t    this.U = U;\n\t    this.V = V;\n\t}\n\t\n\tSingularValueDecomposition.prototype = {\n\t    get condition() {\n\t        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n\t    },\n\t    get norm2() {\n\t        return this.s[0];\n\t    },\n\t    get rank() {\n\t        var eps = Math.pow(2, -52),\n\t            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n\t            r = 0,\n\t            s = this.s;\n\t        for (var i = 0, ii = s.length; i < ii; i++) {\n\t            if (s[i] > tol) {\n\t                r++;\n\t            }\n\t        }\n\t        return r;\n\t    },\n\t    get diagonal() {\n\t        return this.s;\n\t    },\n\t    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n\t    get threshold() {\n\t        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n\t    },\n\t    get leftSingularVectors() {\n\t        return this.U;\n\t    },\n\t    get rightSingularVectors() {\n\t        return this.V;\n\t    },\n\t    get diagonalMatrix() {\n\t        return Matrix.diag(this.s);\n\t    },\n\t    solve: function (value) {\n\t\n\t        var Y = value,\n\t            e = this.threshold,\n\t            scols = this.s.length,\n\t            Ls = Matrix.zeros(scols, scols),\n\t            i;\n\t\n\t        for (i = 0; i < scols; i++) {\n\t            if (Math.abs(this.s[i]) <= e) {\n\t                Ls[i][i] = 0;\n\t            } else {\n\t                Ls[i][i] = 1 / this.s[i];\n\t            }\n\t        }\n\t\n\t\n\t        var VL = this.V.mmul(Ls),\n\t            vrows = this.V.rows,\n\t            urows = this.U.rows,\n\t            VLU = Matrix.zeros(vrows, urows),\n\t            j, k, sum;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < urows; j++) {\n\t                sum = 0;\n\t                for (k = 0; k < scols; k++) {\n\t                    sum += VL[i][k] * this.U[j][k];\n\t                }\n\t                VLU[i][j] = sum;\n\t            }\n\t        }\n\t\n\t        return VLU.mmul(Y);\n\t    },\n\t    solveForDiagonal: function (value) {\n\t        return this.solve(Matrix.diag(value));\n\t    },\n\t    inverse: function () {\n\t        var e = this.threshold,\n\t            vrows = this.V.rows,\n\t            vcols = this.V.columns,\n\t            X = new Matrix(vrows, this.s.length),\n\t            i, j;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < vcols; j++) {\n\t                if (Math.abs(this.s[j]) > e) {\n\t                    X[i][j] = this.V[i][j] / this.s[j];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t\n\t        var urows = this.U.rows,\n\t            ucols = this.U.columns,\n\t            Y = new Matrix(vrows, urows),\n\t            k, sum;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < urows; j++) {\n\t                sum = 0;\n\t                for (k = 0; k < ucols; k++) {\n\t                    sum += X[i][k] * this.U[j][k];\n\t                }\n\t                Y[i][j] = sum;\n\t            }\n\t        }\n\t\n\t        return Y;\n\t    }\n\t};\n\t\n\tmodule.exports = SingularValueDecomposition;\n\n\n/***/ },\n/* 150 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.hypotenuse = function hypotenuse(a, b) {\n\t    var r;\n\t    if (Math.abs(a) > Math.abs(b)) {\n\t        r = b / a;\n\t        return Math.abs(a) * Math.sqrt(1 + r * r);\n\t    }\n\t    if (b !== 0) {\n\t        r = a / b;\n\t        return Math.abs(b) * Math.sqrt(1 + r * r);\n\t    }\n\t    return 0;\n\t};\n\n\n/***/ },\n/* 151 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(147);\n\tvar hypotenuse = __webpack_require__(150).hypotenuse;\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\n\tfunction EigenvalueDecomposition(matrix) {\n\t    if (!(this instanceof EigenvalueDecomposition)) {\n\t        return new EigenvalueDecomposition(matrix);\n\t    }\n\t    matrix = Matrix.checkMatrix(matrix);\n\t    if (!matrix.isSquare()) {\n\t        throw new Error('Matrix is not a square matrix');\n\t    }\n\t\n\t    var n = matrix.columns,\n\t        V = Matrix.zeros(n, n),\n\t        d = new Array(n),\n\t        e = new Array(n),\n\t        value = matrix,\n\t        i, j;\n\t\n\t    if (matrix.isSymmetric()) {\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                V[i][j] = value[i][j];\n\t            }\n\t        }\n\t        tred2(n, e, d, V);\n\t        tql2(n, e, d, V);\n\t    }\n\t    else {\n\t        var H = Matrix.zeros(n, n),\n\t            ort = new Array(n);\n\t        for (j = 0; j < n; j++) {\n\t            for (i = 0; i < n; i++) {\n\t                H[i][j] = value[i][j];\n\t            }\n\t        }\n\t        orthes(n, H, ort, V);\n\t        hqr2(n, e, d, V, H);\n\t    }\n\t\n\t    this.n = n;\n\t    this.e = e;\n\t    this.d = d;\n\t    this.V = V;\n\t}\n\t\n\tEigenvalueDecomposition.prototype = {\n\t    get realEigenvalues() {\n\t        return this.d;\n\t    },\n\t    get imaginaryEigenvalues() {\n\t        return this.e;\n\t    },\n\t    get eigenvectorMatrix() {\n\t        return this.V;\n\t    },\n\t    get diagonalMatrix() {\n\t        var n = this.n,\n\t            e = this.e,\n\t            d = this.d,\n\t            X = new Matrix(n, n),\n\t            i, j;\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                X[i][j] = 0;\n\t            }\n\t            X[i][i] = d[i];\n\t            if (e[i] > 0) {\n\t                X[i][i + 1] = e[i];\n\t            }\n\t            else if (e[i] < 0) {\n\t                X[i][i - 1] = e[i];\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tfunction tred2(n, e, d, V) {\n\t\n\t    var f, g, h, i, j, k,\n\t        hh, scale;\n\t\n\t    for (j = 0; j < n; j++) {\n\t        d[j] = V[n - 1][j];\n\t    }\n\t\n\t    for (i = n - 1; i > 0; i--) {\n\t        scale = 0;\n\t        h = 0;\n\t        for (k = 0; k < i; k++) {\n\t            scale = scale + Math.abs(d[k]);\n\t        }\n\t\n\t        if (scale === 0) {\n\t            e[i] = d[i - 1];\n\t            for (j = 0; j < i; j++) {\n\t                d[j] = V[i - 1][j];\n\t                V[i][j] = 0;\n\t                V[j][i] = 0;\n\t            }\n\t        } else {\n\t            for (k = 0; k < i; k++) {\n\t                d[k] /= scale;\n\t                h += d[k] * d[k];\n\t            }\n\t\n\t            f = d[i - 1];\n\t            g = Math.sqrt(h);\n\t            if (f > 0) {\n\t                g = -g;\n\t            }\n\t\n\t            e[i] = scale * g;\n\t            h = h - f * g;\n\t            d[i - 1] = f - g;\n\t            for (j = 0; j < i; j++) {\n\t                e[j] = 0;\n\t            }\n\t\n\t            for (j = 0; j < i; j++) {\n\t                f = d[j];\n\t                V[j][i] = f;\n\t                g = e[j] + V[j][j] * f;\n\t                for (k = j + 1; k <= i - 1; k++) {\n\t                    g += V[k][j] * d[k];\n\t                    e[k] += V[k][j] * f;\n\t                }\n\t                e[j] = g;\n\t            }\n\t\n\t            f = 0;\n\t            for (j = 0; j < i; j++) {\n\t                e[j] /= h;\n\t                f += e[j] * d[j];\n\t            }\n\t\n\t            hh = f / (h + h);\n\t            for (j = 0; j < i; j++) {\n\t                e[j] -= hh * d[j];\n\t            }\n\t\n\t            for (j = 0; j < i; j++) {\n\t                f = d[j];\n\t                g = e[j];\n\t                for (k = j; k <= i - 1; k++) {\n\t                    V[k][j] -= (f * e[k] + g * d[k]);\n\t                }\n\t                d[j] = V[i - 1][j];\n\t                V[i][j] = 0;\n\t            }\n\t        }\n\t        d[i] = h;\n\t    }\n\t\n\t    for (i = 0; i < n - 1; i++) {\n\t        V[n - 1][i] = V[i][i];\n\t        V[i][i] = 1;\n\t        h = d[i + 1];\n\t        if (h !== 0) {\n\t            for (k = 0; k <= i; k++) {\n\t                d[k] = V[k][i + 1] / h;\n\t            }\n\t\n\t            for (j = 0; j <= i; j++) {\n\t                g = 0;\n\t                for (k = 0; k <= i; k++) {\n\t                    g += V[k][i + 1] * V[k][j];\n\t                }\n\t                for (k = 0; k <= i; k++) {\n\t                    V[k][j] -= g * d[k];\n\t                }\n\t            }\n\t        }\n\t\n\t        for (k = 0; k <= i; k++) {\n\t            V[k][i + 1] = 0;\n\t        }\n\t    }\n\t\n\t    for (j = 0; j < n; j++) {\n\t        d[j] = V[n - 1][j];\n\t        V[n - 1][j] = 0;\n\t    }\n\t\n\t    V[n - 1][n - 1] = 1;\n\t    e[0] = 0;\n\t}\n\t\n\tfunction tql2(n, e, d, V) {\n\t\n\t    var g, h, i, j, k, l, m, p, r,\n\t        dl1, c, c2, c3, el1, s, s2,\n\t        iter;\n\t\n\t    for (i = 1; i < n; i++) {\n\t        e[i - 1] = e[i];\n\t    }\n\t\n\t    e[n - 1] = 0;\n\t\n\t    var f = 0,\n\t        tst1 = 0,\n\t        eps = Math.pow(2, -52);\n\t\n\t    for (l = 0; l < n; l++) {\n\t        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n\t        m = l;\n\t        while (m < n) {\n\t            if (Math.abs(e[m]) <= eps * tst1) {\n\t                break;\n\t            }\n\t            m++;\n\t        }\n\t\n\t        if (m > l) {\n\t            iter = 0;\n\t            do {\n\t                iter = iter + 1;\n\t\n\t                g = d[l];\n\t                p = (d[l + 1] - g) / (2 * e[l]);\n\t                r = hypotenuse(p, 1);\n\t                if (p < 0) {\n\t                    r = -r;\n\t                }\n\t\n\t                d[l] = e[l] / (p + r);\n\t                d[l + 1] = e[l] * (p + r);\n\t                dl1 = d[l + 1];\n\t                h = g - d[l];\n\t                for (i = l + 2; i < n; i++) {\n\t                    d[i] -= h;\n\t                }\n\t\n\t                f = f + h;\n\t\n\t                p = d[m];\n\t                c = 1;\n\t                c2 = c;\n\t                c3 = c;\n\t                el1 = e[l + 1];\n\t                s = 0;\n\t                s2 = 0;\n\t                for (i = m - 1; i >= l; i--) {\n\t                    c3 = c2;\n\t                    c2 = c;\n\t                    s2 = s;\n\t                    g = c * e[i];\n\t                    h = c * p;\n\t                    r = hypotenuse(p, e[i]);\n\t                    e[i + 1] = s * r;\n\t                    s = e[i] / r;\n\t                    c = p / r;\n\t                    p = c * d[i] - s * g;\n\t                    d[i + 1] = h + s * (c * g + s * d[i]);\n\t\n\t                    for (k = 0; k < n; k++) {\n\t                        h = V[k][i + 1];\n\t                        V[k][i + 1] = s * V[k][i] + c * h;\n\t                        V[k][i] = c * V[k][i] - s * h;\n\t                    }\n\t                }\n\t\n\t                p = -s * s2 * c3 * el1 * e[l] / dl1;\n\t                e[l] = s * p;\n\t                d[l] = c * p;\n\t\n\t            }\n\t            while (Math.abs(e[l]) > eps * tst1);\n\t        }\n\t        d[l] = d[l] + f;\n\t        e[l] = 0;\n\t    }\n\t\n\t    for (i = 0; i < n - 1; i++) {\n\t        k = i;\n\t        p = d[i];\n\t        for (j = i + 1; j < n; j++) {\n\t            if (d[j] < p) {\n\t                k = j;\n\t                p = d[j];\n\t            }\n\t        }\n\t\n\t        if (k !== i) {\n\t            d[k] = d[i];\n\t            d[i] = p;\n\t            for (j = 0; j < n; j++) {\n\t                p = V[j][i];\n\t                V[j][i] = V[j][k];\n\t                V[j][k] = p;\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction orthes(n, H, ort, V) {\n\t\n\t    var low = 0,\n\t        high = n - 1,\n\t        f, g, h, i, j, m,\n\t        scale;\n\t\n\t    for (m = low + 1; m <= high - 1; m++) {\n\t        scale = 0;\n\t        for (i = m; i <= high; i++) {\n\t            scale = scale + Math.abs(H[i][m - 1]);\n\t        }\n\t\n\t        if (scale !== 0) {\n\t            h = 0;\n\t            for (i = high; i >= m; i--) {\n\t                ort[i] = H[i][m - 1] / scale;\n\t                h += ort[i] * ort[i];\n\t            }\n\t\n\t            g = Math.sqrt(h);\n\t            if (ort[m] > 0) {\n\t                g = -g;\n\t            }\n\t\n\t            h = h - ort[m] * g;\n\t            ort[m] = ort[m] - g;\n\t\n\t            for (j = m; j < n; j++) {\n\t                f = 0;\n\t                for (i = high; i >= m; i--) {\n\t                    f += ort[i] * H[i][j];\n\t                }\n\t\n\t                f = f / h;\n\t                for (i = m; i <= high; i++) {\n\t                    H[i][j] -= f * ort[i];\n\t                }\n\t            }\n\t\n\t            for (i = 0; i <= high; i++) {\n\t                f = 0;\n\t                for (j = high; j >= m; j--) {\n\t                    f += ort[j] * H[i][j];\n\t                }\n\t\n\t                f = f / h;\n\t                for (j = m; j <= high; j++) {\n\t                    H[i][j] -= f * ort[j];\n\t                }\n\t            }\n\t\n\t            ort[m] = scale * ort[m];\n\t            H[m][m - 1] = scale * g;\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < n; i++) {\n\t        for (j = 0; j < n; j++) {\n\t            V[i][j] = (i === j ? 1 : 0);\n\t        }\n\t    }\n\t\n\t    for (m = high - 1; m >= low + 1; m--) {\n\t        if (H[m][m - 1] !== 0) {\n\t            for (i = m + 1; i <= high; i++) {\n\t                ort[i] = H[i][m - 1];\n\t            }\n\t\n\t            for (j = m; j <= high; j++) {\n\t                g = 0;\n\t                for (i = m; i <= high; i++) {\n\t                    g += ort[i] * V[i][j];\n\t                }\n\t\n\t                g = (g / ort[m]) / H[m][m - 1];\n\t                for (i = m; i <= high; i++) {\n\t                    V[i][j] += g * ort[i];\n\t                }\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction hqr2(nn, e, d, V, H) {\n\t    var n = nn - 1,\n\t        low = 0,\n\t        high = nn - 1,\n\t        eps = Math.pow(2, -52),\n\t        exshift = 0,\n\t        norm = 0,\n\t        p = 0,\n\t        q = 0,\n\t        r = 0,\n\t        s = 0,\n\t        z = 0,\n\t        iter = 0,\n\t        i, j, k, l, m, t, w, x, y,\n\t        ra, sa, vr, vi,\n\t        notlast, cdivres;\n\t\n\t    for (i = 0; i < nn; i++) {\n\t        if (i < low || i > high) {\n\t            d[i] = H[i][i];\n\t            e[i] = 0;\n\t        }\n\t\n\t        for (j = Math.max(i - 1, 0); j < nn; j++) {\n\t            norm = norm + Math.abs(H[i][j]);\n\t        }\n\t    }\n\t\n\t    while (n >= low) {\n\t        l = n;\n\t        while (l > low) {\n\t            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n\t            if (s === 0) {\n\t                s = norm;\n\t            }\n\t            if (Math.abs(H[l][l - 1]) < eps * s) {\n\t                break;\n\t            }\n\t            l--;\n\t        }\n\t\n\t        if (l === n) {\n\t            H[n][n] = H[n][n] + exshift;\n\t            d[n] = H[n][n];\n\t            e[n] = 0;\n\t            n--;\n\t            iter = 0;\n\t        } else if (l === n - 1) {\n\t            w = H[n][n - 1] * H[n - 1][n];\n\t            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n\t            q = p * p + w;\n\t            z = Math.sqrt(Math.abs(q));\n\t            H[n][n] = H[n][n] + exshift;\n\t            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n\t            x = H[n][n];\n\t\n\t            if (q >= 0) {\n\t                z = (p >= 0) ? (p + z) : (p - z);\n\t                d[n - 1] = x + z;\n\t                d[n] = d[n - 1];\n\t                if (z !== 0) {\n\t                    d[n] = x - w / z;\n\t                }\n\t                e[n - 1] = 0;\n\t                e[n] = 0;\n\t                x = H[n][n - 1];\n\t                s = Math.abs(x) + Math.abs(z);\n\t                p = x / s;\n\t                q = z / s;\n\t                r = Math.sqrt(p * p + q * q);\n\t                p = p / r;\n\t                q = q / r;\n\t\n\t                for (j = n - 1; j < nn; j++) {\n\t                    z = H[n - 1][j];\n\t                    H[n - 1][j] = q * z + p * H[n][j];\n\t                    H[n][j] = q * H[n][j] - p * z;\n\t                }\n\t\n\t                for (i = 0; i <= n; i++) {\n\t                    z = H[i][n - 1];\n\t                    H[i][n - 1] = q * z + p * H[i][n];\n\t                    H[i][n] = q * H[i][n] - p * z;\n\t                }\n\t\n\t                for (i = low; i <= high; i++) {\n\t                    z = V[i][n - 1];\n\t                    V[i][n - 1] = q * z + p * V[i][n];\n\t                    V[i][n] = q * V[i][n] - p * z;\n\t                }\n\t            } else {\n\t                d[n - 1] = x + p;\n\t                d[n] = x + p;\n\t                e[n - 1] = z;\n\t                e[n] = -z;\n\t            }\n\t\n\t            n = n - 2;\n\t            iter = 0;\n\t        } else {\n\t            x = H[n][n];\n\t            y = 0;\n\t            w = 0;\n\t            if (l < n) {\n\t                y = H[n - 1][n - 1];\n\t                w = H[n][n - 1] * H[n - 1][n];\n\t            }\n\t\n\t            if (iter === 10) {\n\t                exshift += x;\n\t                for (i = low; i <= n; i++) {\n\t                    H[i][i] -= x;\n\t                }\n\t                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n\t                x = y = 0.75 * s;\n\t                w = -0.4375 * s * s;\n\t            }\n\t\n\t            if (iter === 30) {\n\t                s = (y - x) / 2;\n\t                s = s * s + w;\n\t                if (s > 0) {\n\t                    s = Math.sqrt(s);\n\t                    if (y < x) {\n\t                        s = -s;\n\t                    }\n\t                    s = x - w / ((y - x) / 2 + s);\n\t                    for (i = low; i <= n; i++) {\n\t                        H[i][i] -= s;\n\t                    }\n\t                    exshift += s;\n\t                    x = y = w = 0.964;\n\t                }\n\t            }\n\t\n\t            iter = iter + 1;\n\t\n\t            m = n - 2;\n\t            while (m >= l) {\n\t                z = H[m][m];\n\t                r = x - z;\n\t                s = y - z;\n\t                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n\t                q = H[m + 1][m + 1] - z - r - s;\n\t                r = H[m + 2][m + 1];\n\t                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n\t                p = p / s;\n\t                q = q / s;\n\t                r = r / s;\n\t                if (m === l) {\n\t                    break;\n\t                }\n\t                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n\t                    break;\n\t                }\n\t                m--;\n\t            }\n\t\n\t            for (i = m + 2; i <= n; i++) {\n\t                H[i][i - 2] = 0;\n\t                if (i > m + 2) {\n\t                    H[i][i - 3] = 0;\n\t                }\n\t            }\n\t\n\t            for (k = m; k <= n - 1; k++) {\n\t                notlast = (k !== n - 1);\n\t                if (k !== m) {\n\t                    p = H[k][k - 1];\n\t                    q = H[k + 1][k - 1];\n\t                    r = (notlast ? H[k + 2][k - 1] : 0);\n\t                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n\t                    if (x !== 0) {\n\t                        p = p / x;\n\t                        q = q / x;\n\t                        r = r / x;\n\t                    }\n\t                }\n\t\n\t                if (x === 0) {\n\t                    break;\n\t                }\n\t\n\t                s = Math.sqrt(p * p + q * q + r * r);\n\t                if (p < 0) {\n\t                    s = -s;\n\t                }\n\t\n\t                if (s !== 0) {\n\t                    if (k !== m) {\n\t                        H[k][k - 1] = -s * x;\n\t                    } else if (l !== m) {\n\t                        H[k][k - 1] = -H[k][k - 1];\n\t                    }\n\t\n\t                    p = p + s;\n\t                    x = p / s;\n\t                    y = q / s;\n\t                    z = r / s;\n\t                    q = q / p;\n\t                    r = r / p;\n\t\n\t                    for (j = k; j < nn; j++) {\n\t                        p = H[k][j] + q * H[k + 1][j];\n\t                        if (notlast) {\n\t                            p = p + r * H[k + 2][j];\n\t                            H[k + 2][j] = H[k + 2][j] - p * z;\n\t                        }\n\t\n\t                        H[k][j] = H[k][j] - p * x;\n\t                        H[k + 1][j] = H[k + 1][j] - p * y;\n\t                    }\n\t\n\t                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n\t                        p = x * H[i][k] + y * H[i][k + 1];\n\t                        if (notlast) {\n\t                            p = p + z * H[i][k + 2];\n\t                            H[i][k + 2] = H[i][k + 2] - p * r;\n\t                        }\n\t\n\t                        H[i][k] = H[i][k] - p;\n\t                        H[i][k + 1] = H[i][k + 1] - p * q;\n\t                    }\n\t\n\t                    for (i = low; i <= high; i++) {\n\t                        p = x * V[i][k] + y * V[i][k + 1];\n\t                        if (notlast) {\n\t                            p = p + z * V[i][k + 2];\n\t                            V[i][k + 2] = V[i][k + 2] - p * r;\n\t                        }\n\t\n\t                        V[i][k] = V[i][k] - p;\n\t                        V[i][k + 1] = V[i][k + 1] - p * q;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    if (norm === 0) {\n\t        return;\n\t    }\n\t\n\t    for (n = nn - 1; n >= 0; n--) {\n\t        p = d[n];\n\t        q = e[n];\n\t\n\t        if (q === 0) {\n\t            l = n;\n\t            H[n][n] = 1;\n\t            for (i = n - 1; i >= 0; i--) {\n\t                w = H[i][i] - p;\n\t                r = 0;\n\t                for (j = l; j <= n; j++) {\n\t                    r = r + H[i][j] * H[j][n];\n\t                }\n\t\n\t                if (e[i] < 0) {\n\t                    z = w;\n\t                    s = r;\n\t                } else {\n\t                    l = i;\n\t                    if (e[i] === 0) {\n\t                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n\t                    } else {\n\t                        x = H[i][i + 1];\n\t                        y = H[i + 1][i];\n\t                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n\t                        t = (x * s - z * r) / q;\n\t                        H[i][n] = t;\n\t                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n\t                    }\n\t\n\t                    t = Math.abs(H[i][n]);\n\t                    if ((eps * t) * t > 1) {\n\t                        for (j = i; j <= n; j++) {\n\t                            H[j][n] = H[j][n] / t;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        } else if (q < 0) {\n\t            l = n - 1;\n\t\n\t            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n\t                H[n - 1][n - 1] = q / H[n][n - 1];\n\t                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n\t            } else {\n\t                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n\t                H[n - 1][n - 1] = cdivres[0];\n\t                H[n - 1][n] = cdivres[1];\n\t            }\n\t\n\t            H[n][n - 1] = 0;\n\t            H[n][n] = 1;\n\t            for (i = n - 2; i >= 0; i--) {\n\t                ra = 0;\n\t                sa = 0;\n\t                for (j = l; j <= n; j++) {\n\t                    ra = ra + H[i][j] * H[j][n - 1];\n\t                    sa = sa + H[i][j] * H[j][n];\n\t                }\n\t\n\t                w = H[i][i] - p;\n\t\n\t                if (e[i] < 0) {\n\t                    z = w;\n\t                    r = ra;\n\t                    s = sa;\n\t                } else {\n\t                    l = i;\n\t                    if (e[i] === 0) {\n\t                        cdivres = cdiv(-ra, -sa, w, q);\n\t                        H[i][n - 1] = cdivres[0];\n\t                        H[i][n] = cdivres[1];\n\t                    } else {\n\t                        x = H[i][i + 1];\n\t                        y = H[i + 1][i];\n\t                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n\t                        vi = (d[i] - p) * 2 * q;\n\t                        if (vr === 0 && vi === 0) {\n\t                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n\t                        }\n\t                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n\t                        H[i][n - 1] = cdivres[0];\n\t                        H[i][n] = cdivres[1];\n\t                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n\t                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n\t                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n\t                        } else {\n\t                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n\t                            H[i + 1][n - 1] = cdivres[0];\n\t                            H[i + 1][n] = cdivres[1];\n\t                        }\n\t                    }\n\t\n\t                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n\t                    if ((eps * t) * t > 1) {\n\t                        for (j = i; j <= n; j++) {\n\t                            H[j][n - 1] = H[j][n - 1] / t;\n\t                            H[j][n] = H[j][n] / t;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < nn; i++) {\n\t        if (i < low || i > high) {\n\t            for (j = i; j < nn; j++) {\n\t                V[i][j] = H[i][j];\n\t            }\n\t        }\n\t    }\n\t\n\t    for (j = nn - 1; j >= low; j--) {\n\t        for (i = low; i <= high; i++) {\n\t            z = 0;\n\t            for (k = low; k <= Math.min(j, high); k++) {\n\t                z = z + V[i][k] * H[k][j];\n\t            }\n\t            V[i][j] = z;\n\t        }\n\t    }\n\t}\n\t\n\tfunction cdiv(xr, xi, yr, yi) {\n\t    var r, d;\n\t    if (Math.abs(yr) > Math.abs(yi)) {\n\t        r = yi / yr;\n\t        d = yr + r * yi;\n\t        return [(xr + r * xi) / d, (xi - r * xr) / d];\n\t    }\n\t    else {\n\t        r = yr / yi;\n\t        d = yi + r * yr;\n\t        return [(r * xr + xi) / d, (r * xi - xr) / d];\n\t    }\n\t}\n\t\n\tmodule.exports = EigenvalueDecomposition;\n\n\n/***/ },\n/* 152 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(147);\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\n\tfunction LuDecomposition(matrix) {\n\t    if (!(this instanceof LuDecomposition)) {\n\t        return new LuDecomposition(matrix);\n\t    }\n\t    matrix = Matrix.checkMatrix(matrix);\n\t\n\t    var lu = matrix.clone(),\n\t        rows = lu.rows,\n\t        columns = lu.columns,\n\t        pivotVector = new Array(rows),\n\t        pivotSign = 1,\n\t        i, j, k, p, s, t, v,\n\t        LUrowi, LUcolj, kmax;\n\t\n\t    for (i = 0; i < rows; i++) {\n\t        pivotVector[i] = i;\n\t    }\n\t\n\t    LUcolj = new Array(rows);\n\t\n\t    for (j = 0; j < columns; j++) {\n\t\n\t        for (i = 0; i < rows; i++) {\n\t            LUcolj[i] = lu[i][j];\n\t        }\n\t\n\t        for (i = 0; i < rows; i++) {\n\t            LUrowi = lu[i];\n\t            kmax = Math.min(i, j);\n\t            s = 0;\n\t            for (k = 0; k < kmax; k++) {\n\t                s += LUrowi[k] * LUcolj[k];\n\t            }\n\t            LUrowi[j] = LUcolj[i] -= s;\n\t        }\n\t\n\t        p = j;\n\t        for (i = j + 1; i < rows; i++) {\n\t            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n\t                p = i;\n\t            }\n\t        }\n\t\n\t        if (p !== j) {\n\t            for (k = 0; k < columns; k++) {\n\t                t = lu[p][k];\n\t                lu[p][k] = lu[j][k];\n\t                lu[j][k] = t;\n\t            }\n\t\n\t            v = pivotVector[p];\n\t            pivotVector[p] = pivotVector[j];\n\t            pivotVector[j] = v;\n\t\n\t            pivotSign = -pivotSign;\n\t        }\n\t\n\t        if (j < rows && lu[j][j] !== 0) {\n\t            for (i = j + 1; i < rows; i++) {\n\t                lu[i][j] /= lu[j][j];\n\t            }\n\t        }\n\t    }\n\t\n\t    this.LU = lu;\n\t    this.pivotVector = pivotVector;\n\t    this.pivotSign = pivotSign;\n\t}\n\t\n\tLuDecomposition.prototype = {\n\t    isSingular: function () {\n\t        var data = this.LU,\n\t            col = data.columns;\n\t        for (var j = 0; j < col; j++) {\n\t            if (data[j][j] === 0) {\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    },\n\t    get determinant() {\n\t        var data = this.LU;\n\t        if (!data.isSquare())\n\t            throw new Error('Matrix must be square');\n\t        var determinant = this.pivotSign, col = data.columns;\n\t        for (var j = 0; j < col; j++)\n\t            determinant *= data[j][j];\n\t        return determinant;\n\t    },\n\t    get lowerTriangularFactor() {\n\t        var data = this.LU,\n\t            rows = data.rows,\n\t            columns = data.columns,\n\t            X = new Matrix(rows, columns);\n\t        for (var i = 0; i < rows; i++) {\n\t            for (var j = 0; j < columns; j++) {\n\t                if (i > j) {\n\t                    X[i][j] = data[i][j];\n\t                } else if (i === j) {\n\t                    X[i][j] = 1;\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get upperTriangularFactor() {\n\t        var data = this.LU,\n\t            rows = data.rows,\n\t            columns = data.columns,\n\t            X = new Matrix(rows, columns);\n\t        for (var i = 0; i < rows; i++) {\n\t            for (var j = 0; j < columns; j++) {\n\t                if (i <= j) {\n\t                    X[i][j] = data[i][j];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get pivotPermutationVector() {\n\t        return this.pivotVector.slice();\n\t    },\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var lu = this.LU,\n\t            rows = lu.rows;\n\t\n\t        if (rows !== value.rows)\n\t            throw new Error('Invalid matrix dimensions');\n\t        if (this.isSingular())\n\t            throw new Error('LU matrix is singular');\n\t\n\t        var count = value.columns,\n\t            X = value.subMatrixRow(this.pivotVector, 0, count - 1),\n\t            columns = lu.columns,\n\t            i, j, k;\n\t\n\t        for (k = 0; k < columns; k++) {\n\t            for (i = k + 1; i < columns; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * lu[i][k];\n\t                }\n\t            }\n\t        }\n\t        for (k = columns - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                X[k][j] /= lu[k][k];\n\t            }\n\t            for (i = 0; i < k; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * lu[i][k];\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tmodule.exports = LuDecomposition;\n\n\n/***/ },\n/* 153 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(147);\n\tvar hypotenuse = __webpack_require__(150).hypotenuse;\n\t\n\t//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\n\tfunction QrDecomposition(value) {\n\t    if (!(this instanceof QrDecomposition)) {\n\t        return new QrDecomposition(value);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t\n\t    var qr = value.clone(),\n\t        m = value.rows,\n\t        n = value.columns,\n\t        rdiag = new Array(n),\n\t        i, j, k, s;\n\t\n\t    for (k = 0; k < n; k++) {\n\t        var nrm = 0;\n\t        for (i = k; i < m; i++) {\n\t            nrm = hypotenuse(nrm, qr[i][k]);\n\t        }\n\t        if (nrm !== 0) {\n\t            if (qr[k][k] < 0) {\n\t                nrm = -nrm;\n\t            }\n\t            for (i = k; i < m; i++) {\n\t                qr[i][k] /= nrm;\n\t            }\n\t            qr[k][k] += 1;\n\t            for (j = k + 1; j < n; j++) {\n\t                s = 0;\n\t                for (i = k; i < m; i++) {\n\t                    s += qr[i][k] * qr[i][j];\n\t                }\n\t                s = -s / qr[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    qr[i][j] += s * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t        rdiag[k] = -nrm;\n\t    }\n\t\n\t    this.QR = qr;\n\t    this.Rdiag = rdiag;\n\t}\n\t\n\tQrDecomposition.prototype = {\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var qr = this.QR,\n\t            m = qr.rows;\n\t\n\t        if (value.rows !== m)\n\t            throw new Error('Matrix row dimensions must agree');\n\t        if (!this.isFullRank())\n\t            throw new Error('Matrix is rank deficient');\n\t\n\t        var count = value.columns,\n\t            X = value.clone(),\n\t            n = qr.columns,\n\t            i, j, k, s;\n\t\n\t        for (k = 0; k < n; k++) {\n\t            for (j = 0; j < count; j++) {\n\t                s = 0;\n\t                for (i = k; i < m; i++) {\n\t                    s += qr[i][k] * X[i][j];\n\t                }\n\t                s = -s / qr[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    X[i][j] += s * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t        for (k = n - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                X[k][j] /= this.Rdiag[k];\n\t            }\n\t            for (i = 0; i < k; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t\n\t        return X.subMatrix(0, n - 1, 0, count - 1);\n\t    },\n\t    isFullRank: function () {\n\t        var columns = this.QR.columns;\n\t        for (var i = 0; i < columns; i++) {\n\t            if (this.Rdiag[i] === 0) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    },\n\t    get upperTriangularFactor() {\n\t        var qr = this.QR,\n\t            n = qr.columns,\n\t            X = new Matrix(n, n),\n\t            i, j;\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                if (i < j) {\n\t                    X[i][j] = qr[i][j];\n\t                } else if (i === j) {\n\t                    X[i][j] = this.Rdiag[i];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get orthogonalFactor() {\n\t        var qr = this.QR,\n\t            rows = qr.rows,\n\t            columns = qr.columns,\n\t            X = new Matrix(rows, columns),\n\t            i, j, k, s;\n\t\n\t        for (k = columns - 1; k >= 0; k--) {\n\t            for (i = 0; i < rows; i++) {\n\t                X[i][k] = 0;\n\t            }\n\t            X[k][k] = 1;\n\t            for (j = k; j < columns; j++) {\n\t                if (qr[k][k] !== 0) {\n\t                    s = 0;\n\t                    for (i = k; i < rows; i++) {\n\t                        s += qr[i][k] * X[i][j];\n\t                    }\n\t\n\t                    s = -s / qr[k][k];\n\t\n\t                    for (i = k; i < rows; i++) {\n\t                        X[i][j] += s * qr[i][k];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tmodule.exports = QrDecomposition;\n\n\n/***/ },\n/* 154 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(147);\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\n\tfunction CholeskyDecomposition(value) {\n\t    if (!(this instanceof CholeskyDecomposition)) {\n\t        return new CholeskyDecomposition(value);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t    if (!value.isSymmetric())\n\t        throw new Error('Matrix is not symmetric');\n\t\n\t    var a = value,\n\t        dimension = a.rows,\n\t        l = new Matrix(dimension, dimension),\n\t        positiveDefinite = true,\n\t        i, j, k;\n\t\n\t    for (j = 0; j < dimension; j++) {\n\t        var Lrowj = l[j];\n\t        var d = 0;\n\t        for (k = 0; k < j; k++) {\n\t            var Lrowk = l[k];\n\t            var s = 0;\n\t            for (i = 0; i < k; i++) {\n\t                s += Lrowk[i] * Lrowj[i];\n\t            }\n\t            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n\t            d = d + s * s;\n\t        }\n\t\n\t        d = a[j][j] - d;\n\t\n\t        positiveDefinite &= (d > 0);\n\t        l[j][j] = Math.sqrt(Math.max(d, 0));\n\t        for (k = j + 1; k < dimension; k++) {\n\t            l[j][k] = 0;\n\t        }\n\t    }\n\t\n\t    if (!positiveDefinite) {\n\t        throw new Error('Matrix is not positive definite');\n\t    }\n\t\n\t    this.L = l;\n\t}\n\t\n\tCholeskyDecomposition.prototype = {\n\t    get leftTriangularFactor() {\n\t        return this.L;\n\t    },\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var l = this.L,\n\t            dimension = l.rows;\n\t\n\t        if (value.rows !== dimension) {\n\t            throw new Error('Matrix dimensions do not match');\n\t        }\n\t\n\t        var count = value.columns,\n\t            B = value.clone(),\n\t            i, j, k;\n\t\n\t        for (k = 0; k < dimension; k++) {\n\t            for (j = 0; j < count; j++) {\n\t                for (i = 0; i < k; i++) {\n\t                    B[k][j] -= B[i][j] * l[k][i];\n\t                }\n\t                B[k][j] /= l[k][k];\n\t            }\n\t        }\n\t\n\t        for (k = dimension - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                for (i = k + 1; i < dimension; i++) {\n\t                    B[k][j] -= B[i][j] * l[i][k];\n\t                }\n\t                B[k][j] /= l[k][k];\n\t            }\n\t        }\n\t\n\t        return B;\n\t    }\n\t};\n\t\n\tmodule.exports = CholeskyDecomposition;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** ml.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap fe15bac5956506682770\n **/","'use strict';\n\n// Root packages\nexports.ArrayUtils = exports.AU = require('ml-array-utils');\nexports.BitArray = require('ml-bit-array');\nexports.Matrix = require('ml-matrix');\n\n\nvar Math = exports.Math = {};\n\nvar distance = require('ml-distance')\nMath.Distance = distance.distance;\nMath.Similarity = distance.similarity;\nMath.SG = require('ml-savitzky-golay');\n\n\nvar Stat = exports.Stat = {};\n\nStat.array = require('ml-stat/array');\nStat.matrix = require('ml-stat/matrix');\nStat.PCA = require('ml-pca');\n\n\n// Random number generation\nvar RNG = exports.RNG = {};\nRNG.XSadd = require('ml-xsadd');\n\n\n// Supervised learning\nvar SL = exports.SL = {};\n\nSL.SVM = require('ml-svm');\nSL.KNN = require('ml-knn');\nSL.NaiveBayes = require('ml-naivebayes');\nSL.PLS = require('ml-pls');\n\n\n// Clustering\nvar Clust = exports.Clust = {};\n\nClust.kmeans = require('ml-kmeans');\nClust.hclust = require('ml-hclust');\n\n\n// Neural networks\nvar NN = exports.NN = exports.nn = {};\n\nNN.SOM = require('ml-som');\nNN.FNN = require('ml-fnn');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/index.js\n ** module id = 0\n ** module chunks = 0\n **/","module.exports = exports = require('./ArrayUtils');\nexports.getEquallySpacedData = require('./getEquallySpaced').getEquallySpacedData;\nexports.SNV = require('./snv').SNV;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-array-utils/src/index.js\n ** module id = 1\n ** module chunks = 0\n **/","'use strict';\n\n/**\n * Function that returns an array of points given 1D array as follows:\n *\n * [x1, y1, .. , x2, y2, ..]\n *\n * And receive the number of dimensions of each point.\n * @param array\n * @param dimensions\n * @returns {Array} - Array of points.\n */\nfunction coordArrayToPoints(array, dimensions) {\n    if(array.length % dimensions !== 0) {\n        throw new RangeError('Dimensions number must be accordance with the size of the array.');\n    }\n\n    var length = array.length / dimensions;\n    var pointsArr = new Array(length);\n\n    var k = 0;\n    for(var i = 0; i < array.length; i += dimensions) {\n        var point = new Array(dimensions);\n        for(var j = 0; j < dimensions; ++j) {\n            point[j] = array[i + j];\n        }\n\n        pointsArr[k] = point;\n        k++;\n    }\n\n    return pointsArr;\n}\n\n\n/**\n * Function that given an array as follows:\n * [x1, y1, .. , x2, y2, ..]\n *\n * Returns an array as follows:\n * [[x1, x2, ..], [y1, y2, ..], [ .. ]]\n *\n * And receives the number of dimensions of each coordinate.\n * @param array\n * @param dimensions\n * @returns {Array} - Matrix of coordinates\n */\nfunction coordArrayToCoordMatrix(array, dimensions) {\n    if(array.length % dimensions !== 0) {\n        throw new RangeError('Dimensions number must be accordance with the size of the array.');\n    }\n\n    var coordinatesArray = new Array(dimensions);\n    var points = array.length / dimensions;\n    for (var i = 0; i < coordinatesArray.length; i++) {\n        coordinatesArray[i] = new Array(points);\n    }\n\n    for(i = 0; i < array.length; i += dimensions) {\n        for(var j = 0; j < dimensions; ++j) {\n            var currentPoint = Math.floor(i / dimensions);\n            coordinatesArray[j][currentPoint] = array[i + j];\n        }\n    }\n\n    return coordinatesArray;\n}\n\n/**\n * Function that receives a coordinate matrix as follows:\n * [[x1, x2, ..], [y1, y2, ..], [ .. ]]\n *\n * Returns an array of coordinates as follows:\n * [x1, y1, .. , x2, y2, ..]\n *\n * @param coordMatrix\n * @returns {Array}\n */\nfunction coordMatrixToCoordArray(coordMatrix) {\n    var coodinatesArray = new Array(coordMatrix.length * coordMatrix[0].length);\n    var k = 0;\n    for(var i = 0; i < coordMatrix[0].length; ++i) {\n        for(var j = 0; j < coordMatrix.length; ++j) {\n            coodinatesArray[k] = coordMatrix[j][i];\n            ++k;\n        }\n    }\n\n    return coodinatesArray;\n}\n\n/**\n * Tranpose a matrix, this method is for coordMatrixToPoints and\n * pointsToCoordMatrix, that because only transposing the matrix\n * you can change your representation.\n *\n * @param matrix\n * @returns {Array}\n */\nfunction transpose(matrix) {\n    var resultMatrix = new Array(matrix[0].length);\n    for(var i = 0; i < resultMatrix.length; ++i) {\n        resultMatrix[i] = new Array(matrix.length);\n    }\n\n    for (i = 0; i < matrix.length; ++i) {\n        for(var j = 0; j < matrix[0].length; ++j) {\n            resultMatrix[j][i] = matrix[i][j];\n        }\n    }\n\n    return resultMatrix;\n}\n\n/**\n * Function that transform an array of points into a coordinates array\n * as follows:\n * [x1, y1, .. , x2, y2, ..]\n *\n * @param points\n * @returns {Array}\n */\nfunction pointsToCoordArray(points) {\n    var coodinatesArray = new Array(points.length * points[0].length);\n    var k = 0;\n    for(var i = 0; i < points.length; ++i) {\n        for(var j = 0; j < points[0].length; ++j) {\n            coodinatesArray[k] = points[i][j];\n            ++k;\n        }\n    }\n\n    return coodinatesArray;\n}\n\n/**\n * Apply the dot product between the smaller vector and a subsets of the\n * largest one.\n *\n * @param firstVector\n * @param secondVector\n * @returns {Array} each dot product of size of the difference between the\n *                  larger and the smallest one.\n */\nfunction applyDotProduct(firstVector, secondVector) {\n    var largestVector, smallestVector;\n    if(firstVector.length <= secondVector.length) {\n        smallestVector = firstVector;\n        largestVector = secondVector;\n    } else {\n        smallestVector = secondVector;\n        largestVector = firstVector;\n    }\n\n    var difference = largestVector.length - smallestVector.length + 1;\n    var dotProductApplied = new Array(difference);\n\n    for (var i = 0; i < difference; ++i) {\n        var sum = 0;\n        for (var j = 0; j < smallestVector.length; ++j) {\n            sum += smallestVector[j] * largestVector[i + j];\n        }\n        dotProductApplied[i] = sum;\n    }\n\n    return dotProductApplied;\n}\n\nmodule.exports = {\n    coordArrayToPoints: coordArrayToPoints,\n    coordArrayToCoordMatrix: coordArrayToCoordMatrix,\n    coordMatrixToCoordArray: coordMatrixToCoordArray,\n    coordMatrixToPoints: transpose,\n    pointsToCoordArray: pointsToCoordArray,\n    pointsToCoordMatrix: transpose,\n    applyDotProduct: applyDotProduct\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-array-utils/src/ArrayUtils.js\n ** module id = 2\n ** module chunks = 0\n **/","'use strict';\n\n/**\n *\n * Function that returns a Number array of equally spaced numberOfPoints\n * containing a representation of intensities of the spectra arguments x\n * and y.\n *\n * The options parameter contains an object in the following form:\n * from: starting point\n * to: last point\n * numberOfPoints: number of points between from and to\n * variant: \"slot\" or \"smooth\" - smooth is the default option\n *\n * The slot variant consist that each point in the new array is calculated\n * averaging the existing points between the slot that belongs to the current\n * value. The smooth variant is the same but takes the integral of the range\n * of the slot and divide by the step size between two points in the new array.\n *\n * @param x\n * @param y\n * @param options\n * @returns {Array} new array with the equally spaced data.\n *\n */\nfunction getEquallySpacedData(x, y, options) {\n\n    var xLength = x.length;\n    if(xLength !== y.length)\n        throw new RangeError(\"the x and y vector doesn't have the same size.\");\n\n    if (options === undefined) options = {};\n\n    var from = options.from === undefined ? x[0] : options.from\n    if (isNaN(from) || !isFinite(from)) {\n        throw new RangeError(\"'From' value must be a number\");\n    }\n    var to = options.to === undefined ? x[x.length - 1] : options.to;\n    if (isNaN(to) || !isFinite(to)) {\n        throw new RangeError(\"'To' value must be a number\");\n    }\n\n    var reverse = from > to;\n    if(reverse) {\n        var temp = from;\n        from = to;\n        to = temp;\n    }\n\n    var numberOfPoints = options.numberOfPoints === undefined ? 100 : options.numberOfPoints;\n    if (isNaN(numberOfPoints) || !isFinite(numberOfPoints)) {\n        throw new RangeError(\"'Number of points' value must be a number\");\n    }\n    if(numberOfPoints < 1)\n        throw new RangeError(\"the number of point must be higher than 1\");\n\n    var algorithm = options.variant === \"slot\" ? \"slot\" : \"smooth\"; // default value: smooth\n\n    var output = algorithm === \"slot\" ? getEquallySpacedSlot(x, y, from, to, numberOfPoints) : getEquallySpacedSmooth(x, y, from, to, numberOfPoints);\n\n    return reverse ? output.reverse() : output;\n}\n\n/**\n * function that retrieves the getEquallySpacedData with the variant \"smooth\"\n *\n * @param x\n * @param y\n * @param from - Initial point\n * @param to - Final point\n * @param numberOfPoints\n * @returns {Array} - Array of y's equally spaced with the variant \"smooth\"\n */\nfunction getEquallySpacedSmooth(x, y, from, to, numberOfPoints) {\n    var xLength = x.length;\n\n    var step = (to - from) / (numberOfPoints - 1);\n    var halfStep = step / 2;\n\n    var start = from - halfStep;\n    var output = new Array(numberOfPoints);\n\n    var initialOriginalStep = x[1] - x[0];\n    var lastOriginalStep = x[x.length - 1] - x[x.length - 2];\n\n    // Init main variables\n    var min = start;\n    var max = start + step;\n\n    var previousX = -Number.MAX_VALUE;\n    var previousY = 0;\n    var nextX = x[0] - initialOriginalStep;\n    var nextY = 0;\n\n    var currentValue = 0;\n    var slope = 0;\n    var intercept = 0;\n    var sumAtMin = 0;\n    var sumAtMax = 0;\n\n    var i = 0; // index of input\n    var j = 0; // index of output\n\n    function getSlope(x0, y0, x1, y1) {\n        return (y1 - y0) / (x1 - x0);\n    }\n\n    main: while(true) {\n        while (nextX - max >= 0) {\n            // no overlap with original point, just consume current value\n            var add = integral(0, max - previousX, slope, previousY);\n            sumAtMax = currentValue + add;\n\n            output[j] = (sumAtMax - sumAtMin) / step;\n            j++;\n\n            if (j === numberOfPoints)\n                break main;\n\n            min = max;\n            max += step;\n            sumAtMin = sumAtMax;\n        }\n\n        if(previousX <= min && min <= nextX) {\n            add = integral(0, min - previousX, slope, previousY);\n            sumAtMin = currentValue + add;\n        }\n\n        currentValue += integral(previousX, nextX, slope, intercept);\n\n        previousX = nextX;\n        previousY = nextY;\n\n        if (i < xLength) {\n            nextX = x[i];\n            nextY = y[i];\n            i++;\n        } else if (i === xLength) {\n            nextX += lastOriginalStep;\n            nextY = 0;\n        }\n        // updating parameters\n        slope = getSlope(previousX, previousY, nextX, nextY);\n        intercept = -slope*previousX + previousY;\n    }\n\n    return output;\n}\n\n/**\n * function that retrieves the getEquallySpacedData with the variant \"slot\"\n *\n * @param x\n * @param y\n * @param from - Initial point\n * @param to - Final point\n * @param numberOfPoints\n * @returns {Array} - Array of y's equally spaced with the variant \"slot\"\n */\nfunction getEquallySpacedSlot(x, y, from, to, numberOfPoints) {\n    var xLength = x.length;\n\n    var step = (to - from) / (numberOfPoints - 1);\n    var halfStep = step / 2;\n    var lastStep = x[x.length - 1] - x[x.length - 2];\n\n    var start = from - halfStep;\n    var output = new Array(numberOfPoints);\n\n    // Init main variables\n    var min = start;\n    var max = start + step;\n\n    var previousX = -Number.MAX_VALUE;\n    var previousY = 0;\n    var nextX = x[0];\n    var nextY = y[0];\n    var frontOutsideSpectra = 0;\n    var backOutsideSpectra = true;\n\n    var currentValue = 0;\n\n    // for slot algorithm\n    var currentPoints = 0;\n\n    var i = 1; // index of input\n    var j = 0; // index of output\n\n    main: while(true) {\n        while (previousX - max > 0) {\n            // no overlap with original point, just consume current value\n            if(backOutsideSpectra) {\n                currentPoints++;\n                backOutsideSpectra = false;\n            }\n\n            output[j] = currentPoints <= 0 ? 0 : currentValue / currentPoints;\n            j++;\n\n            if (j === numberOfPoints)\n                break main;\n\n            min = max;\n            max += step;\n            currentValue = 0;\n            currentPoints = 0;\n        }\n\n        if(previousX > min) {\n            currentValue += previousY;\n            currentPoints++;\n        }\n\n        if(previousX === -Number.MAX_VALUE || frontOutsideSpectra > 1)\n            currentPoints--;\n\n        previousX = nextX;\n        previousY = nextY;\n\n        if (i < xLength) {\n            nextX = x[i];\n            nextY = y[i];\n            i++;\n        } else {\n            nextX += lastStep;\n            nextY = 0;\n            frontOutsideSpectra++;\n        }\n    }\n\n    return output;\n}\n/**\n * Function that calculates the integral of the line between two\n * x-coordinates, given the slope and intercept of the line.\n *\n * @param x0\n * @param x1\n * @param slope\n * @param intercept\n * @returns {number} integral value.\n */\nfunction integral(x0, x1, slope, intercept) {\n    return (0.5 * slope * x1 * x1 + intercept * x1) - (0.5 * slope * x0 * x0 + intercept * x0);\n}\n\nexports.getEquallySpacedData = getEquallySpacedData;\nexports.integral = integral;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-array-utils/src/getEquallySpaced.js\n ** module id = 3\n ** module chunks = 0\n **/","'use strict';\n\nexports.SNV = SNV;\nvar Stat = require('ml-stat');\nvar Matrix = require('ml-matrix');\n\n/**\n * Function that applies the standard normal variate (SNV) to an array of values.\n *\n * @param data - Array of values.\n * @returns {Array} - applied the SNV.\n */\nfunction SNV(data) {\n    var mean = Stat.array.mean(data);\n    var std = Stat.array.standardDeviation(data);\n\n    return new Matrix([data]).clone().sub(mean).div(std).getRow(0);\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-array-utils/src/snv.js\n ** module id = 4\n ** module chunks = 0\n **/","\nexports.array = require('./array');\nexports.matrix = require('./matrix');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-stat/index.js\n ** module id = 5\n ** module chunks = 0\n **/","'use strict';\n// https://github.com/accord-net/framework/blob/development/Sources/Accord.Statistics/Tools.cs\n\nfunction max(values) {\n    var max = -Infinity, l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] > max) max = values[i];\n    }\n    return max;\n}\n\nfunction min(values) {\n    var min = Infinity, l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] < min) min = values[i];\n    }\n    return min;\n}\n\nfunction minMax(values) {\n    var min = Infinity,\n        max = -Infinity,\n        l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] < min) min = values[i];\n        if (values[i] > max) max = values[i];\n    }\n    return {\n        min: min,\n        max: max\n    };\n}\n\nfunction mean(values) {\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i];\n    return sum / l;\n}\n\nfunction geometricMean(values) {\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum *= values[i];\n    return Math.pow(sum, 1 / l);\n}\n\nfunction logGeometricMean(values) {\n    var lnsum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        lnsum += Math.log(values[i]);\n    return lnsum / l;\n}\n\nfunction grandMean(means, samples) {\n    var sum = 0, n = 0, l = means.length;\n    for (var i = 0; i < l; i++) {\n        sum += samples[i] * means[i];\n        n += samples[i];\n    }\n    return sum / n;\n}\n\nfunction truncatedMean(values, percent, inPlace) {\n    if (typeof(inPlace) === 'undefined') inPlace = false;\n\n    values = inPlace ? values : values.slice();\n    values.sort();\n\n    var l = values.length;\n    var k = Math.floor(l * percent);\n\n    var sum = 0;\n    for (var i = k; i < l - k; i++)\n        sum += values[i];\n\n    return sum / (l - 2 * k);\n}\n\nfunction contraHarmonicMean(values, order) {\n    if (typeof(order) === 'undefined') order = 1;\n    var r1 = 0, r2 = 0, l = values.length;\n    for (var i = 0; i < l; i++) {\n        r1 += Math.pow(values[i], order + 1);\n        r2 += Math.pow(values[i], order);\n    }\n    return r1 / r2;\n}\n\nfunction standardDeviation(values, unbiased) {\n    return Math.sqrt(variance(values, unbiased));\n}\n\nfunction standardError(values) {\n    return standardDeviation(values) / Math.sqrt(values.length);\n}\n\nfunction median(values, alreadySorted) {\n    if (typeof(alreadySorted) === 'undefined') alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice();\n        values.sort();\n    }\n\n    var l = values.length;\n    var half = Math.floor(l / 2);\n    if (l % 2 === 0)\n        return (values[half - 1] + values[half]) * 0.5;\n    return values[half];\n}\n\nfunction quartiles(values, alreadySorted) {\n    if (typeof(alreadySorted) === 'undefined') alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice();\n        values.sort();\n    }\n\n    var quart = values.length / 4;\n    var q1 = values[Math.ceil(quart) - 1];\n    var q2 = median(values, true);\n    var q3 = values[Math.ceil(quart * 3) - 1];\n\n    return {q1: q1, q2: q2, q3: q3};\n}\n\nfunction variance(values, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var theMean = mean(values);\n    var theVariance = 0, l = values.length;\n\n    for (var i = 0; i < l; i++) {\n        var x = values[i] - theMean;\n        theVariance += x * x;\n    }\n\n    if (unbiased)\n        return theVariance / (l - 1);\n    else\n        return theVariance / l;\n}\n\nfunction pooledStandardDeviation(samples, unbiased) {\n    return Math.sqrt(pooledVariance(samples, unbiased));\n}\n\nfunction pooledVariance(samples, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var sum = 0;\n    var length = 0, l = samples.length;\n    for (var i = 0; i < l; i++) {\n        var values = samples[i];\n        var vari = variance(values);\n\n        sum += (values.length - 1) * vari;\n\n        if (unbiased)\n            length += values.length - 1;\n        else\n            length += values.length;\n    }\n    return sum / length;\n}\n\nfunction mode(values) {\n    var l = values.length,\n        itemCount = new Array(l),\n        i;\n    for (i = 0; i < l; i++) {\n        itemCount[i] = 0;\n    }\n    var itemArray = new Array(l);\n    var count = 0;\n\n    for (i = 0; i < l; i++) {\n        var index = itemArray.indexOf(values[i]);\n        if (index >= 0)\n            itemCount[index]++;\n        else {\n            itemArray[count] = values[i];\n            itemCount[count] = 1;\n            count++;\n        }\n    }\n\n    var maxValue = 0, maxIndex = 0;\n    for (i = 0; i < count; i++) {\n        if (itemCount[i] > maxValue) {\n            maxValue = itemCount[i];\n            maxIndex = i;\n        }\n    }\n\n    return itemArray[maxIndex];\n}\n\nfunction covariance(vector1, vector2, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var mean1 = mean(vector1);\n    var mean2 = mean(vector2);\n\n    if (vector1.length !== vector2.length)\n        throw \"Vectors do not have the same dimensions\";\n\n    var cov = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        var x = vector1[i] - mean1;\n        var y = vector2[i] - mean2;\n        cov += x * y;\n    }\n\n    if (unbiased)\n        return cov / (l - 1);\n    else\n        return cov / l;\n}\n\nfunction skewness(values, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var theMean = mean(values);\n\n    var s2 = 0, s3 = 0, l = values.length;\n    for (var i = 0; i < l; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s3 += dev * dev * dev;\n    }\n    var m2 = s2 / l;\n    var m3 = s3 / l;\n\n    var g = m3 / (Math.pow(m2, 3 / 2.0));\n    if (unbiased) {\n        var a = Math.sqrt(l * (l - 1));\n        var b = l - 2;\n        return (a / b) * g;\n    }\n    else {\n        return g;\n    }\n}\n\nfunction kurtosis(values, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var theMean = mean(values);\n    var n = values.length, s2 = 0, s4 = 0;\n\n    for (var i = 0; i < n; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s4 += dev * dev * dev * dev;\n    }\n    var m2 = s2 / n;\n    var m4 = s4 / n;\n\n    if (unbiased) {\n        var v = s2 / (n - 1);\n        var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n        var b = s4 / (v * v);\n        var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\n        return a * b - 3 * c;\n    }\n    else {\n        return m4 / (m2 * m2) - 3;\n    }\n}\n\nfunction entropy(values, eps) {\n    if (typeof(eps) === 'undefined') eps = 0;\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * Math.log(values[i] + eps);\n    return -sum;\n}\n\nfunction weightedMean(values, weights) {\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * weights[i];\n    return sum;\n}\n\nfunction weightedStandardDeviation(values, weights) {\n    return Math.sqrt(weightedVariance(values, weights));\n}\n\nfunction weightedVariance(values, weights) {\n    var theMean = weightedMean(values, weights);\n    var vari = 0, l = values.length;\n    var a = 0, b = 0;\n\n    for (var i = 0; i < l; i++) {\n        var z = values[i] - theMean;\n        var w = weights[i];\n\n        vari += w * (z * z);\n        b += w;\n        a += w * w;\n    }\n\n    return vari * (b / (b * b - a));\n}\n\nfunction center(values, inPlace) {\n    if (typeof(inPlace) === 'undefined') inPlace = false;\n\n    var result = values;\n    if (!inPlace)\n        result = values.slice();\n\n    var theMean = mean(result), l = result.length;\n    for (var i = 0; i < l; i++)\n        result[i] -= theMean;\n}\n\nfunction standardize(values, standardDev, inPlace) {\n    if (typeof(standardDev) === 'undefined') standardDev = standardDeviation(values);\n    if (typeof(inPlace) === 'undefined') inPlace = false;\n    var l = values.length;\n    var result = inPlace ? values : new Array(l);\n    for (var i = 0; i < l; i++)\n        result[i] = values[i] / standardDev;\n    return result;\n}\n\nfunction cumulativeSum(array) {\n    var l = array.length;\n    var result = new Array(l);\n    result[0] = array[0];\n    for (var i = 1; i < l; i++)\n        result[i] = result[i - 1] + array[i];\n    return result;\n}\n\nmodule.exports = {\n    min: min,\n    max: max,\n    minMax: minMax,\n    mean: mean,\n    geometricMean: geometricMean,\n    logGeometricMean: logGeometricMean,\n    grandMean: grandMean,\n    truncatedMean: truncatedMean,\n    contraHarmonicMean: contraHarmonicMean,\n    standardDeviation: standardDeviation,\n    standardError: standardError,\n    median: median,\n    quartiles: quartiles,\n    variance: variance,\n    pooledStandardDeviation: pooledStandardDeviation,\n    pooledVariance: pooledVariance,\n    mode: mode,\n    covariance: covariance,\n    skewness: skewness,\n    kurtosis: kurtosis,\n    entropy: entropy,\n    weightedMean: weightedMean,\n    weightedStandardDeviation: weightedStandardDeviation,\n    weightedVariance: weightedVariance,\n    center: center,\n    standardize: standardize,\n    cumulativeSum: cumulativeSum\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-stat/array.js\n ** module id = 6\n ** module chunks = 0\n **/","'use strict';\n// https://github.com/accord-net/framework/blob/development/Sources/Accord.Statistics/Tools.cs\n\nfunction entropy(matrix, eps) {\n    if (typeof(eps) === 'undefined') {\n        eps = 0;\n    }\n    var sum = 0,\n        l1 = matrix.length,\n        l2 = matrix[0].length;\n    for (var i = 0; i < l1; i++) {\n        for (var j = 0; j < l2; j++) {\n            sum += matrix[i][j] * Math.log(matrix[i][j] + eps);\n        }\n    }\n    return -sum;\n}\n\nfunction mean(matrix, dimension) {\n    if (typeof(dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        theMean, N, i, j;\n\n    if (dimension === -1) {\n        theMean = [0];\n        N = rows * cols;\n        for (i = 0; i < rows; i++) {\n            for (j = 0; j < cols; j++) {\n                theMean[0] += matrix[i][j];\n            }\n        }\n        theMean[0] /= N;\n    } else if (dimension === 0) {\n        theMean = new Array(cols);\n        N = rows;\n        for (j = 0; j < cols; j++) {\n            theMean[j] = 0;\n            for (i = 0; i < rows; i++) {\n                theMean[j] += matrix[i][j];\n            }\n            theMean[j] /= N;\n        }\n    } else if (dimension === 1) {\n        theMean = new Array(rows);\n        N = cols;\n        for (j = 0; j < rows; j++) {\n            theMean[j] = 0;\n            for (i = 0; i < cols; i++) {\n                theMean[j] += matrix[j][i];\n            }\n            theMean[j] /= N;\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n    return theMean;\n}\n\nfunction standardDeviation(matrix, means, unbiased) {\n    var vari = variance(matrix, means, unbiased), l = vari.length;\n    for (var i = 0; i < l; i++) {\n        vari[i] = Math.sqrt(vari[i]);\n    }\n    return vari;\n}\n\nfunction variance(matrix, means, unbiased) {\n    if (typeof(unbiased) === 'undefined') {\n        unbiased = true;\n    }\n    means = means || mean(matrix);\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length;\n    var vari = new Array(cols);\n\n    for (var j = 0; j < cols; j++) {\n        var sum1 = 0, sum2 = 0, x = 0;\n        for (var i = 0; i < rows; i++) {\n            x = matrix[i][j] - means[j];\n            sum1 += x;\n            sum2 += x * x;\n        }\n        if (unbiased) {\n            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / (rows - 1);\n        } else {\n            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / rows;\n        }\n    }\n    return vari;\n}\n\nfunction median(matrix) {\n    var rows = matrix.length, cols = matrix[0].length;\n    var medians = new Array(cols);\n\n    for (var i = 0; i < cols; i++) {\n        var data = new Array(rows);\n        for (var j = 0; j < rows; j++) {\n            data[j] = matrix[j][i];\n        }\n        data.sort();\n        var N = data.length;\n        if (N % 2 === 0) {\n            medians[i] = (data[N / 2] + data[(N / 2) - 1]) * 0.5;\n        } else {\n            medians[i] = data[Math.floor(N / 2)];\n        }\n    }\n    return medians;\n}\n\nfunction mode(matrix) {\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        modes = new Array(cols),\n        i, j;\n    for (i = 0; i < cols; i++) {\n        var itemCount = new Array(rows);\n        for (var k = 0; k < rows; k++) {\n            itemCount[k] = 0;\n        }\n        var itemArray = new Array(rows);\n        var count = 0;\n\n        for (j = 0; j < rows; j++) {\n            var index = itemArray.indexOf(matrix[j][i]);\n            if (index >= 0) {\n                itemCount[index]++;\n            } else {\n                itemArray[count] = matrix[j][i];\n                itemCount[count] = 1;\n                count++;\n            }\n        }\n\n        var maxValue = 0, maxIndex = 0;\n        for (j = 0; j < count; j++) {\n            if (itemCount[j] > maxValue) {\n                maxValue = itemCount[j];\n                maxIndex = j;\n            }\n        }\n\n        modes[i] = itemArray[maxIndex];\n    }\n    return modes;\n}\n\nfunction skewness(matrix, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var means = mean(matrix);\n    var n = matrix.length, l = means.length;\n    var skew = new Array(l);\n\n    for (var j = 0; j < l; j++) {\n        var s2 = 0, s3 = 0;\n        for (var i = 0; i < n; i++) {\n            var dev = matrix[i][j] - means[j];\n            s2 += dev * dev;\n            s3 += dev * dev * dev;\n        }\n\n        var m2 = s2 / n;\n        var m3 = s3 / n;\n        var g = m3 / Math.pow(m2, 3 / 2);\n\n        if (unbiased) {\n            var a = Math.sqrt(n * (n - 1));\n            var b = n - 2;\n            skew[j] = (a / b) * g;\n        } else {\n            skew[j] = g;\n        }\n    }\n    return skew;\n}\n\nfunction kurtosis(matrix, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var means = mean(matrix);\n    var n = matrix.length, m = matrix[0].length;\n    var kurt = new Array(m);\n\n    for (var j = 0; j < m; j++) {\n        var s2 = 0, s4 = 0;\n        for (var i = 0; i < n; i++) {\n            var dev = matrix[i][j] - means[j];\n            s2 += dev * dev;\n            s4 += dev * dev * dev * dev;\n        }\n        var m2 = s2 / n;\n        var m4 = s4 / n;\n\n        if (unbiased) {\n            var v = s2 / (n - 1);\n            var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n            var b = s4 / (v * v);\n            var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n            kurt[j] = a * b - 3 * c;\n        } else {\n            kurt[j] = m4 / (m2 * m2) - 3;\n        }\n    }\n    return kurt;\n}\n\nfunction standardError(matrix) {\n    var samples = matrix.length;\n    var standardDeviations = standardDeviation(matrix), l = standardDeviations.length;\n    var standardErrors = new Array(l);\n    var sqrtN = Math.sqrt(samples);\n\n    for (var i = 0; i < l; i++) {\n        standardErrors[i] = standardDeviations[i] / sqrtN;\n    }\n    return standardErrors;\n}\n\nfunction covariance(matrix, dimension) {\n    return scatter(matrix, undefined, dimension);\n}\n\nfunction scatter(matrix, divisor, dimension) {\n    if (typeof(dimension) === 'undefined') {\n        dimension = 0;\n    }\n    if (typeof(divisor) === 'undefined') {\n        if (dimension === 0) {\n            divisor = matrix.length - 1;\n        } else if (dimension === 1) {\n            divisor = matrix[0].length - 1;\n        }\n    }\n    var means = mean(matrix, dimension),\n        rows = matrix.length;\n    if (rows === 0) {\n        return [[]];\n    }\n    var cols = matrix[0].length,\n        cov, i, j, s, k;\n\n    if (dimension === 0) {\n        cov = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            cov[i] = new Array(cols);\n        }\n        for (i = 0; i < cols; i++) {\n            for (j = i; j < cols; j++) {\n                s = 0;\n                for (k = 0; k < rows; k++) {\n                    s += (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n                }\n                s /= divisor;\n                cov[i][j] = s;\n                cov[j][i] = s;\n            }\n        }\n    } else if (dimension === 1) {\n        cov = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            cov[i] = new Array(rows);\n        }\n        for (i = 0; i < rows; i++) {\n            for (j = i; j < rows; j++) {\n                s = 0;\n                for (k = 0; k < cols; k++) {\n                    s += (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n                }\n                s /= divisor;\n                cov[i][j] = s;\n                cov[j][i] = s;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    return cov;\n}\n\nfunction correlation(matrix) {\n    var means = mean(matrix),\n        standardDeviations = standardDeviation(matrix, true, means),\n        scores = zScores(matrix, means, standardDeviations),\n        rows = matrix.length,\n        cols = matrix[0].length,\n        i, j;\n\n    var cor = new Array(cols);\n    for (i = 0; i < cols; i++) {\n        cor[i] = new Array(cols);\n    }\n    for (i = 0; i < cols; i++) {\n        for (j = i; j < cols; j++) {\n            var c = 0;\n            for (var k = 0, l = scores.length; k < l; k++) {\n                c += scores[k][j] * scores[k][i];\n            }\n            c /= rows - 1;\n            cor[i][j] = c;\n            cor[j][i] = c;\n        }\n    }\n    return cor;\n}\n\nfunction zScores(matrix, means, standardDeviations) {\n    means = means || mean(matrix);\n    if (typeof(standardDeviations) === 'undefined') standardDeviations = standardDeviation(matrix, true, means);\n    return standardize(center(matrix, means, false), standardDeviations, true);\n}\n\nfunction center(matrix, means, inPlace) {\n    means = means || mean(matrix);\n    var result = matrix,\n        l = matrix.length,\n        i, j, jj;\n\n    if (!inPlace) {\n        result = new Array(l);\n        for (i = 0; i < l; i++) {\n            result[i] = new Array(matrix[i].length);\n        }\n    }\n\n    for (i = 0; i < l; i++) {\n        var row = result[i];\n        for (j = 0, jj = row.length; j < jj; j++) {\n            row[j] = matrix[i][j] - means[j];\n        }\n    }\n    return result;\n}\n\nfunction standardize(matrix, standardDeviations, inPlace) {\n    if (typeof(standardDeviations) === 'undefined') standardDeviations = standardDeviation(matrix);\n    var result = matrix,\n        l = matrix.length,\n        i, j, jj;\n\n    if (!inPlace) {\n        result = new Array(l);\n        for (i = 0; i < l; i++) {\n            result[i] = new Array(matrix[i].length);\n        }\n    }\n\n    for (i = 0; i < l; i++) {\n        var resultRow = result[i];\n        var sourceRow = matrix[i];\n        for (j = 0, jj = resultRow.length; j < jj; j++) {\n            if (standardDeviations[j] !== 0 && !isNaN(standardDeviations[j])) {\n                resultRow[j] = sourceRow[j] / standardDeviations[j];\n            }\n        }\n    }\n    return result;\n}\n\nfunction weightedVariance(matrix, weights) {\n    var means = mean(matrix);\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length;\n    var vari = new Array(cols);\n\n    for (var j = 0; j < cols; j++) {\n        var sum = 0;\n        var a = 0, b = 0;\n\n        for (var i = 0; i < rows; i++) {\n            var z = matrix[i][j] - means[j];\n            var w = weights[i];\n\n            sum += w * (z * z);\n            b += w;\n            a += w * w;\n        }\n\n        vari[j] = sum * (b / (b * b - a));\n    }\n\n    return vari;\n}\n\nfunction weightedMean(matrix, weights, dimension) {\n    if (typeof(dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length,\n        means, i, ii, j, w, row;\n\n    if (dimension === 0) {\n        means = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            means[i] = 0;\n        }\n        for (i = 0; i < rows; i++) {\n            row = matrix[i];\n            w = weights[i];\n            for (j = 0; j < cols; j++) {\n                means[j] += row[j] * w;\n            }\n        }\n    } else if (dimension === 1) {\n        means = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            means[i] = 0;\n        }\n        for (j = 0; j < rows; j++) {\n            row = matrix[j];\n            w = weights[j];\n            for (i = 0; i < cols; i++) {\n                means[j] += row[i] * w;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    var weightSum = sum(weights);\n    if (weightSum !== 0) {\n        for (i = 0, ii = means.length; i < ii; i++) {\n            means[i] /= weightSum;\n        }\n    }\n    return means;\n}\n\nfunction weightedCovariance(matrix, weights, means, dimension) {\n    dimension = dimension || 0;\n    means = means || weightedMean(matrix, weights, dimension);\n    var s1 = 0, s2 = 0;\n    for (var i = 0, ii = weights.length; i < ii; i++) {\n        s1 += weights[i];\n        s2 += weights[i] * weights[i];\n    }\n    var factor = s1 / (s1 * s1 - s2);\n    return weightedScatter(matrix, weights, means, factor, dimension);\n}\n\nfunction weightedScatter(matrix, weights, means, factor, dimension) {\n    dimension = dimension || 0;\n    means = means || weightedMean(matrix, weights, dimension);\n    if (typeof(factor) === 'undefined') {\n        factor = 1;\n    }\n    var rows = matrix.length;\n    if (rows === 0) {\n        return [[]];\n    }\n    var cols = matrix[0].length,\n        cov, i, j, k, s;\n\n    if (dimension === 0) {\n        cov = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            cov[i] = new Array(cols);\n        }\n        for (i = 0; i < cols; i++) {\n            for (j = i; j < cols; j++) {\n                s = 0;\n                for (k = 0; k < rows; k++) {\n                    s += weights[k] * (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n                }\n                cov[i][j] = s * factor;\n                cov[j][i] = s * factor;\n            }\n        }\n    } else if (dimension === 1) {\n        cov = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            cov[i] = new Array(rows);\n        }\n        for (i = 0; i < rows; i++) {\n            for (j = i; j < rows; j++) {\n                s = 0;\n                for (k = 0; k < cols; k++) {\n                    s += weights[k] * (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n                }\n                cov[i][j] = s * factor;\n                cov[j][i] = s * factor;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    return cov;\n}\n\n// private\nfunction sum(vector) {\n    var sum = 0, l = vector.length;\n    for (var i = 0; i < l; i++) {\n        sum += vector[i];\n    }\n    return sum;\n}\n\nmodule.exports = {\n    entropy: entropy,\n    mean: mean,\n    standardDeviation: standardDeviation,\n    variance: variance,\n    median: median,\n    mode: mode,\n    skewness: skewness,\n    kurtosis: kurtosis,\n    standardError: standardError,\n    covariance: covariance,\n    scatter: scatter,\n    correlation: correlation,\n    zScores: zScores,\n    center: center,\n    standardize: standardize,\n    weightedVariance: weightedVariance,\n    weightedMean: weightedMean,\n    weightedCovariance: weightedCovariance,\n    weightedScatter: weightedScatter\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-stat/matrix.js\n ** module id = 7\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./matrix');\nmodule.exports.Decompositions = module.exports.DC = require('./decompositions');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-array-utils/~/ml-matrix/src/index.js\n ** module id = 8\n ** module chunks = 0\n **/","'use strict';\n\nvar Asplice = Array.prototype.splice,\n    Aconcat = Array.prototype.concat;\n\n// For performance : http://jsperf.com/clone-array-slice-vs-while-vs-for\nfunction slice(arr) {\n    var i = 0,\n        ii = arr.length,\n        result = new Array(ii);\n    for (; i < ii; i++) {\n        result[i] = arr[i];\n    }\n    return result;\n}\n\n/**\n * Real matrix.\n * @constructor\n * @param {number|Array} nRows - Number of rows of the new matrix or a 2D array containing the data.\n * @param {number|boolean} [nColumns] - Number of columns of the new matrix or a boolean specifying if the input array should be cloned\n */\nfunction Matrix(nRows, nColumns) {\n    var i = 0, rows, columns, matrix, newInstance;\n    if (Array.isArray(nRows)) {\n        newInstance = nColumns;\n        matrix = newInstance ? slice(nRows) : nRows;\n        nRows = matrix.length;\n        nColumns = matrix[0].length;\n        if (typeof nColumns === 'undefined') {\n            throw new TypeError('Data must be a 2D array');\n        }\n        if (nRows > 0 && nColumns > 0) {\n            for (; i < nRows; i++) {\n                if (matrix[i].length !== nColumns) {\n                    throw new RangeError('Inconsistent array dimensions');\n                } else if (newInstance) {\n                    matrix[i] = slice(matrix[i]);\n                }\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else if (typeof nRows === 'number') { // Create empty matrix\n        if (nRows > 0 && nColumns > 0) {\n            matrix = new Array(nRows);\n            for (; i < nRows; i++) {\n                matrix[i] = new Array(nColumns);\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else {\n        throw new TypeError('Invalid arguments');\n    }\n\n    Object.defineProperty(matrix, 'rows', {writable: true, value: nRows});\n    Object.defineProperty(matrix, 'columns', {writable: true, value: nColumns});\n\n    matrix.__proto__ = Matrix.prototype;\n\n    return matrix;\n}\n\n/**\n * Constructs a Matrix with the chosen dimensions from a 1D array.\n * @param {number} newRows - Number of rows\n * @param {number} newColumns - Number of columns\n * @param {Array} newData - A 1D array containing data for the matrix\n * @returns {Matrix} - The new matrix\n */\nMatrix.from1DArray = function from1DArray(newRows, newColumns, newData) {\n    var length, data, i = 0;\n\n    length = newRows * newColumns;\n    if (length !== newData.length)\n        throw new RangeError('Data length does not match given dimensions');\n\n    data = new Array(newRows);\n    for (; i < newRows; i++) {\n        data[i] = newData.slice(i * newColumns, (i + 1) * newColumns);\n    }\n    return new Matrix(data);\n};\n\n/**\n * Creates a row vector, a matrix with only one row.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.rowVector = function rowVector(newData) {\n    return new Matrix([newData]);\n};\n\n/**\n * Creates a column vector, a matrix with only one column.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.columnVector = function columnVector(newData) {\n    var l = newData.length, vector = new Array(l);\n    for (var i = 0; i < l; i++)\n        vector[i] = [newData[i]];\n    return new Matrix(vector);\n};\n\n/**\n * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.empty = function empty(rows, columns) {\n    return new Matrix(rows, columns);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to zero.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.zeros = function zeros(rows, columns) {\n    return Matrix.empty(rows, columns).fill(0);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to one.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.ones = function ones(rows, columns) {\n    return Matrix.empty(rows, columns).fill(1);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be randomly set using Math.random().\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} The new matrix\n */\nMatrix.rand = function rand(rows, columns) {\n    var matrix = Matrix.empty(rows, columns);\n    for (var i = 0, ii = matrix.rows; i < ii; i++) {\n        for (var j = 0, jj = matrix.columns; j < jj; j++) {\n            matrix[i][j] = Math.random();\n        }\n    }\n    return matrix;\n};\n\n/**\n * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and other will be 0.\n * @param {number} n - Number of rows and columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.eye = function eye(n) {\n    var matrix = Matrix.zeros(n, n), l = matrix.rows;\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = 1;\n    }\n    return matrix;\n};\n\n/**\n * Creates a diagonal matrix based on the given array.\n * @param {Array} data - Array containing the data for the diagonal\n * @returns {Matrix} - The new matrix\n */\nMatrix.diag = function diag(data) {\n    var l = data.length, matrix = Matrix.zeros(l, l);\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = data[i];\n    }\n    return matrix;\n};\n\n/**\n * Creates an array of indices between two values\n * @param {number} from\n * @param {number} to\n * @returns {Array}\n */\nMatrix.indices = function indices(from, to) {\n    var vector = new Array(to - from);\n    for (var i = 0; i < vector.length; i++)\n        vector[i] = from++;\n    return vector;\n};\n\n// TODO DOC\nMatrix.stack = function stack(arg1) {\n    var i, j, k;\n    if (Matrix.isMatrix(arg1)) {\n        var rows = 0,\n            cols = 0;\n        for (i = 0; i < arguments.length; i++) {\n            rows += arguments[i].rows;\n            if (arguments[i].columns > cols)\n                cols = arguments[i].columns;\n        }\n\n        var r = Matrix.zeros(rows, cols);\n        var c = 0;\n        for (i = 0; i < arguments.length; i++) {\n            var current = arguments[i];\n            for (j = 0; j < current.rows; j++) {\n                for (k = 0; k < current.columns; k++)\n                    r[c][k] = current[j][k];\n                c++;\n            }\n        }\n        return r;\n    }\n    else if (Array.isArray(arg1)) {\n        var matrix = Matrix.empty(arguments.length, arg1.length);\n        for (i = 0; i < arguments.length; i++)\n            matrix.setRow(i, arguments[i]);\n        return matrix;\n    }\n};\n\n// TODO DOC\nMatrix.expand = function expand(base, count) {\n    var expansion = [];\n    for (var i = 0; i < count.length; i++)\n        for (var j = 0; j < count[i]; j++)\n            expansion.push(base[i]);\n    return new Matrix(expansion);\n};\n\n/**\n * Check that the provided value is a Matrix and tries to instantiate one if not\n * @param value - The value to check\n * @returns {Matrix}\n * @throws {TypeError}\n */\nMatrix.checkMatrix = function checkMatrix(value) {\n    if (!value) {\n        throw new TypeError('Argument has to be a matrix');\n    }\n    if (value.klass !== 'Matrix') {\n        value = new Matrix(value);\n    }\n    return value;\n};\n\n/**\n * Returns true if the argument is a Matrix, false otherwise\n * @param value - The value to check\n * @returns {boolean}\n */\nMatrix.isMatrix = function isMatrix(value) {\n    return value ? value.klass === 'Matrix' : false;\n};\n\n/**\n * @property {string} - The name of this class.\n */\nObject.defineProperty(Matrix.prototype, 'klass', {\n    get: function klass() {\n        return 'Matrix';\n    }\n});\n\n/**\n * @property {number} - The number of elements in the matrix.\n */\nObject.defineProperty(Matrix.prototype, 'size', {\n    get: function size() {\n        return this.rows * this.columns;\n    }\n});\n\n/**\n * @private\n * Internal check that a row index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkRowIndex = function checkRowIndex(index) {\n    if (index < 0 || index > this.rows - 1)\n        throw new RangeError('Row index out of range.');\n};\n\n/**\n * @private\n * Internal check that a column index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkColumnIndex = function checkColumnIndex(index) {\n    if (index < 0 || index > this.columns - 1)\n        throw new RangeError('Column index out of range.');\n};\n\n/**\n * @private\n * Internal check that two matrices have the same dimensions\n * @param {Matrix} otherMatrix\n */\nMatrix.prototype.checkDimensions = function checkDimensions(otherMatrix) {\n    if ((this.rows !== otherMatrix.rows) || (this.columns !== otherMatrix.columns))\n        throw new RangeError('Matrices dimensions must be equal.');\n};\n\n/**\n * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n * @returns {Matrix} this\n */\nMatrix.prototype.apply = function apply(callback) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            callback.call(this, i, j);\n        }\n    }\n    return this;\n};\n\n/**\n * Creates an exact and independent copy of the matrix\n * @returns {Matrix}\n */\nMatrix.prototype.clone = function clone() {\n    return new Matrix(this.to2DArray());\n};\n\n/**\n * Returns a new 1D array filled row by row with the matrix values\n * @returns {Array}\n */\nMatrix.prototype.to1DArray = function to1DArray() {\n    return Aconcat.apply([], this);\n};\n\n/**\n * Returns a 2D array containing a copy of the data\n * @returns {Array}\n */\nMatrix.prototype.to2DArray = function to2DArray() {\n    var l = this.rows, copy = new Array(l);\n    for (var i = 0; i < l; i++) {\n        copy[i] = slice(this[i]);\n    }\n    return copy;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row\n */\nMatrix.prototype.isRowVector = function isRowVector() {\n    return this.rows === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one column\n */\nMatrix.prototype.isColumnVector = function isColumnVector() {\n    return this.columns === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row or one column\n */\nMatrix.prototype.isVector = function isVector() {\n    return (this.rows === 1) || (this.columns === 1);\n};\n\n/**\n * @returns {boolean} true if the matrix has the same number of rows and columns\n */\nMatrix.prototype.isSquare = function isSquare() {\n    return this.rows === this.columns;\n};\n\n/**\n * @returns {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n */\nMatrix.prototype.isSymmetric = function isSymmetric() {\n    if (this.isSquare()) {\n        var l = this.rows;\n        for (var i = 0; i < l; i++) {\n            for (var j = 0; j <= i; j++) {\n                if (this[i][j] !== this[j][i]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    return false;\n};\n\n/**\n * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @param {number} value - The new value for the element\n * @returns {Matrix} this\n */\nMatrix.prototype.set = function set(rowIndex, columnIndex, value) {\n    this[rowIndex][columnIndex] = value;\n    return this;\n};\n\n/**\n * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @returns {number}\n */\nMatrix.prototype.get = function get(rowIndex, columnIndex) {\n    return this[rowIndex][columnIndex];\n};\n\n/**\n * Fills the matrix with a given value. All elements will be set to this value.\n * @param {number} value - New value\n * @returns {Matrix} this\n */\nMatrix.prototype.fill = function fill(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = value;\n        }\n    }\n    return this;\n};\n\n/**\n * Negates the matrix. All elements will be multiplied by (-1)\n * @returns {Matrix} this\n */\nMatrix.prototype.neg = function neg() {\n    return this.mulS(-1);\n};\n\n/**\n * Adds a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number')\n        return this.addS(value);\n    value = Matrix.checkMatrix(value);\n        return this.addM(value);\n};\n\n/**\n * Adds a scalar to each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.addS = function addS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += value;\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the value of each element of matrix to the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.addM = function addM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number')\n        return this.subS(value);\n    value = Matrix.checkMatrix(value);\n        return this.subM(value);\n};\n\n/**\n * Subtracts a scalar from each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.subS = function subS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the value of each element of matrix from the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.subM = function subM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number')\n        return this.mulS(value);\n    value = Matrix.checkMatrix(value);\n        return this.mulM(value);\n};\n\n/**\n * Multiplies a scalar with each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulS = function mulS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the value of each element of matrix with the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.mulM = function mulM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides by a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number')\n        return this.divS(value);\n    value = Matrix.checkMatrix(value);\n        return this.divM(value);\n};\n\n/**\n * Divides each element of the matrix by a scalar\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.divS = function divS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Divides each element of this by the corresponding element of matrix\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.divM = function divM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Returns a new array from the given row index\n * @param {number} index - Row index\n * @returns {Array}\n */\nMatrix.prototype.getRow = function getRow(index) {\n    this.checkRowIndex(index);\n    return slice(this[index]);\n};\n\n/**\n * Returns a new row vector from the given row index\n * @param {number} index - Row index\n * @returns {Matrix}\n */\nMatrix.prototype.getRowVector = function getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n};\n\n/**\n * Sets a row at the given index\n * @param {number} index - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setRow = function setRow(index, array) {\n    this.checkRowIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    this[index] = slice(array);\n    return this;\n};\n\n/**\n * Removes a row from the given index\n * @param {number} index - Row index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeRow = function removeRow(index) {\n    this.checkRowIndex(index);\n    if (this.rows === 1)\n        throw new RangeError('A matrix cannot have less than one row');\n    Asplice.call(this, index, 1);\n    this.rows -= 1;\n    return this;\n};\n\n/**\n * Adds a row at the given index\n * @param {number} [index = this.rows] - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRow = function addRow(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.rows;\n    }\n    if (index < 0 || index > this.rows)\n        throw new RangeError('Row index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    Asplice.call(this, index, 0, slice(array));\n    this.rows += 1;\n    return this;\n};\n\n/**\n * Swaps two rows\n * @param {number} row1 - First row index\n * @param {number} row2 - Second row index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapRows = function swapRows(row1, row2) {\n    this.checkRowIndex(row1);\n    this.checkRowIndex(row2);\n    var temp = this[row1];\n    this[row1] = this[row2];\n    this[row2] = temp;\n    return this;\n};\n\n/**\n * Returns a new array from the given column index\n * @param {number} index - Column index\n * @returns {Array}\n */\nMatrix.prototype.getColumn = function getColumn(index) {\n    this.checkColumnIndex(index);\n    var l = this.rows, column = new Array(l);\n    for (var i = 0; i < l; i++) {\n        column[i] = this[i][index];\n    }\n    return column;\n};\n\n/**\n * Returns a new column vector from the given column index\n * @param {number} index - Column index\n * @returns {Matrix}\n */\nMatrix.prototype.getColumnVector = function getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n};\n\n/**\n * Sets a column at the given index\n * @param {number} index - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setColumn = function setColumn(index, array) {\n    this.checkColumnIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i][index] = array[i];\n    }\n    return this;\n};\n\n/**\n * Removes a column from the given index\n * @param {number} index - Column index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeColumn = function removeColumn(index) {\n    this.checkColumnIndex(index);\n    if (this.columns === 1)\n        throw new RangeError('A matrix cannot have less than one column');\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].splice(index, 1);\n    }\n    this.columns -= 1;\n    return this;\n};\n\n/**\n * Adds a column at the given index\n * @param {number} [index = this.columns] - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumn = function addColumn(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.columns;\n    }\n    if (index < 0 || index > this.columns)\n        throw new RangeError('Column index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i].splice(index, 0, array[i]);\n    }\n    this.columns += 1;\n    return this;\n};\n\n/**\n * Swaps two columns\n * @param {number} column1 - First column index\n * @param {number} column2 - Second column index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapColumns = function swapColumns(column1, column2) {\n    this.checkRowIndex(column1);\n    this.checkRowIndex(column2);\n    var l = this.rows, temp, row;\n    for (var i = 0; i < l; i++) {\n        row = this[i];\n        temp = row[column1];\n        row[column1] = row[column2];\n        row[column2] = temp;\n    }\n    return this;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkRowVector = function checkRowVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.columns)\n        throw new RangeError('vector size must be the same as the number of columns');\n    return vector;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkColumnVector = function checkColumnVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.rows)\n        throw new RangeError('vector size must be the same as the number of rows');\n    return vector;\n};\n\n/**\n * Adds the values of a vector to each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRowVector = function addRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subRowVector = function subRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRowVector = function mulRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each row by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divRowVector = function divRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the values of a vector to each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumnVector = function addColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subColumnVector = function subColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumnVector = function mulColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each column by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divColumnVector = function divColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a row with a scalar\n * @param {number} index - Row index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRow = function mulRow(index, value) {\n    this.checkRowIndex(index);\n    var i = 0, l = this.columns;\n    for (; i < l; i++) {\n        this[index][i] *= value;\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a column with a scalar\n * @param {number} index - Column index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumn = function mulColumn(index, value) {\n    this.checkColumnIndex(index);\n    var i = 0, l = this.rows;\n    for (; i < l; i++) {\n        this[i][index] *= value;\n    }\n};\n\n/**\n * A matrix index\n * @typedef {Object} MatrixIndex\n * @property {number} row\n * @property {number} column\n */\n\n/**\n * Returns the maximum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.max = function max() {\n    var v = -Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxIndex = function maxIndex() {\n    var v = -Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.min = function min() {\n    var v = Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minIndex = function minIndex() {\n    var v = Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.maxRow = function maxRow(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxRowIndex = function maxRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    var idx = {\n            row: index\n        };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.minRow = function minRow(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minRowIndex = function minRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: index,\n        column: 0\n    };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.maxColumn = function maxColumn(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxColumnIndex = function maxColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.minColumn = function minColumn(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minColumnIndex = function minColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns an array containing the diagonal values of the matrix\n * @returns {Array}\n */\nMatrix.prototype.diag = function diag() {\n    if (!this.isSquare())\n        throw new TypeError('Only square matrices have a diagonal.');\n    var diag = new Array(this.rows);\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        diag[i] = this[i][i];\n    }\n    return diag;\n};\n\n/**\n * Returns the sum of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.sum = function sum() {\n    var v = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            v += this[i][j];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the mean of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.mean = function mean() {\n    return this.sum() / this.size;\n};\n\n/**\n * Returns the product of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.prod = function prod() {\n    var prod = 1;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            prod *= this[i][j];\n        }\n    }\n    return prod;\n};\n\n/**\n * Computes the cumulative sum of the matrix elements (in place, row by row)\n * @returns {Matrix} this\n */\nMatrix.prototype.cumulativeSum = function cumulativeSum() {\n    var sum = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            sum += this[i][j];\n            this[i][j] = sum;\n        }\n    }\n    return this;\n};\n\n/**\n * Computes the dot (scalar) product between the matrix and another\n * @param {Matrix} other vector\n * @returns {number}\n */\nMatrix.prototype.dot = function dot(other) {\n    if (this.size !== other.size)\n        throw new RangeError('vectors do not have the same size');\n    var vector1 = this.to1DArray();\n    var vector2 = other.to1DArray();\n    var dot = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        dot += vector1[i] * vector2[i];\n    }\n    return dot;\n};\n\n/**\n * Returns the matrix product between this and other\n * @returns {Matrix}\n */\nMatrix.prototype.mmul = function mmul(other) {\n    if (!Matrix.isMatrix(other))\n        throw new TypeError('parameter \"other\" must be a matrix');\n    if (this.columns !== other.rows)\n        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n\n    var m = this.rows, n = this.columns, p = other.columns;\n    var result = new Matrix(m, p);\n\n    var Bcolj = new Array(n);\n    var i, j, k;\n    for (j = 0; j < p; j++) {\n        for (k = 0; k < n; k++)\n            Bcolj[k] = other[k][j];\n\n        for (i = 0; i < m; i++) {\n            var Arowi = this[i];\n\n            var s = 0;\n            for (k = 0; k < n; k++)\n                s += Arowi[k] * Bcolj[k];\n\n            result[i][j] = s;\n        }\n    }\n    return result;\n};\n\n/**\n * Sorts the rows (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortRows = function sortRows(compareFunction) {\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].sort(compareFunction);\n    }\n    return this;\n};\n\n/**\n * Sorts the columns (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortColumns = function sortColumns(compareFunction) {\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n};\n\n/**\n * Transposes the matrix and returns a new one containing the result\n * @returns {Matrix}\n */\nMatrix.prototype.transpose = function transpose() {\n    var result = new Matrix(this.columns, this.rows);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[j][i] = this[i][j];\n        }\n    }\n    return result;\n};\n\n/**\n * Returns a subset of the matrix\n * @param {number} startRow - First row index\n * @param {number} endRow - Last row index\n * @param {number} startColumn - First column index\n * @param {number} endColumn - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrix = function subMatrix(startRow, endRow, startColumn, endColumn) {\n    if ((startRow > endRow) || (startColumn > endColumn) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range');\n    var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n    for (var i = startRow; i <= endRow; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            newMatrix[i - startRow][j - startColumn] = this[i][j];\n        }\n    }\n    return newMatrix;\n};\n\n/**\n * Returns a subset of the matrix based on an array of row indices\n * @param {Array} indices - Array containing the row indices\n * @param {number} [startColumn = 0] - First column index\n * @param {number} [endColumn = this.columns-1] - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixRow = function subMatrixRow(indices, startColumn, endColumn) {\n    if (typeof startColumn === 'undefined') {\n        startColumn = 0;\n        endColumn = this.columns - 1;\n    } else if (typeof endColumn === 'undefined') {\n        endColumn = this.columns - 1;\n    }\n    if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, rows = this.rows,\n        X = new Matrix(l, endColumn - startColumn + 1);\n    for (var i = 0; i < l; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            if ((indices[i] < 0) || (indices[i] >= rows))\n                throw new RangeError('Argument out of range.');\n            X[i][j - startColumn] = this[indices[i]][j];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns a subset of the matrix based on an array of column indices\n * @param {Array} indices - Array containing the column indices\n * @param {number} [startRow = 0] - First row index\n * @param {number} [endRow = this.rows-1] - Last row index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixColumn = function subMatrixColumn(indices, startRow, endRow) {\n    if (typeof startRow === 'undefined') {\n        startRow = 0;\n        endRow = this.rows - 1;\n    } else if (typeof endRow === 'undefined') {\n        endRow = this.rows - 1;\n    }\n    if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, columns = this.columns,\n        X = new Matrix(endRow - startRow + 1, l);\n    for (var i = 0; i < l; i++) {\n        for (var j = startRow; j <= endRow; j++) {\n            if ((indices[i] < 0) || (indices[i] >= columns))\n                throw new RangeError('Argument out of range.');\n            X[j - startRow][i] = this[j][indices[i]];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns the trace of the matrix (sum of the diagonal elements)\n * @returns {number}\n */\nMatrix.prototype.trace = function trace() {\n    if (!this.isSquare())\n        throw new TypeError('The matrix is not square');\n    var trace = 0, i = 0, l = this.rows;\n    for (; i < l; i++) {\n        trace += this[i][i];\n    }\n    return trace;\n};\n\n/**\n * Sets each element of the matrix to its absolute value\n * @returns {Matrix} this\n */\nMatrix.prototype.abs = function abs() {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = Math.abs(this[i][j]);\n        }\n    }\n};\n\nmodule.exports = Matrix;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-array-utils/~/ml-matrix/src/matrix.js\n ** module id = 9\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('./matrix');\n\nvar SingularValueDecomposition = require('./dc/svd');\nvar EigenvalueDecomposition = require('./dc/evd');\nvar LuDecomposition = require('./dc/lu');\nvar QrDecomposition = require('./dc/qr');\nvar CholeskyDecomposition = require('./dc/cholesky');\n\nfunction inverse(matrix) {\n    return solve(matrix, Matrix.eye(matrix.rows));\n}\n\nMatrix.prototype.inverse = function () {\n    return inverse(this);\n};\n\nfunction solve(leftHandSide, rightHandSide) {\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n}\n\nMatrix.prototype.solve = function (other) {\n    return solve(this, other);\n};\n\nmodule.exports = {\n    SingularValueDecomposition: SingularValueDecomposition,\n    SVD: SingularValueDecomposition,\n    EigenvalueDecomposition: EigenvalueDecomposition,\n    EVD: EigenvalueDecomposition,\n    LuDecomposition: LuDecomposition,\n    LU: LuDecomposition,\n    QrDecomposition: QrDecomposition,\n    QR: QrDecomposition,\n    CholeskyDecomposition: CholeskyDecomposition,\n    CHO: CholeskyDecomposition,\n    inverse: inverse,\n    solve: solve\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-array-utils/~/ml-matrix/src/decompositions.js\n ** module id = 10\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\nfunction SingularValueDecomposition(value, options) {\n    if (!(this instanceof SingularValueDecomposition)) {\n        return new SingularValueDecomposition(value, options);\n    }\n    value = Matrix.checkMatrix(value);\n\n    options = options || {};\n\n    var a = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        nu = Math.min(m, n);\n\n    var wantu = true, wantv = true;\n    if (options.computeLeftSingularVectors === false)\n        wantu = false;\n    if (options.computeRightSingularVectors === false)\n        wantv = false;\n    var autoTranspose = options.autoTranspose === true;\n\n    var swapped = false;\n    if (m < n) {\n        if (!autoTranspose) {\n            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n        } else {\n            a = a.transpose();\n            m = a.rows;\n            n = a.columns;\n            swapped = true;\n            var aux = wantu;\n            wantu = wantv;\n            wantv = aux;\n        }\n    }\n\n    var s = new Array(Math.min(m + 1, n)),\n        U = Matrix.zeros(m, nu),\n        V = Matrix.zeros(n, n),\n        e = new Array(n),\n        work = new Array(m);\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n\n    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\n    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n        if (k < nct) {\n            s[k] = 0;\n            for (i = k; i < m; i++) {\n                s[k] = hypotenuse(s[k], a[i][k]);\n            }\n            if (s[k] !== 0) {\n                if (a[k][k] < 0) {\n                    s[k] = -s[k];\n                }\n                for (i = k; i < m; i++) {\n                    a[i][k] /= s[k];\n                }\n                a[k][k] += 1;\n            }\n            s[k] = -s[k];\n        }\n\n        for (j = k + 1; j < n; j++) {\n            if ((k < nct) && (s[k] !== 0)) {\n                t = 0;\n                for (i = k; i < m; i++) {\n                    t += a[i][k] * a[i][j];\n                }\n                t = -t / a[k][k];\n                for (i = k; i < m; i++) {\n                    a[i][j] += t * a[i][k];\n                }\n            }\n            e[j] = a[k][j];\n        }\n\n        if (wantu && (k < nct)) {\n            for (i = k; i < m; i++) {\n                U[i][k] = a[i][k];\n            }\n        }\n\n        if (k < nrt) {\n            e[k] = 0;\n            for (i = k + 1; i < n; i++) {\n                e[k] = hypotenuse(e[k], e[i]);\n            }\n            if (e[k] !== 0) {\n                if (e[k + 1] < 0)\n                    e[k] = -e[k];\n                for (i = k + 1; i < n; i++) {\n                    e[i] /= e[k];\n                }\n                e[k + 1] += 1;\n            }\n            e[k] = -e[k];\n            if ((k + 1 < m) && (e[k] !== 0)) {\n                for (i = k + 1; i < m; i++) {\n                    work[i] = 0;\n                }\n                for (j = k + 1; j < n; j++) {\n                    for (i = k + 1; i < m; i++) {\n                        work[i] += e[j] * a[i][j];\n                    }\n                }\n                for (j = k + 1; j < n; j++) {\n                    t = -e[j] / e[k + 1];\n                    for (i = k + 1; i < m; i++) {\n                        a[i][j] += t * work[i];\n                    }\n                }\n            }\n            if (wantv) {\n                for (i = k + 1; i < n; i++) {\n                    V[i][k] = e[i];\n                }\n            }\n        }\n    }\n\n    p = Math.min(n, m + 1);\n    if (nct < n) {\n        s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n        s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n        e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n        for (j = nct; j < nu; j++) {\n            for (i = 0; i < m; i++) {\n                U[i][j] = 0;\n            }\n            U[j][j] = 1;\n        }\n        for (k = nct - 1; k >= 0; k--) {\n            if (s[k] !== 0) {\n                for (j = k + 1; j < nu; j++) {\n                    t = 0;\n                    for (i = k; i < m; i++) {\n                        t += U[i][k] * U[i][j];\n                    }\n                    t = -t / U[k][k];\n                    for (i = k; i < m; i++) {\n                        U[i][j] += t * U[i][k];\n                    }\n                }\n                for (i = k; i < m; i++) {\n                    U[i][k] = -U[i][k];\n                }\n                U[k][k] = 1 + U[k][k];\n                for (i = 0; i < k - 1; i++) {\n                    U[i][k] = 0;\n                }\n            } else {\n                for (i = 0; i < m; i++) {\n                    U[i][k] = 0;\n                }\n                U[k][k] = 1;\n            }\n        }\n    }\n\n    if (wantv) {\n        for (k = n - 1; k >= 0; k--) {\n            if ((k < nrt) && (e[k] !== 0)) {\n                for (j = k + 1; j < n; j++) {\n                    t = 0;\n                    for (i = k + 1; i < n; i++) {\n                        t += V[i][k] * V[i][j];\n                    }\n                    t = -t / V[k + 1][k];\n                    for (i = k + 1; i < n; i++) {\n                        V[i][j] += t * V[i][k];\n                    }\n                }\n            }\n            for (i = 0; i < n; i++) {\n                V[i][k] = 0;\n            }\n            V[k][k] = 1;\n        }\n    }\n\n    var pp = p - 1,\n        iter = 0,\n        eps = Math.pow(2, -52);\n    while (p > 0) {\n        for (k = p - 2; k >= -1; k--) {\n            if (k === -1) {\n                break;\n            }\n            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n                e[k] = 0;\n                break;\n            }\n        }\n        if (k === p - 2) {\n            kase = 4;\n        } else {\n            for (ks = p - 1; ks >= k; ks--) {\n                if (ks === k) {\n                    break;\n                }\n                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n                if (Math.abs(s[ks]) <= eps * t) {\n                    s[ks] = 0;\n                    break;\n                }\n            }\n            if (ks === k) {\n                kase = 3;\n            } else if (ks === p - 1) {\n                kase = 1;\n            } else {\n                kase = 2;\n                k = ks;\n            }\n        }\n\n        k++;\n\n        switch (kase) {\n            case 1: {\n                f = e[p - 2];\n                e[p - 2] = 0;\n                for (j = p - 2; j >= k; j--) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    if (j !== k) {\n                        f = -sn * e[j - 1];\n                        e[j - 1] = cs * e[j - 1];\n                    }\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][p - 1];\n                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                            V[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 2 : {\n                f = e[k - 1];\n                e[k - 1] = 0;\n                for (j = k; j < p; j++) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    f = -sn * e[j];\n                    e[j] = cs * e[j];\n                    if (wantu) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][k - 1];\n                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 3 : {\n                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n                sp = s[p - 1] / scale;\n                spm1 = s[p - 2] / scale;\n                epm1 = e[p - 2] / scale;\n                sk = s[k] / scale;\n                ek = e[k] / scale;\n                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n                c = (sp * epm1) * (sp * epm1);\n                shift = 0;\n                if ((b !== 0) || (c !== 0)) {\n                    shift = Math.sqrt(b * b + c);\n                    if (b < 0) {\n                        shift = -shift;\n                    }\n                    shift = c / (b + shift);\n                }\n                f = (sk + sp) * (sk - sp) + shift;\n                g = sk * ek;\n                for (j = k; j < p - 1; j++) {\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    if (j !== k) {\n                        e[j - 1] = t;\n                    }\n                    f = cs * s[j] + sn * e[j];\n                    e[j] = cs * e[j] - sn * s[j];\n                    g = sn * s[j + 1];\n                    s[j + 1] = cs * s[j + 1];\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][j + 1];\n                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                            V[i][j] = t;\n                        }\n                    }\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    s[j] = t;\n                    f = cs * e[j] + sn * s[j + 1];\n                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n                    g = sn * e[j + 1];\n                    e[j + 1] = cs * e[j + 1];\n                    if (wantu && (j < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][j + 1];\n                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                e[p - 2] = f;\n                iter = iter + 1;\n                break;\n            }\n            case 4: {\n                if (s[k] <= 0) {\n                    s[k] = (s[k] < 0 ? -s[k] : 0);\n                    if (wantv) {\n                        for (i = 0; i <= pp; i++) {\n                            V[i][k] = -V[i][k];\n                        }\n                    }\n                }\n                while (k < pp) {\n                    if (s[k] >= s[k + 1]) {\n                        break;\n                    }\n                    t = s[k];\n                    s[k] = s[k + 1];\n                    s[k + 1] = t;\n                    if (wantv && (k < n - 1)) {\n                        for (i = 0; i < n; i++) {\n                            t = V[i][k + 1];\n                            V[i][k + 1] = V[i][k];\n                            V[i][k] = t;\n                        }\n                    }\n                    if (wantu && (k < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = U[i][k + 1];\n                            U[i][k + 1] = U[i][k];\n                            U[i][k] = t;\n                        }\n                    }\n                    k++;\n                }\n                iter = 0;\n                p--;\n                break;\n            }\n        }\n    }\n\n    if (swapped) {\n        var tmp = V;\n        V = U;\n        U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n}\n\nSingularValueDecomposition.prototype = {\n    get condition() {\n        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    get norm2() {\n        return this.s[0];\n    },\n    get rank() {\n        var eps = Math.pow(2, -52),\n            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n            r = 0,\n            s = this.s;\n        for (var i = 0, ii = s.length; i < ii; i++) {\n            if (s[i] > tol) {\n                r++;\n            }\n        }\n        return r;\n    },\n    get diagonal() {\n        return this.s;\n    },\n    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n    get threshold() {\n        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n    },\n    get leftSingularVectors() {\n        return this.U;\n    },\n    get rightSingularVectors() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        return Matrix.diag(this.s);\n    },\n    solve: function (value) {\n\n        var Y = value,\n            e = this.threshold,\n            scols = this.s.length,\n            Ls = Matrix.zeros(scols, scols),\n            i;\n\n        for (i = 0; i < scols; i++) {\n            if (Math.abs(this.s[i]) <= e) {\n                Ls[i][i] = 0;\n            } else {\n                Ls[i][i] = 1 / this.s[i];\n            }\n        }\n\n\n        var VL = this.V.mmul(Ls),\n            vrows = this.V.rows,\n            urows = this.U.rows,\n            VLU = Matrix.zeros(vrows, urows),\n            j, k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < scols; k++) {\n                    sum += VL[i][k] * this.U[j][k];\n                }\n                VLU[i][j] = sum;\n            }\n        }\n\n        return VLU.mmul(Y);\n    },\n    solveForDiagonal: function (value) {\n        return this.solve(Matrix.diag(value));\n    },\n    inverse: function () {\n        var e = this.threshold,\n            vrows = this.V.rows,\n            vcols = this.V.columns,\n            X = new Matrix(vrows, this.s.length),\n            i, j;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < vcols; j++) {\n                if (Math.abs(this.s[j]) > e) {\n                    X[i][j] = this.V[i][j] / this.s[j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n\n        var urows = this.U.rows,\n            ucols = this.U.columns,\n            Y = new Matrix(vrows, urows),\n            k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < ucols; k++) {\n                    sum += X[i][k] * this.U[j][k];\n                }\n                Y[i][j] = sum;\n            }\n        }\n\n        return Y;\n    }\n};\n\nmodule.exports = SingularValueDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-array-utils/~/ml-matrix/src/dc/svd.js\n ** module id = 11\n ** module chunks = 0\n **/","'use strict';\n\nexports.hypotenuse = function hypotenuse(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n        r = b / a;\n        return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n        r = a / b;\n        return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-array-utils/~/ml-matrix/src/dc/util.js\n ** module id = 12\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\nfunction EigenvalueDecomposition(matrix) {\n    if (!(this instanceof EigenvalueDecomposition)) {\n        return new EigenvalueDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n        throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns,\n        V = Matrix.zeros(n, n),\n        d = new Array(n),\n        e = new Array(n),\n        value = matrix,\n        i, j;\n\n    if (matrix.isSymmetric()) {\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                V[i][j] = value[i][j];\n            }\n        }\n        tred2(n, e, d, V);\n        tql2(n, e, d, V);\n    }\n    else {\n        var H = Matrix.zeros(n, n),\n            ort = new Array(n);\n        for (j = 0; j < n; j++) {\n            for (i = 0; i < n; i++) {\n                H[i][j] = value[i][j];\n            }\n        }\n        orthes(n, H, ort, V);\n        hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n}\n\nEigenvalueDecomposition.prototype = {\n    get realEigenvalues() {\n        return this.d;\n    },\n    get imaginaryEigenvalues() {\n        return this.e;\n    },\n    get eigenvectorMatrix() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        var n = this.n,\n            e = this.e,\n            d = this.d,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                X[i][j] = 0;\n            }\n            X[i][i] = d[i];\n            if (e[i] > 0) {\n                X[i][i + 1] = e[i];\n            }\n            else if (e[i] < 0) {\n                X[i][i - 1] = e[i];\n            }\n        }\n        return X;\n    }\n};\n\nfunction tred2(n, e, d, V) {\n\n    var f, g, h, i, j, k,\n        hh, scale;\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n    }\n\n    for (i = n - 1; i > 0; i--) {\n        scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n            scale = scale + Math.abs(d[k]);\n        }\n\n        if (scale === 0) {\n            e[i] = d[i - 1];\n            for (j = 0; j < i; j++) {\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n                V[j][i] = 0;\n            }\n        } else {\n            for (k = 0; k < i; k++) {\n                d[k] /= scale;\n                h += d[k] * d[k];\n            }\n\n            f = d[i - 1];\n            g = Math.sqrt(h);\n            if (f > 0) {\n                g = -g;\n            }\n\n            e[i] = scale * g;\n            h = h - f * g;\n            d[i - 1] = f - g;\n            for (j = 0; j < i; j++) {\n                e[j] = 0;\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                V[j][i] = f;\n                g = e[j] + V[j][j] * f;\n                for (k = j + 1; k <= i - 1; k++) {\n                    g += V[k][j] * d[k];\n                    e[k] += V[k][j] * f;\n                }\n                e[j] = g;\n            }\n\n            f = 0;\n            for (j = 0; j < i; j++) {\n                e[j] /= h;\n                f += e[j] * d[j];\n            }\n\n            hh = f / (h + h);\n            for (j = 0; j < i; j++) {\n                e[j] -= hh * d[j];\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                g = e[j];\n                for (k = j; k <= i - 1; k++) {\n                    V[k][j] -= (f * e[k] + g * d[k]);\n                }\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n            }\n        }\n        d[i] = h;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        V[n - 1][i] = V[i][i];\n        V[i][i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n            for (k = 0; k <= i; k++) {\n                d[k] = V[k][i + 1] / h;\n            }\n\n            for (j = 0; j <= i; j++) {\n                g = 0;\n                for (k = 0; k <= i; k++) {\n                    g += V[k][i + 1] * V[k][j];\n                }\n                for (k = 0; k <= i; k++) {\n                    V[k][j] -= g * d[k];\n                }\n            }\n        }\n\n        for (k = 0; k <= i; k++) {\n            V[k][i + 1] = 0;\n        }\n    }\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n        V[n - 1][j] = 0;\n    }\n\n    V[n - 1][n - 1] = 1;\n    e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n\n    var g, h, i, j, k, l, m, p, r,\n        dl1, c, c2, c3, el1, s, s2,\n        iter;\n\n    for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n    }\n\n    e[n - 1] = 0;\n\n    var f = 0,\n        tst1 = 0,\n        eps = Math.pow(2, -52);\n\n    for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        m = l;\n        while (m < n) {\n            if (Math.abs(e[m]) <= eps * tst1) {\n                break;\n            }\n            m++;\n        }\n\n        if (m > l) {\n            iter = 0;\n            do {\n                iter = iter + 1;\n\n                g = d[l];\n                p = (d[l + 1] - g) / (2 * e[l]);\n                r = hypotenuse(p, 1);\n                if (p < 0) {\n                    r = -r;\n                }\n\n                d[l] = e[l] / (p + r);\n                d[l + 1] = e[l] * (p + r);\n                dl1 = d[l + 1];\n                h = g - d[l];\n                for (i = l + 2; i < n; i++) {\n                    d[i] -= h;\n                }\n\n                f = f + h;\n\n                p = d[m];\n                c = 1;\n                c2 = c;\n                c3 = c;\n                el1 = e[l + 1];\n                s = 0;\n                s2 = 0;\n                for (i = m - 1; i >= l; i--) {\n                    c3 = c2;\n                    c2 = c;\n                    s2 = s;\n                    g = c * e[i];\n                    h = c * p;\n                    r = hypotenuse(p, e[i]);\n                    e[i + 1] = s * r;\n                    s = e[i] / r;\n                    c = p / r;\n                    p = c * d[i] - s * g;\n                    d[i + 1] = h + s * (c * g + s * d[i]);\n\n                    for (k = 0; k < n; k++) {\n                        h = V[k][i + 1];\n                        V[k][i + 1] = s * V[k][i] + c * h;\n                        V[k][i] = c * V[k][i] - s * h;\n                    }\n                }\n\n                p = -s * s2 * c3 * el1 * e[l] / dl1;\n                e[l] = s * p;\n                d[l] = c * p;\n\n            }\n            while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n            if (d[j] < p) {\n                k = j;\n                p = d[j];\n            }\n        }\n\n        if (k !== i) {\n            d[k] = d[i];\n            d[i] = p;\n            for (j = 0; j < n; j++) {\n                p = V[j][i];\n                V[j][i] = V[j][k];\n                V[j][k] = p;\n            }\n        }\n    }\n}\n\nfunction orthes(n, H, ort, V) {\n\n    var low = 0,\n        high = n - 1,\n        f, g, h, i, j, m,\n        scale;\n\n    for (m = low + 1; m <= high - 1; m++) {\n        scale = 0;\n        for (i = m; i <= high; i++) {\n            scale = scale + Math.abs(H[i][m - 1]);\n        }\n\n        if (scale !== 0) {\n            h = 0;\n            for (i = high; i >= m; i--) {\n                ort[i] = H[i][m - 1] / scale;\n                h += ort[i] * ort[i];\n            }\n\n            g = Math.sqrt(h);\n            if (ort[m] > 0) {\n                g = -g;\n            }\n\n            h = h - ort[m] * g;\n            ort[m] = ort[m] - g;\n\n            for (j = m; j < n; j++) {\n                f = 0;\n                for (i = high; i >= m; i--) {\n                    f += ort[i] * H[i][j];\n                }\n\n                f = f / h;\n                for (i = m; i <= high; i++) {\n                    H[i][j] -= f * ort[i];\n                }\n            }\n\n            for (i = 0; i <= high; i++) {\n                f = 0;\n                for (j = high; j >= m; j--) {\n                    f += ort[j] * H[i][j];\n                }\n\n                f = f / h;\n                for (j = m; j <= high; j++) {\n                    H[i][j] -= f * ort[j];\n                }\n            }\n\n            ort[m] = scale * ort[m];\n            H[m][m - 1] = scale * g;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            V[i][j] = (i === j ? 1 : 0);\n        }\n    }\n\n    for (m = high - 1; m >= low + 1; m--) {\n        if (H[m][m - 1] !== 0) {\n            for (i = m + 1; i <= high; i++) {\n                ort[i] = H[i][m - 1];\n            }\n\n            for (j = m; j <= high; j++) {\n                g = 0;\n                for (i = m; i <= high; i++) {\n                    g += ort[i] * V[i][j];\n                }\n\n                g = (g / ort[m]) / H[m][m - 1];\n                for (i = m; i <= high; i++) {\n                    V[i][j] += g * ort[i];\n                }\n            }\n        }\n    }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n    var n = nn - 1,\n        low = 0,\n        high = nn - 1,\n        eps = Math.pow(2, -52),\n        exshift = 0,\n        norm = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n        s = 0,\n        z = 0,\n        iter = 0,\n        i, j, k, l, m, t, w, x, y,\n        ra, sa, vr, vi,\n        notlast, cdivres;\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            d[i] = H[i][i];\n            e[i] = 0;\n        }\n\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n            norm = norm + Math.abs(H[i][j]);\n        }\n    }\n\n    while (n >= low) {\n        l = n;\n        while (l > low) {\n            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n            if (s === 0) {\n                s = norm;\n            }\n            if (Math.abs(H[l][l - 1]) < eps * s) {\n                break;\n            }\n            l--;\n        }\n\n        if (l === n) {\n            H[n][n] = H[n][n] + exshift;\n            d[n] = H[n][n];\n            e[n] = 0;\n            n--;\n            iter = 0;\n        } else if (l === n - 1) {\n            w = H[n][n - 1] * H[n - 1][n];\n            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n            q = p * p + w;\n            z = Math.sqrt(Math.abs(q));\n            H[n][n] = H[n][n] + exshift;\n            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n            x = H[n][n];\n\n            if (q >= 0) {\n                z = (p >= 0) ? (p + z) : (p - z);\n                d[n - 1] = x + z;\n                d[n] = d[n - 1];\n                if (z !== 0) {\n                    d[n] = x - w / z;\n                }\n                e[n - 1] = 0;\n                e[n] = 0;\n                x = H[n][n - 1];\n                s = Math.abs(x) + Math.abs(z);\n                p = x / s;\n                q = z / s;\n                r = Math.sqrt(p * p + q * q);\n                p = p / r;\n                q = q / r;\n\n                for (j = n - 1; j < nn; j++) {\n                    z = H[n - 1][j];\n                    H[n - 1][j] = q * z + p * H[n][j];\n                    H[n][j] = q * H[n][j] - p * z;\n                }\n\n                for (i = 0; i <= n; i++) {\n                    z = H[i][n - 1];\n                    H[i][n - 1] = q * z + p * H[i][n];\n                    H[i][n] = q * H[i][n] - p * z;\n                }\n\n                for (i = low; i <= high; i++) {\n                    z = V[i][n - 1];\n                    V[i][n - 1] = q * z + p * V[i][n];\n                    V[i][n] = q * V[i][n] - p * z;\n                }\n            } else {\n                d[n - 1] = x + p;\n                d[n] = x + p;\n                e[n - 1] = z;\n                e[n] = -z;\n            }\n\n            n = n - 2;\n            iter = 0;\n        } else {\n            x = H[n][n];\n            y = 0;\n            w = 0;\n            if (l < n) {\n                y = H[n - 1][n - 1];\n                w = H[n][n - 1] * H[n - 1][n];\n            }\n\n            if (iter === 10) {\n                exshift += x;\n                for (i = low; i <= n; i++) {\n                    H[i][i] -= x;\n                }\n                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n                x = y = 0.75 * s;\n                w = -0.4375 * s * s;\n            }\n\n            if (iter === 30) {\n                s = (y - x) / 2;\n                s = s * s + w;\n                if (s > 0) {\n                    s = Math.sqrt(s);\n                    if (y < x) {\n                        s = -s;\n                    }\n                    s = x - w / ((y - x) / 2 + s);\n                    for (i = low; i <= n; i++) {\n                        H[i][i] -= s;\n                    }\n                    exshift += s;\n                    x = y = w = 0.964;\n                }\n            }\n\n            iter = iter + 1;\n\n            m = n - 2;\n            while (m >= l) {\n                z = H[m][m];\n                r = x - z;\n                s = y - z;\n                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n                q = H[m + 1][m + 1] - z - r - s;\n                r = H[m + 2][m + 1];\n                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                p = p / s;\n                q = q / s;\n                r = r / s;\n                if (m === l) {\n                    break;\n                }\n                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n                    break;\n                }\n                m--;\n            }\n\n            for (i = m + 2; i <= n; i++) {\n                H[i][i - 2] = 0;\n                if (i > m + 2) {\n                    H[i][i - 3] = 0;\n                }\n            }\n\n            for (k = m; k <= n - 1; k++) {\n                notlast = (k !== n - 1);\n                if (k !== m) {\n                    p = H[k][k - 1];\n                    q = H[k + 1][k - 1];\n                    r = (notlast ? H[k + 2][k - 1] : 0);\n                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                    if (x !== 0) {\n                        p = p / x;\n                        q = q / x;\n                        r = r / x;\n                    }\n                }\n\n                if (x === 0) {\n                    break;\n                }\n\n                s = Math.sqrt(p * p + q * q + r * r);\n                if (p < 0) {\n                    s = -s;\n                }\n\n                if (s !== 0) {\n                    if (k !== m) {\n                        H[k][k - 1] = -s * x;\n                    } else if (l !== m) {\n                        H[k][k - 1] = -H[k][k - 1];\n                    }\n\n                    p = p + s;\n                    x = p / s;\n                    y = q / s;\n                    z = r / s;\n                    q = q / p;\n                    r = r / p;\n\n                    for (j = k; j < nn; j++) {\n                        p = H[k][j] + q * H[k + 1][j];\n                        if (notlast) {\n                            p = p + r * H[k + 2][j];\n                            H[k + 2][j] = H[k + 2][j] - p * z;\n                        }\n\n                        H[k][j] = H[k][j] - p * x;\n                        H[k + 1][j] = H[k + 1][j] - p * y;\n                    }\n\n                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n                        p = x * H[i][k] + y * H[i][k + 1];\n                        if (notlast) {\n                            p = p + z * H[i][k + 2];\n                            H[i][k + 2] = H[i][k + 2] - p * r;\n                        }\n\n                        H[i][k] = H[i][k] - p;\n                        H[i][k + 1] = H[i][k + 1] - p * q;\n                    }\n\n                    for (i = low; i <= high; i++) {\n                        p = x * V[i][k] + y * V[i][k + 1];\n                        if (notlast) {\n                            p = p + z * V[i][k + 2];\n                            V[i][k + 2] = V[i][k + 2] - p * r;\n                        }\n\n                        V[i][k] = V[i][k] - p;\n                        V[i][k + 1] = V[i][k + 1] - p * q;\n                    }\n                }\n            }\n        }\n    }\n\n    if (norm === 0) {\n        return;\n    }\n\n    for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n\n        if (q === 0) {\n            l = n;\n            H[n][n] = 1;\n            for (i = n - 1; i >= 0; i--) {\n                w = H[i][i] - p;\n                r = 0;\n                for (j = l; j <= n; j++) {\n                    r = r + H[i][j] * H[j][n];\n                }\n\n                if (e[i] < 0) {\n                    z = w;\n                    s = r;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                        t = (x * s - z * r) / q;\n                        H[i][n] = t;\n                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n                    }\n\n                    t = Math.abs(H[i][n]);\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        } else if (q < 0) {\n            l = n - 1;\n\n            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n                H[n - 1][n - 1] = q / H[n][n - 1];\n                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n            } else {\n                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n                H[n - 1][n - 1] = cdivres[0];\n                H[n - 1][n] = cdivres[1];\n            }\n\n            H[n][n - 1] = 0;\n            H[n][n] = 1;\n            for (i = n - 2; i >= 0; i--) {\n                ra = 0;\n                sa = 0;\n                for (j = l; j <= n; j++) {\n                    ra = ra + H[i][j] * H[j][n - 1];\n                    sa = sa + H[i][j] * H[j][n];\n                }\n\n                w = H[i][i] - p;\n\n                if (e[i] < 0) {\n                    z = w;\n                    r = ra;\n                    s = sa;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        cdivres = cdiv(-ra, -sa, w, q);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                        vi = (d[i] - p) * 2 * q;\n                        if (vr === 0 && vi === 0) {\n                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                        }\n                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n                        } else {\n                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n                            H[i + 1][n - 1] = cdivres[0];\n                            H[i + 1][n] = cdivres[1];\n                        }\n                    }\n\n                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n - 1] = H[j][n - 1] / t;\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            for (j = i; j < nn; j++) {\n                V[i][j] = H[i][j];\n            }\n        }\n    }\n\n    for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n            z = 0;\n            for (k = low; k <= Math.min(j, high); k++) {\n                z = z + V[i][k] * H[k][j];\n            }\n            V[i][j] = z;\n        }\n    }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n    var r, d;\n    if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        return [(xr + r * xi) / d, (xi - r * xr) / d];\n    }\n    else {\n        r = yr / yi;\n        d = yi + r * yr;\n        return [(r * xr + xi) / d, (r * xi - xr) / d];\n    }\n}\n\nmodule.exports = EigenvalueDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-array-utils/~/ml-matrix/src/dc/evd.js\n ** module id = 13\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\nfunction LuDecomposition(matrix) {\n    if (!(this instanceof LuDecomposition)) {\n        return new LuDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n\n    var lu = matrix.clone(),\n        rows = lu.rows,\n        columns = lu.columns,\n        pivotVector = new Array(rows),\n        pivotSign = 1,\n        i, j, k, p, s, t, v,\n        LUrowi, LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n        pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n\n        for (i = 0; i < rows; i++) {\n            LUcolj[i] = lu[i][j];\n        }\n\n        for (i = 0; i < rows; i++) {\n            LUrowi = lu[i];\n            kmax = Math.min(i, j);\n            s = 0;\n            for (k = 0; k < kmax; k++) {\n                s += LUrowi[k] * LUcolj[k];\n            }\n            LUrowi[j] = LUcolj[i] -= s;\n        }\n\n        p = j;\n        for (i = j + 1; i < rows; i++) {\n            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n                p = i;\n            }\n        }\n\n        if (p !== j) {\n            for (k = 0; k < columns; k++) {\n                t = lu[p][k];\n                lu[p][k] = lu[j][k];\n                lu[j][k] = t;\n            }\n\n            v = pivotVector[p];\n            pivotVector[p] = pivotVector[j];\n            pivotVector[j] = v;\n\n            pivotSign = -pivotSign;\n        }\n\n        if (j < rows && lu[j][j] !== 0) {\n            for (i = j + 1; i < rows; i++) {\n                lu[i][j] /= lu[j][j];\n            }\n        }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n}\n\nLuDecomposition.prototype = {\n    isSingular: function () {\n        var data = this.LU,\n            col = data.columns;\n        for (var j = 0; j < col; j++) {\n            if (data[j][j] === 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    get determinant() {\n        var data = this.LU;\n        if (!data.isSquare())\n            throw new Error('Matrix must be square');\n        var determinant = this.pivotSign, col = data.columns;\n        for (var j = 0; j < col; j++)\n            determinant *= data[j][j];\n        return determinant;\n    },\n    get lowerTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i > j) {\n                    X[i][j] = data[i][j];\n                } else if (i === j) {\n                    X[i][j] = 1;\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get upperTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i <= j) {\n                    X[i][j] = data[i][j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get pivotPermutationVector() {\n        return this.pivotVector.slice();\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var lu = this.LU,\n            rows = lu.rows;\n\n        if (rows !== value.rows)\n            throw new Error('Invalid matrix dimensions');\n        if (this.isSingular())\n            throw new Error('LU matrix is singular');\n\n        var count = value.columns,\n            X = value.subMatrixRow(this.pivotVector, 0, count - 1),\n            columns = lu.columns,\n            i, j, k;\n\n        for (k = 0; k < columns; k++) {\n            for (i = k + 1; i < columns; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        for (k = columns - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= lu[k][k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = LuDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-array-utils/~/ml-matrix/src/dc/lu.js\n ** module id = 14\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\nfunction QrDecomposition(value) {\n    if (!(this instanceof QrDecomposition)) {\n        return new QrDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n\n    var qr = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        rdiag = new Array(n),\n        i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) {\n            nrm = hypotenuse(nrm, qr[i][k]);\n        }\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) {\n                nrm = -nrm;\n            }\n            for (i = k; i < m; i++) {\n                qr[i][k] /= nrm;\n            }\n            qr[k][k] += 1;\n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * qr[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    qr[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n}\n\nQrDecomposition.prototype = {\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var qr = this.QR,\n            m = qr.rows;\n\n        if (value.rows !== m)\n            throw new Error('Matrix row dimensions must agree');\n        if (!this.isFullRank())\n            throw new Error('Matrix is rank deficient');\n\n        var count = value.columns,\n            X = value.clone(),\n            n = qr.columns,\n            i, j, k, s;\n\n        for (k = 0; k < n; k++) {\n            for (j = 0; j < count; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * X[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    X[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        for (k = n - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= this.Rdiag[k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * qr[i][k];\n                }\n            }\n        }\n\n        return X.subMatrix(0, n - 1, 0, count - 1);\n    },\n    isFullRank: function () {\n        var columns = this.QR.columns;\n        for (var i = 0; i < columns; i++) {\n            if (this.Rdiag[i] === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n    get upperTriangularFactor() {\n        var qr = this.QR,\n            n = qr.columns,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                if (i < j) {\n                    X[i][j] = qr[i][j];\n                } else if (i === j) {\n                    X[i][j] = this.Rdiag[i];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get orthogonalFactor() {\n        var qr = this.QR,\n            rows = qr.rows,\n            columns = qr.columns,\n            X = new Matrix(rows, columns),\n            i, j, k, s;\n\n        for (k = columns - 1; k >= 0; k--) {\n            for (i = 0; i < rows; i++) {\n                X[i][k] = 0;\n            }\n            X[k][k] = 1;\n            for (j = k; j < columns; j++) {\n                if (qr[k][k] !== 0) {\n                    s = 0;\n                    for (i = k; i < rows; i++) {\n                        s += qr[i][k] * X[i][j];\n                    }\n\n                    s = -s / qr[k][k];\n\n                    for (i = k; i < rows; i++) {\n                        X[i][j] += s * qr[i][k];\n                    }\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = QrDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-array-utils/~/ml-matrix/src/dc/qr.js\n ** module id = 15\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\nfunction CholeskyDecomposition(value) {\n    if (!(this instanceof CholeskyDecomposition)) {\n        return new CholeskyDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n    if (!value.isSymmetric())\n        throw new Error('Matrix is not symmetric');\n\n    var a = value,\n        dimension = a.rows,\n        l = new Matrix(dimension, dimension),\n        positiveDefinite = true,\n        i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n        var Lrowj = l[j];\n        var d = 0;\n        for (k = 0; k < j; k++) {\n            var Lrowk = l[k];\n            var s = 0;\n            for (i = 0; i < k; i++) {\n                s += Lrowk[i] * Lrowj[i];\n            }\n            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n            d = d + s * s;\n        }\n\n        d = a[j][j] - d;\n\n        positiveDefinite &= (d > 0);\n        l[j][j] = Math.sqrt(Math.max(d, 0));\n        for (k = j + 1; k < dimension; k++) {\n            l[j][k] = 0;\n        }\n    }\n\n    if (!positiveDefinite) {\n        throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n}\n\nCholeskyDecomposition.prototype = {\n    get leftTriangularFactor() {\n        return this.L;\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var l = this.L,\n            dimension = l.rows;\n\n        if (value.rows !== dimension) {\n            throw new Error('Matrix dimensions do not match');\n        }\n\n        var count = value.columns,\n            B = value.clone(),\n            i, j, k;\n\n        for (k = 0; k < dimension; k++) {\n            for (j = 0; j < count; j++) {\n                for (i = 0; i < k; i++) {\n                    B[k][j] -= B[i][j] * l[k][i];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        for (k = dimension - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                for (i = k + 1; i < dimension; i++) {\n                    B[k][j] -= B[i][j] * l[i][k];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        return B;\n    }\n};\n\nmodule.exports = CholeskyDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-array-utils/~/ml-matrix/src/dc/cholesky.js\n ** module id = 16\n ** module chunks = 0\n **/","'use strict';\n\nvar eightBits = require('./creator');\n\n/**\n * Count the number of true values in an array\n * @param {Array} arr\n * @return {number}\n */\nfunction count(arr) {\n    var c = 0;\n    for (var i = 0; i < arr.length; i++) {\n        c += eightBits[arr[i] & 0xff] + eightBits[(arr[i] >> 8) & 0xff] + eightBits[(arr[i] >> 16) & 0xff] + eightBits[(arr[i] >> 24) & 0xff];\n    }\n    return c;\n}\n\n/**\n * Logical AND operation\n * @param {Array} arr1\n * @param {Array} arr2\n * @return {Array}\n */\nfunction and(arr1, arr2) {\n    var ans = new Array(arr1.length);\n    for (var i = 0; i < arr1.length; i++)\n        ans[i] = arr1[i] & arr2[i];\n    return ans;\n}\n\n/**\n * Logical OR operation\n * @param {Array} arr1\n * @param {Array} arr2\n * @return {Array}\n */\nfunction or(arr1, arr2) {\n    var ans = new Array(arr1.length);\n    for (var i = 0; i < arr1.length; i++)\n        ans[i] = arr1[i] | arr2[i];\n    return ans;\n}\n\n/**\n * Logical XOR operation\n * @param {Array} arr1\n * @param {Array} arr2\n * @return {Array}\n */\nfunction xor(arr1, arr2) {\n    var ans = new Array(arr1.length);\n    for (var i = 0; i < arr1.length; i++)\n        ans[i] = arr1[i] ^ arr2[i];\n    return ans;\n}\n\n/**\n * Logical NOT operation\n * @param {Array} arr\n * @return {Array}\n */\nfunction not(arr) {\n    var ans = new Array(arr.length);\n    for (var i = 0; i < ans.length; i++)\n        ans[i] = ~arr[i];\n    return ans;\n}\n\n/**\n * Gets the n value of array arr\n * @param {Array} arr\n * @param {number} n\n * @return {boolean}\n */\nfunction getBit(arr, n) {\n    var index = n >> 5; // Same as Math.floor(n/32)\n    var mask = 1 << (31 - n % 32);\n    return Boolean(arr[index] & mask);\n}\n\n/**\n * Sets the n value of array arr to the value val\n * @param {Array} arr\n * @param {number} n\n * @param {boolean} val\n * @return {Array}\n */\nfunction setBit(arr, n, val) {\n    var index = n >> 5; // Same as Math.floor(n/32)\n    var mask = 1 << (31 - n % 32);\n    if (val)\n        arr[index] = mask | arr[index];\n    else\n        arr[index] = ~mask & arr[index];\n    return arr;\n}\n\n/**\n * Translates an array of numbers to a string of bits\n * @param {Array} arr\n * @returns {string}\n */\nfunction toBinaryString(arr) {\n    var str = '';\n    for (var i = 0; i < arr.length; i++) {\n        var obj = (arr[i] >>> 0).toString(2);\n        str += '00000000000000000000000000000000'.substr(obj.length) + obj;\n    }\n    return str;\n}\n\n/**\n * Creates an array of numbers based on a string of bits\n * @param {string} str\n * @returns {Array}\n */\nfunction parseBinaryString(str) {\n    var len = str.length / 32;\n    var ans = new Array(len);\n    for (var i = 0; i < len; i++) {\n        ans[i] = parseInt(str.substr(i*32, 32), 2) | 0;\n    }\n    return ans;\n}\n\n/**\n * Translates an array of numbers to a hex string\n * @param {Array} arr\n * @returns {string}\n */\nfunction toHexString(arr) {\n    var str = '';\n    for (var i = 0; i < arr.length; i++) {\n        var obj = (arr[i] >>> 0).toString(16);\n        str += '00000000'.substr(obj.length) + obj;\n    }\n    return str;\n}\n\n/**\n * Creates an array of numbers based on a hex string\n * @param {string} str\n * @returns {Array}\n */\nfunction parseHexString(str) {\n    var len = str.length / 8;\n    var ans = new Array(len);\n    for (var i = 0; i < len; i++) {\n        ans[i] = parseInt(str.substr(i*8, 8), 16) | 0;\n    }\n    return ans;\n}\n\n/**\n * Creates a human readable string of the array\n * @param {Array} arr\n * @returns {string}\n */\nfunction toDebug(arr) {\n    var binary = toBinaryString(arr);\n    var str = '';\n    for (var i = 0; i < arr.length; i++) {\n        str += '0000'.substr((i * 32).toString(16).length) + (i * 32).toString(16) + ':';\n        for (var j = 0; j < 32; j += 4) {\n            str += ' ' + binary.substr(i * 32 + j, 4);\n        }\n        if (i < arr.length - 1) str += '\\n';\n    }\n    return str\n}\n\nmodule.exports = {\n    count: count,\n    and: and,\n    or: or,\n    xor: xor,\n    not: not,\n    getBit: getBit,\n    setBit: setBit,\n    toBinaryString: toBinaryString,\n    parseBinaryString: parseBinaryString,\n    toHexString: toHexString,\n    parseHexString: parseHexString,\n    toDebug: toDebug\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-bit-array/src/index.js\n ** module id = 17\n ** module chunks = 0\n **/","// auxiliary file to create the 256 look at table elements\n\nvar ans = new Array(256);\nfor (var i = 0; i < 256; i++) {\n    var num = i;\n    var c = 0;\n    while (num) {\n        num = num & (num - 1);\n        c++;\n    }\n    ans[i] = c;\n}\n\nmodule.exports = ans;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-bit-array/src/creator.js\n ** module id = 18\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./matrix');\nmodule.exports.Decompositions = module.exports.DC = require('./decompositions');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/index.js\n ** module id = 19\n ** module chunks = 0\n **/","'use strict';\n\nvar Asplice = Array.prototype.splice,\n    Aconcat = Array.prototype.concat;\n\n// For performance : http://jsperf.com/clone-array-slice-vs-while-vs-for\nfunction slice(arr) {\n    var i = 0,\n        ii = arr.length,\n        result = new Array(ii);\n    for (; i < ii; i++) {\n        result[i] = arr[i];\n    }\n    return result;\n}\n\n/**\n * Real matrix.\n * @constructor\n * @param {number|Array} nRows - Number of rows of the new matrix or a 2D array containing the data.\n * @param {number|boolean} [nColumns] - Number of columns of the new matrix or a boolean specifying if the input array should be cloned\n */\nfunction Matrix(nRows, nColumns) {\n    var i = 0, rows, columns, matrix, newInstance;\n    if (Array.isArray(nRows)) {\n        newInstance = nColumns;\n        matrix = newInstance ? slice(nRows) : nRows;\n        nRows = matrix.length;\n        nColumns = matrix[0].length;\n        if (typeof nColumns === 'undefined') {\n            throw new TypeError('Data must be a 2D array');\n        }\n        if (nRows > 0 && nColumns > 0) {\n            for (; i < nRows; i++) {\n                if (matrix[i].length !== nColumns) {\n                    throw new RangeError('Inconsistent array dimensions');\n                } else if (newInstance) {\n                    matrix[i] = slice(matrix[i]);\n                }\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else if (typeof nRows === 'number') { // Create empty matrix\n        if (nRows > 0 && nColumns > 0) {\n            matrix = new Array(nRows);\n            for (; i < nRows; i++) {\n                matrix[i] = new Array(nColumns);\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else {\n        throw new TypeError('Invalid arguments');\n    }\n\n    Object.defineProperty(matrix, 'rows', {writable: true, value: nRows});\n    Object.defineProperty(matrix, 'columns', {writable: true, value: nColumns});\n\n    matrix.__proto__ = Matrix.prototype;\n\n    return matrix;\n}\n\n/**\n * Constructs a Matrix with the chosen dimensions from a 1D array.\n * @param {number} newRows - Number of rows\n * @param {number} newColumns - Number of columns\n * @param {Array} newData - A 1D array containing data for the matrix\n * @returns {Matrix} - The new matrix\n */\nMatrix.from1DArray = function from1DArray(newRows, newColumns, newData) {\n    var length, data, i = 0;\n\n    length = newRows * newColumns;\n    if (length !== newData.length)\n        throw new RangeError('Data length does not match given dimensions');\n\n    data = new Array(newRows);\n    for (; i < newRows; i++) {\n        data[i] = newData.slice(i * newColumns, (i + 1) * newColumns);\n    }\n    return new Matrix(data);\n};\n\n/**\n * Creates a row vector, a matrix with only one row.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.rowVector = function rowVector(newData) {\n    return new Matrix([newData]);\n};\n\n/**\n * Creates a column vector, a matrix with only one column.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.columnVector = function columnVector(newData) {\n    var l = newData.length, vector = new Array(l);\n    for (var i = 0; i < l; i++)\n        vector[i] = [newData[i]];\n    return new Matrix(vector);\n};\n\n/**\n * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.empty = function empty(rows, columns) {\n    return new Matrix(rows, columns);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to zero.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.zeros = function zeros(rows, columns) {\n    return Matrix.empty(rows, columns).fill(0);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to one.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.ones = function ones(rows, columns) {\n    return Matrix.empty(rows, columns).fill(1);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be randomly set using Math.random().\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} The new matrix\n */\nMatrix.rand = function rand(rows, columns) {\n    var matrix = Matrix.empty(rows, columns);\n    for (var i = 0, ii = matrix.rows; i < ii; i++) {\n        for (var j = 0, jj = matrix.columns; j < jj; j++) {\n            matrix[i][j] = Math.random();\n        }\n    }\n    return matrix;\n};\n\n/**\n * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and other will be 0.\n * @param {number} n - Number of rows and columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.eye = function eye(n) {\n    var matrix = Matrix.zeros(n, n), l = matrix.rows;\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = 1;\n    }\n    return matrix;\n};\n\n/**\n * Creates a diagonal matrix based on the given array.\n * @param {Array} data - Array containing the data for the diagonal\n * @returns {Matrix} - The new matrix\n */\nMatrix.diag = function diag(data) {\n    var l = data.length, matrix = Matrix.zeros(l, l);\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = data[i];\n    }\n    return matrix;\n};\n\n/**\n * Creates an array of indices between two values\n * @param {number} from\n * @param {number} to\n * @returns {Array}\n */\nMatrix.indices = function indices(from, to) {\n    var vector = new Array(to - from);\n    for (var i = 0; i < vector.length; i++)\n        vector[i] = from++;\n    return vector;\n};\n\n// TODO DOC\nMatrix.stack = function stack(arg1) {\n    var i, j, k;\n    if (Matrix.isMatrix(arg1)) {\n        var rows = 0,\n            cols = 0;\n        for (i = 0; i < arguments.length; i++) {\n            rows += arguments[i].rows;\n            if (arguments[i].columns > cols)\n                cols = arguments[i].columns;\n        }\n\n        var r = Matrix.zeros(rows, cols);\n        var c = 0;\n        for (i = 0; i < arguments.length; i++) {\n            var current = arguments[i];\n            for (j = 0; j < current.rows; j++) {\n                for (k = 0; k < current.columns; k++)\n                    r[c][k] = current[j][k];\n                c++;\n            }\n        }\n        return r;\n    }\n    else if (Array.isArray(arg1)) {\n        var matrix = Matrix.empty(arguments.length, arg1.length);\n        for (i = 0; i < arguments.length; i++)\n            matrix.setRow(i, arguments[i]);\n        return matrix;\n    }\n};\n\n// TODO DOC\nMatrix.expand = function expand(base, count) {\n    var expansion = [];\n    for (var i = 0; i < count.length; i++)\n        for (var j = 0; j < count[i]; j++)\n            expansion.push(base[i]);\n    return new Matrix(expansion);\n};\n\n/**\n * Check that the provided value is a Matrix and tries to instantiate one if not\n * @param value - The value to check\n * @returns {Matrix}\n * @throws {TypeError}\n */\nMatrix.checkMatrix = function checkMatrix(value) {\n    if (!value) {\n        throw new TypeError('Argument has to be a matrix');\n    }\n    if (value.klass !== 'Matrix') {\n        value = new Matrix(value);\n    }\n    return value;\n};\n\n/**\n * Returns true if the argument is a Matrix, false otherwise\n * @param value - The value to check\n * @returns {boolean}\n */\nMatrix.isMatrix = function isMatrix(value) {\n    return value ? value.klass === 'Matrix' : false;\n};\n\n/**\n * @property {string} - The name of this class.\n */\nObject.defineProperty(Matrix.prototype, 'klass', {\n    get: function klass() {\n        return 'Matrix';\n    }\n});\n\n/**\n * @property {number} - The number of elements in the matrix.\n */\nObject.defineProperty(Matrix.prototype, 'size', {\n    get: function size() {\n        return this.rows * this.columns;\n    }\n});\n\n/**\n * @private\n * Internal check that a row index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkRowIndex = function checkRowIndex(index) {\n    if (index < 0 || index > this.rows - 1)\n        throw new RangeError('Row index out of range.');\n};\n\n/**\n * @private\n * Internal check that a column index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkColumnIndex = function checkColumnIndex(index) {\n    if (index < 0 || index > this.columns - 1)\n        throw new RangeError('Column index out of range.');\n};\n\n/**\n * @private\n * Internal check that two matrices have the same dimensions\n * @param {Matrix} otherMatrix\n */\nMatrix.prototype.checkDimensions = function checkDimensions(otherMatrix) {\n    if ((this.rows !== otherMatrix.rows) || (this.columns !== otherMatrix.columns))\n        throw new RangeError('Matrices dimensions must be equal.');\n};\n\n/**\n * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n * @returns {Matrix} this\n */\nMatrix.prototype.apply = function apply(callback) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            callback.call(this, i, j);\n        }\n    }\n    return this;\n};\n\n/**\n * Creates an exact and independent copy of the matrix\n * @returns {Matrix}\n */\nMatrix.prototype.clone = function clone() {\n    return new Matrix(this.to2DArray());\n};\n\n/**\n * Returns a new 1D array filled row by row with the matrix values\n * @returns {Array}\n */\nMatrix.prototype.to1DArray = function to1DArray() {\n    return Aconcat.apply([], this);\n};\n\n/**\n * Returns a 2D array containing a copy of the data\n * @returns {Array}\n */\nMatrix.prototype.to2DArray = function to2DArray() {\n    var l = this.rows, copy = new Array(l);\n    for (var i = 0; i < l; i++) {\n        copy[i] = slice(this[i]);\n    }\n    return copy;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row\n */\nMatrix.prototype.isRowVector = function isRowVector() {\n    return this.rows === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one column\n */\nMatrix.prototype.isColumnVector = function isColumnVector() {\n    return this.columns === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row or one column\n */\nMatrix.prototype.isVector = function isVector() {\n    return (this.rows === 1) || (this.columns === 1);\n};\n\n/**\n * @returns {boolean} true if the matrix has the same number of rows and columns\n */\nMatrix.prototype.isSquare = function isSquare() {\n    return this.rows === this.columns;\n};\n\n/**\n * @returns {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n */\nMatrix.prototype.isSymmetric = function isSymmetric() {\n    if (this.isSquare()) {\n        var l = this.rows;\n        for (var i = 0; i < l; i++) {\n            for (var j = 0; j <= i; j++) {\n                if (this[i][j] !== this[j][i]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    return false;\n};\n\n/**\n * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @param {number} value - The new value for the element\n * @returns {Matrix} this\n */\nMatrix.prototype.set = function set(rowIndex, columnIndex, value) {\n    this[rowIndex][columnIndex] = value;\n    return this;\n};\n\n/**\n * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @returns {number}\n */\nMatrix.prototype.get = function get(rowIndex, columnIndex) {\n    return this[rowIndex][columnIndex];\n};\n\n/**\n * Fills the matrix with a given value. All elements will be set to this value.\n * @param {number} value - New value\n * @returns {Matrix} this\n */\nMatrix.prototype.fill = function fill(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = value;\n        }\n    }\n    return this;\n};\n\n/**\n * Negates the matrix. All elements will be multiplied by (-1)\n * @returns {Matrix} this\n */\nMatrix.prototype.neg = function neg() {\n    return this.mulS(-1);\n};\n\n/**\n * Adds a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number')\n        return this.addS(value);\n    value = Matrix.checkMatrix(value);\n        return this.addM(value);\n};\n\n/**\n * Adds a scalar to each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.addS = function addS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += value;\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the value of each element of matrix to the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.addM = function addM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number')\n        return this.subS(value);\n    value = Matrix.checkMatrix(value);\n        return this.subM(value);\n};\n\n/**\n * Subtracts a scalar from each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.subS = function subS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the value of each element of matrix from the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.subM = function subM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number')\n        return this.mulS(value);\n    value = Matrix.checkMatrix(value);\n        return this.mulM(value);\n};\n\n/**\n * Multiplies a scalar with each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulS = function mulS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the value of each element of matrix with the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.mulM = function mulM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides by a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number')\n        return this.divS(value);\n    value = Matrix.checkMatrix(value);\n        return this.divM(value);\n};\n\n/**\n * Divides each element of the matrix by a scalar\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.divS = function divS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Divides each element of this by the corresponding element of matrix\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.divM = function divM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Returns a new array from the given row index\n * @param {number} index - Row index\n * @returns {Array}\n */\nMatrix.prototype.getRow = function getRow(index) {\n    this.checkRowIndex(index);\n    return slice(this[index]);\n};\n\n/**\n * Returns a new row vector from the given row index\n * @param {number} index - Row index\n * @returns {Matrix}\n */\nMatrix.prototype.getRowVector = function getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n};\n\n/**\n * Sets a row at the given index\n * @param {number} index - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setRow = function setRow(index, array) {\n    this.checkRowIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    this[index] = slice(array);\n    return this;\n};\n\n/**\n * Removes a row from the given index\n * @param {number} index - Row index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeRow = function removeRow(index) {\n    this.checkRowIndex(index);\n    if (this.rows === 1)\n        throw new RangeError('A matrix cannot have less than one row');\n    Asplice.call(this, index, 1);\n    this.rows -= 1;\n    return this;\n};\n\n/**\n * Adds a row at the given index\n * @param {number} [index = this.rows] - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRow = function addRow(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.rows;\n    }\n    if (index < 0 || index > this.rows)\n        throw new RangeError('Row index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    Asplice.call(this, index, 0, slice(array));\n    this.rows += 1;\n    return this;\n};\n\n/**\n * Swaps two rows\n * @param {number} row1 - First row index\n * @param {number} row2 - Second row index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapRows = function swapRows(row1, row2) {\n    this.checkRowIndex(row1);\n    this.checkRowIndex(row2);\n    var temp = this[row1];\n    this[row1] = this[row2];\n    this[row2] = temp;\n    return this;\n};\n\n/**\n * Returns a new array from the given column index\n * @param {number} index - Column index\n * @returns {Array}\n */\nMatrix.prototype.getColumn = function getColumn(index) {\n    this.checkColumnIndex(index);\n    var l = this.rows, column = new Array(l);\n    for (var i = 0; i < l; i++) {\n        column[i] = this[i][index];\n    }\n    return column;\n};\n\n/**\n * Returns a new column vector from the given column index\n * @param {number} index - Column index\n * @returns {Matrix}\n */\nMatrix.prototype.getColumnVector = function getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n};\n\n/**\n * Sets a column at the given index\n * @param {number} index - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setColumn = function setColumn(index, array) {\n    this.checkColumnIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i][index] = array[i];\n    }\n    return this;\n};\n\n/**\n * Removes a column from the given index\n * @param {number} index - Column index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeColumn = function removeColumn(index) {\n    this.checkColumnIndex(index);\n    if (this.columns === 1)\n        throw new RangeError('A matrix cannot have less than one column');\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].splice(index, 1);\n    }\n    this.columns -= 1;\n    return this;\n};\n\n/**\n * Adds a column at the given index\n * @param {number} [index = this.columns] - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumn = function addColumn(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.columns;\n    }\n    if (index < 0 || index > this.columns)\n        throw new RangeError('Column index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i].splice(index, 0, array[i]);\n    }\n    this.columns += 1;\n    return this;\n};\n\n/**\n * Swaps two columns\n * @param {number} column1 - First column index\n * @param {number} column2 - Second column index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapColumns = function swapColumns(column1, column2) {\n    this.checkRowIndex(column1);\n    this.checkRowIndex(column2);\n    var l = this.rows, temp, row;\n    for (var i = 0; i < l; i++) {\n        row = this[i];\n        temp = row[column1];\n        row[column1] = row[column2];\n        row[column2] = temp;\n    }\n    return this;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkRowVector = function checkRowVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.columns)\n        throw new RangeError('vector size must be the same as the number of columns');\n    return vector;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkColumnVector = function checkColumnVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.rows)\n        throw new RangeError('vector size must be the same as the number of rows');\n    return vector;\n};\n\n/**\n * Adds the values of a vector to each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRowVector = function addRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subRowVector = function subRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRowVector = function mulRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each row by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divRowVector = function divRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the values of a vector to each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumnVector = function addColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subColumnVector = function subColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumnVector = function mulColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each column by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divColumnVector = function divColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a row with a scalar\n * @param {number} index - Row index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRow = function mulRow(index, value) {\n    this.checkRowIndex(index);\n    var i = 0, l = this.columns;\n    for (; i < l; i++) {\n        this[index][i] *= value;\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a column with a scalar\n * @param {number} index - Column index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumn = function mulColumn(index, value) {\n    this.checkColumnIndex(index);\n    var i = 0, l = this.rows;\n    for (; i < l; i++) {\n        this[i][index] *= value;\n    }\n};\n\n/**\n * A matrix index\n * @typedef {Object} MatrixIndex\n * @property {number} row\n * @property {number} column\n */\n\n/**\n * Returns the maximum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.max = function max() {\n    var v = -Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxIndex = function maxIndex() {\n    var v = -Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.min = function min() {\n    var v = Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minIndex = function minIndex() {\n    var v = Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.maxRow = function maxRow(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxRowIndex = function maxRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    var idx = {\n            row: index\n        };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.minRow = function minRow(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minRowIndex = function minRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: index,\n        column: 0\n    };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.maxColumn = function maxColumn(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxColumnIndex = function maxColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.minColumn = function minColumn(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minColumnIndex = function minColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns an array containing the diagonal values of the matrix\n * @returns {Array}\n */\nMatrix.prototype.diag = function diag() {\n    if (!this.isSquare())\n        throw new TypeError('Only square matrices have a diagonal.');\n    var diag = new Array(this.rows);\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        diag[i] = this[i][i];\n    }\n    return diag;\n};\n\n/**\n * Returns the sum of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.sum = function sum() {\n    var v = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            v += this[i][j];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the mean of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.mean = function mean() {\n    return this.sum() / this.size;\n};\n\n/**\n * Returns the product of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.prod = function prod() {\n    var prod = 1;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            prod *= this[i][j];\n        }\n    }\n    return prod;\n};\n\n/**\n * Computes the cumulative sum of the matrix elements (in place, row by row)\n * @returns {Matrix} this\n */\nMatrix.prototype.cumulativeSum = function cumulativeSum() {\n    var sum = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            sum += this[i][j];\n            this[i][j] = sum;\n        }\n    }\n    return this;\n};\n\n/**\n * Computes the dot (scalar) product between the matrix and another\n * @param {Matrix} other vector\n * @returns {number}\n */\nMatrix.prototype.dot = function dot(other) {\n    if (this.size !== other.size)\n        throw new RangeError('vectors do not have the same size');\n    var vector1 = this.to1DArray();\n    var vector2 = other.to1DArray();\n    var dot = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        dot += vector1[i] * vector2[i];\n    }\n    return dot;\n};\n\n/**\n * Returns the matrix product between this and other\n * @returns {Matrix}\n */\nMatrix.prototype.mmul = function mmul(other) {\n    if (!Matrix.isMatrix(other))\n        throw new TypeError('parameter \"other\" must be a matrix');\n    if (this.columns !== other.rows)\n        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n\n    var m = this.rows, n = this.columns, p = other.columns;\n    var result = new Matrix(m, p);\n\n    var Bcolj = new Array(n);\n    var i, j, k;\n    for (j = 0; j < p; j++) {\n        for (k = 0; k < n; k++)\n            Bcolj[k] = other[k][j];\n\n        for (i = 0; i < m; i++) {\n            var Arowi = this[i];\n\n            var s = 0;\n            for (k = 0; k < n; k++)\n                s += Arowi[k] * Bcolj[k];\n\n            result[i][j] = s;\n        }\n    }\n    return result;\n};\n\n/**\n * Sorts the rows (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortRows = function sortRows(compareFunction) {\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].sort(compareFunction);\n    }\n    return this;\n};\n\n/**\n * Sorts the columns (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortColumns = function sortColumns(compareFunction) {\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n};\n\n/**\n * Transposes the matrix and returns a new one containing the result\n * @returns {Matrix}\n */\nMatrix.prototype.transpose = function transpose() {\n    var result = new Matrix(this.columns, this.rows);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[j][i] = this[i][j];\n        }\n    }\n    return result;\n};\n\n/**\n * Returns a subset of the matrix\n * @param {number} startRow - First row index\n * @param {number} endRow - Last row index\n * @param {number} startColumn - First column index\n * @param {number} endColumn - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrix = function subMatrix(startRow, endRow, startColumn, endColumn) {\n    if ((startRow > endRow) || (startColumn > endColumn) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range');\n    var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n    for (var i = startRow; i <= endRow; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            newMatrix[i - startRow][j - startColumn] = this[i][j];\n        }\n    }\n    return newMatrix;\n};\n\n/**\n * Returns a subset of the matrix based on an array of row indices\n * @param {Array} indices - Array containing the row indices\n * @param {number} [startColumn = 0] - First column index\n * @param {number} [endColumn = this.columns-1] - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixRow = function subMatrixRow(indices, startColumn, endColumn) {\n    if (typeof startColumn === 'undefined') {\n        startColumn = 0;\n        endColumn = this.columns - 1;\n    } else if (typeof endColumn === 'undefined') {\n        endColumn = this.columns - 1;\n    }\n    if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, rows = this.rows,\n        X = new Matrix(l, endColumn - startColumn + 1);\n    for (var i = 0; i < l; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            if ((indices[i] < 0) || (indices[i] >= rows))\n                throw new RangeError('Argument out of range.');\n            X[i][j - startColumn] = this[indices[i]][j];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns a subset of the matrix based on an array of column indices\n * @param {Array} indices - Array containing the column indices\n * @param {number} [startRow = 0] - First row index\n * @param {number} [endRow = this.rows-1] - Last row index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixColumn = function subMatrixColumn(indices, startRow, endRow) {\n    if (typeof startRow === 'undefined') {\n        startRow = 0;\n        endRow = this.rows - 1;\n    } else if (typeof endRow === 'undefined') {\n        endRow = this.rows - 1;\n    }\n    if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, columns = this.columns,\n        X = new Matrix(endRow - startRow + 1, l);\n    for (var i = 0; i < l; i++) {\n        for (var j = startRow; j <= endRow; j++) {\n            if ((indices[i] < 0) || (indices[i] >= columns))\n                throw new RangeError('Argument out of range.');\n            X[j - startRow][i] = this[j][indices[i]];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns the trace of the matrix (sum of the diagonal elements)\n * @returns {number}\n */\nMatrix.prototype.trace = function trace() {\n    if (!this.isSquare())\n        throw new TypeError('The matrix is not square');\n    var trace = 0, i = 0, l = this.rows;\n    for (; i < l; i++) {\n        trace += this[i][i];\n    }\n    return trace;\n};\n\n/**\n * Sets each element of the matrix to its absolute value\n * @returns {Matrix} this\n */\nMatrix.prototype.abs = function abs() {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = Math.abs(this[i][j]);\n        }\n    }\n};\n\nmodule.exports = Matrix;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/matrix.js\n ** module id = 20\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('./matrix');\n\nvar SingularValueDecomposition = require('./dc/svd');\nvar EigenvalueDecomposition = require('./dc/evd');\nvar LuDecomposition = require('./dc/lu');\nvar QrDecomposition = require('./dc/qr');\nvar CholeskyDecomposition = require('./dc/cholesky');\n\nfunction inverse(matrix) {\n    return solve(matrix, Matrix.eye(matrix.rows));\n}\n\nMatrix.prototype.inverse = function () {\n    return inverse(this);\n};\n\nfunction solve(leftHandSide, rightHandSide) {\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n}\n\nMatrix.prototype.solve = function (other) {\n    return solve(this, other);\n};\n\nmodule.exports = {\n    SingularValueDecomposition: SingularValueDecomposition,\n    SVD: SingularValueDecomposition,\n    EigenvalueDecomposition: EigenvalueDecomposition,\n    EVD: EigenvalueDecomposition,\n    LuDecomposition: LuDecomposition,\n    LU: LuDecomposition,\n    QrDecomposition: QrDecomposition,\n    QR: QrDecomposition,\n    CholeskyDecomposition: CholeskyDecomposition,\n    CHO: CholeskyDecomposition,\n    inverse: inverse,\n    solve: solve\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/decompositions.js\n ** module id = 21\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\nfunction SingularValueDecomposition(value, options) {\n    if (!(this instanceof SingularValueDecomposition)) {\n        return new SingularValueDecomposition(value, options);\n    }\n    value = Matrix.checkMatrix(value);\n\n    options = options || {};\n\n    var a = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        nu = Math.min(m, n);\n\n    var wantu = true, wantv = true;\n    if (options.computeLeftSingularVectors === false)\n        wantu = false;\n    if (options.computeRightSingularVectors === false)\n        wantv = false;\n    var autoTranspose = options.autoTranspose === true;\n\n    var swapped = false;\n    if (m < n) {\n        if (!autoTranspose) {\n            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n        } else {\n            a = a.transpose();\n            m = a.rows;\n            n = a.columns;\n            swapped = true;\n            var aux = wantu;\n            wantu = wantv;\n            wantv = aux;\n        }\n    }\n\n    var s = new Array(Math.min(m + 1, n)),\n        U = Matrix.zeros(m, nu),\n        V = Matrix.zeros(n, n),\n        e = new Array(n),\n        work = new Array(m);\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n\n    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\n    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n        if (k < nct) {\n            s[k] = 0;\n            for (i = k; i < m; i++) {\n                s[k] = hypotenuse(s[k], a[i][k]);\n            }\n            if (s[k] !== 0) {\n                if (a[k][k] < 0) {\n                    s[k] = -s[k];\n                }\n                for (i = k; i < m; i++) {\n                    a[i][k] /= s[k];\n                }\n                a[k][k] += 1;\n            }\n            s[k] = -s[k];\n        }\n\n        for (j = k + 1; j < n; j++) {\n            if ((k < nct) && (s[k] !== 0)) {\n                t = 0;\n                for (i = k; i < m; i++) {\n                    t += a[i][k] * a[i][j];\n                }\n                t = -t / a[k][k];\n                for (i = k; i < m; i++) {\n                    a[i][j] += t * a[i][k];\n                }\n            }\n            e[j] = a[k][j];\n        }\n\n        if (wantu && (k < nct)) {\n            for (i = k; i < m; i++) {\n                U[i][k] = a[i][k];\n            }\n        }\n\n        if (k < nrt) {\n            e[k] = 0;\n            for (i = k + 1; i < n; i++) {\n                e[k] = hypotenuse(e[k], e[i]);\n            }\n            if (e[k] !== 0) {\n                if (e[k + 1] < 0)\n                    e[k] = -e[k];\n                for (i = k + 1; i < n; i++) {\n                    e[i] /= e[k];\n                }\n                e[k + 1] += 1;\n            }\n            e[k] = -e[k];\n            if ((k + 1 < m) && (e[k] !== 0)) {\n                for (i = k + 1; i < m; i++) {\n                    work[i] = 0;\n                }\n                for (j = k + 1; j < n; j++) {\n                    for (i = k + 1; i < m; i++) {\n                        work[i] += e[j] * a[i][j];\n                    }\n                }\n                for (j = k + 1; j < n; j++) {\n                    t = -e[j] / e[k + 1];\n                    for (i = k + 1; i < m; i++) {\n                        a[i][j] += t * work[i];\n                    }\n                }\n            }\n            if (wantv) {\n                for (i = k + 1; i < n; i++) {\n                    V[i][k] = e[i];\n                }\n            }\n        }\n    }\n\n    p = Math.min(n, m + 1);\n    if (nct < n) {\n        s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n        s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n        e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n        for (j = nct; j < nu; j++) {\n            for (i = 0; i < m; i++) {\n                U[i][j] = 0;\n            }\n            U[j][j] = 1;\n        }\n        for (k = nct - 1; k >= 0; k--) {\n            if (s[k] !== 0) {\n                for (j = k + 1; j < nu; j++) {\n                    t = 0;\n                    for (i = k; i < m; i++) {\n                        t += U[i][k] * U[i][j];\n                    }\n                    t = -t / U[k][k];\n                    for (i = k; i < m; i++) {\n                        U[i][j] += t * U[i][k];\n                    }\n                }\n                for (i = k; i < m; i++) {\n                    U[i][k] = -U[i][k];\n                }\n                U[k][k] = 1 + U[k][k];\n                for (i = 0; i < k - 1; i++) {\n                    U[i][k] = 0;\n                }\n            } else {\n                for (i = 0; i < m; i++) {\n                    U[i][k] = 0;\n                }\n                U[k][k] = 1;\n            }\n        }\n    }\n\n    if (wantv) {\n        for (k = n - 1; k >= 0; k--) {\n            if ((k < nrt) && (e[k] !== 0)) {\n                for (j = k + 1; j < n; j++) {\n                    t = 0;\n                    for (i = k + 1; i < n; i++) {\n                        t += V[i][k] * V[i][j];\n                    }\n                    t = -t / V[k + 1][k];\n                    for (i = k + 1; i < n; i++) {\n                        V[i][j] += t * V[i][k];\n                    }\n                }\n            }\n            for (i = 0; i < n; i++) {\n                V[i][k] = 0;\n            }\n            V[k][k] = 1;\n        }\n    }\n\n    var pp = p - 1,\n        iter = 0,\n        eps = Math.pow(2, -52);\n    while (p > 0) {\n        for (k = p - 2; k >= -1; k--) {\n            if (k === -1) {\n                break;\n            }\n            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n                e[k] = 0;\n                break;\n            }\n        }\n        if (k === p - 2) {\n            kase = 4;\n        } else {\n            for (ks = p - 1; ks >= k; ks--) {\n                if (ks === k) {\n                    break;\n                }\n                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n                if (Math.abs(s[ks]) <= eps * t) {\n                    s[ks] = 0;\n                    break;\n                }\n            }\n            if (ks === k) {\n                kase = 3;\n            } else if (ks === p - 1) {\n                kase = 1;\n            } else {\n                kase = 2;\n                k = ks;\n            }\n        }\n\n        k++;\n\n        switch (kase) {\n            case 1: {\n                f = e[p - 2];\n                e[p - 2] = 0;\n                for (j = p - 2; j >= k; j--) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    if (j !== k) {\n                        f = -sn * e[j - 1];\n                        e[j - 1] = cs * e[j - 1];\n                    }\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][p - 1];\n                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                            V[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 2 : {\n                f = e[k - 1];\n                e[k - 1] = 0;\n                for (j = k; j < p; j++) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    f = -sn * e[j];\n                    e[j] = cs * e[j];\n                    if (wantu) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][k - 1];\n                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 3 : {\n                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n                sp = s[p - 1] / scale;\n                spm1 = s[p - 2] / scale;\n                epm1 = e[p - 2] / scale;\n                sk = s[k] / scale;\n                ek = e[k] / scale;\n                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n                c = (sp * epm1) * (sp * epm1);\n                shift = 0;\n                if ((b !== 0) || (c !== 0)) {\n                    shift = Math.sqrt(b * b + c);\n                    if (b < 0) {\n                        shift = -shift;\n                    }\n                    shift = c / (b + shift);\n                }\n                f = (sk + sp) * (sk - sp) + shift;\n                g = sk * ek;\n                for (j = k; j < p - 1; j++) {\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    if (j !== k) {\n                        e[j - 1] = t;\n                    }\n                    f = cs * s[j] + sn * e[j];\n                    e[j] = cs * e[j] - sn * s[j];\n                    g = sn * s[j + 1];\n                    s[j + 1] = cs * s[j + 1];\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][j + 1];\n                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                            V[i][j] = t;\n                        }\n                    }\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    s[j] = t;\n                    f = cs * e[j] + sn * s[j + 1];\n                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n                    g = sn * e[j + 1];\n                    e[j + 1] = cs * e[j + 1];\n                    if (wantu && (j < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][j + 1];\n                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                e[p - 2] = f;\n                iter = iter + 1;\n                break;\n            }\n            case 4: {\n                if (s[k] <= 0) {\n                    s[k] = (s[k] < 0 ? -s[k] : 0);\n                    if (wantv) {\n                        for (i = 0; i <= pp; i++) {\n                            V[i][k] = -V[i][k];\n                        }\n                    }\n                }\n                while (k < pp) {\n                    if (s[k] >= s[k + 1]) {\n                        break;\n                    }\n                    t = s[k];\n                    s[k] = s[k + 1];\n                    s[k + 1] = t;\n                    if (wantv && (k < n - 1)) {\n                        for (i = 0; i < n; i++) {\n                            t = V[i][k + 1];\n                            V[i][k + 1] = V[i][k];\n                            V[i][k] = t;\n                        }\n                    }\n                    if (wantu && (k < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = U[i][k + 1];\n                            U[i][k + 1] = U[i][k];\n                            U[i][k] = t;\n                        }\n                    }\n                    k++;\n                }\n                iter = 0;\n                p--;\n                break;\n            }\n        }\n    }\n\n    if (swapped) {\n        var tmp = V;\n        V = U;\n        U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n}\n\nSingularValueDecomposition.prototype = {\n    get condition() {\n        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    get norm2() {\n        return this.s[0];\n    },\n    get rank() {\n        var eps = Math.pow(2, -52),\n            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n            r = 0,\n            s = this.s;\n        for (var i = 0, ii = s.length; i < ii; i++) {\n            if (s[i] > tol) {\n                r++;\n            }\n        }\n        return r;\n    },\n    get diagonal() {\n        return this.s;\n    },\n    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n    get threshold() {\n        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n    },\n    get leftSingularVectors() {\n        return this.U;\n    },\n    get rightSingularVectors() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        return Matrix.diag(this.s);\n    },\n    solve: function (value) {\n\n        var Y = value,\n            e = this.threshold,\n            scols = this.s.length,\n            Ls = Matrix.zeros(scols, scols),\n            i;\n\n        for (i = 0; i < scols; i++) {\n            if (Math.abs(this.s[i]) <= e) {\n                Ls[i][i] = 0;\n            } else {\n                Ls[i][i] = 1 / this.s[i];\n            }\n        }\n\n\n        var VL = this.V.mmul(Ls),\n            vrows = this.V.rows,\n            urows = this.U.rows,\n            VLU = Matrix.zeros(vrows, urows),\n            j, k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < scols; k++) {\n                    sum += VL[i][k] * this.U[j][k];\n                }\n                VLU[i][j] = sum;\n            }\n        }\n\n        return VLU.mmul(Y);\n    },\n    solveForDiagonal: function (value) {\n        return this.solve(Matrix.diag(value));\n    },\n    inverse: function () {\n        var e = this.threshold,\n            vrows = this.V.rows,\n            vcols = this.V.columns,\n            X = new Matrix(vrows, this.s.length),\n            i, j;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < vcols; j++) {\n                if (Math.abs(this.s[j]) > e) {\n                    X[i][j] = this.V[i][j] / this.s[j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n\n        var urows = this.U.rows,\n            ucols = this.U.columns,\n            Y = new Matrix(vrows, urows),\n            k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < ucols; k++) {\n                    sum += X[i][k] * this.U[j][k];\n                }\n                Y[i][j] = sum;\n            }\n        }\n\n        return Y;\n    }\n};\n\nmodule.exports = SingularValueDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/dc/svd.js\n ** module id = 22\n ** module chunks = 0\n **/","'use strict';\n\nexports.hypotenuse = function hypotenuse(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n        r = b / a;\n        return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n        r = a / b;\n        return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/dc/util.js\n ** module id = 23\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\nfunction EigenvalueDecomposition(matrix) {\n    if (!(this instanceof EigenvalueDecomposition)) {\n        return new EigenvalueDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n        throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns,\n        V = Matrix.zeros(n, n),\n        d = new Array(n),\n        e = new Array(n),\n        value = matrix,\n        i, j;\n\n    if (matrix.isSymmetric()) {\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                V[i][j] = value[i][j];\n            }\n        }\n        tred2(n, e, d, V);\n        tql2(n, e, d, V);\n    }\n    else {\n        var H = Matrix.zeros(n, n),\n            ort = new Array(n);\n        for (j = 0; j < n; j++) {\n            for (i = 0; i < n; i++) {\n                H[i][j] = value[i][j];\n            }\n        }\n        orthes(n, H, ort, V);\n        hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n}\n\nEigenvalueDecomposition.prototype = {\n    get realEigenvalues() {\n        return this.d;\n    },\n    get imaginaryEigenvalues() {\n        return this.e;\n    },\n    get eigenvectorMatrix() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        var n = this.n,\n            e = this.e,\n            d = this.d,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                X[i][j] = 0;\n            }\n            X[i][i] = d[i];\n            if (e[i] > 0) {\n                X[i][i + 1] = e[i];\n            }\n            else if (e[i] < 0) {\n                X[i][i - 1] = e[i];\n            }\n        }\n        return X;\n    }\n};\n\nfunction tred2(n, e, d, V) {\n\n    var f, g, h, i, j, k,\n        hh, scale;\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n    }\n\n    for (i = n - 1; i > 0; i--) {\n        scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n            scale = scale + Math.abs(d[k]);\n        }\n\n        if (scale === 0) {\n            e[i] = d[i - 1];\n            for (j = 0; j < i; j++) {\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n                V[j][i] = 0;\n            }\n        } else {\n            for (k = 0; k < i; k++) {\n                d[k] /= scale;\n                h += d[k] * d[k];\n            }\n\n            f = d[i - 1];\n            g = Math.sqrt(h);\n            if (f > 0) {\n                g = -g;\n            }\n\n            e[i] = scale * g;\n            h = h - f * g;\n            d[i - 1] = f - g;\n            for (j = 0; j < i; j++) {\n                e[j] = 0;\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                V[j][i] = f;\n                g = e[j] + V[j][j] * f;\n                for (k = j + 1; k <= i - 1; k++) {\n                    g += V[k][j] * d[k];\n                    e[k] += V[k][j] * f;\n                }\n                e[j] = g;\n            }\n\n            f = 0;\n            for (j = 0; j < i; j++) {\n                e[j] /= h;\n                f += e[j] * d[j];\n            }\n\n            hh = f / (h + h);\n            for (j = 0; j < i; j++) {\n                e[j] -= hh * d[j];\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                g = e[j];\n                for (k = j; k <= i - 1; k++) {\n                    V[k][j] -= (f * e[k] + g * d[k]);\n                }\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n            }\n        }\n        d[i] = h;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        V[n - 1][i] = V[i][i];\n        V[i][i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n            for (k = 0; k <= i; k++) {\n                d[k] = V[k][i + 1] / h;\n            }\n\n            for (j = 0; j <= i; j++) {\n                g = 0;\n                for (k = 0; k <= i; k++) {\n                    g += V[k][i + 1] * V[k][j];\n                }\n                for (k = 0; k <= i; k++) {\n                    V[k][j] -= g * d[k];\n                }\n            }\n        }\n\n        for (k = 0; k <= i; k++) {\n            V[k][i + 1] = 0;\n        }\n    }\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n        V[n - 1][j] = 0;\n    }\n\n    V[n - 1][n - 1] = 1;\n    e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n\n    var g, h, i, j, k, l, m, p, r,\n        dl1, c, c2, c3, el1, s, s2,\n        iter;\n\n    for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n    }\n\n    e[n - 1] = 0;\n\n    var f = 0,\n        tst1 = 0,\n        eps = Math.pow(2, -52);\n\n    for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        m = l;\n        while (m < n) {\n            if (Math.abs(e[m]) <= eps * tst1) {\n                break;\n            }\n            m++;\n        }\n\n        if (m > l) {\n            iter = 0;\n            do {\n                iter = iter + 1;\n\n                g = d[l];\n                p = (d[l + 1] - g) / (2 * e[l]);\n                r = hypotenuse(p, 1);\n                if (p < 0) {\n                    r = -r;\n                }\n\n                d[l] = e[l] / (p + r);\n                d[l + 1] = e[l] * (p + r);\n                dl1 = d[l + 1];\n                h = g - d[l];\n                for (i = l + 2; i < n; i++) {\n                    d[i] -= h;\n                }\n\n                f = f + h;\n\n                p = d[m];\n                c = 1;\n                c2 = c;\n                c3 = c;\n                el1 = e[l + 1];\n                s = 0;\n                s2 = 0;\n                for (i = m - 1; i >= l; i--) {\n                    c3 = c2;\n                    c2 = c;\n                    s2 = s;\n                    g = c * e[i];\n                    h = c * p;\n                    r = hypotenuse(p, e[i]);\n                    e[i + 1] = s * r;\n                    s = e[i] / r;\n                    c = p / r;\n                    p = c * d[i] - s * g;\n                    d[i + 1] = h + s * (c * g + s * d[i]);\n\n                    for (k = 0; k < n; k++) {\n                        h = V[k][i + 1];\n                        V[k][i + 1] = s * V[k][i] + c * h;\n                        V[k][i] = c * V[k][i] - s * h;\n                    }\n                }\n\n                p = -s * s2 * c3 * el1 * e[l] / dl1;\n                e[l] = s * p;\n                d[l] = c * p;\n\n            }\n            while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n            if (d[j] < p) {\n                k = j;\n                p = d[j];\n            }\n        }\n\n        if (k !== i) {\n            d[k] = d[i];\n            d[i] = p;\n            for (j = 0; j < n; j++) {\n                p = V[j][i];\n                V[j][i] = V[j][k];\n                V[j][k] = p;\n            }\n        }\n    }\n}\n\nfunction orthes(n, H, ort, V) {\n\n    var low = 0,\n        high = n - 1,\n        f, g, h, i, j, m,\n        scale;\n\n    for (m = low + 1; m <= high - 1; m++) {\n        scale = 0;\n        for (i = m; i <= high; i++) {\n            scale = scale + Math.abs(H[i][m - 1]);\n        }\n\n        if (scale !== 0) {\n            h = 0;\n            for (i = high; i >= m; i--) {\n                ort[i] = H[i][m - 1] / scale;\n                h += ort[i] * ort[i];\n            }\n\n            g = Math.sqrt(h);\n            if (ort[m] > 0) {\n                g = -g;\n            }\n\n            h = h - ort[m] * g;\n            ort[m] = ort[m] - g;\n\n            for (j = m; j < n; j++) {\n                f = 0;\n                for (i = high; i >= m; i--) {\n                    f += ort[i] * H[i][j];\n                }\n\n                f = f / h;\n                for (i = m; i <= high; i++) {\n                    H[i][j] -= f * ort[i];\n                }\n            }\n\n            for (i = 0; i <= high; i++) {\n                f = 0;\n                for (j = high; j >= m; j--) {\n                    f += ort[j] * H[i][j];\n                }\n\n                f = f / h;\n                for (j = m; j <= high; j++) {\n                    H[i][j] -= f * ort[j];\n                }\n            }\n\n            ort[m] = scale * ort[m];\n            H[m][m - 1] = scale * g;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            V[i][j] = (i === j ? 1 : 0);\n        }\n    }\n\n    for (m = high - 1; m >= low + 1; m--) {\n        if (H[m][m - 1] !== 0) {\n            for (i = m + 1; i <= high; i++) {\n                ort[i] = H[i][m - 1];\n            }\n\n            for (j = m; j <= high; j++) {\n                g = 0;\n                for (i = m; i <= high; i++) {\n                    g += ort[i] * V[i][j];\n                }\n\n                g = (g / ort[m]) / H[m][m - 1];\n                for (i = m; i <= high; i++) {\n                    V[i][j] += g * ort[i];\n                }\n            }\n        }\n    }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n    var n = nn - 1,\n        low = 0,\n        high = nn - 1,\n        eps = Math.pow(2, -52),\n        exshift = 0,\n        norm = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n        s = 0,\n        z = 0,\n        iter = 0,\n        i, j, k, l, m, t, w, x, y,\n        ra, sa, vr, vi,\n        notlast, cdivres;\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            d[i] = H[i][i];\n            e[i] = 0;\n        }\n\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n            norm = norm + Math.abs(H[i][j]);\n        }\n    }\n\n    while (n >= low) {\n        l = n;\n        while (l > low) {\n            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n            if (s === 0) {\n                s = norm;\n            }\n            if (Math.abs(H[l][l - 1]) < eps * s) {\n                break;\n            }\n            l--;\n        }\n\n        if (l === n) {\n            H[n][n] = H[n][n] + exshift;\n            d[n] = H[n][n];\n            e[n] = 0;\n            n--;\n            iter = 0;\n        } else if (l === n - 1) {\n            w = H[n][n - 1] * H[n - 1][n];\n            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n            q = p * p + w;\n            z = Math.sqrt(Math.abs(q));\n            H[n][n] = H[n][n] + exshift;\n            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n            x = H[n][n];\n\n            if (q >= 0) {\n                z = (p >= 0) ? (p + z) : (p - z);\n                d[n - 1] = x + z;\n                d[n] = d[n - 1];\n                if (z !== 0) {\n                    d[n] = x - w / z;\n                }\n                e[n - 1] = 0;\n                e[n] = 0;\n                x = H[n][n - 1];\n                s = Math.abs(x) + Math.abs(z);\n                p = x / s;\n                q = z / s;\n                r = Math.sqrt(p * p + q * q);\n                p = p / r;\n                q = q / r;\n\n                for (j = n - 1; j < nn; j++) {\n                    z = H[n - 1][j];\n                    H[n - 1][j] = q * z + p * H[n][j];\n                    H[n][j] = q * H[n][j] - p * z;\n                }\n\n                for (i = 0; i <= n; i++) {\n                    z = H[i][n - 1];\n                    H[i][n - 1] = q * z + p * H[i][n];\n                    H[i][n] = q * H[i][n] - p * z;\n                }\n\n                for (i = low; i <= high; i++) {\n                    z = V[i][n - 1];\n                    V[i][n - 1] = q * z + p * V[i][n];\n                    V[i][n] = q * V[i][n] - p * z;\n                }\n            } else {\n                d[n - 1] = x + p;\n                d[n] = x + p;\n                e[n - 1] = z;\n                e[n] = -z;\n            }\n\n            n = n - 2;\n            iter = 0;\n        } else {\n            x = H[n][n];\n            y = 0;\n            w = 0;\n            if (l < n) {\n                y = H[n - 1][n - 1];\n                w = H[n][n - 1] * H[n - 1][n];\n            }\n\n            if (iter === 10) {\n                exshift += x;\n                for (i = low; i <= n; i++) {\n                    H[i][i] -= x;\n                }\n                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n                x = y = 0.75 * s;\n                w = -0.4375 * s * s;\n            }\n\n            if (iter === 30) {\n                s = (y - x) / 2;\n                s = s * s + w;\n                if (s > 0) {\n                    s = Math.sqrt(s);\n                    if (y < x) {\n                        s = -s;\n                    }\n                    s = x - w / ((y - x) / 2 + s);\n                    for (i = low; i <= n; i++) {\n                        H[i][i] -= s;\n                    }\n                    exshift += s;\n                    x = y = w = 0.964;\n                }\n            }\n\n            iter = iter + 1;\n\n            m = n - 2;\n            while (m >= l) {\n                z = H[m][m];\n                r = x - z;\n                s = y - z;\n                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n                q = H[m + 1][m + 1] - z - r - s;\n                r = H[m + 2][m + 1];\n                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                p = p / s;\n                q = q / s;\n                r = r / s;\n                if (m === l) {\n                    break;\n                }\n                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n                    break;\n                }\n                m--;\n            }\n\n            for (i = m + 2; i <= n; i++) {\n                H[i][i - 2] = 0;\n                if (i > m + 2) {\n                    H[i][i - 3] = 0;\n                }\n            }\n\n            for (k = m; k <= n - 1; k++) {\n                notlast = (k !== n - 1);\n                if (k !== m) {\n                    p = H[k][k - 1];\n                    q = H[k + 1][k - 1];\n                    r = (notlast ? H[k + 2][k - 1] : 0);\n                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                    if (x !== 0) {\n                        p = p / x;\n                        q = q / x;\n                        r = r / x;\n                    }\n                }\n\n                if (x === 0) {\n                    break;\n                }\n\n                s = Math.sqrt(p * p + q * q + r * r);\n                if (p < 0) {\n                    s = -s;\n                }\n\n                if (s !== 0) {\n                    if (k !== m) {\n                        H[k][k - 1] = -s * x;\n                    } else if (l !== m) {\n                        H[k][k - 1] = -H[k][k - 1];\n                    }\n\n                    p = p + s;\n                    x = p / s;\n                    y = q / s;\n                    z = r / s;\n                    q = q / p;\n                    r = r / p;\n\n                    for (j = k; j < nn; j++) {\n                        p = H[k][j] + q * H[k + 1][j];\n                        if (notlast) {\n                            p = p + r * H[k + 2][j];\n                            H[k + 2][j] = H[k + 2][j] - p * z;\n                        }\n\n                        H[k][j] = H[k][j] - p * x;\n                        H[k + 1][j] = H[k + 1][j] - p * y;\n                    }\n\n                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n                        p = x * H[i][k] + y * H[i][k + 1];\n                        if (notlast) {\n                            p = p + z * H[i][k + 2];\n                            H[i][k + 2] = H[i][k + 2] - p * r;\n                        }\n\n                        H[i][k] = H[i][k] - p;\n                        H[i][k + 1] = H[i][k + 1] - p * q;\n                    }\n\n                    for (i = low; i <= high; i++) {\n                        p = x * V[i][k] + y * V[i][k + 1];\n                        if (notlast) {\n                            p = p + z * V[i][k + 2];\n                            V[i][k + 2] = V[i][k + 2] - p * r;\n                        }\n\n                        V[i][k] = V[i][k] - p;\n                        V[i][k + 1] = V[i][k + 1] - p * q;\n                    }\n                }\n            }\n        }\n    }\n\n    if (norm === 0) {\n        return;\n    }\n\n    for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n\n        if (q === 0) {\n            l = n;\n            H[n][n] = 1;\n            for (i = n - 1; i >= 0; i--) {\n                w = H[i][i] - p;\n                r = 0;\n                for (j = l; j <= n; j++) {\n                    r = r + H[i][j] * H[j][n];\n                }\n\n                if (e[i] < 0) {\n                    z = w;\n                    s = r;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                        t = (x * s - z * r) / q;\n                        H[i][n] = t;\n                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n                    }\n\n                    t = Math.abs(H[i][n]);\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        } else if (q < 0) {\n            l = n - 1;\n\n            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n                H[n - 1][n - 1] = q / H[n][n - 1];\n                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n            } else {\n                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n                H[n - 1][n - 1] = cdivres[0];\n                H[n - 1][n] = cdivres[1];\n            }\n\n            H[n][n - 1] = 0;\n            H[n][n] = 1;\n            for (i = n - 2; i >= 0; i--) {\n                ra = 0;\n                sa = 0;\n                for (j = l; j <= n; j++) {\n                    ra = ra + H[i][j] * H[j][n - 1];\n                    sa = sa + H[i][j] * H[j][n];\n                }\n\n                w = H[i][i] - p;\n\n                if (e[i] < 0) {\n                    z = w;\n                    r = ra;\n                    s = sa;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        cdivres = cdiv(-ra, -sa, w, q);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                        vi = (d[i] - p) * 2 * q;\n                        if (vr === 0 && vi === 0) {\n                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                        }\n                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n                        } else {\n                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n                            H[i + 1][n - 1] = cdivres[0];\n                            H[i + 1][n] = cdivres[1];\n                        }\n                    }\n\n                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n - 1] = H[j][n - 1] / t;\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            for (j = i; j < nn; j++) {\n                V[i][j] = H[i][j];\n            }\n        }\n    }\n\n    for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n            z = 0;\n            for (k = low; k <= Math.min(j, high); k++) {\n                z = z + V[i][k] * H[k][j];\n            }\n            V[i][j] = z;\n        }\n    }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n    var r, d;\n    if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        return [(xr + r * xi) / d, (xi - r * xr) / d];\n    }\n    else {\n        r = yr / yi;\n        d = yi + r * yr;\n        return [(r * xr + xi) / d, (r * xi - xr) / d];\n    }\n}\n\nmodule.exports = EigenvalueDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/dc/evd.js\n ** module id = 24\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\nfunction LuDecomposition(matrix) {\n    if (!(this instanceof LuDecomposition)) {\n        return new LuDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n\n    var lu = matrix.clone(),\n        rows = lu.rows,\n        columns = lu.columns,\n        pivotVector = new Array(rows),\n        pivotSign = 1,\n        i, j, k, p, s, t, v,\n        LUrowi, LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n        pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n\n        for (i = 0; i < rows; i++) {\n            LUcolj[i] = lu[i][j];\n        }\n\n        for (i = 0; i < rows; i++) {\n            LUrowi = lu[i];\n            kmax = Math.min(i, j);\n            s = 0;\n            for (k = 0; k < kmax; k++) {\n                s += LUrowi[k] * LUcolj[k];\n            }\n            LUrowi[j] = LUcolj[i] -= s;\n        }\n\n        p = j;\n        for (i = j + 1; i < rows; i++) {\n            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n                p = i;\n            }\n        }\n\n        if (p !== j) {\n            for (k = 0; k < columns; k++) {\n                t = lu[p][k];\n                lu[p][k] = lu[j][k];\n                lu[j][k] = t;\n            }\n\n            v = pivotVector[p];\n            pivotVector[p] = pivotVector[j];\n            pivotVector[j] = v;\n\n            pivotSign = -pivotSign;\n        }\n\n        if (j < rows && lu[j][j] !== 0) {\n            for (i = j + 1; i < rows; i++) {\n                lu[i][j] /= lu[j][j];\n            }\n        }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n}\n\nLuDecomposition.prototype = {\n    isSingular: function () {\n        var data = this.LU,\n            col = data.columns;\n        for (var j = 0; j < col; j++) {\n            if (data[j][j] === 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    get determinant() {\n        var data = this.LU;\n        if (!data.isSquare())\n            throw new Error('Matrix must be square');\n        var determinant = this.pivotSign, col = data.columns;\n        for (var j = 0; j < col; j++)\n            determinant *= data[j][j];\n        return determinant;\n    },\n    get lowerTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i > j) {\n                    X[i][j] = data[i][j];\n                } else if (i === j) {\n                    X[i][j] = 1;\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get upperTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i <= j) {\n                    X[i][j] = data[i][j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get pivotPermutationVector() {\n        return this.pivotVector.slice();\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var lu = this.LU,\n            rows = lu.rows;\n\n        if (rows !== value.rows)\n            throw new Error('Invalid matrix dimensions');\n        if (this.isSingular())\n            throw new Error('LU matrix is singular');\n\n        var count = value.columns,\n            X = value.subMatrixRow(this.pivotVector, 0, count - 1),\n            columns = lu.columns,\n            i, j, k;\n\n        for (k = 0; k < columns; k++) {\n            for (i = k + 1; i < columns; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        for (k = columns - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= lu[k][k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = LuDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/dc/lu.js\n ** module id = 25\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\nfunction QrDecomposition(value) {\n    if (!(this instanceof QrDecomposition)) {\n        return new QrDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n\n    var qr = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        rdiag = new Array(n),\n        i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) {\n            nrm = hypotenuse(nrm, qr[i][k]);\n        }\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) {\n                nrm = -nrm;\n            }\n            for (i = k; i < m; i++) {\n                qr[i][k] /= nrm;\n            }\n            qr[k][k] += 1;\n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * qr[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    qr[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n}\n\nQrDecomposition.prototype = {\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var qr = this.QR,\n            m = qr.rows;\n\n        if (value.rows !== m)\n            throw new Error('Matrix row dimensions must agree');\n        if (!this.isFullRank())\n            throw new Error('Matrix is rank deficient');\n\n        var count = value.columns,\n            X = value.clone(),\n            n = qr.columns,\n            i, j, k, s;\n\n        for (k = 0; k < n; k++) {\n            for (j = 0; j < count; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * X[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    X[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        for (k = n - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= this.Rdiag[k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * qr[i][k];\n                }\n            }\n        }\n\n        return X.subMatrix(0, n - 1, 0, count - 1);\n    },\n    isFullRank: function () {\n        var columns = this.QR.columns;\n        for (var i = 0; i < columns; i++) {\n            if (this.Rdiag[i] === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n    get upperTriangularFactor() {\n        var qr = this.QR,\n            n = qr.columns,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                if (i < j) {\n                    X[i][j] = qr[i][j];\n                } else if (i === j) {\n                    X[i][j] = this.Rdiag[i];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get orthogonalFactor() {\n        var qr = this.QR,\n            rows = qr.rows,\n            columns = qr.columns,\n            X = new Matrix(rows, columns),\n            i, j, k, s;\n\n        for (k = columns - 1; k >= 0; k--) {\n            for (i = 0; i < rows; i++) {\n                X[i][k] = 0;\n            }\n            X[k][k] = 1;\n            for (j = k; j < columns; j++) {\n                if (qr[k][k] !== 0) {\n                    s = 0;\n                    for (i = k; i < rows; i++) {\n                        s += qr[i][k] * X[i][j];\n                    }\n\n                    s = -s / qr[k][k];\n\n                    for (i = k; i < rows; i++) {\n                        X[i][j] += s * qr[i][k];\n                    }\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = QrDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/dc/qr.js\n ** module id = 26\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\nfunction CholeskyDecomposition(value) {\n    if (!(this instanceof CholeskyDecomposition)) {\n        return new CholeskyDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n    if (!value.isSymmetric())\n        throw new Error('Matrix is not symmetric');\n\n    var a = value,\n        dimension = a.rows,\n        l = new Matrix(dimension, dimension),\n        positiveDefinite = true,\n        i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n        var Lrowj = l[j];\n        var d = 0;\n        for (k = 0; k < j; k++) {\n            var Lrowk = l[k];\n            var s = 0;\n            for (i = 0; i < k; i++) {\n                s += Lrowk[i] * Lrowj[i];\n            }\n            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n            d = d + s * s;\n        }\n\n        d = a[j][j] - d;\n\n        positiveDefinite &= (d > 0);\n        l[j][j] = Math.sqrt(Math.max(d, 0));\n        for (k = j + 1; k < dimension; k++) {\n            l[j][k] = 0;\n        }\n    }\n\n    if (!positiveDefinite) {\n        throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n}\n\nCholeskyDecomposition.prototype = {\n    get leftTriangularFactor() {\n        return this.L;\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var l = this.L,\n            dimension = l.rows;\n\n        if (value.rows !== dimension) {\n            throw new Error('Matrix dimensions do not match');\n        }\n\n        var count = value.columns,\n            B = value.clone(),\n            i, j, k;\n\n        for (k = 0; k < dimension; k++) {\n            for (j = 0; j < count; j++) {\n                for (i = 0; i < k; i++) {\n                    B[k][j] -= B[i][j] * l[k][i];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        for (k = dimension - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                for (i = k + 1; i < dimension; i++) {\n                    B[k][j] -= B[i][j] * l[i][k];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        return B;\n    }\n};\n\nmodule.exports = CholeskyDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/dc/cholesky.js\n ** module id = 27\n ** module chunks = 0\n **/","'use strict';\n\nexports.distance = require('./distances');\nexports.similarity = require('./similarities');\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/index.js\n ** module id = 28\n ** module chunks = 0\n **/","\"use strict\";\n\nexports.additiveSymmetric = require('./distances/additiveSymmetric');\nexports.avg = require('./distances/avg');\nexports.bhattacharyya = require('./distances/bhattacharyya');\nexports.canberra = require('./distances/canberra');\nexports.chebyshev = require('./distances/chebyshev');\nexports.clark = require('./distances/clark');\nexports.czekanowski = require('./distances/czekanowski');\nexports.dice = require('./distances/dice');\nexports.divergence = require('./distances/divergence');\nexports.euclidean = require('ml-euclidean-distance');\nexports.fidelity = require('./distances/fidelity');\nexports.gower = require('./distances/gower');\nexports.harmonicMean = require('./distances/harmonicMean');\nexports.hellinger = require('./distances/hellinger');\nexports.innerProduct = require('./distances/innerProduct');\nexports.intersection = require('./distances/intersection');\nexports.jaccard = require('./distances/jaccard');\nexports.jeffreys = require('./distances/jeffreys');\nexports.jensenDifference = require('./distances/jensenDifference');\nexports.jensenShannon = require('./distances/jensenShannon');\nexports.kdivergence = require('./distances/kdivergence');\nexports.kulczynski = require('./distances/kulczynski');\nexports.kullbackLeibler = require('./distances/kullbackLeibler');\nexports.kumarHassebrook = require('./distances/kumarHassebrook');\nexports.kumarJohnson = require('./distances/kumarJohnson');\nexports.lorentzian = require('./distances/lorentzian');\nexports.manhattan = require('./distances/manhattan');\nexports.matusita = require('./distances/matusita');\nexports.minkowski = require('./distances/minkowski');\nexports.motyka = require('./distances/motyka');\nexports.neyman = require('./distances/neyman');\nexports.pearson = require('./distances/pearson');\nexports.probabilisticSymmetric = require('./distances/probabilisticSymmetric');\nexports.ruzicka = require('./distances/ruzicka');\nexports.soergel = require('./distances/soergel');\nexports.sorensen = require('./distances/sorensen');\nexports.squared = require('./distances/squared');\nexports.squaredChord = require('./distances/squaredChord');\nexports.squaredEuclidean = require('ml-euclidean-distance').squared;\nexports.taneja = require('./distances/taneja');\nexports.tanimoto = require('./distances/tanimoto');\nexports.topsoe = require('./distances/topsoe');\nexports.tree = require('ml-tree-similarity');\nexports.waveHedges = require('./distances/waveHedges');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances.js\n ** module id = 29\n ** module chunks = 0\n **/","module.exports = function additiveSymmetric(a, b) {\n    var i = 0,\n        ii = a.length,\n        d = 0;\n    for (; i < ii; i++) {\n        d += ((a[i] - b[i]) * (a[i] - b[i]) * (a[i] + b[i])) / (a[i] * b[i]);\n    }\n    return 2 * d;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/additiveSymmetric.js\n ** module id = 30\n ** module chunks = 0\n **/","module.exports = function avg(a, b) {\n    var ii = a.length,\n        max = 0,\n        ans = 0,\n        aux = 0;\n    for (var i = 0; i < ii ; i++) {\n        aux = Math.abs(a[i] - b[i]);\n        ans += aux;\n        if (max < aux) {\n            max = aux;\n        }\n    }\n    return (max + ans) / 2;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/avg.js\n ** module id = 31\n ** module chunks = 0\n **/","module.exports = function bhattacharyya(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += Math.sqrt(a[i] * b[i]);\n    }\n    return - Math.log(ans);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/bhattacharyya.js\n ** module id = 32\n ** module chunks = 0\n **/","module.exports = function canberra(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += Math.abs(a[i] - b[i]) / (a[i] + b[i]);\n    }\n    return ans;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/canberra.js\n ** module id = 33\n ** module chunks = 0\n **/","module.exports = function chebyshev(a, b) {\n    var ii = a.length,\n        max = 0,\n        aux = 0;\n    for (var i = 0; i < ii ; i++) {\n        aux = Math.abs(a[i] - b[i]);\n        if (max < aux) {\n            max = aux;\n        }\n    }\n    return max;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/chebyshev.js\n ** module id = 34\n ** module chunks = 0\n **/","module.exports = function clark(a, b) {\n    var i = 0,\n        ii = a.length,\n        d = 0;\n    for (; i < ii; i++) {\n        d += Math.sqrt(((a[i] - b[i]) * (a[i] - b[i])) / ((a[i] + b[i]) * (a[i] + b[i])));\n    }\n    return 2 * d;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/clark.js\n ** module id = 35\n ** module chunks = 0\n **/","module.exports = function czekanowski(a, b) {\n    var ii = a.length,\n        up = 0,\n        down = 0;\n    for (var i = 0; i < ii ; i++) {\n        up += Math.min(a[i], b[i]);\n        down += a[i] + b[i];\n    }\n    return 1 - (2 * up / down);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/czekanowski.js\n ** module id = 36\n ** module chunks = 0\n **/","module.exports = function dice(a, b) {\n    var ii = a.length,\n        p = 0,\n        q1 = 0,\n        q2 = 0;\n    for (var i = 0; i < ii ; i++) {\n        p += a[i] * a[i];\n        q1 += b[i] * b[i];\n        q2 += (a[i] - b[i]) * (a[i] - b[i]);\n    }\n    return q2 / (p + q1);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/dice.js\n ** module id = 37\n ** module chunks = 0\n **/","module.exports = function divergence(a, b) {\n    var i = 0,\n        ii = a.length,\n        d = 0;\n    for (; i < ii; i++) {\n        d += ((a[i] - b[i]) * (a[i] - b[i])) / ((a[i] + b[i]) * (a[i] + b[i]));\n    }\n    return 2 * d;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/divergence.js\n ** module id = 38\n ** module chunks = 0\n **/","'use strict';\n\nfunction squaredEuclidean(p, q) {\n    var d = 0;\n    for (var i = 0; i < p.length; i++) {\n        d += (p[i] - q[i]) * (p[i] - q[i]);\n    }\n    return d;\n}\n\nfunction euclidean(p, q) {\n    return Math.sqrt(squaredEuclidean(p, q));\n}\n\nmodule.exports = euclidean;\neuclidean.squared = squaredEuclidean;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/~/ml-euclidean-distance/euclidean.js\n ** module id = 39\n ** module chunks = 0\n **/","module.exports = function fidelity(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += Math.sqrt(a[i] * b[i]);\n    }\n    return ans;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/fidelity.js\n ** module id = 40\n ** module chunks = 0\n **/","module.exports = function gower(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += Math.abs(a[i] - b[i]);\n    }\n    return ans / ii;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/gower.js\n ** module id = 41\n ** module chunks = 0\n **/","module.exports = function harmonicMean(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += (a[i] * b[i]) / (a[i] + b[i]);\n    }\n    return 2 * ans;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/harmonicMean.js\n ** module id = 42\n ** module chunks = 0\n **/","module.exports = function hellinger(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += Math.sqrt(a[i] * b[i]);\n    }\n    return 2 * Math.sqrt(1 - ans);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/hellinger.js\n ** module id = 43\n ** module chunks = 0\n **/","module.exports = function innerProduct(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += a[i] * b[i];\n    }\n    return ans;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/innerProduct.js\n ** module id = 44\n ** module chunks = 0\n **/","module.exports = function intersection(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += Math.min(a[i], b[i]);\n    }\n    return 1 - ans;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/intersection.js\n ** module id = 45\n ** module chunks = 0\n **/","module.exports = function jaccard(a, b) {\n    var ii = a.length,\n        p1 = 0,\n        p2 = 0,\n        q1 = 0,\n        q2 = 0;\n    for (var i = 0; i < ii ; i++) {\n        p1 += a[i] * b[i];\n        p2 += a[i] * a[i];\n        q1 += b[i] * b[i];\n        q2 += (a[i] - b[i]) * (a[i] - b[i]);\n    }\n    return q2 / (p2 + q1 - p1);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/jaccard.js\n ** module id = 46\n ** module chunks = 0\n **/","module.exports = function jeffreys(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += (a[i] - b[i]) * Math.log(a[i] / b[i]);\n    }\n    return ans;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/jeffreys.js\n ** module id = 47\n ** module chunks = 0\n **/","module.exports = function jensenDifference(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += ((a[i] * Math.log(a[i]) + b[i] * Math.log(b[i])) / 2) - ((a[i] + b[i]) / 2) * Math.log((a[i] + b[i]) / 2);\n    }\n    return ans;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/jensenDifference.js\n ** module id = 48\n ** module chunks = 0\n **/","module.exports = function jensenShannon(a, b) {\n    var ii = a.length,\n        p = 0,\n        q = 0;\n    for (var i = 0; i < ii ; i++) {\n        p += a[i] * Math.log(2 * a[i] / (a[i] + b[i]));\n        q += b[i] * Math.log(2 * b[i] / (a[i] + b[i]));\n    }\n    return (p + q) / 2;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/jensenShannon.js\n ** module id = 49\n ** module chunks = 0\n **/","module.exports = function kdivergence(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += a[i] * Math.log(2 * a[i] / (a[i] + b[i]));\n    }\n    return ans;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/kdivergence.js\n ** module id = 50\n ** module chunks = 0\n **/","module.exports = function kulczynski(a, b) {\n    var ii = a.length,\n        up = 0,\n        down = 0;\n    for (var i = 0; i < ii ; i++) {\n        up += Math.abs(a[i] - b[i]);\n        down += Math.min(a[i],b[i]);\n    }\n    return up / down;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/kulczynski.js\n ** module id = 51\n ** module chunks = 0\n **/","module.exports = function kullbackLeibler(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += a[i] * Math.log(a[i] / b[i]);\n    }\n    return ans;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/kullbackLeibler.js\n ** module id = 52\n ** module chunks = 0\n **/","module.exports = function kumarHassebrook(a, b) {\n    var ii = a.length,\n        p = 0,\n        p2 = 0,\n        q2 = 0;\n    for (var i = 0; i < ii ; i++) {\n        p += a[i] * b[i];\n        p2 += a[i] * a[i];\n        q2 += b[i] * b[i];\n    }\n    return p / (p2 + q2 - p);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/kumarHassebrook.js\n ** module id = 53\n ** module chunks = 0\n **/","module.exports = function kumarJohnson(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += Math.pow(a[i] * a[i] - b[i] * b[i],2) / (2 * Math.pow(a[i] * b[i],1.5));\n    }\n    return ans;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/kumarJohnson.js\n ** module id = 54\n ** module chunks = 0\n **/","module.exports = function lorentzian(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += Math.log(Math.abs(a[i] - b[i]) + 1);\n    }\n    return ans;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/lorentzian.js\n ** module id = 55\n ** module chunks = 0\n **/","module.exports = function manhattan(a, b) {\n    var i = 0,\n        ii = a.length,\n        d = 0;\n    for (; i < ii; i++) {\n        d += Math.abs(a[i] - b[i]);\n    }\n    return d;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/manhattan.js\n ** module id = 56\n ** module chunks = 0\n **/","module.exports = function matusita(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += Math.sqrt(a[i] * b[i]);\n    }\n    return Math.sqrt(2 - 2 * ans);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/matusita.js\n ** module id = 57\n ** module chunks = 0\n **/","module.exports = function minkowski(a, b, p) {\n    var i = 0,\n        ii = a.length,\n        d = 0;\n    for (; i < ii; i++) {\n        d += Math.pow(Math.abs(a[i] - b[i]),p);\n    }\n    return Math.pow(d,(1/p));\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/minkowski.js\n ** module id = 58\n ** module chunks = 0\n **/","module.exports = function motyka(a, b) {\n    var ii = a.length,\n        up = 0,\n        down = 0;\n    for (var i = 0; i < ii ; i++) {\n        up += Math.min(a[i], b[i]);\n        down += a[i] + b[i];\n    }\n    return 1 - (up / down);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/motyka.js\n ** module id = 59\n ** module chunks = 0\n **/","module.exports = function pearson(a, b) {\n    var i = 0,\n        ii = a.length,\n        d = 0;\n    for (; i < ii; i++) {\n        d += ((a[i] - b[i]) * (a[i] - b[i])) / a[i];\n    }\n    return d;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/neyman.js\n ** module id = 60\n ** module chunks = 0\n **/","module.exports = function pearson(a, b) {\n    var i = 0,\n        ii = a.length,\n        d = 0;\n    for (; i < ii; i++) {\n        d += ((a[i] - b[i]) * (a[i] - b[i])) / b[i];\n    }\n    return d;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/pearson.js\n ** module id = 61\n ** module chunks = 0\n **/","module.exports = function probabilisticSymmetric(a, b) {\n    var i = 0,\n        ii = a.length,\n        d = 0;\n    for (; i < ii; i++) {\n        d += ((a[i] - b[i]) * (a[i] - b[i])) / (a[i] + b[i]);\n    }\n    return 2 * d;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/probabilisticSymmetric.js\n ** module id = 62\n ** module chunks = 0\n **/","module.exports = function ruzicka(a, b) {\n    var ii = a.length,\n        up = 0,\n        down = 0;\n    for (var i = 0; i < ii ; i++) {\n        up += Math.min(a[i],b[i]);\n        down += Math.max(a[i],b[i]);\n    }\n    return up / down;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/ruzicka.js\n ** module id = 63\n ** module chunks = 0\n **/","module.exports = function soergel(a, b) {\n    var ii = a.length,\n        up = 0,\n        down = 0;\n    for (var i = 0; i < ii ; i++) {\n        up += Math.abs(a[i] - b[i]);\n        down += Math.max(a[i],b[i]);\n    }\n    return up / down;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/soergel.js\n ** module id = 64\n ** module chunks = 0\n **/","module.exports = function sorensen(a, b) {\n    var ii = a.length,\n        up = 0,\n        down = 0;\n    for (var i = 0; i < ii ; i++) {\n        up += Math.abs(a[i] - b[i]);\n        down += a[i] + b[i];\n    }\n    return up / down;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/sorensen.js\n ** module id = 65\n ** module chunks = 0\n **/","module.exports = function squared(a, b) {\n    var i = 0,\n        ii = a.length,\n        d = 0;\n    for (; i < ii; i++) {\n        d += ((a[i] - b[i]) * (a[i] - b[i])) / (a[i] + b[i]);\n    }\n    return d;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/squared.js\n ** module id = 66\n ** module chunks = 0\n **/","module.exports = function squaredChord(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += (Math.sqrt(a[i]) - Math.sqrt(b[i])) * (Math.sqrt(a[i]) - Math.sqrt(b[i]));\n    }\n    return ans;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/squaredChord.js\n ** module id = 67\n ** module chunks = 0\n **/","module.exports = function taneja(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += (a[i] + b[i]) / 2 * Math.log((a[i] + b[i]) / (2 * Math.sqrt(a[i] * b[i])));\n    }\n    return ans;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/taneja.js\n ** module id = 68\n ** module chunks = 0\n **/","var tanimotoS = require('./../similarities/tanimoto');\n\nmodule.exports = function tanimoto(a, b, bitvector) {\n    if (bitvector)\n        return 1 - tanimotoS(a, b, bitvector);\n    else {\n        var ii = a.length,\n            p = 0,\n            q = 0,\n            m = 0;\n        for (var i = 0; i < ii ; i++) {\n            p += a[i];\n            q += b[i];\n            m += Math.min(a[i],b[i]);\n        }\n        return (p + q - 2 * m) / (p + q - m);\n    }\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/tanimoto.js\n ** module id = 69\n ** module chunks = 0\n **/","module.exports = function tanimoto(a, b, bitvector) {\n    if (bitvector) {\n        var inter = 0,\n            union = 0;\n        for (var j = 0; j < a.length; j++) {\n            inter += a[j] && b[j];\n            union += a[j] || b[j];\n        }\n        if (union === 0)\n            return 1;\n        return inter / union;\n    }\n    else {\n        var ii = a.length,\n            p = 0,\n            q = 0,\n            m = 0;\n        for (var i = 0; i < ii ; i++) {\n            p += a[i];\n            q += b[i];\n            m += Math.min(a[i],b[i]);\n        }\n        return 1 - (p + q - 2 * m) / (p + q - m);\n    }\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/similarities/tanimoto.js\n ** module id = 70\n ** module chunks = 0\n **/","module.exports = function topsoe(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += a[i] * Math.log(2 * a[i] / (a[i] + b[i])) + b[i] * Math.log(2 * b[i] / (a[i] + b[i]));\n    }\n    return ans;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/topsoe.js\n ** module id = 71\n ** module chunks = 0\n **/","\"use strict\";\n\n/**\n * Function that creates the tree\n * @param {Array <number>} X - chemical shifts of the signal\n * @param {Array <number>} Y - intensity of the signal\n * @param {number} from - the low limit of x\n * @param {number} to - the top limit of x\n * @param {number} minWindow - smallest range to accept in x\n * @param {number} threshold - smallest range to accept in y\n * @returns {{sum: number, center: number, left: {json}, right: {json}}}\n * left and right have the same structure than the parent, or have a\n * undefined value if are leafs\n */\nfunction createTree (X, Y, from, to, minWindow, threshold) {\n    minWindow = minWindow || 0.16;\n    threshold = threshold || 0.01;\n    if ((to - from) < minWindow)\n        return undefined;\n    var sum = 0;\n    for (var i = 0; X[i] < to; i++) {\n        if (X[i] > from)\n            sum += Y[i];\n    }\n    if (sum < threshold) {\n        return undefined;\n    }\n    var center = 0;\n    for (var j = 0; X[j] < to; j++) {\n        if (X[i] > from)\n            center += X[j] * Y[j];\n    }\n    center = center / sum;\n    if (((center - from) < 10e-6) || ((to - center) < 10e-6)) return undefined;\n    if ((center - from) < (minWindow /4)) {\n        return createTree(X, Y, center, to, minWindow, threshold);\n    }\n    else {\n        if ((to - center) < (minWindow / 4)) {\n            return createTree(X, Y, from, center, minWindow, threshold);\n        }\n        else {\n            return {\n                'sum': sum,\n                'center': center,\n                'left': createTree(X, Y, from, center, minWindow, threshold),\n                'right': createTree(X, Y, center, to, minWindow, threshold)\n            };\n        }\n    }\n}\n\n/**\n * Similarity between two nodes\n * @param {{sum: number, center: number, left: {json}, right: {json}}} a - tree A node\n * @param {{sum: number, center: number, left: {json}, right: {json}}} b - tree B node\n * @param {number} alpha - weights the relative importance of intensity vs. shift match\n * @param {number} beta - weights the relative importance of node matching and children matching\n * @param {number} gamma - controls the attenuation of the effect of chemical shift differences\n * @returns {number} similarity measure between tree nodes\n */\nfunction S(a, b, alpha, beta, gamma) {\n    if (a === undefined || b === undefined) {\n        return 0;\n    }\n    else {\n        var C = (alpha*Math.min(a.sum, b.sum)/Math.max(a.sum, b.sum)+ (1-alpha)*Math.exp(-gamma*Math.abs(a.center - b.center)));\n    }\n    return beta*C + (1-beta)*(S(a.left, b.left, alpha, beta, gamma)+S(a.right, b.right, alpha, beta, gamma));\n}\n\n/**\n * @type {number} alpha - weights the relative importance of intensity vs. shift match\n * @type {number} beta - weights the relative importance of node matching and children matching\n * @type {number} gamma - controls the attenuation of the effect of chemical shift differences\n * @type {number} minWindow - smallest range to accept in x\n * @type {number} threshold - smallest range to accept in y\n */\nvar defaultOptions = {\n    minWindow: 0.16,\n    threshold : 0.01,\n    alpha: 0.1,\n    beta: 0.33,\n    gamma: 0.001\n};\n\n/**\n * Builds a tree based in the spectra and compares this trees\n * @param {{x: Array<number>, y: Array<number>}} A - first spectra to be compared\n * @param {{x: Array<number>, y: Array<number>}} B - second spectra to be compared\n * @param {number} from - the low limit of x\n * @param {number} to - the top limit of x\n * @param {{minWindow: number, threshold: number, alpha: number, beta: number, gamma: number}} options\n * @returns {number} similarity measure between the spectra\n */\nfunction tree(A, B, from, to, options) {\n    options = options || {};\n    for (var o in defaultOptions)\n        if (!options.hasOwnProperty(o)) {\n            options[o] = defaultOptions[o];\n        }\n    var Atree, Btree;\n    if (A.sum)\n        Atree = A;\n    else\n        Atree = createTree(A.x, A.y, from, to, options.minWindow, options.threshold);\n    if (B.sum)\n        Btree = B;\n    else\n        Btree = createTree(B.x, B.y, from, to, options.minWindow, options.threshold);\n    return S(Atree, Btree, options.alpha, options.beta, options.gamma);\n}\n\nmodule.exports = {\n    calc: tree,\n    createTree: createTree\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/~/ml-tree-similarity/src/index.js\n ** module id = 72\n ** module chunks = 0\n **/","module.exports = function waveHedges(a, b) {\n    var ii = a.length,\n        ans = 0;\n    for (var i = 0; i < ii ; i++) {\n        ans += 1 - (Math.min(a[i], b[i]) / Math.max(a[i], b[i]));\n    }\n    return ans;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/distances/waveHedges.js\n ** module id = 73\n ** module chunks = 0\n **/","\"use strict\";\n\nexports.cosine = require('./similarities/cosine');\nexports.czekanowski = require('./similarities/czekanowski');\nexports.dice = require('./similarities/dice');\nexports.intersection = require('./similarities/intersection');\nexports.jaccard = require('./similarities/jaccard');\nexports.kulczynski = require('./similarities/kulczynski');\nexports.motyka = require('./similarities/motyka');\nexports.pearson = require('./similarities/pearson');\nexports.squaredChord = require('./similarities/squaredChord');\nexports.tanimoto = require('./similarities/tanimoto');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/similarities.js\n ** module id = 74\n ** module chunks = 0\n **/","module.exports = function cosine(a, b) {\n    var ii = a.length,\n        p = 0,\n        p2 = 0,\n        q2 = 0;\n    for (var i = 0; i < ii ; i++) {\n        p += a[i] * b[i];\n        p2 += a[i] * a[i];\n        q2 += b[i] * b[i];\n    }\n    return p / (Math.sqrt(p2) * Math.sqrt(q2));\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/similarities/cosine.js\n ** module id = 75\n ** module chunks = 0\n **/","var czekanowskiD = require('./../distances/czekanowski');\n\nmodule.exports = function czekanowski(a, b) {\n    return 1 - czekanowskiD(a,b);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/similarities/czekanowski.js\n ** module id = 76\n ** module chunks = 0\n **/","var diceD = require('./../distances/dice');\n\nmodule.exports = function dice(a, b) {\n    return 1 - diceD(a,b);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/similarities/dice.js\n ** module id = 77\n ** module chunks = 0\n **/","var intersectionD = require('./../distances/intersection');\n\nmodule.exports = function intersection(a, b) {\n    return 1 - intersectionD(a,b);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/similarities/intersection.js\n ** module id = 78\n ** module chunks = 0\n **/","var jaccardD = require('./../distances/jaccard');\n\nmodule.exports = function jaccard(a, b) {\n    return 1 - jaccardD(a, b);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/similarities/jaccard.js\n ** module id = 79\n ** module chunks = 0\n **/","var kulczynskiD = require('./../distances/kulczynski');\n\nmodule.exports = function kulczynski(a, b) {\n    return 1 / kulczynskiD(a, b);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/similarities/kulczynski.js\n ** module id = 80\n ** module chunks = 0\n **/","var motykaD = require('./../distances/motyka');\n\nmodule.exports = function motyka(a, b) {\n    return 1 - motykaD(a,b);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/similarities/motyka.js\n ** module id = 81\n ** module chunks = 0\n **/","'use strict';\n\nvar stat=require('ml-stat').array;\nvar cosine=require('./cosine');\n\nmodule.exports = function pearson(a, b) {\n    var avgA=stat.mean(a);\n    var avgB=stat.mean(b);\n\n    var newA=new Array(a.length);\n    var newB=new Array(b.length);\n    for (var i=0; i<newA.length; i++) {\n        newA[i]=a[i]-avgA;\n        newB[i]=b[i]-avgB;\n    }\n\n    return cosine(newA, newB);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/similarities/pearson.js\n ** module id = 82\n ** module chunks = 0\n **/","var squaredChordD = require('./../distances/squaredChord');\n\nmodule.exports = function squaredChord(a, b) {\n    return 1 - squaredChordD(a, b);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-distance/src/similarities/squaredChord.js\n ** module id = 83\n ** module chunks = 0\n **/","\"use strict\";\n\nvar numeric = require('numeric');\n\n/**\n * Savitzky-Golay filter\n * @param {Array <number>} y\n * @param {number} dx\n * @constructor\n */\nfunction SavitzkyGolay (y, dx) {\n    this.data = y;\n    this.h = dx\n}\n\nvar defaultOptions = {\n    windSize: 5,\n    deriv: 1,\n    pol: 2\n};\n\n/**\n * Applies the filter\n * @param options\n * @returns {Array}\n */\nSavitzkyGolay.prototype.calc = function (options) {\n    options = options || {};\n    this.options = {};\n    for (var o in defaultOptions) {\n        if (options.hasOwnProperty(o)) {\n            this.options[o] = options[o];\n        } else {\n            this.options[o] = defaultOptions[o];\n        }\n    }\n    if ((this.options.windSize % 2 === 0) || (this.options.windSize < 5))\n        throw new RangeError('Invalid window size');\n    if ((this.options.deriv < 0) || (this.options.pol < 1))\n        throw new RangeError('Number too small');\n    if ((this.options.pol !== Math.floor(this.options.pol)) || (this.options.deriv !== Math.floor(this.options.deriv)) || (this.options.windSize !== Math.floor(this.options.windSize)))\n        throw new TypeError('Only integers allowed');\n\n    var C, norm;\n    if ((this.options.windSize === 5) && (this.options.pol === 2) && ((this.options.deriv === 1) || (this.options.deriv === 2))) {\n        if (this.options.deriv === 1) {\n            C = [-2,-1,0,1,2];\n            norm = 10;\n        }\n        else {\n            C = [2, -1, -2, -1, 2];\n            norm = 7;\n        }\n    }\n    else {\n        var J = new Array(this.options.windSize);\n        for (var i = 0; i < J.length; i++) {\n            J[i] = new Array(this.options.pol + 1);\n            var inic = -(this.options.windSize - 1) / 2;\n            for (var j = 0; j < J[i].length; j++) {\n                if ((inic + 1 === 0) && (j === 0))\n                    J[i][j] = 1;\n                else\n                    J[i][j] = Math.pow((inic + i), j);\n            }\n        }\n        C = numeric.dot(numeric.inv(numeric.dot(numeric.transpose(J), J)), numeric.transpose(J));\n        C = C[this.options.deriv].concat();\n        norm = 1;\n    }\n    var ans =  new Array(this.data.length);\n    for (var k = Math.ceil(this.options.windSize / 2); k < (ans.length - Math.floor(this.options.windSize / 2)); k++) {\n        var d = 0;\n        for (var l = 0; l < C.length; l++) {\n            d += C[l] * this.data[l + k - Math.floor(this.options.windSize / 2)] / (norm * Math.pow(this.h, this.options.deriv));\n        }\n        ans[k] = d;\n    }\n    for (var a = 0; a < Math.ceil(this.options.windSize / 2); a++)\n        ans[a] = ans[Math.ceil(this.options.windSize / 2)];\n    for (var b = (ans.length - Math.floor(this.options.windSize / 2)); b < ans.length; b++)\n        ans[b] = ans[(ans.length - Math.floor(this.options.windSize / 2)) - 1];\n    return ans;\n};\n\nmodule.exports = SavitzkyGolay;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-savitzky-golay/src/index.js\n ** module id = 84\n ** module chunks = 0\n **/","\"use strict\";\n\nvar numeric = (typeof exports === \"undefined\")?(function numeric() {}):(exports);\nif(typeof global !== \"undefined\") { global.numeric = numeric; }\n\nnumeric.version = \"1.2.6\";\n\n// 1. Utility functions\nnumeric.bench = function bench (f,interval) {\n    var t1,t2,n,i;\n    if(typeof interval === \"undefined\") { interval = 15; }\n    n = 0.5;\n    t1 = new Date();\n    while(1) {\n        n*=2;\n        for(i=n;i>3;i-=4) { f(); f(); f(); f(); }\n        while(i>0) { f(); i--; }\n        t2 = new Date();\n        if(t2-t1 > interval) break;\n    }\n    for(i=n;i>3;i-=4) { f(); f(); f(); f(); }\n    while(i>0) { f(); i--; }\n    t2 = new Date();\n    return 1000*(3*n-1)/(t2-t1);\n}\n\nnumeric._myIndexOf = (function _myIndexOf(w) {\n    var n = this.length,k;\n    for(k=0;k<n;++k) if(this[k]===w) return k;\n    return -1;\n});\nnumeric.myIndexOf = (Array.prototype.indexOf)?Array.prototype.indexOf:numeric._myIndexOf;\n\nnumeric.Function = Function;\nnumeric.precision = 4;\nnumeric.largeArray = 50;\n\nnumeric.prettyPrint = function prettyPrint(x) {\n    function fmtnum(x) {\n        if(x === 0) { return '0'; }\n        if(isNaN(x)) { return 'NaN'; }\n        if(x<0) { return '-'+fmtnum(-x); }\n        if(isFinite(x)) {\n            var scale = Math.floor(Math.log(x) / Math.log(10));\n            var normalized = x / Math.pow(10,scale);\n            var basic = normalized.toPrecision(numeric.precision);\n            if(parseFloat(basic) === 10) { scale++; normalized = 1; basic = normalized.toPrecision(numeric.precision); }\n            return parseFloat(basic).toString()+'e'+scale.toString();\n        }\n        return 'Infinity';\n    }\n    var ret = [];\n    function foo(x) {\n        var k;\n        if(typeof x === \"undefined\") { ret.push(Array(numeric.precision+8).join(' ')); return false; }\n        if(typeof x === \"string\") { ret.push('\"'+x+'\"'); return false; }\n        if(typeof x === \"boolean\") { ret.push(x.toString()); return false; }\n        if(typeof x === \"number\") {\n            var a = fmtnum(x);\n            var b = x.toPrecision(numeric.precision);\n            var c = parseFloat(x.toString()).toString();\n            var d = [a,b,c,parseFloat(b).toString(),parseFloat(c).toString()];\n            for(k=1;k<d.length;k++) { if(d[k].length < a.length) a = d[k]; }\n            ret.push(Array(numeric.precision+8-a.length).join(' ')+a);\n            return false;\n        }\n        if(x === null) { ret.push(\"null\"); return false; }\n        if(typeof x === \"function\") { \n            ret.push(x.toString());\n            var flag = false;\n            for(k in x) { if(x.hasOwnProperty(k)) { \n                if(flag) ret.push(',\\n');\n                else ret.push('\\n{');\n                flag = true; \n                ret.push(k); \n                ret.push(': \\n'); \n                foo(x[k]); \n            } }\n            if(flag) ret.push('}\\n');\n            return true;\n        }\n        if(x instanceof Array) {\n            if(x.length > numeric.largeArray) { ret.push('...Large Array...'); return true; }\n            var flag = false;\n            ret.push('[');\n            for(k=0;k<x.length;k++) { if(k>0) { ret.push(','); if(flag) ret.push('\\n '); } flag = foo(x[k]); }\n            ret.push(']');\n            return true;\n        }\n        ret.push('{');\n        var flag = false;\n        for(k in x) { if(x.hasOwnProperty(k)) { if(flag) ret.push(',\\n'); flag = true; ret.push(k); ret.push(': \\n'); foo(x[k]); } }\n        ret.push('}');\n        return true;\n    }\n    foo(x);\n    return ret.join('');\n}\n\nnumeric.parseDate = function parseDate(d) {\n    function foo(d) {\n        if(typeof d === 'string') { return Date.parse(d.replace(/-/g,'/')); }\n        if(!(d instanceof Array)) { throw new Error(\"parseDate: parameter must be arrays of strings\"); }\n        var ret = [],k;\n        for(k=0;k<d.length;k++) { ret[k] = foo(d[k]); }\n        return ret;\n    }\n    return foo(d);\n}\n\nnumeric.parseFloat = function parseFloat_(d) {\n    function foo(d) {\n        if(typeof d === 'string') { return parseFloat(d); }\n        if(!(d instanceof Array)) { throw new Error(\"parseFloat: parameter must be arrays of strings\"); }\n        var ret = [],k;\n        for(k=0;k<d.length;k++) { ret[k] = foo(d[k]); }\n        return ret;\n    }\n    return foo(d);\n}\n\nnumeric.parseCSV = function parseCSV(t) {\n    var foo = t.split('\\n');\n    var j,k;\n    var ret = [];\n    var pat = /(([^'\",]*)|('[^']*')|(\"[^\"]*\")),/g;\n    var patnum = /^\\s*(([+-]?[0-9]+(\\.[0-9]*)?(e[+-]?[0-9]+)?)|([+-]?[0-9]*(\\.[0-9]+)?(e[+-]?[0-9]+)?))\\s*$/;\n    var stripper = function(n) { return n.substr(0,n.length-1); }\n    var count = 0;\n    for(k=0;k<foo.length;k++) {\n      var bar = (foo[k]+\",\").match(pat),baz;\n      if(bar.length>0) {\n          ret[count] = [];\n          for(j=0;j<bar.length;j++) {\n              baz = stripper(bar[j]);\n              if(patnum.test(baz)) { ret[count][j] = parseFloat(baz); }\n              else ret[count][j] = baz;\n          }\n          count++;\n      }\n    }\n    return ret;\n}\n\nnumeric.toCSV = function toCSV(A) {\n    var s = numeric.dim(A);\n    var i,j,m,n,row,ret;\n    m = s[0];\n    n = s[1];\n    ret = [];\n    for(i=0;i<m;i++) {\n        row = [];\n        for(j=0;j<m;j++) { row[j] = A[i][j].toString(); }\n        ret[i] = row.join(', ');\n    }\n    return ret.join('\\n')+'\\n';\n}\n\nnumeric.getURL = function getURL(url) {\n    var client = new XMLHttpRequest();\n    client.open(\"GET\",url,false);\n    client.send();\n    return client;\n}\n\nnumeric.imageURL = function imageURL(img) {\n    function base64(A) {\n        var n = A.length, i,x,y,z,p,q,r,s;\n        var key = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n        var ret = \"\";\n        for(i=0;i<n;i+=3) {\n            x = A[i];\n            y = A[i+1];\n            z = A[i+2];\n            p = x >> 2;\n            q = ((x & 3) << 4) + (y >> 4);\n            r = ((y & 15) << 2) + (z >> 6);\n            s = z & 63;\n            if(i+1>=n) { r = s = 64; }\n            else if(i+2>=n) { s = 64; }\n            ret += key.charAt(p) + key.charAt(q) + key.charAt(r) + key.charAt(s);\n            }\n        return ret;\n    }\n    function crc32Array (a,from,to) {\n        if(typeof from === \"undefined\") { from = 0; }\n        if(typeof to === \"undefined\") { to = a.length; }\n        var table = [0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,\n                     0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, \n                     0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,\n                     0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, \n                     0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, \n                     0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, \n                     0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,\n                     0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,\n                     0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,\n                     0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01, \n                     0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, \n                     0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, \n                     0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, \n                     0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, \n                     0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F, \n                     0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, \n                     0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, \n                     0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, \n                     0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, \n                     0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, \n                     0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B, \n                     0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79, \n                     0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, \n                     0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, \n                     0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, \n                     0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, \n                     0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, \n                     0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, \n                     0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, \n                     0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9, \n                     0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF, \n                     0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D];\n     \n        var crc = -1, y = 0, n = a.length,i;\n\n        for (i = from; i < to; i++) {\n            y = (crc ^ a[i]) & 0xFF;\n            crc = (crc >>> 8) ^ table[y];\n        }\n     \n        return crc ^ (-1);\n    }\n\n    var h = img[0].length, w = img[0][0].length, s1, s2, next,k,length,a,b,i,j,adler32,crc32;\n    var stream = [\n                  137, 80, 78, 71, 13, 10, 26, 10,                           //  0: PNG signature\n                  0,0,0,13,                                                  //  8: IHDR Chunk length\n                  73, 72, 68, 82,                                            // 12: \"IHDR\" \n                  (w >> 24) & 255, (w >> 16) & 255, (w >> 8) & 255, w&255,   // 16: Width\n                  (h >> 24) & 255, (h >> 16) & 255, (h >> 8) & 255, h&255,   // 20: Height\n                  8,                                                         // 24: bit depth\n                  2,                                                         // 25: RGB\n                  0,                                                         // 26: deflate\n                  0,                                                         // 27: no filter\n                  0,                                                         // 28: no interlace\n                  -1,-2,-3,-4,                                               // 29: CRC\n                  -5,-6,-7,-8,                                               // 33: IDAT Chunk length\n                  73, 68, 65, 84,                                            // 37: \"IDAT\"\n                  // RFC 1950 header starts here\n                  8,                                                         // 41: RFC1950 CMF\n                  29                                                         // 42: RFC1950 FLG\n                  ];\n    crc32 = crc32Array(stream,12,29);\n    stream[29] = (crc32>>24)&255;\n    stream[30] = (crc32>>16)&255;\n    stream[31] = (crc32>>8)&255;\n    stream[32] = (crc32)&255;\n    s1 = 1;\n    s2 = 0;\n    for(i=0;i<h;i++) {\n        if(i<h-1) { stream.push(0); }\n        else { stream.push(1); }\n        a = (3*w+1+(i===0))&255; b = ((3*w+1+(i===0))>>8)&255;\n        stream.push(a); stream.push(b);\n        stream.push((~a)&255); stream.push((~b)&255);\n        if(i===0) stream.push(0);\n        for(j=0;j<w;j++) {\n            for(k=0;k<3;k++) {\n                a = img[k][i][j];\n                if(a>255) a = 255;\n                else if(a<0) a=0;\n                else a = Math.round(a);\n                s1 = (s1 + a )%65521;\n                s2 = (s2 + s1)%65521;\n                stream.push(a);\n            }\n        }\n        stream.push(0);\n    }\n    adler32 = (s2<<16)+s1;\n    stream.push((adler32>>24)&255);\n    stream.push((adler32>>16)&255);\n    stream.push((adler32>>8)&255);\n    stream.push((adler32)&255);\n    length = stream.length - 41;\n    stream[33] = (length>>24)&255;\n    stream[34] = (length>>16)&255;\n    stream[35] = (length>>8)&255;\n    stream[36] = (length)&255;\n    crc32 = crc32Array(stream,37);\n    stream.push((crc32>>24)&255);\n    stream.push((crc32>>16)&255);\n    stream.push((crc32>>8)&255);\n    stream.push((crc32)&255);\n    stream.push(0);\n    stream.push(0);\n    stream.push(0);\n    stream.push(0);\n//    a = stream.length;\n    stream.push(73);  // I\n    stream.push(69);  // E\n    stream.push(78);  // N\n    stream.push(68);  // D\n    stream.push(174); // CRC1\n    stream.push(66);  // CRC2\n    stream.push(96);  // CRC3\n    stream.push(130); // CRC4\n    return 'data:image/png;base64,'+base64(stream);\n}\n\n// 2. Linear algebra with Arrays.\nnumeric._dim = function _dim(x) {\n    var ret = [];\n    while(typeof x === \"object\") { ret.push(x.length); x = x[0]; }\n    return ret;\n}\n\nnumeric.dim = function dim(x) {\n    var y,z;\n    if(typeof x === \"object\") {\n        y = x[0];\n        if(typeof y === \"object\") {\n            z = y[0];\n            if(typeof z === \"object\") {\n                return numeric._dim(x);\n            }\n            return [x.length,y.length];\n        }\n        return [x.length];\n    }\n    return [];\n}\n\nnumeric.mapreduce = function mapreduce(body,init) {\n    return Function('x','accum','_s','_k',\n            'if(typeof accum === \"undefined\") accum = '+init+';\\n'+\n            'if(typeof x === \"number\") { var xi = x; '+body+'; return accum; }\\n'+\n            'if(typeof _s === \"undefined\") _s = numeric.dim(x);\\n'+\n            'if(typeof _k === \"undefined\") _k = 0;\\n'+\n            'var _n = _s[_k];\\n'+\n            'var i,xi;\\n'+\n            'if(_k < _s.length-1) {\\n'+\n            '    for(i=_n-1;i>=0;i--) {\\n'+\n            '        accum = arguments.callee(x[i],accum,_s,_k+1);\\n'+\n            '    }'+\n            '    return accum;\\n'+\n            '}\\n'+\n            'for(i=_n-1;i>=1;i-=2) { \\n'+\n            '    xi = x[i];\\n'+\n            '    '+body+';\\n'+\n            '    xi = x[i-1];\\n'+\n            '    '+body+';\\n'+\n            '}\\n'+\n            'if(i === 0) {\\n'+\n            '    xi = x[i];\\n'+\n            '    '+body+'\\n'+\n            '}\\n'+\n            'return accum;'\n            );\n}\nnumeric.mapreduce2 = function mapreduce2(body,setup) {\n    return Function('x',\n            'var n = x.length;\\n'+\n            'var i,xi;\\n'+setup+';\\n'+\n            'for(i=n-1;i!==-1;--i) { \\n'+\n            '    xi = x[i];\\n'+\n            '    '+body+';\\n'+\n            '}\\n'+\n            'return accum;'\n            );\n}\n\n\nnumeric.same = function same(x,y) {\n    var i,n;\n    if(!(x instanceof Array) || !(y instanceof Array)) { return false; }\n    n = x.length;\n    if(n !== y.length) { return false; }\n    for(i=0;i<n;i++) {\n        if(x[i] === y[i]) { continue; }\n        if(typeof x[i] === \"object\") { if(!same(x[i],y[i])) return false; }\n        else { return false; }\n    }\n    return true;\n}\n\nnumeric.rep = function rep(s,v,k) {\n    if(typeof k === \"undefined\") { k=0; }\n    var n = s[k], ret = Array(n), i;\n    if(k === s.length-1) {\n        for(i=n-2;i>=0;i-=2) { ret[i+1] = v; ret[i] = v; }\n        if(i===-1) { ret[0] = v; }\n        return ret;\n    }\n    for(i=n-1;i>=0;i--) { ret[i] = numeric.rep(s,v,k+1); }\n    return ret;\n}\n\n\nnumeric.dotMMsmall = function dotMMsmall(x,y) {\n    var i,j,k,p,q,r,ret,foo,bar,woo,i0,k0,p0,r0;\n    p = x.length; q = y.length; r = y[0].length;\n    ret = Array(p);\n    for(i=p-1;i>=0;i--) {\n        foo = Array(r);\n        bar = x[i];\n        for(k=r-1;k>=0;k--) {\n            woo = bar[q-1]*y[q-1][k];\n            for(j=q-2;j>=1;j-=2) {\n                i0 = j-1;\n                woo += bar[j]*y[j][k] + bar[i0]*y[i0][k];\n            }\n            if(j===0) { woo += bar[0]*y[0][k]; }\n            foo[k] = woo;\n        }\n        ret[i] = foo;\n    }\n    return ret;\n}\nnumeric._getCol = function _getCol(A,j,x) {\n    var n = A.length, i;\n    for(i=n-1;i>0;--i) {\n        x[i] = A[i][j];\n        --i;\n        x[i] = A[i][j];\n    }\n    if(i===0) x[0] = A[0][j];\n}\nnumeric.dotMMbig = function dotMMbig(x,y){\n    var gc = numeric._getCol, p = y.length, v = Array(p);\n    var m = x.length, n = y[0].length, A = new Array(m), xj;\n    var VV = numeric.dotVV;\n    var i,j,k,z;\n    --p;\n    --m;\n    for(i=m;i!==-1;--i) A[i] = Array(n);\n    --n;\n    for(i=n;i!==-1;--i) {\n        gc(y,i,v);\n        for(j=m;j!==-1;--j) {\n            z=0;\n            xj = x[j];\n            A[j][i] = VV(xj,v);\n        }\n    }\n    return A;\n}\n\nnumeric.dotMV = function dotMV(x,y) {\n    var p = x.length, q = y.length,i;\n    var ret = Array(p), dotVV = numeric.dotVV;\n    for(i=p-1;i>=0;i--) { ret[i] = dotVV(x[i],y); }\n    return ret;\n}\n\nnumeric.dotVM = function dotVM(x,y) {\n    var i,j,k,p,q,r,ret,foo,bar,woo,i0,k0,p0,r0,s1,s2,s3,baz,accum;\n    p = x.length; q = y[0].length;\n    ret = Array(q);\n    for(k=q-1;k>=0;k--) {\n        woo = x[p-1]*y[p-1][k];\n        for(j=p-2;j>=1;j-=2) {\n            i0 = j-1;\n            woo += x[j]*y[j][k] + x[i0]*y[i0][k];\n        }\n        if(j===0) { woo += x[0]*y[0][k]; }\n        ret[k] = woo;\n    }\n    return ret;\n}\n\nnumeric.dotVV = function dotVV(x,y) {\n    var i,n=x.length,i1,ret = x[n-1]*y[n-1];\n    for(i=n-2;i>=1;i-=2) {\n        i1 = i-1;\n        ret += x[i]*y[i] + x[i1]*y[i1];\n    }\n    if(i===0) { ret += x[0]*y[0]; }\n    return ret;\n}\n\nnumeric.dot = function dot(x,y) {\n    var d = numeric.dim;\n    switch(d(x).length*1000+d(y).length) {\n    case 2002:\n        if(y.length < 10) return numeric.dotMMsmall(x,y);\n        else return numeric.dotMMbig(x,y);\n    case 2001: return numeric.dotMV(x,y);\n    case 1002: return numeric.dotVM(x,y);\n    case 1001: return numeric.dotVV(x,y);\n    case 1000: return numeric.mulVS(x,y);\n    case 1: return numeric.mulSV(x,y);\n    case 0: return x*y;\n    default: throw new Error('numeric.dot only works on vectors and matrices');\n    }\n}\n\nnumeric.diag = function diag(d) {\n    var i,i1,j,n = d.length, A = Array(n), Ai;\n    for(i=n-1;i>=0;i--) {\n        Ai = Array(n);\n        i1 = i+2;\n        for(j=n-1;j>=i1;j-=2) {\n            Ai[j] = 0;\n            Ai[j-1] = 0;\n        }\n        if(j>i) { Ai[j] = 0; }\n        Ai[i] = d[i];\n        for(j=i-1;j>=1;j-=2) {\n            Ai[j] = 0;\n            Ai[j-1] = 0;\n        }\n        if(j===0) { Ai[0] = 0; }\n        A[i] = Ai;\n    }\n    return A;\n}\nnumeric.getDiag = function(A) {\n    var n = Math.min(A.length,A[0].length),i,ret = Array(n);\n    for(i=n-1;i>=1;--i) {\n        ret[i] = A[i][i];\n        --i;\n        ret[i] = A[i][i];\n    }\n    if(i===0) {\n        ret[0] = A[0][0];\n    }\n    return ret;\n}\n\nnumeric.identity = function identity(n) { return numeric.diag(numeric.rep([n],1)); }\nnumeric.pointwise = function pointwise(params,body,setup) {\n    if(typeof setup === \"undefined\") { setup = \"\"; }\n    var fun = [];\n    var k;\n    var avec = /\\[i\\]$/,p,thevec = '';\n    var haveret = false;\n    for(k=0;k<params.length;k++) {\n        if(avec.test(params[k])) {\n            p = params[k].substring(0,params[k].length-3);\n            thevec = p;\n        } else { p = params[k]; }\n        if(p==='ret') haveret = true;\n        fun.push(p);\n    }\n    fun[params.length] = '_s';\n    fun[params.length+1] = '_k';\n    fun[params.length+2] = (\n            'if(typeof _s === \"undefined\") _s = numeric.dim('+thevec+');\\n'+\n            'if(typeof _k === \"undefined\") _k = 0;\\n'+\n            'var _n = _s[_k];\\n'+\n            'var i'+(haveret?'':', ret = Array(_n)')+';\\n'+\n            'if(_k < _s.length-1) {\\n'+\n            '    for(i=_n-1;i>=0;i--) ret[i] = arguments.callee('+params.join(',')+',_s,_k+1);\\n'+\n            '    return ret;\\n'+\n            '}\\n'+\n            setup+'\\n'+\n            'for(i=_n-1;i!==-1;--i) {\\n'+\n            '    '+body+'\\n'+\n            '}\\n'+\n            'return ret;'\n            );\n    return Function.apply(null,fun);\n}\nnumeric.pointwise2 = function pointwise2(params,body,setup) {\n    if(typeof setup === \"undefined\") { setup = \"\"; }\n    var fun = [];\n    var k;\n    var avec = /\\[i\\]$/,p,thevec = '';\n    var haveret = false;\n    for(k=0;k<params.length;k++) {\n        if(avec.test(params[k])) {\n            p = params[k].substring(0,params[k].length-3);\n            thevec = p;\n        } else { p = params[k]; }\n        if(p==='ret') haveret = true;\n        fun.push(p);\n    }\n    fun[params.length] = (\n            'var _n = '+thevec+'.length;\\n'+\n            'var i'+(haveret?'':', ret = Array(_n)')+';\\n'+\n            setup+'\\n'+\n            'for(i=_n-1;i!==-1;--i) {\\n'+\n            body+'\\n'+\n            '}\\n'+\n            'return ret;'\n            );\n    return Function.apply(null,fun);\n}\nnumeric._biforeach = (function _biforeach(x,y,s,k,f) {\n    if(k === s.length-1) { f(x,y); return; }\n    var i,n=s[k];\n    for(i=n-1;i>=0;i--) { _biforeach(typeof x===\"object\"?x[i]:x,typeof y===\"object\"?y[i]:y,s,k+1,f); }\n});\nnumeric._biforeach2 = (function _biforeach2(x,y,s,k,f) {\n    if(k === s.length-1) { return f(x,y); }\n    var i,n=s[k],ret = Array(n);\n    for(i=n-1;i>=0;--i) { ret[i] = _biforeach2(typeof x===\"object\"?x[i]:x,typeof y===\"object\"?y[i]:y,s,k+1,f); }\n    return ret;\n});\nnumeric._foreach = (function _foreach(x,s,k,f) {\n    if(k === s.length-1) { f(x); return; }\n    var i,n=s[k];\n    for(i=n-1;i>=0;i--) { _foreach(x[i],s,k+1,f); }\n});\nnumeric._foreach2 = (function _foreach2(x,s,k,f) {\n    if(k === s.length-1) { return f(x); }\n    var i,n=s[k], ret = Array(n);\n    for(i=n-1;i>=0;i--) { ret[i] = _foreach2(x[i],s,k+1,f); }\n    return ret;\n});\n\n/*numeric.anyV = numeric.mapreduce('if(xi) return true;','false');\nnumeric.allV = numeric.mapreduce('if(!xi) return false;','true');\nnumeric.any = function(x) { if(typeof x.length === \"undefined\") return x; return numeric.anyV(x); }\nnumeric.all = function(x) { if(typeof x.length === \"undefined\") return x; return numeric.allV(x); }*/\n\nnumeric.ops2 = {\n        add: '+',\n        sub: '-',\n        mul: '*',\n        div: '/',\n        mod: '%',\n        and: '&&',\n        or:  '||',\n        eq:  '===',\n        neq: '!==',\n        lt:  '<',\n        gt:  '>',\n        leq: '<=',\n        geq: '>=',\n        band: '&',\n        bor: '|',\n        bxor: '^',\n        lshift: '<<',\n        rshift: '>>',\n        rrshift: '>>>'\n};\nnumeric.opseq = {\n        addeq: '+=',\n        subeq: '-=',\n        muleq: '*=',\n        diveq: '/=',\n        modeq: '%=',\n        lshifteq: '<<=',\n        rshifteq: '>>=',\n        rrshifteq: '>>>=',\n        bandeq: '&=',\n        boreq: '|=',\n        bxoreq: '^='\n};\nnumeric.mathfuns = ['abs','acos','asin','atan','ceil','cos',\n                    'exp','floor','log','round','sin','sqrt','tan',\n                    'isNaN','isFinite'];\nnumeric.mathfuns2 = ['atan2','pow','max','min'];\nnumeric.ops1 = {\n        neg: '-',\n        not: '!',\n        bnot: '~',\n        clone: ''\n};\nnumeric.mapreducers = {\n        any: ['if(xi) return true;','var accum = false;'],\n        all: ['if(!xi) return false;','var accum = true;'],\n        sum: ['accum += xi;','var accum = 0;'],\n        prod: ['accum *= xi;','var accum = 1;'],\n        norm2Squared: ['accum += xi*xi;','var accum = 0;'],\n        norminf: ['accum = max(accum,abs(xi));','var accum = 0, max = Math.max, abs = Math.abs;'],\n        norm1: ['accum += abs(xi)','var accum = 0, abs = Math.abs;'],\n        sup: ['accum = max(accum,xi);','var accum = -Infinity, max = Math.max;'],\n        inf: ['accum = min(accum,xi);','var accum = Infinity, min = Math.min;']\n};\n\n(function () {\n    var i,o;\n    for(i=0;i<numeric.mathfuns2.length;++i) {\n        o = numeric.mathfuns2[i];\n        numeric.ops2[o] = o;\n    }\n    for(i in numeric.ops2) {\n        if(numeric.ops2.hasOwnProperty(i)) {\n            o = numeric.ops2[i];\n            var code, codeeq, setup = '';\n            if(numeric.myIndexOf.call(numeric.mathfuns2,i)!==-1) {\n                setup = 'var '+o+' = Math.'+o+';\\n';\n                code = function(r,x,y) { return r+' = '+o+'('+x+','+y+')'; };\n                codeeq = function(x,y) { return x+' = '+o+'('+x+','+y+')'; };\n            } else {\n                code = function(r,x,y) { return r+' = '+x+' '+o+' '+y; };\n                if(numeric.opseq.hasOwnProperty(i+'eq')) {\n                    codeeq = function(x,y) { return x+' '+o+'= '+y; };\n                } else {\n                    codeeq = function(x,y) { return x+' = '+x+' '+o+' '+y; };                    \n                }\n            }\n            numeric[i+'VV'] = numeric.pointwise2(['x[i]','y[i]'],code('ret[i]','x[i]','y[i]'),setup);\n            numeric[i+'SV'] = numeric.pointwise2(['x','y[i]'],code('ret[i]','x','y[i]'),setup);\n            numeric[i+'VS'] = numeric.pointwise2(['x[i]','y'],code('ret[i]','x[i]','y'),setup);\n            numeric[i] = Function(\n                    'var n = arguments.length, i, x = arguments[0], y;\\n'+\n                    'var VV = numeric.'+i+'VV, VS = numeric.'+i+'VS, SV = numeric.'+i+'SV;\\n'+\n                    'var dim = numeric.dim;\\n'+\n                    'for(i=1;i!==n;++i) { \\n'+\n                    '  y = arguments[i];\\n'+\n                    '  if(typeof x === \"object\") {\\n'+\n                    '      if(typeof y === \"object\") x = numeric._biforeach2(x,y,dim(x),0,VV);\\n'+\n                    '      else x = numeric._biforeach2(x,y,dim(x),0,VS);\\n'+\n                    '  } else if(typeof y === \"object\") x = numeric._biforeach2(x,y,dim(y),0,SV);\\n'+\n                    '  else '+codeeq('x','y')+'\\n'+\n                    '}\\nreturn x;\\n');\n            numeric[o] = numeric[i];\n            numeric[i+'eqV'] = numeric.pointwise2(['ret[i]','x[i]'], codeeq('ret[i]','x[i]'),setup);\n            numeric[i+'eqS'] = numeric.pointwise2(['ret[i]','x'], codeeq('ret[i]','x'),setup);\n            numeric[i+'eq'] = Function(\n                    'var n = arguments.length, i, x = arguments[0], y;\\n'+\n                    'var V = numeric.'+i+'eqV, S = numeric.'+i+'eqS\\n'+\n                    'var s = numeric.dim(x);\\n'+\n                    'for(i=1;i!==n;++i) { \\n'+\n                    '  y = arguments[i];\\n'+\n                    '  if(typeof y === \"object\") numeric._biforeach(x,y,s,0,V);\\n'+\n                    '  else numeric._biforeach(x,y,s,0,S);\\n'+\n                    '}\\nreturn x;\\n');\n        }\n    }\n    for(i=0;i<numeric.mathfuns2.length;++i) {\n        o = numeric.mathfuns2[i];\n        delete numeric.ops2[o];\n    }\n    for(i=0;i<numeric.mathfuns.length;++i) {\n        o = numeric.mathfuns[i];\n        numeric.ops1[o] = o;\n    }\n    for(i in numeric.ops1) {\n        if(numeric.ops1.hasOwnProperty(i)) {\n            setup = '';\n            o = numeric.ops1[i];\n            if(numeric.myIndexOf.call(numeric.mathfuns,i)!==-1) {\n                if(Math.hasOwnProperty(o)) setup = 'var '+o+' = Math.'+o+';\\n';\n            }\n            numeric[i+'eqV'] = numeric.pointwise2(['ret[i]'],'ret[i] = '+o+'(ret[i]);',setup);\n            numeric[i+'eq'] = Function('x',\n                    'if(typeof x !== \"object\") return '+o+'x\\n'+\n                    'var i;\\n'+\n                    'var V = numeric.'+i+'eqV;\\n'+\n                    'var s = numeric.dim(x);\\n'+\n                    'numeric._foreach(x,s,0,V);\\n'+\n                    'return x;\\n');\n            numeric[i+'V'] = numeric.pointwise2(['x[i]'],'ret[i] = '+o+'(x[i]);',setup);\n            numeric[i] = Function('x',\n                    'if(typeof x !== \"object\") return '+o+'(x)\\n'+\n                    'var i;\\n'+\n                    'var V = numeric.'+i+'V;\\n'+\n                    'var s = numeric.dim(x);\\n'+\n                    'return numeric._foreach2(x,s,0,V);\\n');\n        }\n    }\n    for(i=0;i<numeric.mathfuns.length;++i) {\n        o = numeric.mathfuns[i];\n        delete numeric.ops1[o];\n    }\n    for(i in numeric.mapreducers) {\n        if(numeric.mapreducers.hasOwnProperty(i)) {\n            o = numeric.mapreducers[i];\n            numeric[i+'V'] = numeric.mapreduce2(o[0],o[1]);\n            numeric[i] = Function('x','s','k',\n                    o[1]+\n                    'if(typeof x !== \"object\") {'+\n                    '    xi = x;\\n'+\n                    o[0]+';\\n'+\n                    '    return accum;\\n'+\n                    '}'+\n                    'if(typeof s === \"undefined\") s = numeric.dim(x);\\n'+\n                    'if(typeof k === \"undefined\") k = 0;\\n'+\n                    'if(k === s.length-1) return numeric.'+i+'V(x);\\n'+\n                    'var xi;\\n'+\n                    'var n = x.length, i;\\n'+\n                    'for(i=n-1;i!==-1;--i) {\\n'+\n                    '   xi = arguments.callee(x[i]);\\n'+\n                    o[0]+';\\n'+\n                    '}\\n'+\n                    'return accum;\\n');\n        }\n    }\n}());\n\nnumeric.truncVV = numeric.pointwise(['x[i]','y[i]'],'ret[i] = round(x[i]/y[i])*y[i];','var round = Math.round;');\nnumeric.truncVS = numeric.pointwise(['x[i]','y'],'ret[i] = round(x[i]/y)*y;','var round = Math.round;');\nnumeric.truncSV = numeric.pointwise(['x','y[i]'],'ret[i] = round(x/y[i])*y[i];','var round = Math.round;');\nnumeric.trunc = function trunc(x,y) {\n    if(typeof x === \"object\") {\n        if(typeof y === \"object\") return numeric.truncVV(x,y);\n        return numeric.truncVS(x,y);\n    }\n    if (typeof y === \"object\") return numeric.truncSV(x,y);\n    return Math.round(x/y)*y;\n}\n\nnumeric.inv = function inv(x) {\n    var s = numeric.dim(x), abs = Math.abs, m = s[0], n = s[1];\n    var A = numeric.clone(x), Ai, Aj;\n    var I = numeric.identity(m), Ii, Ij;\n    var i,j,k,x;\n    for(j=0;j<n;++j) {\n        var i0 = -1;\n        var v0 = -1;\n        for(i=j;i!==m;++i) { k = abs(A[i][j]); if(k>v0) { i0 = i; v0 = k; } }\n        Aj = A[i0]; A[i0] = A[j]; A[j] = Aj;\n        Ij = I[i0]; I[i0] = I[j]; I[j] = Ij;\n        x = Aj[j];\n        for(k=j;k!==n;++k)    Aj[k] /= x; \n        for(k=n-1;k!==-1;--k) Ij[k] /= x;\n        for(i=m-1;i!==-1;--i) {\n            if(i!==j) {\n                Ai = A[i];\n                Ii = I[i];\n                x = Ai[j];\n                for(k=j+1;k!==n;++k)  Ai[k] -= Aj[k]*x;\n                for(k=n-1;k>0;--k) { Ii[k] -= Ij[k]*x; --k; Ii[k] -= Ij[k]*x; }\n                if(k===0) Ii[0] -= Ij[0]*x;\n            }\n        }\n    }\n    return I;\n}\n\nnumeric.det = function det(x) {\n    var s = numeric.dim(x);\n    if(s.length !== 2 || s[0] !== s[1]) { throw new Error('numeric: det() only works on square matrices'); }\n    var n = s[0], ret = 1,i,j,k,A = numeric.clone(x),Aj,Ai,alpha,temp,k1,k2,k3;\n    for(j=0;j<n-1;j++) {\n        k=j;\n        for(i=j+1;i<n;i++) { if(Math.abs(A[i][j]) > Math.abs(A[k][j])) { k = i; } }\n        if(k !== j) {\n            temp = A[k]; A[k] = A[j]; A[j] = temp;\n            ret *= -1;\n        }\n        Aj = A[j];\n        for(i=j+1;i<n;i++) {\n            Ai = A[i];\n            alpha = Ai[j]/Aj[j];\n            for(k=j+1;k<n-1;k+=2) {\n                k1 = k+1;\n                Ai[k] -= Aj[k]*alpha;\n                Ai[k1] -= Aj[k1]*alpha;\n            }\n            if(k!==n) { Ai[k] -= Aj[k]*alpha; }\n        }\n        if(Aj[j] === 0) { return 0; }\n        ret *= Aj[j];\n    }\n    return ret*A[j][j];\n}\n\nnumeric.transpose = function transpose(x) {\n    var i,j,m = x.length,n = x[0].length, ret=Array(n),A0,A1,Bj;\n    for(j=0;j<n;j++) ret[j] = Array(m);\n    for(i=m-1;i>=1;i-=2) {\n        A1 = x[i];\n        A0 = x[i-1];\n        for(j=n-1;j>=1;--j) {\n            Bj = ret[j]; Bj[i] = A1[j]; Bj[i-1] = A0[j];\n            --j;\n            Bj = ret[j]; Bj[i] = A1[j]; Bj[i-1] = A0[j];\n        }\n        if(j===0) {\n            Bj = ret[0]; Bj[i] = A1[0]; Bj[i-1] = A0[0];\n        }\n    }\n    if(i===0) {\n        A0 = x[0];\n        for(j=n-1;j>=1;--j) {\n            ret[j][0] = A0[j];\n            --j;\n            ret[j][0] = A0[j];\n        }\n        if(j===0) { ret[0][0] = A0[0]; }\n    }\n    return ret;\n}\nnumeric.negtranspose = function negtranspose(x) {\n    var i,j,m = x.length,n = x[0].length, ret=Array(n),A0,A1,Bj;\n    for(j=0;j<n;j++) ret[j] = Array(m);\n    for(i=m-1;i>=1;i-=2) {\n        A1 = x[i];\n        A0 = x[i-1];\n        for(j=n-1;j>=1;--j) {\n            Bj = ret[j]; Bj[i] = -A1[j]; Bj[i-1] = -A0[j];\n            --j;\n            Bj = ret[j]; Bj[i] = -A1[j]; Bj[i-1] = -A0[j];\n        }\n        if(j===0) {\n            Bj = ret[0]; Bj[i] = -A1[0]; Bj[i-1] = -A0[0];\n        }\n    }\n    if(i===0) {\n        A0 = x[0];\n        for(j=n-1;j>=1;--j) {\n            ret[j][0] = -A0[j];\n            --j;\n            ret[j][0] = -A0[j];\n        }\n        if(j===0) { ret[0][0] = -A0[0]; }\n    }\n    return ret;\n}\n\nnumeric._random = function _random(s,k) {\n    var i,n=s[k],ret=Array(n), rnd;\n    if(k === s.length-1) {\n        rnd = Math.random;\n        for(i=n-1;i>=1;i-=2) {\n            ret[i] = rnd();\n            ret[i-1] = rnd();\n        }\n        if(i===0) { ret[0] = rnd(); }\n        return ret;\n    }\n    for(i=n-1;i>=0;i--) ret[i] = _random(s,k+1);\n    return ret;\n}\nnumeric.random = function random(s) { return numeric._random(s,0); }\n\nnumeric.norm2 = function norm2(x) { return Math.sqrt(numeric.norm2Squared(x)); }\n\nnumeric.linspace = function linspace(a,b,n) {\n    if(typeof n === \"undefined\") n = Math.max(Math.round(b-a)+1,1);\n    if(n<2) { return n===1?[a]:[]; }\n    var i,ret = Array(n);\n    n--;\n    for(i=n;i>=0;i--) { ret[i] = (i*b+(n-i)*a)/n; }\n    return ret;\n}\n\nnumeric.getBlock = function getBlock(x,from,to) {\n    var s = numeric.dim(x);\n    function foo(x,k) {\n        var i,a = from[k], n = to[k]-a, ret = Array(n);\n        if(k === s.length-1) {\n            for(i=n;i>=0;i--) { ret[i] = x[i+a]; }\n            return ret;\n        }\n        for(i=n;i>=0;i--) { ret[i] = foo(x[i+a],k+1); }\n        return ret;\n    }\n    return foo(x,0);\n}\n\nnumeric.setBlock = function setBlock(x,from,to,B) {\n    var s = numeric.dim(x);\n    function foo(x,y,k) {\n        var i,a = from[k], n = to[k]-a;\n        if(k === s.length-1) { for(i=n;i>=0;i--) { x[i+a] = y[i]; } }\n        for(i=n;i>=0;i--) { foo(x[i+a],y[i],k+1); }\n    }\n    foo(x,B,0);\n    return x;\n}\n\nnumeric.getRange = function getRange(A,I,J) {\n    var m = I.length, n = J.length;\n    var i,j;\n    var B = Array(m), Bi, AI;\n    for(i=m-1;i!==-1;--i) {\n        B[i] = Array(n);\n        Bi = B[i];\n        AI = A[I[i]];\n        for(j=n-1;j!==-1;--j) Bi[j] = AI[J[j]];\n    }\n    return B;\n}\n\nnumeric.blockMatrix = function blockMatrix(X) {\n    var s = numeric.dim(X);\n    if(s.length<4) return numeric.blockMatrix([X]);\n    var m=s[0],n=s[1],M,N,i,j,Xij;\n    M = 0; N = 0;\n    for(i=0;i<m;++i) M+=X[i][0].length;\n    for(j=0;j<n;++j) N+=X[0][j][0].length;\n    var Z = Array(M);\n    for(i=0;i<M;++i) Z[i] = Array(N);\n    var I=0,J,ZI,k,l,Xijk;\n    for(i=0;i<m;++i) {\n        J=N;\n        for(j=n-1;j!==-1;--j) {\n            Xij = X[i][j];\n            J -= Xij[0].length;\n            for(k=Xij.length-1;k!==-1;--k) {\n                Xijk = Xij[k];\n                ZI = Z[I+k];\n                for(l = Xijk.length-1;l!==-1;--l) ZI[J+l] = Xijk[l];\n            }\n        }\n        I += X[i][0].length;\n    }\n    return Z;\n}\n\nnumeric.tensor = function tensor(x,y) {\n    if(typeof x === \"number\" || typeof y === \"number\") return numeric.mul(x,y);\n    var s1 = numeric.dim(x), s2 = numeric.dim(y);\n    if(s1.length !== 1 || s2.length !== 1) {\n        throw new Error('numeric: tensor product is only defined for vectors');\n    }\n    var m = s1[0], n = s2[0], A = Array(m), Ai, i,j,xi;\n    for(i=m-1;i>=0;i--) {\n        Ai = Array(n);\n        xi = x[i];\n        for(j=n-1;j>=3;--j) {\n            Ai[j] = xi * y[j];\n            --j;\n            Ai[j] = xi * y[j];\n            --j;\n            Ai[j] = xi * y[j];\n            --j;\n            Ai[j] = xi * y[j];\n        }\n        while(j>=0) { Ai[j] = xi * y[j]; --j; }\n        A[i] = Ai;\n    }\n    return A;\n}\n\n// 3. The Tensor type T\nnumeric.T = function T(x,y) { this.x = x; this.y = y; }\nnumeric.t = function t(x,y) { return new numeric.T(x,y); }\n\nnumeric.Tbinop = function Tbinop(rr,rc,cr,cc,setup) {\n    var io = numeric.indexOf;\n    if(typeof setup !== \"string\") {\n        var k;\n        setup = '';\n        for(k in numeric) {\n            if(numeric.hasOwnProperty(k) && (rr.indexOf(k)>=0 || rc.indexOf(k)>=0 || cr.indexOf(k)>=0 || cc.indexOf(k)>=0) && k.length>1) {\n                setup += 'var '+k+' = numeric.'+k+';\\n';\n            }\n        }\n    }\n    return Function(['y'],\n            'var x = this;\\n'+\n            'if(!(y instanceof numeric.T)) { y = new numeric.T(y); }\\n'+\n            setup+'\\n'+\n            'if(x.y) {'+\n            '  if(y.y) {'+\n            '    return new numeric.T('+cc+');\\n'+\n            '  }\\n'+\n            '  return new numeric.T('+cr+');\\n'+\n            '}\\n'+\n            'if(y.y) {\\n'+\n            '  return new numeric.T('+rc+');\\n'+\n            '}\\n'+\n            'return new numeric.T('+rr+');\\n'\n    );\n}\n\nnumeric.T.prototype.add = numeric.Tbinop(\n        'add(x.x,y.x)',\n        'add(x.x,y.x),y.y',\n        'add(x.x,y.x),x.y',\n        'add(x.x,y.x),add(x.y,y.y)');\nnumeric.T.prototype.sub = numeric.Tbinop(\n        'sub(x.x,y.x)',\n        'sub(x.x,y.x),neg(y.y)',\n        'sub(x.x,y.x),x.y',\n        'sub(x.x,y.x),sub(x.y,y.y)');\nnumeric.T.prototype.mul = numeric.Tbinop(\n        'mul(x.x,y.x)',\n        'mul(x.x,y.x),mul(x.x,y.y)',\n        'mul(x.x,y.x),mul(x.y,y.x)',\n        'sub(mul(x.x,y.x),mul(x.y,y.y)),add(mul(x.x,y.y),mul(x.y,y.x))');\n\nnumeric.T.prototype.reciprocal = function reciprocal() {\n    var mul = numeric.mul, div = numeric.div;\n    if(this.y) {\n        var d = numeric.add(mul(this.x,this.x),mul(this.y,this.y));\n        return new numeric.T(div(this.x,d),div(numeric.neg(this.y),d));\n    }\n    return new T(div(1,this.x));\n}\nnumeric.T.prototype.div = function div(y) {\n    if(!(y instanceof numeric.T)) y = new numeric.T(y);\n    if(y.y) { return this.mul(y.reciprocal()); }\n    var div = numeric.div;\n    if(this.y) { return new numeric.T(div(this.x,y.x),div(this.y,y.x)); }\n    return new numeric.T(div(this.x,y.x));\n}\nnumeric.T.prototype.dot = numeric.Tbinop(\n        'dot(x.x,y.x)',\n        'dot(x.x,y.x),dot(x.x,y.y)',\n        'dot(x.x,y.x),dot(x.y,y.x)',\n        'sub(dot(x.x,y.x),dot(x.y,y.y)),add(dot(x.x,y.y),dot(x.y,y.x))'\n        );\nnumeric.T.prototype.transpose = function transpose() {\n    var t = numeric.transpose, x = this.x, y = this.y;\n    if(y) { return new numeric.T(t(x),t(y)); }\n    return new numeric.T(t(x));\n}\nnumeric.T.prototype.transjugate = function transjugate() {\n    var t = numeric.transpose, x = this.x, y = this.y;\n    if(y) { return new numeric.T(t(x),numeric.negtranspose(y)); }\n    return new numeric.T(t(x));\n}\nnumeric.Tunop = function Tunop(r,c,s) {\n    if(typeof s !== \"string\") { s = ''; }\n    return Function(\n            'var x = this;\\n'+\n            s+'\\n'+\n            'if(x.y) {'+\n            '  '+c+';\\n'+\n            '}\\n'+\n            r+';\\n'\n    );\n}\n\nnumeric.T.prototype.exp = numeric.Tunop(\n        'return new numeric.T(ex)',\n        'return new numeric.T(mul(cos(x.y),ex),mul(sin(x.y),ex))',\n        'var ex = numeric.exp(x.x), cos = numeric.cos, sin = numeric.sin, mul = numeric.mul;');\nnumeric.T.prototype.conj = numeric.Tunop(\n        'return new numeric.T(x.x);',\n        'return new numeric.T(x.x,numeric.neg(x.y));');\nnumeric.T.prototype.neg = numeric.Tunop(\n        'return new numeric.T(neg(x.x));',\n        'return new numeric.T(neg(x.x),neg(x.y));',\n        'var neg = numeric.neg;');\nnumeric.T.prototype.sin = numeric.Tunop(\n        'return new numeric.T(numeric.sin(x.x))',\n        'return x.exp().sub(x.neg().exp()).div(new numeric.T(0,2));');\nnumeric.T.prototype.cos = numeric.Tunop(\n        'return new numeric.T(numeric.cos(x.x))',\n        'return x.exp().add(x.neg().exp()).div(2);');\nnumeric.T.prototype.abs = numeric.Tunop(\n        'return new numeric.T(numeric.abs(x.x));',\n        'return new numeric.T(numeric.sqrt(numeric.add(mul(x.x,x.x),mul(x.y,x.y))));',\n        'var mul = numeric.mul;');\nnumeric.T.prototype.log = numeric.Tunop(\n        'return new numeric.T(numeric.log(x.x));',\n        'var theta = new numeric.T(numeric.atan2(x.y,x.x)), r = x.abs();\\n'+\n        'return new numeric.T(numeric.log(r.x),theta.x);');\nnumeric.T.prototype.norm2 = numeric.Tunop(\n        'return numeric.norm2(x.x);',\n        'var f = numeric.norm2Squared;\\n'+\n        'return Math.sqrt(f(x.x)+f(x.y));');\nnumeric.T.prototype.inv = function inv() {\n    var A = this;\n    if(typeof A.y === \"undefined\") { return new numeric.T(numeric.inv(A.x)); }\n    var n = A.x.length, i, j, k;\n    var Rx = numeric.identity(n),Ry = numeric.rep([n,n],0);\n    var Ax = numeric.clone(A.x), Ay = numeric.clone(A.y);\n    var Aix, Aiy, Ajx, Ajy, Rix, Riy, Rjx, Rjy;\n    var i,j,k,d,d1,ax,ay,bx,by,temp;\n    for(i=0;i<n;i++) {\n        ax = Ax[i][i]; ay = Ay[i][i];\n        d = ax*ax+ay*ay;\n        k = i;\n        for(j=i+1;j<n;j++) {\n            ax = Ax[j][i]; ay = Ay[j][i];\n            d1 = ax*ax+ay*ay;\n            if(d1 > d) { k=j; d = d1; }\n        }\n        if(k!==i) {\n            temp = Ax[i]; Ax[i] = Ax[k]; Ax[k] = temp;\n            temp = Ay[i]; Ay[i] = Ay[k]; Ay[k] = temp;\n            temp = Rx[i]; Rx[i] = Rx[k]; Rx[k] = temp;\n            temp = Ry[i]; Ry[i] = Ry[k]; Ry[k] = temp;\n        }\n        Aix = Ax[i]; Aiy = Ay[i];\n        Rix = Rx[i]; Riy = Ry[i];\n        ax = Aix[i]; ay = Aiy[i];\n        for(j=i+1;j<n;j++) {\n            bx = Aix[j]; by = Aiy[j];\n            Aix[j] = (bx*ax+by*ay)/d;\n            Aiy[j] = (by*ax-bx*ay)/d;\n        }\n        for(j=0;j<n;j++) {\n            bx = Rix[j]; by = Riy[j];\n            Rix[j] = (bx*ax+by*ay)/d;\n            Riy[j] = (by*ax-bx*ay)/d;\n        }\n        for(j=i+1;j<n;j++) {\n            Ajx = Ax[j]; Ajy = Ay[j];\n            Rjx = Rx[j]; Rjy = Ry[j];\n            ax = Ajx[i]; ay = Ajy[i];\n            for(k=i+1;k<n;k++) {\n                bx = Aix[k]; by = Aiy[k];\n                Ajx[k] -= bx*ax-by*ay;\n                Ajy[k] -= by*ax+bx*ay;\n            }\n            for(k=0;k<n;k++) {\n                bx = Rix[k]; by = Riy[k];\n                Rjx[k] -= bx*ax-by*ay;\n                Rjy[k] -= by*ax+bx*ay;\n            }\n        }\n    }\n    for(i=n-1;i>0;i--) {\n        Rix = Rx[i]; Riy = Ry[i];\n        for(j=i-1;j>=0;j--) {\n            Rjx = Rx[j]; Rjy = Ry[j];\n            ax = Ax[j][i]; ay = Ay[j][i];\n            for(k=n-1;k>=0;k--) {\n                bx = Rix[k]; by = Riy[k];\n                Rjx[k] -= ax*bx - ay*by;\n                Rjy[k] -= ax*by + ay*bx;\n            }\n        }\n    }\n    return new numeric.T(Rx,Ry);\n}\nnumeric.T.prototype.get = function get(i) {\n    var x = this.x, y = this.y, k = 0, ik, n = i.length;\n    if(y) {\n        while(k<n) {\n            ik = i[k];\n            x = x[ik];\n            y = y[ik];\n            k++;\n        }\n        return new numeric.T(x,y);\n    }\n    while(k<n) {\n        ik = i[k];\n        x = x[ik];\n        k++;\n    }\n    return new numeric.T(x);\n}\nnumeric.T.prototype.set = function set(i,v) {\n    var x = this.x, y = this.y, k = 0, ik, n = i.length, vx = v.x, vy = v.y;\n    if(n===0) {\n        if(vy) { this.y = vy; }\n        else if(y) { this.y = undefined; }\n        this.x = x;\n        return this;\n    }\n    if(vy) {\n        if(y) { /* ok */ }\n        else {\n            y = numeric.rep(numeric.dim(x),0);\n            this.y = y;\n        }\n        while(k<n-1) {\n            ik = i[k];\n            x = x[ik];\n            y = y[ik];\n            k++;\n        }\n        ik = i[k];\n        x[ik] = vx;\n        y[ik] = vy;\n        return this;\n    }\n    if(y) {\n        while(k<n-1) {\n            ik = i[k];\n            x = x[ik];\n            y = y[ik];\n            k++;\n        }\n        ik = i[k];\n        x[ik] = vx;\n        if(vx instanceof Array) y[ik] = numeric.rep(numeric.dim(vx),0);\n        else y[ik] = 0;\n        return this;\n    }\n    while(k<n-1) {\n        ik = i[k];\n        x = x[ik];\n        k++;\n    }\n    ik = i[k];\n    x[ik] = vx;\n    return this;\n}\nnumeric.T.prototype.getRows = function getRows(i0,i1) {\n    var n = i1-i0+1, j;\n    var rx = Array(n), ry, x = this.x, y = this.y;\n    for(j=i0;j<=i1;j++) { rx[j-i0] = x[j]; }\n    if(y) {\n        ry = Array(n);\n        for(j=i0;j<=i1;j++) { ry[j-i0] = y[j]; }\n        return new numeric.T(rx,ry);\n    }\n    return new numeric.T(rx);\n}\nnumeric.T.prototype.setRows = function setRows(i0,i1,A) {\n    var j;\n    var rx = this.x, ry = this.y, x = A.x, y = A.y;\n    for(j=i0;j<=i1;j++) { rx[j] = x[j-i0]; }\n    if(y) {\n        if(!ry) { ry = numeric.rep(numeric.dim(rx),0); this.y = ry; }\n        for(j=i0;j<=i1;j++) { ry[j] = y[j-i0]; }\n    } else if(ry) {\n        for(j=i0;j<=i1;j++) { ry[j] = numeric.rep([x[j-i0].length],0); }\n    }\n    return this;\n}\nnumeric.T.prototype.getRow = function getRow(k) {\n    var x = this.x, y = this.y;\n    if(y) { return new numeric.T(x[k],y[k]); }\n    return new numeric.T(x[k]);\n}\nnumeric.T.prototype.setRow = function setRow(i,v) {\n    var rx = this.x, ry = this.y, x = v.x, y = v.y;\n    rx[i] = x;\n    if(y) {\n        if(!ry) { ry = numeric.rep(numeric.dim(rx),0); this.y = ry; }\n        ry[i] = y;\n    } else if(ry) {\n        ry = numeric.rep([x.length],0);\n    }\n    return this;\n}\n\nnumeric.T.prototype.getBlock = function getBlock(from,to) {\n    var x = this.x, y = this.y, b = numeric.getBlock;\n    if(y) { return new numeric.T(b(x,from,to),b(y,from,to)); }\n    return new numeric.T(b(x,from,to));\n}\nnumeric.T.prototype.setBlock = function setBlock(from,to,A) {\n    if(!(A instanceof numeric.T)) A = new numeric.T(A);\n    var x = this.x, y = this.y, b = numeric.setBlock, Ax = A.x, Ay = A.y;\n    if(Ay) {\n        if(!y) { this.y = numeric.rep(numeric.dim(this),0); y = this.y; }\n        b(x,from,to,Ax);\n        b(y,from,to,Ay);\n        return this;\n    }\n    b(x,from,to,Ax);\n    if(y) b(y,from,to,numeric.rep(numeric.dim(Ax),0));\n}\nnumeric.T.rep = function rep(s,v) {\n    var T = numeric.T;\n    if(!(v instanceof T)) v = new T(v);\n    var x = v.x, y = v.y, r = numeric.rep;\n    if(y) return new T(r(s,x),r(s,y));\n    return new T(r(s,x));\n}\nnumeric.T.diag = function diag(d) {\n    if(!(d instanceof numeric.T)) d = new numeric.T(d);\n    var x = d.x, y = d.y, diag = numeric.diag;\n    if(y) return new numeric.T(diag(x),diag(y));\n    return new numeric.T(diag(x));\n}\nnumeric.T.eig = function eig() {\n    if(this.y) { throw new Error('eig: not implemented for complex matrices.'); }\n    return numeric.eig(this.x);\n}\nnumeric.T.identity = function identity(n) { return new numeric.T(numeric.identity(n)); }\nnumeric.T.prototype.getDiag = function getDiag() {\n    var n = numeric;\n    var x = this.x, y = this.y;\n    if(y) { return new n.T(n.getDiag(x),n.getDiag(y)); }\n    return new n.T(n.getDiag(x));\n}\n\n// 4. Eigenvalues of real matrices\n\nnumeric.house = function house(x) {\n    var v = numeric.clone(x);\n    var s = x[0] >= 0 ? 1 : -1;\n    var alpha = s*numeric.norm2(x);\n    v[0] += alpha;\n    var foo = numeric.norm2(v);\n    if(foo === 0) { /* this should not happen */ throw new Error('eig: internal error'); }\n    return numeric.div(v,foo);\n}\n\nnumeric.toUpperHessenberg = function toUpperHessenberg(me) {\n    var s = numeric.dim(me);\n    if(s.length !== 2 || s[0] !== s[1]) { throw new Error('numeric: toUpperHessenberg() only works on square matrices'); }\n    var m = s[0], i,j,k,x,v,A = numeric.clone(me),B,C,Ai,Ci,Q = numeric.identity(m),Qi;\n    for(j=0;j<m-2;j++) {\n        x = Array(m-j-1);\n        for(i=j+1;i<m;i++) { x[i-j-1] = A[i][j]; }\n        if(numeric.norm2(x)>0) {\n            v = numeric.house(x);\n            B = numeric.getBlock(A,[j+1,j],[m-1,m-1]);\n            C = numeric.tensor(v,numeric.dot(v,B));\n            for(i=j+1;i<m;i++) { Ai = A[i]; Ci = C[i-j-1]; for(k=j;k<m;k++) Ai[k] -= 2*Ci[k-j]; }\n            B = numeric.getBlock(A,[0,j+1],[m-1,m-1]);\n            C = numeric.tensor(numeric.dot(B,v),v);\n            for(i=0;i<m;i++) { Ai = A[i]; Ci = C[i]; for(k=j+1;k<m;k++) Ai[k] -= 2*Ci[k-j-1]; }\n            B = Array(m-j-1);\n            for(i=j+1;i<m;i++) B[i-j-1] = Q[i];\n            C = numeric.tensor(v,numeric.dot(v,B));\n            for(i=j+1;i<m;i++) { Qi = Q[i]; Ci = C[i-j-1]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }\n        }\n    }\n    return {H:A, Q:Q};\n}\n\nnumeric.epsilon = 2.220446049250313e-16;\n\nnumeric.QRFrancis = function(H,maxiter) {\n    if(typeof maxiter === \"undefined\") { maxiter = 10000; }\n    H = numeric.clone(H);\n    var H0 = numeric.clone(H);\n    var s = numeric.dim(H),m=s[0],x,v,a,b,c,d,det,tr, Hloc, Q = numeric.identity(m), Qi, Hi, B, C, Ci,i,j,k,iter;\n    if(m<3) { return {Q:Q, B:[ [0,m-1] ]}; }\n    var epsilon = numeric.epsilon;\n    for(iter=0;iter<maxiter;iter++) {\n        for(j=0;j<m-1;j++) {\n            if(Math.abs(H[j+1][j]) < epsilon*(Math.abs(H[j][j])+Math.abs(H[j+1][j+1]))) {\n                var QH1 = numeric.QRFrancis(numeric.getBlock(H,[0,0],[j,j]),maxiter);\n                var QH2 = numeric.QRFrancis(numeric.getBlock(H,[j+1,j+1],[m-1,m-1]),maxiter);\n                B = Array(j+1);\n                for(i=0;i<=j;i++) { B[i] = Q[i]; }\n                C = numeric.dot(QH1.Q,B);\n                for(i=0;i<=j;i++) { Q[i] = C[i]; }\n                B = Array(m-j-1);\n                for(i=j+1;i<m;i++) { B[i-j-1] = Q[i]; }\n                C = numeric.dot(QH2.Q,B);\n                for(i=j+1;i<m;i++) { Q[i] = C[i-j-1]; }\n                return {Q:Q,B:QH1.B.concat(numeric.add(QH2.B,j+1))};\n            }\n        }\n        a = H[m-2][m-2]; b = H[m-2][m-1];\n        c = H[m-1][m-2]; d = H[m-1][m-1];\n        tr = a+d;\n        det = (a*d-b*c);\n        Hloc = numeric.getBlock(H, [0,0], [2,2]);\n        if(tr*tr>=4*det) {\n            var s1,s2;\n            s1 = 0.5*(tr+Math.sqrt(tr*tr-4*det));\n            s2 = 0.5*(tr-Math.sqrt(tr*tr-4*det));\n            Hloc = numeric.add(numeric.sub(numeric.dot(Hloc,Hloc),\n                                           numeric.mul(Hloc,s1+s2)),\n                               numeric.diag(numeric.rep([3],s1*s2)));\n        } else {\n            Hloc = numeric.add(numeric.sub(numeric.dot(Hloc,Hloc),\n                                           numeric.mul(Hloc,tr)),\n                               numeric.diag(numeric.rep([3],det)));\n        }\n        x = [Hloc[0][0],Hloc[1][0],Hloc[2][0]];\n        v = numeric.house(x);\n        B = [H[0],H[1],H[2]];\n        C = numeric.tensor(v,numeric.dot(v,B));\n        for(i=0;i<3;i++) { Hi = H[i]; Ci = C[i]; for(k=0;k<m;k++) Hi[k] -= 2*Ci[k]; }\n        B = numeric.getBlock(H, [0,0],[m-1,2]);\n        C = numeric.tensor(numeric.dot(B,v),v);\n        for(i=0;i<m;i++) { Hi = H[i]; Ci = C[i]; for(k=0;k<3;k++) Hi[k] -= 2*Ci[k]; }\n        B = [Q[0],Q[1],Q[2]];\n        C = numeric.tensor(v,numeric.dot(v,B));\n        for(i=0;i<3;i++) { Qi = Q[i]; Ci = C[i]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }\n        var J;\n        for(j=0;j<m-2;j++) {\n            for(k=j;k<=j+1;k++) {\n                if(Math.abs(H[k+1][k]) < epsilon*(Math.abs(H[k][k])+Math.abs(H[k+1][k+1]))) {\n                    var QH1 = numeric.QRFrancis(numeric.getBlock(H,[0,0],[k,k]),maxiter);\n                    var QH2 = numeric.QRFrancis(numeric.getBlock(H,[k+1,k+1],[m-1,m-1]),maxiter);\n                    B = Array(k+1);\n                    for(i=0;i<=k;i++) { B[i] = Q[i]; }\n                    C = numeric.dot(QH1.Q,B);\n                    for(i=0;i<=k;i++) { Q[i] = C[i]; }\n                    B = Array(m-k-1);\n                    for(i=k+1;i<m;i++) { B[i-k-1] = Q[i]; }\n                    C = numeric.dot(QH2.Q,B);\n                    for(i=k+1;i<m;i++) { Q[i] = C[i-k-1]; }\n                    return {Q:Q,B:QH1.B.concat(numeric.add(QH2.B,k+1))};\n                }\n            }\n            J = Math.min(m-1,j+3);\n            x = Array(J-j);\n            for(i=j+1;i<=J;i++) { x[i-j-1] = H[i][j]; }\n            v = numeric.house(x);\n            B = numeric.getBlock(H, [j+1,j],[J,m-1]);\n            C = numeric.tensor(v,numeric.dot(v,B));\n            for(i=j+1;i<=J;i++) { Hi = H[i]; Ci = C[i-j-1]; for(k=j;k<m;k++) Hi[k] -= 2*Ci[k-j]; }\n            B = numeric.getBlock(H, [0,j+1],[m-1,J]);\n            C = numeric.tensor(numeric.dot(B,v),v);\n            for(i=0;i<m;i++) { Hi = H[i]; Ci = C[i]; for(k=j+1;k<=J;k++) Hi[k] -= 2*Ci[k-j-1]; }\n            B = Array(J-j);\n            for(i=j+1;i<=J;i++) B[i-j-1] = Q[i];\n            C = numeric.tensor(v,numeric.dot(v,B));\n            for(i=j+1;i<=J;i++) { Qi = Q[i]; Ci = C[i-j-1]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }\n        }\n    }\n    throw new Error('numeric: eigenvalue iteration does not converge -- increase maxiter?');\n}\n\nnumeric.eig = function eig(A,maxiter) {\n    var QH = numeric.toUpperHessenberg(A);\n    var QB = numeric.QRFrancis(QH.H,maxiter);\n    var T = numeric.T;\n    var n = A.length,i,k,flag = false,B = QB.B,H = numeric.dot(QB.Q,numeric.dot(QH.H,numeric.transpose(QB.Q)));\n    var Q = new T(numeric.dot(QB.Q,QH.Q)),Q0;\n    var m = B.length,j;\n    var a,b,c,d,p1,p2,disc,x,y,p,q,n1,n2;\n    var sqrt = Math.sqrt;\n    for(k=0;k<m;k++) {\n        i = B[k][0];\n        if(i === B[k][1]) {\n            // nothing\n        } else {\n            j = i+1;\n            a = H[i][i];\n            b = H[i][j];\n            c = H[j][i];\n            d = H[j][j];\n            if(b === 0 && c === 0) continue;\n            p1 = -a-d;\n            p2 = a*d-b*c;\n            disc = p1*p1-4*p2;\n            if(disc>=0) {\n                if(p1<0) x = -0.5*(p1-sqrt(disc));\n                else     x = -0.5*(p1+sqrt(disc));\n                n1 = (a-x)*(a-x)+b*b;\n                n2 = c*c+(d-x)*(d-x);\n                if(n1>n2) {\n                    n1 = sqrt(n1);\n                    p = (a-x)/n1;\n                    q = b/n1;\n                } else {\n                    n2 = sqrt(n2);\n                    p = c/n2;\n                    q = (d-x)/n2;\n                }\n                Q0 = new T([[q,-p],[p,q]]);\n                Q.setRows(i,j,Q0.dot(Q.getRows(i,j)));\n            } else {\n                x = -0.5*p1;\n                y = 0.5*sqrt(-disc);\n                n1 = (a-x)*(a-x)+b*b;\n                n2 = c*c+(d-x)*(d-x);\n                if(n1>n2) {\n                    n1 = sqrt(n1+y*y);\n                    p = (a-x)/n1;\n                    q = b/n1;\n                    x = 0;\n                    y /= n1;\n                } else {\n                    n2 = sqrt(n2+y*y);\n                    p = c/n2;\n                    q = (d-x)/n2;\n                    x = y/n2;\n                    y = 0;\n                }\n                Q0 = new T([[q,-p],[p,q]],[[x,y],[y,-x]]);\n                Q.setRows(i,j,Q0.dot(Q.getRows(i,j)));\n            }\n        }\n    }\n    var R = Q.dot(A).dot(Q.transjugate()), n = A.length, E = numeric.T.identity(n);\n    for(j=0;j<n;j++) {\n        if(j>0) {\n            for(k=j-1;k>=0;k--) {\n                var Rk = R.get([k,k]), Rj = R.get([j,j]);\n                if(numeric.neq(Rk.x,Rj.x) || numeric.neq(Rk.y,Rj.y)) {\n                    x = R.getRow(k).getBlock([k],[j-1]);\n                    y = E.getRow(j).getBlock([k],[j-1]);\n                    E.set([j,k],(R.get([k,j]).neg().sub(x.dot(y))).div(Rk.sub(Rj)));\n                } else {\n                    E.setRow(j,E.getRow(k));\n                    continue;\n                }\n            }\n        }\n    }\n    for(j=0;j<n;j++) {\n        x = E.getRow(j);\n        E.setRow(j,x.div(x.norm2()));\n    }\n    E = E.transpose();\n    E = Q.transjugate().dot(E);\n    return { lambda:R.getDiag(), E:E };\n};\n\n// 5. Compressed Column Storage matrices\nnumeric.ccsSparse = function ccsSparse(A) {\n    var m = A.length,n,foo, i,j, counts = [];\n    for(i=m-1;i!==-1;--i) {\n        foo = A[i];\n        for(j in foo) {\n            j = parseInt(j);\n            while(j>=counts.length) counts[counts.length] = 0;\n            if(foo[j]!==0) counts[j]++;\n        }\n    }\n    var n = counts.length;\n    var Ai = Array(n+1);\n    Ai[0] = 0;\n    for(i=0;i<n;++i) Ai[i+1] = Ai[i] + counts[i];\n    var Aj = Array(Ai[n]), Av = Array(Ai[n]);\n    for(i=m-1;i!==-1;--i) {\n        foo = A[i];\n        for(j in foo) {\n            if(foo[j]!==0) {\n                counts[j]--;\n                Aj[Ai[j]+counts[j]] = i;\n                Av[Ai[j]+counts[j]] = foo[j];\n            }\n        }\n    }\n    return [Ai,Aj,Av];\n}\nnumeric.ccsFull = function ccsFull(A) {\n    var Ai = A[0], Aj = A[1], Av = A[2], s = numeric.ccsDim(A), m = s[0], n = s[1], i,j,j0,j1,k;\n    var B = numeric.rep([m,n],0);\n    for(i=0;i<n;i++) {\n        j0 = Ai[i];\n        j1 = Ai[i+1];\n        for(j=j0;j<j1;++j) { B[Aj[j]][i] = Av[j]; }\n    }\n    return B;\n}\nnumeric.ccsTSolve = function ccsTSolve(A,b,x,bj,xj) {\n    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, max = Math.max,n=0;\n    if(typeof bj === \"undefined\") x = numeric.rep([m],0);\n    if(typeof bj === \"undefined\") bj = numeric.linspace(0,x.length-1);\n    if(typeof xj === \"undefined\") xj = [];\n    function dfs(j) {\n        var k;\n        if(x[j] !== 0) return;\n        x[j] = 1;\n        for(k=Ai[j];k<Ai[j+1];++k) dfs(Aj[k]);\n        xj[n] = j;\n        ++n;\n    }\n    var i,j,j0,j1,k,l,l0,l1,a;\n    for(i=bj.length-1;i!==-1;--i) { dfs(bj[i]); }\n    xj.length = n;\n    for(i=xj.length-1;i!==-1;--i) { x[xj[i]] = 0; }\n    for(i=bj.length-1;i!==-1;--i) { j = bj[i]; x[j] = b[j]; }\n    for(i=xj.length-1;i!==-1;--i) {\n        j = xj[i];\n        j0 = Ai[j];\n        j1 = max(Ai[j+1],j0);\n        for(k=j0;k!==j1;++k) { if(Aj[k] === j) { x[j] /= Av[k]; break; } }\n        a = x[j];\n        for(k=j0;k!==j1;++k) {\n            l = Aj[k];\n            if(l !== j) x[l] -= a*Av[k];\n        }\n    }\n    return x;\n}\nnumeric.ccsDFS = function ccsDFS(n) {\n    this.k = Array(n);\n    this.k1 = Array(n);\n    this.j = Array(n);\n}\nnumeric.ccsDFS.prototype.dfs = function dfs(J,Ai,Aj,x,xj,Pinv) {\n    var m = 0,foo,n=xj.length;\n    var k = this.k, k1 = this.k1, j = this.j,km,k11;\n    if(x[J]!==0) return;\n    x[J] = 1;\n    j[0] = J;\n    k[0] = km = Ai[J];\n    k1[0] = k11 = Ai[J+1];\n    while(1) {\n        if(km >= k11) {\n            xj[n] = j[m];\n            if(m===0) return;\n            ++n;\n            --m;\n            km = k[m];\n            k11 = k1[m];\n        } else {\n            foo = Pinv[Aj[km]];\n            if(x[foo] === 0) {\n                x[foo] = 1;\n                k[m] = km;\n                ++m;\n                j[m] = foo;\n                km = Ai[foo];\n                k1[m] = k11 = Ai[foo+1];\n            } else ++km;\n        }\n    }\n}\nnumeric.ccsLPSolve = function ccsLPSolve(A,B,x,xj,I,Pinv,dfs) {\n    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, n=0;\n    var Bi = B[0], Bj = B[1], Bv = B[2];\n    \n    var i,i0,i1,j,J,j0,j1,k,l,l0,l1,a;\n    i0 = Bi[I];\n    i1 = Bi[I+1];\n    xj.length = 0;\n    for(i=i0;i<i1;++i) { dfs.dfs(Pinv[Bj[i]],Ai,Aj,x,xj,Pinv); }\n    for(i=xj.length-1;i!==-1;--i) { x[xj[i]] = 0; }\n    for(i=i0;i!==i1;++i) { j = Pinv[Bj[i]]; x[j] = Bv[i]; }\n    for(i=xj.length-1;i!==-1;--i) {\n        j = xj[i];\n        j0 = Ai[j];\n        j1 = Ai[j+1];\n        for(k=j0;k<j1;++k) { if(Pinv[Aj[k]] === j) { x[j] /= Av[k]; break; } }\n        a = x[j];\n        for(k=j0;k<j1;++k) {\n            l = Pinv[Aj[k]];\n            if(l !== j) x[l] -= a*Av[k];\n        }\n    }\n    return x;\n}\nnumeric.ccsLUP1 = function ccsLUP1(A,threshold) {\n    var m = A[0].length-1;\n    var L = [numeric.rep([m+1],0),[],[]], U = [numeric.rep([m+1], 0),[],[]];\n    var Li = L[0], Lj = L[1], Lv = L[2], Ui = U[0], Uj = U[1], Uv = U[2];\n    var x = numeric.rep([m],0), xj = numeric.rep([m],0);\n    var i,j,k,j0,j1,a,e,c,d,K;\n    var sol = numeric.ccsLPSolve, max = Math.max, abs = Math.abs;\n    var P = numeric.linspace(0,m-1),Pinv = numeric.linspace(0,m-1);\n    var dfs = new numeric.ccsDFS(m);\n    if(typeof threshold === \"undefined\") { threshold = 1; }\n    for(i=0;i<m;++i) {\n        sol(L,A,x,xj,i,Pinv,dfs);\n        a = -1;\n        e = -1;\n        for(j=xj.length-1;j!==-1;--j) {\n            k = xj[j];\n            if(k <= i) continue;\n            c = abs(x[k]);\n            if(c > a) { e = k; a = c; }\n        }\n        if(abs(x[i])<threshold*a) {\n            j = P[i];\n            a = P[e];\n            P[i] = a; Pinv[a] = i;\n            P[e] = j; Pinv[j] = e;\n            a = x[i]; x[i] = x[e]; x[e] = a;\n        }\n        a = Li[i];\n        e = Ui[i];\n        d = x[i];\n        Lj[a] = P[i];\n        Lv[a] = 1;\n        ++a;\n        for(j=xj.length-1;j!==-1;--j) {\n            k = xj[j];\n            c = x[k];\n            xj[j] = 0;\n            x[k] = 0;\n            if(k<=i) { Uj[e] = k; Uv[e] = c;   ++e; }\n            else     { Lj[a] = P[k]; Lv[a] = c/d; ++a; }\n        }\n        Li[i+1] = a;\n        Ui[i+1] = e;\n    }\n    for(j=Lj.length-1;j!==-1;--j) { Lj[j] = Pinv[Lj[j]]; }\n    return {L:L, U:U, P:P, Pinv:Pinv};\n}\nnumeric.ccsDFS0 = function ccsDFS0(n) {\n    this.k = Array(n);\n    this.k1 = Array(n);\n    this.j = Array(n);\n}\nnumeric.ccsDFS0.prototype.dfs = function dfs(J,Ai,Aj,x,xj,Pinv,P) {\n    var m = 0,foo,n=xj.length;\n    var k = this.k, k1 = this.k1, j = this.j,km,k11;\n    if(x[J]!==0) return;\n    x[J] = 1;\n    j[0] = J;\n    k[0] = km = Ai[Pinv[J]];\n    k1[0] = k11 = Ai[Pinv[J]+1];\n    while(1) {\n        if(isNaN(km)) throw new Error(\"Ow!\");\n        if(km >= k11) {\n            xj[n] = Pinv[j[m]];\n            if(m===0) return;\n            ++n;\n            --m;\n            km = k[m];\n            k11 = k1[m];\n        } else {\n            foo = Aj[km];\n            if(x[foo] === 0) {\n                x[foo] = 1;\n                k[m] = km;\n                ++m;\n                j[m] = foo;\n                foo = Pinv[foo];\n                km = Ai[foo];\n                k1[m] = k11 = Ai[foo+1];\n            } else ++km;\n        }\n    }\n}\nnumeric.ccsLPSolve0 = function ccsLPSolve0(A,B,y,xj,I,Pinv,P,dfs) {\n    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, n=0;\n    var Bi = B[0], Bj = B[1], Bv = B[2];\n    \n    var i,i0,i1,j,J,j0,j1,k,l,l0,l1,a;\n    i0 = Bi[I];\n    i1 = Bi[I+1];\n    xj.length = 0;\n    for(i=i0;i<i1;++i) { dfs.dfs(Bj[i],Ai,Aj,y,xj,Pinv,P); }\n    for(i=xj.length-1;i!==-1;--i) { j = xj[i]; y[P[j]] = 0; }\n    for(i=i0;i!==i1;++i) { j = Bj[i]; y[j] = Bv[i]; }\n    for(i=xj.length-1;i!==-1;--i) {\n        j = xj[i];\n        l = P[j];\n        j0 = Ai[j];\n        j1 = Ai[j+1];\n        for(k=j0;k<j1;++k) { if(Aj[k] === l) { y[l] /= Av[k]; break; } }\n        a = y[l];\n        for(k=j0;k<j1;++k) y[Aj[k]] -= a*Av[k];\n        y[l] = a;\n    }\n}\nnumeric.ccsLUP0 = function ccsLUP0(A,threshold) {\n    var m = A[0].length-1;\n    var L = [numeric.rep([m+1],0),[],[]], U = [numeric.rep([m+1], 0),[],[]];\n    var Li = L[0], Lj = L[1], Lv = L[2], Ui = U[0], Uj = U[1], Uv = U[2];\n    var y = numeric.rep([m],0), xj = numeric.rep([m],0);\n    var i,j,k,j0,j1,a,e,c,d,K;\n    var sol = numeric.ccsLPSolve0, max = Math.max, abs = Math.abs;\n    var P = numeric.linspace(0,m-1),Pinv = numeric.linspace(0,m-1);\n    var dfs = new numeric.ccsDFS0(m);\n    if(typeof threshold === \"undefined\") { threshold = 1; }\n    for(i=0;i<m;++i) {\n        sol(L,A,y,xj,i,Pinv,P,dfs);\n        a = -1;\n        e = -1;\n        for(j=xj.length-1;j!==-1;--j) {\n            k = xj[j];\n            if(k <= i) continue;\n            c = abs(y[P[k]]);\n            if(c > a) { e = k; a = c; }\n        }\n        if(abs(y[P[i]])<threshold*a) {\n            j = P[i];\n            a = P[e];\n            P[i] = a; Pinv[a] = i;\n            P[e] = j; Pinv[j] = e;\n        }\n        a = Li[i];\n        e = Ui[i];\n        d = y[P[i]];\n        Lj[a] = P[i];\n        Lv[a] = 1;\n        ++a;\n        for(j=xj.length-1;j!==-1;--j) {\n            k = xj[j];\n            c = y[P[k]];\n            xj[j] = 0;\n            y[P[k]] = 0;\n            if(k<=i) { Uj[e] = k; Uv[e] = c;   ++e; }\n            else     { Lj[a] = P[k]; Lv[a] = c/d; ++a; }\n        }\n        Li[i+1] = a;\n        Ui[i+1] = e;\n    }\n    for(j=Lj.length-1;j!==-1;--j) { Lj[j] = Pinv[Lj[j]]; }\n    return {L:L, U:U, P:P, Pinv:Pinv};\n}\nnumeric.ccsLUP = numeric.ccsLUP0;\n\nnumeric.ccsDim = function ccsDim(A) { return [numeric.sup(A[1])+1,A[0].length-1]; }\nnumeric.ccsGetBlock = function ccsGetBlock(A,i,j) {\n    var s = numeric.ccsDim(A),m=s[0],n=s[1];\n    if(typeof i === \"undefined\") { i = numeric.linspace(0,m-1); }\n    else if(typeof i === \"number\") { i = [i]; }\n    if(typeof j === \"undefined\") { j = numeric.linspace(0,n-1); }\n    else if(typeof j === \"number\") { j = [j]; }\n    var p,p0,p1,P = i.length,q,Q = j.length,r,jq,ip;\n    var Bi = numeric.rep([n],0), Bj=[], Bv=[], B = [Bi,Bj,Bv];\n    var Ai = A[0], Aj = A[1], Av = A[2];\n    var x = numeric.rep([m],0),count=0,flags = numeric.rep([m],0);\n    for(q=0;q<Q;++q) {\n        jq = j[q];\n        var q0 = Ai[jq];\n        var q1 = Ai[jq+1];\n        for(p=q0;p<q1;++p) {\n            r = Aj[p];\n            flags[r] = 1;\n            x[r] = Av[p];\n        }\n        for(p=0;p<P;++p) {\n            ip = i[p];\n            if(flags[ip]) {\n                Bj[count] = p;\n                Bv[count] = x[i[p]];\n                ++count;\n            }\n        }\n        for(p=q0;p<q1;++p) {\n            r = Aj[p];\n            flags[r] = 0;\n        }\n        Bi[q+1] = count;\n    }\n    return B;\n}\n\nnumeric.ccsDot = function ccsDot(A,B) {\n    var Ai = A[0], Aj = A[1], Av = A[2];\n    var Bi = B[0], Bj = B[1], Bv = B[2];\n    var sA = numeric.ccsDim(A), sB = numeric.ccsDim(B);\n    var m = sA[0], n = sA[1], o = sB[1];\n    var x = numeric.rep([m],0), flags = numeric.rep([m],0), xj = Array(m);\n    var Ci = numeric.rep([o],0), Cj = [], Cv = [], C = [Ci,Cj,Cv];\n    var i,j,k,j0,j1,i0,i1,l,p,a,b;\n    for(k=0;k!==o;++k) {\n        j0 = Bi[k];\n        j1 = Bi[k+1];\n        p = 0;\n        for(j=j0;j<j1;++j) {\n            a = Bj[j];\n            b = Bv[j];\n            i0 = Ai[a];\n            i1 = Ai[a+1];\n            for(i=i0;i<i1;++i) {\n                l = Aj[i];\n                if(flags[l]===0) {\n                    xj[p] = l;\n                    flags[l] = 1;\n                    p = p+1;\n                }\n                x[l] = x[l] + Av[i]*b;\n            }\n        }\n        j0 = Ci[k];\n        j1 = j0+p;\n        Ci[k+1] = j1;\n        for(j=p-1;j!==-1;--j) {\n            b = j0+j;\n            i = xj[j];\n            Cj[b] = i;\n            Cv[b] = x[i];\n            flags[i] = 0;\n            x[i] = 0;\n        }\n        Ci[k+1] = Ci[k]+p;\n    }\n    return C;\n}\n\nnumeric.ccsLUPSolve = function ccsLUPSolve(LUP,B) {\n    var L = LUP.L, U = LUP.U, P = LUP.P;\n    var Bi = B[0];\n    var flag = false;\n    if(typeof Bi !== \"object\") { B = [[0,B.length],numeric.linspace(0,B.length-1),B]; Bi = B[0]; flag = true; }\n    var Bj = B[1], Bv = B[2];\n    var n = L[0].length-1, m = Bi.length-1;\n    var x = numeric.rep([n],0), xj = Array(n);\n    var b = numeric.rep([n],0), bj = Array(n);\n    var Xi = numeric.rep([m+1],0), Xj = [], Xv = [];\n    var sol = numeric.ccsTSolve;\n    var i,j,j0,j1,k,J,N=0;\n    for(i=0;i<m;++i) {\n        k = 0;\n        j0 = Bi[i];\n        j1 = Bi[i+1];\n        for(j=j0;j<j1;++j) { \n            J = LUP.Pinv[Bj[j]];\n            bj[k] = J;\n            b[J] = Bv[j];\n            ++k;\n        }\n        bj.length = k;\n        sol(L,b,x,bj,xj);\n        for(j=bj.length-1;j!==-1;--j) b[bj[j]] = 0;\n        sol(U,x,b,xj,bj);\n        if(flag) return b;\n        for(j=xj.length-1;j!==-1;--j) x[xj[j]] = 0;\n        for(j=bj.length-1;j!==-1;--j) {\n            J = bj[j];\n            Xj[N] = J;\n            Xv[N] = b[J];\n            b[J] = 0;\n            ++N;\n        }\n        Xi[i+1] = N;\n    }\n    return [Xi,Xj,Xv];\n}\n\nnumeric.ccsbinop = function ccsbinop(body,setup) {\n    if(typeof setup === \"undefined\") setup='';\n    return Function('X','Y',\n            'var Xi = X[0], Xj = X[1], Xv = X[2];\\n'+\n            'var Yi = Y[0], Yj = Y[1], Yv = Y[2];\\n'+\n            'var n = Xi.length-1,m = Math.max(numeric.sup(Xj),numeric.sup(Yj))+1;\\n'+\n            'var Zi = numeric.rep([n+1],0), Zj = [], Zv = [];\\n'+\n            'var x = numeric.rep([m],0),y = numeric.rep([m],0);\\n'+\n            'var xk,yk,zk;\\n'+\n            'var i,j,j0,j1,k,p=0;\\n'+\n            setup+\n            'for(i=0;i<n;++i) {\\n'+\n            '  j0 = Xi[i]; j1 = Xi[i+1];\\n'+\n            '  for(j=j0;j!==j1;++j) {\\n'+\n            '    k = Xj[j];\\n'+\n            '    x[k] = 1;\\n'+\n            '    Zj[p] = k;\\n'+\n            '    ++p;\\n'+\n            '  }\\n'+\n            '  j0 = Yi[i]; j1 = Yi[i+1];\\n'+\n            '  for(j=j0;j!==j1;++j) {\\n'+\n            '    k = Yj[j];\\n'+\n            '    y[k] = Yv[j];\\n'+\n            '    if(x[k] === 0) {\\n'+\n            '      Zj[p] = k;\\n'+\n            '      ++p;\\n'+\n            '    }\\n'+\n            '  }\\n'+\n            '  Zi[i+1] = p;\\n'+\n            '  j0 = Xi[i]; j1 = Xi[i+1];\\n'+\n            '  for(j=j0;j!==j1;++j) x[Xj[j]] = Xv[j];\\n'+\n            '  j0 = Zi[i]; j1 = Zi[i+1];\\n'+\n            '  for(j=j0;j!==j1;++j) {\\n'+\n            '    k = Zj[j];\\n'+\n            '    xk = x[k];\\n'+\n            '    yk = y[k];\\n'+\n            body+'\\n'+\n            '    Zv[j] = zk;\\n'+\n            '  }\\n'+\n            '  j0 = Xi[i]; j1 = Xi[i+1];\\n'+\n            '  for(j=j0;j!==j1;++j) x[Xj[j]] = 0;\\n'+\n            '  j0 = Yi[i]; j1 = Yi[i+1];\\n'+\n            '  for(j=j0;j!==j1;++j) y[Yj[j]] = 0;\\n'+\n            '}\\n'+\n            'return [Zi,Zj,Zv];'\n            );\n};\n\n(function() {\n    var k,A,B,C;\n    for(k in numeric.ops2) {\n        if(isFinite(eval('1'+numeric.ops2[k]+'0'))) A = '[Y[0],Y[1],numeric.'+k+'(X,Y[2])]';\n        else A = 'NaN';\n        if(isFinite(eval('0'+numeric.ops2[k]+'1'))) B = '[X[0],X[1],numeric.'+k+'(X[2],Y)]';\n        else B = 'NaN';\n        if(isFinite(eval('1'+numeric.ops2[k]+'0')) && isFinite(eval('0'+numeric.ops2[k]+'1'))) C = 'numeric.ccs'+k+'MM(X,Y)';\n        else C = 'NaN';\n        numeric['ccs'+k+'MM'] = numeric.ccsbinop('zk = xk '+numeric.ops2[k]+'yk;');\n        numeric['ccs'+k] = Function('X','Y',\n                'if(typeof X === \"number\") return '+A+';\\n'+\n                'if(typeof Y === \"number\") return '+B+';\\n'+\n                'return '+C+';\\n'\n                );\n    }\n}());\n\nnumeric.ccsScatter = function ccsScatter(A) {\n    var Ai = A[0], Aj = A[1], Av = A[2];\n    var n = numeric.sup(Aj)+1,m=Ai.length;\n    var Ri = numeric.rep([n],0),Rj=Array(m), Rv = Array(m);\n    var counts = numeric.rep([n],0),i;\n    for(i=0;i<m;++i) counts[Aj[i]]++;\n    for(i=0;i<n;++i) Ri[i+1] = Ri[i] + counts[i];\n    var ptr = Ri.slice(0),k,Aii;\n    for(i=0;i<m;++i) {\n        Aii = Aj[i];\n        k = ptr[Aii];\n        Rj[k] = Ai[i];\n        Rv[k] = Av[i];\n        ptr[Aii]=ptr[Aii]+1;\n    }\n    return [Ri,Rj,Rv];\n}\n\nnumeric.ccsGather = function ccsGather(A) {\n    var Ai = A[0], Aj = A[1], Av = A[2];\n    var n = Ai.length-1,m = Aj.length;\n    var Ri = Array(m), Rj = Array(m), Rv = Array(m);\n    var i,j,j0,j1,p;\n    p=0;\n    for(i=0;i<n;++i) {\n        j0 = Ai[i];\n        j1 = Ai[i+1];\n        for(j=j0;j!==j1;++j) {\n            Rj[p] = i;\n            Ri[p] = Aj[j];\n            Rv[p] = Av[j];\n            ++p;\n        }\n    }\n    return [Ri,Rj,Rv];\n}\n\n// The following sparse linear algebra routines are deprecated.\n\nnumeric.sdim = function dim(A,ret,k) {\n    if(typeof ret === \"undefined\") { ret = []; }\n    if(typeof A !== \"object\") return ret;\n    if(typeof k === \"undefined\") { k=0; }\n    if(!(k in ret)) { ret[k] = 0; }\n    if(A.length > ret[k]) ret[k] = A.length;\n    var i;\n    for(i in A) {\n        if(A.hasOwnProperty(i)) dim(A[i],ret,k+1);\n    }\n    return ret;\n};\n\nnumeric.sclone = function clone(A,k,n) {\n    if(typeof k === \"undefined\") { k=0; }\n    if(typeof n === \"undefined\") { n = numeric.sdim(A).length; }\n    var i,ret = Array(A.length);\n    if(k === n-1) {\n        for(i in A) { if(A.hasOwnProperty(i)) ret[i] = A[i]; }\n        return ret;\n    }\n    for(i in A) {\n        if(A.hasOwnProperty(i)) ret[i] = clone(A[i],k+1,n);\n    }\n    return ret;\n}\n\nnumeric.sdiag = function diag(d) {\n    var n = d.length,i,ret = Array(n),i1,i2,i3;\n    for(i=n-1;i>=1;i-=2) {\n        i1 = i-1;\n        ret[i] = []; ret[i][i] = d[i];\n        ret[i1] = []; ret[i1][i1] = d[i1];\n    }\n    if(i===0) { ret[0] = []; ret[0][0] = d[i]; }\n    return ret;\n}\n\nnumeric.sidentity = function identity(n) { return numeric.sdiag(numeric.rep([n],1)); }\n\nnumeric.stranspose = function transpose(A) {\n    var ret = [], n = A.length, i,j,Ai;\n    for(i in A) {\n        if(!(A.hasOwnProperty(i))) continue;\n        Ai = A[i];\n        for(j in Ai) {\n            if(!(Ai.hasOwnProperty(j))) continue;\n            if(typeof ret[j] !== \"object\") { ret[j] = []; }\n            ret[j][i] = Ai[j];\n        }\n    }\n    return ret;\n}\n\nnumeric.sLUP = function LUP(A,tol) {\n    throw new Error(\"The function numeric.sLUP had a bug in it and has been removed. Please use the new numeric.ccsLUP function instead.\");\n};\n\nnumeric.sdotMM = function dotMM(A,B) {\n    var p = A.length, q = B.length, BT = numeric.stranspose(B), r = BT.length, Ai, BTk;\n    var i,j,k,accum;\n    var ret = Array(p),reti;\n    for(i=p-1;i>=0;i--) {\n        reti = [];\n        Ai = A[i];\n        for(k=r-1;k>=0;k--) {\n            accum = 0;\n            BTk = BT[k];\n            for(j in Ai) {\n                if(!(Ai.hasOwnProperty(j))) continue;\n                if(j in BTk) { accum += Ai[j]*BTk[j]; }\n            }\n            if(accum) reti[k] = accum;\n        }\n        ret[i] = reti;\n    }\n    return ret;\n}\n\nnumeric.sdotMV = function dotMV(A,x) {\n    var p = A.length, Ai, i,j;\n    var ret = Array(p), accum;\n    for(i=p-1;i>=0;i--) {\n        Ai = A[i];\n        accum = 0;\n        for(j in Ai) {\n            if(!(Ai.hasOwnProperty(j))) continue;\n            if(x[j]) accum += Ai[j]*x[j];\n        }\n        if(accum) ret[i] = accum;\n    }\n    return ret;\n}\n\nnumeric.sdotVM = function dotMV(x,A) {\n    var i,j,Ai,alpha;\n    var ret = [], accum;\n    for(i in x) {\n        if(!x.hasOwnProperty(i)) continue;\n        Ai = A[i];\n        alpha = x[i];\n        for(j in Ai) {\n            if(!Ai.hasOwnProperty(j)) continue;\n            if(!ret[j]) { ret[j] = 0; }\n            ret[j] += alpha*Ai[j];\n        }\n    }\n    return ret;\n}\n\nnumeric.sdotVV = function dotVV(x,y) {\n    var i,ret=0;\n    for(i in x) { if(x[i] && y[i]) ret+= x[i]*y[i]; }\n    return ret;\n}\n\nnumeric.sdot = function dot(A,B) {\n    var m = numeric.sdim(A).length, n = numeric.sdim(B).length;\n    var k = m*1000+n;\n    switch(k) {\n    case 0: return A*B;\n    case 1001: return numeric.sdotVV(A,B);\n    case 2001: return numeric.sdotMV(A,B);\n    case 1002: return numeric.sdotVM(A,B);\n    case 2002: return numeric.sdotMM(A,B);\n    default: throw new Error('numeric.sdot not implemented for tensors of order '+m+' and '+n);\n    }\n}\n\nnumeric.sscatter = function scatter(V) {\n    var n = V[0].length, Vij, i, j, m = V.length, A = [], Aj;\n    for(i=n-1;i>=0;--i) {\n        if(!V[m-1][i]) continue;\n        Aj = A;\n        for(j=0;j<m-2;j++) {\n            Vij = V[j][i];\n            if(!Aj[Vij]) Aj[Vij] = [];\n            Aj = Aj[Vij];\n        }\n        Aj[V[j][i]] = V[j+1][i];\n    }\n    return A;\n}\n\nnumeric.sgather = function gather(A,ret,k) {\n    if(typeof ret === \"undefined\") ret = [];\n    if(typeof k === \"undefined\") k = [];\n    var n,i,Ai;\n    n = k.length;\n    for(i in A) {\n        if(A.hasOwnProperty(i)) {\n            k[n] = parseInt(i);\n            Ai = A[i];\n            if(typeof Ai === \"number\") {\n                if(Ai) {\n                    if(ret.length === 0) {\n                        for(i=n+1;i>=0;--i) ret[i] = [];\n                    }\n                    for(i=n;i>=0;--i) ret[i].push(k[i]);\n                    ret[n+1].push(Ai);\n                }\n            } else gather(Ai,ret,k);\n        }\n    }\n    if(k.length>n) k.pop();\n    return ret;\n}\n\n// 6. Coordinate matrices\nnumeric.cLU = function LU(A) {\n    var I = A[0], J = A[1], V = A[2];\n    var p = I.length, m=0, i,j,k,a,b,c;\n    for(i=0;i<p;i++) if(I[i]>m) m=I[i];\n    m++;\n    var L = Array(m), U = Array(m), left = numeric.rep([m],Infinity), right = numeric.rep([m],-Infinity);\n    var Ui, Uj,alpha;\n    for(k=0;k<p;k++) {\n        i = I[k];\n        j = J[k];\n        if(j<left[i]) left[i] = j;\n        if(j>right[i]) right[i] = j;\n    }\n    for(i=0;i<m-1;i++) { if(right[i] > right[i+1]) right[i+1] = right[i]; }\n    for(i=m-1;i>=1;i--) { if(left[i]<left[i-1]) left[i-1] = left[i]; }\n    var countL = 0, countU = 0;\n    for(i=0;i<m;i++) {\n        U[i] = numeric.rep([right[i]-left[i]+1],0);\n        L[i] = numeric.rep([i-left[i]],0);\n        countL += i-left[i]+1;\n        countU += right[i]-i+1;\n    }\n    for(k=0;k<p;k++) { i = I[k]; U[i][J[k]-left[i]] = V[k]; }\n    for(i=0;i<m-1;i++) {\n        a = i-left[i];\n        Ui = U[i];\n        for(j=i+1;left[j]<=i && j<m;j++) {\n            b = i-left[j];\n            c = right[i]-i;\n            Uj = U[j];\n            alpha = Uj[b]/Ui[a];\n            if(alpha) {\n                for(k=1;k<=c;k++) { Uj[k+b] -= alpha*Ui[k+a]; }\n                L[j][i-left[j]] = alpha;\n            }\n        }\n    }\n    var Ui = [], Uj = [], Uv = [], Li = [], Lj = [], Lv = [];\n    var p,q,foo;\n    p=0; q=0;\n    for(i=0;i<m;i++) {\n        a = left[i];\n        b = right[i];\n        foo = U[i];\n        for(j=i;j<=b;j++) {\n            if(foo[j-a]) {\n                Ui[p] = i;\n                Uj[p] = j;\n                Uv[p] = foo[j-a];\n                p++;\n            }\n        }\n        foo = L[i];\n        for(j=a;j<i;j++) {\n            if(foo[j-a]) {\n                Li[q] = i;\n                Lj[q] = j;\n                Lv[q] = foo[j-a];\n                q++;\n            }\n        }\n        Li[q] = i;\n        Lj[q] = i;\n        Lv[q] = 1;\n        q++;\n    }\n    return {U:[Ui,Uj,Uv], L:[Li,Lj,Lv]};\n};\n\nnumeric.cLUsolve = function LUsolve(lu,b) {\n    var L = lu.L, U = lu.U, ret = numeric.clone(b);\n    var Li = L[0], Lj = L[1], Lv = L[2];\n    var Ui = U[0], Uj = U[1], Uv = U[2];\n    var p = Ui.length, q = Li.length;\n    var m = ret.length,i,j,k;\n    k = 0;\n    for(i=0;i<m;i++) {\n        while(Lj[k] < i) {\n            ret[i] -= Lv[k]*ret[Lj[k]];\n            k++;\n        }\n        k++;\n    }\n    k = p-1;\n    for(i=m-1;i>=0;i--) {\n        while(Uj[k] > i) {\n            ret[i] -= Uv[k]*ret[Uj[k]];\n            k--;\n        }\n        ret[i] /= Uv[k];\n        k--;\n    }\n    return ret;\n};\n\nnumeric.cgrid = function grid(n,shape) {\n    if(typeof n === \"number\") n = [n,n];\n    var ret = numeric.rep(n,-1);\n    var i,j,count;\n    if(typeof shape !== \"function\") {\n        switch(shape) {\n        case 'L':\n            shape = function(i,j) { return (i>=n[0]/2 || j<n[1]/2); }\n            break;\n        default:\n            shape = function(i,j) { return true; };\n            break;\n        }\n    }\n    count=0;\n    for(i=1;i<n[0]-1;i++) for(j=1;j<n[1]-1;j++) \n        if(shape(i,j)) {\n            ret[i][j] = count;\n            count++;\n        }\n    return ret;\n}\n\nnumeric.cdelsq = function delsq(g) {\n    var dir = [[-1,0],[0,-1],[0,1],[1,0]];\n    var s = numeric.dim(g), m = s[0], n = s[1], i,j,k,p,q;\n    var Li = [], Lj = [], Lv = [];\n    for(i=1;i<m-1;i++) for(j=1;j<n-1;j++) {\n        if(g[i][j]<0) continue;\n        for(k=0;k<4;k++) {\n            p = i+dir[k][0];\n            q = j+dir[k][1];\n            if(g[p][q]<0) continue;\n            Li.push(g[i][j]);\n            Lj.push(g[p][q]);\n            Lv.push(-1);\n        }\n        Li.push(g[i][j]);\n        Lj.push(g[i][j]);\n        Lv.push(4);\n    }\n    return [Li,Lj,Lv];\n}\n\nnumeric.cdotMV = function dotMV(A,x) {\n    var ret, Ai = A[0], Aj = A[1], Av = A[2],k,p=Ai.length,N;\n    N=0;\n    for(k=0;k<p;k++) { if(Ai[k]>N) N = Ai[k]; }\n    N++;\n    ret = numeric.rep([N],0);\n    for(k=0;k<p;k++) { ret[Ai[k]]+=Av[k]*x[Aj[k]]; }\n    return ret;\n}\n\n// 7. Splines\n\nnumeric.Spline = function Spline(x,yl,yr,kl,kr) { this.x = x; this.yl = yl; this.yr = yr; this.kl = kl; this.kr = kr; }\nnumeric.Spline.prototype._at = function _at(x1,p) {\n    var x = this.x;\n    var yl = this.yl;\n    var yr = this.yr;\n    var kl = this.kl;\n    var kr = this.kr;\n    var x1,a,b,t;\n    var add = numeric.add, sub = numeric.sub, mul = numeric.mul;\n    a = sub(mul(kl[p],x[p+1]-x[p]),sub(yr[p+1],yl[p]));\n    b = add(mul(kr[p+1],x[p]-x[p+1]),sub(yr[p+1],yl[p]));\n    t = (x1-x[p])/(x[p+1]-x[p]);\n    var s = t*(1-t);\n    return add(add(add(mul(1-t,yl[p]),mul(t,yr[p+1])),mul(a,s*(1-t))),mul(b,s*t));\n}\nnumeric.Spline.prototype.at = function at(x0) {\n    if(typeof x0 === \"number\") {\n        var x = this.x;\n        var n = x.length;\n        var p,q,mid,floor = Math.floor,a,b,t;\n        p = 0;\n        q = n-1;\n        while(q-p>1) {\n            mid = floor((p+q)/2);\n            if(x[mid] <= x0) p = mid;\n            else q = mid;\n        }\n        return this._at(x0,p);\n    }\n    var n = x0.length, i, ret = Array(n);\n    for(i=n-1;i!==-1;--i) ret[i] = this.at(x0[i]);\n    return ret;\n}\nnumeric.Spline.prototype.diff = function diff() {\n    var x = this.x;\n    var yl = this.yl;\n    var yr = this.yr;\n    var kl = this.kl;\n    var kr = this.kr;\n    var n = yl.length;\n    var i,dx,dy;\n    var zl = kl, zr = kr, pl = Array(n), pr = Array(n);\n    var add = numeric.add, mul = numeric.mul, div = numeric.div, sub = numeric.sub;\n    for(i=n-1;i!==-1;--i) {\n        dx = x[i+1]-x[i];\n        dy = sub(yr[i+1],yl[i]);\n        pl[i] = div(add(mul(dy, 6),mul(kl[i],-4*dx),mul(kr[i+1],-2*dx)),dx*dx);\n        pr[i+1] = div(add(mul(dy,-6),mul(kl[i], 2*dx),mul(kr[i+1], 4*dx)),dx*dx);\n    }\n    return new numeric.Spline(x,zl,zr,pl,pr);\n}\nnumeric.Spline.prototype.roots = function roots() {\n    function sqr(x) { return x*x; }\n    function heval(y0,y1,k0,k1,x) {\n        var A = k0*2-(y1-y0);\n        var B = -k1*2+(y1-y0);\n        var t = (x+1)*0.5;\n        var s = t*(1-t);\n        return (1-t)*y0+t*y1+A*s*(1-t)+B*s*t;\n    }\n    var ret = [];\n    var x = this.x, yl = this.yl, yr = this.yr, kl = this.kl, kr = this.kr;\n    if(typeof yl[0] === \"number\") {\n        yl = [yl];\n        yr = [yr];\n        kl = [kl];\n        kr = [kr];\n    }\n    var m = yl.length,n=x.length-1,i,j,k,y,s,t;\n    var ai,bi,ci,di, ret = Array(m),ri,k0,k1,y0,y1,A,B,D,dx,cx,stops,z0,z1,zm,t0,t1,tm;\n    var sqrt = Math.sqrt;\n    for(i=0;i!==m;++i) {\n        ai = yl[i];\n        bi = yr[i];\n        ci = kl[i];\n        di = kr[i];\n        ri = [];\n        for(j=0;j!==n;j++) {\n            if(j>0 && bi[j]*ai[j]<0) ri.push(x[j]);\n            dx = (x[j+1]-x[j]);\n            cx = x[j];\n            y0 = ai[j];\n            y1 = bi[j+1];\n            k0 = ci[j]/dx;\n            k1 = di[j+1]/dx;\n            D = sqr(k0-k1+3*(y0-y1)) + 12*k1*y0;\n            A = k1+3*y0+2*k0-3*y1;\n            B = 3*(k1+k0+2*(y0-y1));\n            if(D<=0) {\n                z0 = A/B;\n                if(z0>x[j] && z0<x[j+1]) stops = [x[j],z0,x[j+1]];\n                else stops = [x[j],x[j+1]];\n            } else {\n                z0 = (A-sqrt(D))/B;\n                z1 = (A+sqrt(D))/B;\n                stops = [x[j]];\n                if(z0>x[j] && z0<x[j+1]) stops.push(z0);\n                if(z1>x[j] && z1<x[j+1]) stops.push(z1);\n                stops.push(x[j+1]);\n            }\n            t0 = stops[0];\n            z0 = this._at(t0,j);\n            for(k=0;k<stops.length-1;k++) {\n                t1 = stops[k+1];\n                z1 = this._at(t1,j);\n                if(z0 === 0) {\n                    ri.push(t0); \n                    t0 = t1;\n                    z0 = z1;\n                    continue;\n                }\n                if(z1 === 0 || z0*z1>0) {\n                    t0 = t1;\n                    z0 = z1;\n                    continue;\n                }\n                var side = 0;\n                while(1) {\n                    tm = (z0*t1-z1*t0)/(z0-z1);\n                    if(tm <= t0 || tm >= t1) { break; }\n                    zm = this._at(tm,j);\n                    if(zm*z1>0) {\n                        t1 = tm;\n                        z1 = zm;\n                        if(side === -1) z0*=0.5;\n                        side = -1;\n                    } else if(zm*z0>0) {\n                        t0 = tm;\n                        z0 = zm;\n                        if(side === 1) z1*=0.5;\n                        side = 1;\n                    } else break;\n                }\n                ri.push(tm);\n                t0 = stops[k+1];\n                z0 = this._at(t0, j);\n            }\n            if(z1 === 0) ri.push(t1);\n        }\n        ret[i] = ri;\n    }\n    if(typeof this.yl[0] === \"number\") return ret[0];\n    return ret;\n}\nnumeric.spline = function spline(x,y,k1,kn) {\n    var n = x.length, b = [], dx = [], dy = [];\n    var i;\n    var sub = numeric.sub,mul = numeric.mul,add = numeric.add;\n    for(i=n-2;i>=0;i--) { dx[i] = x[i+1]-x[i]; dy[i] = sub(y[i+1],y[i]); }\n    if(typeof k1 === \"string\" || typeof kn === \"string\") { \n        k1 = kn = \"periodic\";\n    }\n    // Build sparse tridiagonal system\n    var T = [[],[],[]];\n    switch(typeof k1) {\n    case \"undefined\":\n        b[0] = mul(3/(dx[0]*dx[0]),dy[0]);\n        T[0].push(0,0);\n        T[1].push(0,1);\n        T[2].push(2/dx[0],1/dx[0]);\n        break;\n    case \"string\":\n        b[0] = add(mul(3/(dx[n-2]*dx[n-2]),dy[n-2]),mul(3/(dx[0]*dx[0]),dy[0]));\n        T[0].push(0,0,0);\n        T[1].push(n-2,0,1);\n        T[2].push(1/dx[n-2],2/dx[n-2]+2/dx[0],1/dx[0]);\n        break;\n    default:\n        b[0] = k1;\n        T[0].push(0);\n        T[1].push(0);\n        T[2].push(1);\n        break;\n    }\n    for(i=1;i<n-1;i++) {\n        b[i] = add(mul(3/(dx[i-1]*dx[i-1]),dy[i-1]),mul(3/(dx[i]*dx[i]),dy[i]));\n        T[0].push(i,i,i);\n        T[1].push(i-1,i,i+1);\n        T[2].push(1/dx[i-1],2/dx[i-1]+2/dx[i],1/dx[i]);\n    }\n    switch(typeof kn) {\n    case \"undefined\":\n        b[n-1] = mul(3/(dx[n-2]*dx[n-2]),dy[n-2]);\n        T[0].push(n-1,n-1);\n        T[1].push(n-2,n-1);\n        T[2].push(1/dx[n-2],2/dx[n-2]);\n        break;\n    case \"string\":\n        T[1][T[1].length-1] = 0;\n        break;\n    default:\n        b[n-1] = kn;\n        T[0].push(n-1);\n        T[1].push(n-1);\n        T[2].push(1);\n        break;\n    }\n    if(typeof b[0] !== \"number\") b = numeric.transpose(b);\n    else b = [b];\n    var k = Array(b.length);\n    if(typeof k1 === \"string\") {\n        for(i=k.length-1;i!==-1;--i) {\n            k[i] = numeric.ccsLUPSolve(numeric.ccsLUP(numeric.ccsScatter(T)),b[i]);\n            k[i][n-1] = k[i][0];\n        }\n    } else {\n        for(i=k.length-1;i!==-1;--i) {\n            k[i] = numeric.cLUsolve(numeric.cLU(T),b[i]);\n        }\n    }\n    if(typeof y[0] === \"number\") k = k[0];\n    else k = numeric.transpose(k);\n    return new numeric.Spline(x,y,y,k,k);\n}\n\n// 8. FFT\nnumeric.fftpow2 = function fftpow2(x,y) {\n    var n = x.length;\n    if(n === 1) return;\n    var cos = Math.cos, sin = Math.sin, i,j;\n    var xe = Array(n/2), ye = Array(n/2), xo = Array(n/2), yo = Array(n/2);\n    j = n/2;\n    for(i=n-1;i!==-1;--i) {\n        --j;\n        xo[j] = x[i];\n        yo[j] = y[i];\n        --i;\n        xe[j] = x[i];\n        ye[j] = y[i];\n    }\n    fftpow2(xe,ye);\n    fftpow2(xo,yo);\n    j = n/2;\n    var t,k = (-6.2831853071795864769252867665590057683943387987502116419/n),ci,si;\n    for(i=n-1;i!==-1;--i) {\n        --j;\n        if(j === -1) j = n/2-1;\n        t = k*i;\n        ci = cos(t);\n        si = sin(t);\n        x[i] = xe[j] + ci*xo[j] - si*yo[j];\n        y[i] = ye[j] + ci*yo[j] + si*xo[j];\n    }\n}\nnumeric._ifftpow2 = function _ifftpow2(x,y) {\n    var n = x.length;\n    if(n === 1) return;\n    var cos = Math.cos, sin = Math.sin, i,j;\n    var xe = Array(n/2), ye = Array(n/2), xo = Array(n/2), yo = Array(n/2);\n    j = n/2;\n    for(i=n-1;i!==-1;--i) {\n        --j;\n        xo[j] = x[i];\n        yo[j] = y[i];\n        --i;\n        xe[j] = x[i];\n        ye[j] = y[i];\n    }\n    _ifftpow2(xe,ye);\n    _ifftpow2(xo,yo);\n    j = n/2;\n    var t,k = (6.2831853071795864769252867665590057683943387987502116419/n),ci,si;\n    for(i=n-1;i!==-1;--i) {\n        --j;\n        if(j === -1) j = n/2-1;\n        t = k*i;\n        ci = cos(t);\n        si = sin(t);\n        x[i] = xe[j] + ci*xo[j] - si*yo[j];\n        y[i] = ye[j] + ci*yo[j] + si*xo[j];\n    }\n}\nnumeric.ifftpow2 = function ifftpow2(x,y) {\n    numeric._ifftpow2(x,y);\n    numeric.diveq(x,x.length);\n    numeric.diveq(y,y.length);\n}\nnumeric.convpow2 = function convpow2(ax,ay,bx,by) {\n    numeric.fftpow2(ax,ay);\n    numeric.fftpow2(bx,by);\n    var i,n = ax.length,axi,bxi,ayi,byi;\n    for(i=n-1;i!==-1;--i) {\n        axi = ax[i]; ayi = ay[i]; bxi = bx[i]; byi = by[i];\n        ax[i] = axi*bxi-ayi*byi;\n        ay[i] = axi*byi+ayi*bxi;\n    }\n    numeric.ifftpow2(ax,ay);\n}\nnumeric.T.prototype.fft = function fft() {\n    var x = this.x, y = this.y;\n    var n = x.length, log = Math.log, log2 = log(2),\n        p = Math.ceil(log(2*n-1)/log2), m = Math.pow(2,p);\n    var cx = numeric.rep([m],0), cy = numeric.rep([m],0), cos = Math.cos, sin = Math.sin;\n    var k, c = (-3.141592653589793238462643383279502884197169399375105820/n),t;\n    var a = numeric.rep([m],0), b = numeric.rep([m],0),nhalf = Math.floor(n/2);\n    for(k=0;k<n;k++) a[k] = x[k];\n    if(typeof y !== \"undefined\") for(k=0;k<n;k++) b[k] = y[k];\n    cx[0] = 1;\n    for(k=1;k<=m/2;k++) {\n        t = c*k*k;\n        cx[k] = cos(t);\n        cy[k] = sin(t);\n        cx[m-k] = cos(t);\n        cy[m-k] = sin(t)\n    }\n    var X = new numeric.T(a,b), Y = new numeric.T(cx,cy);\n    X = X.mul(Y);\n    numeric.convpow2(X.x,X.y,numeric.clone(Y.x),numeric.neg(Y.y));\n    X = X.mul(Y);\n    X.x.length = n;\n    X.y.length = n;\n    return X;\n}\nnumeric.T.prototype.ifft = function ifft() {\n    var x = this.x, y = this.y;\n    var n = x.length, log = Math.log, log2 = log(2),\n        p = Math.ceil(log(2*n-1)/log2), m = Math.pow(2,p);\n    var cx = numeric.rep([m],0), cy = numeric.rep([m],0), cos = Math.cos, sin = Math.sin;\n    var k, c = (3.141592653589793238462643383279502884197169399375105820/n),t;\n    var a = numeric.rep([m],0), b = numeric.rep([m],0),nhalf = Math.floor(n/2);\n    for(k=0;k<n;k++) a[k] = x[k];\n    if(typeof y !== \"undefined\") for(k=0;k<n;k++) b[k] = y[k];\n    cx[0] = 1;\n    for(k=1;k<=m/2;k++) {\n        t = c*k*k;\n        cx[k] = cos(t);\n        cy[k] = sin(t);\n        cx[m-k] = cos(t);\n        cy[m-k] = sin(t)\n    }\n    var X = new numeric.T(a,b), Y = new numeric.T(cx,cy);\n    X = X.mul(Y);\n    numeric.convpow2(X.x,X.y,numeric.clone(Y.x),numeric.neg(Y.y));\n    X = X.mul(Y);\n    X.x.length = n;\n    X.y.length = n;\n    return X.div(n);\n}\n\n//9. Unconstrained optimization\nnumeric.gradient = function gradient(f,x) {\n    var n = x.length;\n    var f0 = f(x);\n    if(isNaN(f0)) throw new Error('gradient: f(x) is a NaN!');\n    var max = Math.max;\n    var i,x0 = numeric.clone(x),f1,f2, J = Array(n);\n    var div = numeric.div, sub = numeric.sub,errest,roundoff,max = Math.max,eps = 1e-3,abs = Math.abs, min = Math.min;\n    var t0,t1,t2,it=0,d1,d2,N;\n    for(i=0;i<n;i++) {\n        var h = max(1e-6*f0,1e-8);\n        while(1) {\n            ++it;\n            if(it>20) { throw new Error(\"Numerical gradient fails\"); }\n            x0[i] = x[i]+h;\n            f1 = f(x0);\n            x0[i] = x[i]-h;\n            f2 = f(x0);\n            x0[i] = x[i];\n            if(isNaN(f1) || isNaN(f2)) { h/=16; continue; }\n            J[i] = (f1-f2)/(2*h);\n            t0 = x[i]-h;\n            t1 = x[i];\n            t2 = x[i]+h;\n            d1 = (f1-f0)/h;\n            d2 = (f0-f2)/h;\n            N = max(abs(J[i]),abs(f0),abs(f1),abs(f2),abs(t0),abs(t1),abs(t2),1e-8);\n            errest = min(max(abs(d1-J[i]),abs(d2-J[i]),abs(d1-d2))/N,h/N);\n            if(errest>eps) { h/=16; }\n            else break;\n            }\n    }\n    return J;\n}\n\nnumeric.uncmin = function uncmin(f,x0,tol,gradient,maxit,callback,options) {\n    var grad = numeric.gradient;\n    if(typeof options === \"undefined\") { options = {}; }\n    if(typeof tol === \"undefined\") { tol = 1e-8; }\n    if(typeof gradient === \"undefined\") { gradient = function(x) { return grad(f,x); }; }\n    if(typeof maxit === \"undefined\") maxit = 1000;\n    x0 = numeric.clone(x0);\n    var n = x0.length;\n    var f0 = f(x0),f1,df0;\n    if(isNaN(f0)) throw new Error('uncmin: f(x0) is a NaN!');\n    var max = Math.max, norm2 = numeric.norm2;\n    tol = max(tol,numeric.epsilon);\n    var step,g0,g1,H1 = options.Hinv || numeric.identity(n);\n    var dot = numeric.dot, inv = numeric.inv, sub = numeric.sub, add = numeric.add, ten = numeric.tensor, div = numeric.div, mul = numeric.mul;\n    var all = numeric.all, isfinite = numeric.isFinite, neg = numeric.neg;\n    var it=0,i,s,x1,y,Hy,Hs,ys,i0,t,nstep,t1,t2;\n    var msg = \"\";\n    g0 = gradient(x0);\n    while(it<maxit) {\n        if(typeof callback === \"function\") { if(callback(it,x0,f0,g0,H1)) { msg = \"Callback returned true\"; break; } }\n        if(!all(isfinite(g0))) { msg = \"Gradient has Infinity or NaN\"; break; }\n        step = neg(dot(H1,g0));\n        if(!all(isfinite(step))) { msg = \"Search direction has Infinity or NaN\"; break; }\n        nstep = norm2(step);\n        if(nstep < tol) { msg=\"Newton step smaller than tol\"; break; }\n        t = 1;\n        df0 = dot(g0,step);\n        // line search\n        x1 = x0;\n        while(it < maxit) {\n            if(t*nstep < tol) { break; }\n            s = mul(step,t);\n            x1 = add(x0,s);\n            f1 = f(x1);\n            if(f1-f0 >= 0.1*t*df0 || isNaN(f1)) {\n                t *= 0.5;\n                ++it;\n                continue;\n            }\n            break;\n        }\n        if(t*nstep < tol) { msg = \"Line search step size smaller than tol\"; break; }\n        if(it === maxit) { msg = \"maxit reached during line search\"; break; }\n        g1 = gradient(x1);\n        y = sub(g1,g0);\n        ys = dot(y,s);\n        Hy = dot(H1,y);\n        H1 = sub(add(H1,\n                mul(\n                        (ys+dot(y,Hy))/(ys*ys),\n                        ten(s,s)    )),\n                div(add(ten(Hy,s),ten(s,Hy)),ys));\n        x0 = x1;\n        f0 = f1;\n        g0 = g1;\n        ++it;\n    }\n    return {solution: x0, f: f0, gradient: g0, invHessian: H1, iterations:it, message: msg};\n}\n\n// 10. Ode solver (Dormand-Prince)\nnumeric.Dopri = function Dopri(x,y,f,ymid,iterations,msg,events) {\n    this.x = x;\n    this.y = y;\n    this.f = f;\n    this.ymid = ymid;\n    this.iterations = iterations;\n    this.events = events;\n    this.message = msg;\n}\nnumeric.Dopri.prototype._at = function _at(xi,j) {\n    function sqr(x) { return x*x; }\n    var sol = this;\n    var xs = sol.x;\n    var ys = sol.y;\n    var k1 = sol.f;\n    var ymid = sol.ymid;\n    var n = xs.length;\n    var x0,x1,xh,y0,y1,yh,xi;\n    var floor = Math.floor,h;\n    var c = 0.5;\n    var add = numeric.add, mul = numeric.mul,sub = numeric.sub, p,q,w;\n    x0 = xs[j];\n    x1 = xs[j+1];\n    y0 = ys[j];\n    y1 = ys[j+1];\n    h  = x1-x0;\n    xh = x0+c*h;\n    yh = ymid[j];\n    p = sub(k1[j  ],mul(y0,1/(x0-xh)+2/(x0-x1)));\n    q = sub(k1[j+1],mul(y1,1/(x1-xh)+2/(x1-x0)));\n    w = [sqr(xi - x1) * (xi - xh) / sqr(x0 - x1) / (x0 - xh),\n         sqr(xi - x0) * sqr(xi - x1) / sqr(x0 - xh) / sqr(x1 - xh),\n         sqr(xi - x0) * (xi - xh) / sqr(x1 - x0) / (x1 - xh),\n         (xi - x0) * sqr(xi - x1) * (xi - xh) / sqr(x0-x1) / (x0 - xh),\n         (xi - x1) * sqr(xi - x0) * (xi - xh) / sqr(x0-x1) / (x1 - xh)];\n    return add(add(add(add(mul(y0,w[0]),\n                           mul(yh,w[1])),\n                           mul(y1,w[2])),\n                           mul( p,w[3])),\n                           mul( q,w[4]));\n}\nnumeric.Dopri.prototype.at = function at(x) {\n    var i,j,k,floor = Math.floor;\n    if(typeof x !== \"number\") {\n        var n = x.length, ret = Array(n);\n        for(i=n-1;i!==-1;--i) {\n            ret[i] = this.at(x[i]);\n        }\n        return ret;\n    }\n    var x0 = this.x;\n    i = 0; j = x0.length-1;\n    while(j-i>1) {\n        k = floor(0.5*(i+j));\n        if(x0[k] <= x) i = k;\n        else j = k;\n    }\n    return this._at(x,i);\n}\n\nnumeric.dopri = function dopri(x0,x1,y0,f,tol,maxit,event) {\n    if(typeof tol === \"undefined\") { tol = 1e-6; }\n    if(typeof maxit === \"undefined\") { maxit = 1000; }\n    var xs = [x0], ys = [y0], k1 = [f(x0,y0)], k2,k3,k4,k5,k6,k7, ymid = [];\n    var A2 = 1/5;\n    var A3 = [3/40,9/40];\n    var A4 = [44/45,-56/15,32/9];\n    var A5 = [19372/6561,-25360/2187,64448/6561,-212/729];\n    var A6 = [9017/3168,-355/33,46732/5247,49/176,-5103/18656];\n    var b = [35/384,0,500/1113,125/192,-2187/6784,11/84];\n    var bm = [0.5*6025192743/30085553152,\n              0,\n              0.5*51252292925/65400821598,\n              0.5*-2691868925/45128329728,\n              0.5*187940372067/1594534317056,\n              0.5*-1776094331/19743644256,\n              0.5*11237099/235043384];\n    var c = [1/5,3/10,4/5,8/9,1,1];\n    var e = [-71/57600,0,71/16695,-71/1920,17253/339200,-22/525,1/40];\n    var i = 0,er,j;\n    var h = (x1-x0)/10;\n    var it = 0;\n    var add = numeric.add, mul = numeric.mul, y1,erinf;\n    var max = Math.max, min = Math.min, abs = Math.abs, norminf = numeric.norminf,pow = Math.pow;\n    var any = numeric.any, lt = numeric.lt, and = numeric.and, sub = numeric.sub;\n    var e0, e1, ev;\n    var ret = new numeric.Dopri(xs,ys,k1,ymid,-1,\"\");\n    if(typeof event === \"function\") e0 = event(x0,y0);\n    while(x0<x1 && it<maxit) {\n        ++it;\n        if(x0+h>x1) h = x1-x0;\n        k2 = f(x0+c[0]*h,                add(y0,mul(   A2*h,k1[i])));\n        k3 = f(x0+c[1]*h,            add(add(y0,mul(A3[0]*h,k1[i])),mul(A3[1]*h,k2)));\n        k4 = f(x0+c[2]*h,        add(add(add(y0,mul(A4[0]*h,k1[i])),mul(A4[1]*h,k2)),mul(A4[2]*h,k3)));\n        k5 = f(x0+c[3]*h,    add(add(add(add(y0,mul(A5[0]*h,k1[i])),mul(A5[1]*h,k2)),mul(A5[2]*h,k3)),mul(A5[3]*h,k4)));\n        k6 = f(x0+c[4]*h,add(add(add(add(add(y0,mul(A6[0]*h,k1[i])),mul(A6[1]*h,k2)),mul(A6[2]*h,k3)),mul(A6[3]*h,k4)),mul(A6[4]*h,k5)));\n        y1 = add(add(add(add(add(y0,mul(k1[i],h*b[0])),mul(k3,h*b[2])),mul(k4,h*b[3])),mul(k5,h*b[4])),mul(k6,h*b[5]));\n        k7 = f(x0+h,y1);\n        er = add(add(add(add(add(mul(k1[i],h*e[0]),mul(k3,h*e[2])),mul(k4,h*e[3])),mul(k5,h*e[4])),mul(k6,h*e[5])),mul(k7,h*e[6]));\n        if(typeof er === \"number\") erinf = abs(er);\n        else erinf = norminf(er);\n        if(erinf > tol) { // reject\n            h = 0.2*h*pow(tol/erinf,0.25);\n            if(x0+h === x0) {\n                ret.msg = \"Step size became too small\";\n                break;\n            }\n            continue;\n        }\n        ymid[i] = add(add(add(add(add(add(y0,\n                mul(k1[i],h*bm[0])),\n                mul(k3   ,h*bm[2])),\n                mul(k4   ,h*bm[3])),\n                mul(k5   ,h*bm[4])),\n                mul(k6   ,h*bm[5])),\n                mul(k7   ,h*bm[6]));\n        ++i;\n        xs[i] = x0+h;\n        ys[i] = y1;\n        k1[i] = k7;\n        if(typeof event === \"function\") {\n            var yi,xl = x0,xr = x0+0.5*h,xi;\n            e1 = event(xr,ymid[i-1]);\n            ev = and(lt(e0,0),lt(0,e1));\n            if(!any(ev)) { xl = xr; xr = x0+h; e0 = e1; e1 = event(xr,y1); ev = and(lt(e0,0),lt(0,e1)); }\n            if(any(ev)) {\n                var xc, yc, en,ei;\n                var side=0, sl = 1.0, sr = 1.0;\n                while(1) {\n                    if(typeof e0 === \"number\") xi = (sr*e1*xl-sl*e0*xr)/(sr*e1-sl*e0);\n                    else {\n                        xi = xr;\n                        for(j=e0.length-1;j!==-1;--j) {\n                            if(e0[j]<0 && e1[j]>0) xi = min(xi,(sr*e1[j]*xl-sl*e0[j]*xr)/(sr*e1[j]-sl*e0[j]));\n                        }\n                    }\n                    if(xi <= xl || xi >= xr) break;\n                    yi = ret._at(xi, i-1);\n                    ei = event(xi,yi);\n                    en = and(lt(e0,0),lt(0,ei));\n                    if(any(en)) {\n                        xr = xi;\n                        e1 = ei;\n                        ev = en;\n                        sr = 1.0;\n                        if(side === -1) sl *= 0.5;\n                        else sl = 1.0;\n                        side = -1;\n                    } else {\n                        xl = xi;\n                        e0 = ei;\n                        sl = 1.0;\n                        if(side === 1) sr *= 0.5;\n                        else sr = 1.0;\n                        side = 1;\n                    }\n                }\n                y1 = ret._at(0.5*(x0+xi),i-1);\n                ret.f[i] = f(xi,yi);\n                ret.x[i] = xi;\n                ret.y[i] = yi;\n                ret.ymid[i-1] = y1;\n                ret.events = ev;\n                ret.iterations = it;\n                return ret;\n            }\n        }\n        x0 += h;\n        y0 = y1;\n        e0 = e1;\n        h = min(0.8*h*pow(tol/erinf,0.25),4*h);\n    }\n    ret.iterations = it;\n    return ret;\n}\n\n// 11. Ax = b\nnumeric.LU = function(A, fast) {\n  fast = fast || false;\n\n  var abs = Math.abs;\n  var i, j, k, absAjk, Akk, Ak, Pk, Ai;\n  var max;\n  var n = A.length, n1 = n-1;\n  var P = new Array(n);\n  if(!fast) A = numeric.clone(A);\n\n  for (k = 0; k < n; ++k) {\n    Pk = k;\n    Ak = A[k];\n    max = abs(Ak[k]);\n    for (j = k + 1; j < n; ++j) {\n      absAjk = abs(A[j][k]);\n      if (max < absAjk) {\n        max = absAjk;\n        Pk = j;\n      }\n    }\n    P[k] = Pk;\n\n    if (Pk != k) {\n      A[k] = A[Pk];\n      A[Pk] = Ak;\n      Ak = A[k];\n    }\n\n    Akk = Ak[k];\n\n    for (i = k + 1; i < n; ++i) {\n      A[i][k] /= Akk;\n    }\n\n    for (i = k + 1; i < n; ++i) {\n      Ai = A[i];\n      for (j = k + 1; j < n1; ++j) {\n        Ai[j] -= Ai[k] * Ak[j];\n        ++j;\n        Ai[j] -= Ai[k] * Ak[j];\n      }\n      if(j===n1) Ai[j] -= Ai[k] * Ak[j];\n    }\n  }\n\n  return {\n    LU: A,\n    P:  P\n  };\n}\n\nnumeric.LUsolve = function LUsolve(LUP, b) {\n  var i, j;\n  var LU = LUP.LU;\n  var n   = LU.length;\n  var x = numeric.clone(b);\n  var P   = LUP.P;\n  var Pi, LUi, LUii, tmp;\n\n  for (i=n-1;i!==-1;--i) x[i] = b[i];\n  for (i = 0; i < n; ++i) {\n    Pi = P[i];\n    if (P[i] !== i) {\n      tmp = x[i];\n      x[i] = x[Pi];\n      x[Pi] = tmp;\n    }\n\n    LUi = LU[i];\n    for (j = 0; j < i; ++j) {\n      x[i] -= x[j] * LUi[j];\n    }\n  }\n\n  for (i = n - 1; i >= 0; --i) {\n    LUi = LU[i];\n    for (j = i + 1; j < n; ++j) {\n      x[i] -= x[j] * LUi[j];\n    }\n\n    x[i] /= LUi[i];\n  }\n\n  return x;\n}\n\nnumeric.solve = function solve(A,b,fast) { return numeric.LUsolve(numeric.LU(A,fast), b); }\n\n// 12. Linear programming\nnumeric.echelonize = function echelonize(A) {\n    var s = numeric.dim(A), m = s[0], n = s[1];\n    var I = numeric.identity(m);\n    var P = Array(m);\n    var i,j,k,l,Ai,Ii,Z,a;\n    var abs = Math.abs;\n    var diveq = numeric.diveq;\n    A = numeric.clone(A);\n    for(i=0;i<m;++i) {\n        k = 0;\n        Ai = A[i];\n        Ii = I[i];\n        for(j=1;j<n;++j) if(abs(Ai[k])<abs(Ai[j])) k=j;\n        P[i] = k;\n        diveq(Ii,Ai[k]);\n        diveq(Ai,Ai[k]);\n        for(j=0;j<m;++j) if(j!==i) {\n            Z = A[j]; a = Z[k];\n            for(l=n-1;l!==-1;--l) Z[l] -= Ai[l]*a;\n            Z = I[j];\n            for(l=m-1;l!==-1;--l) Z[l] -= Ii[l]*a;\n        }\n    }\n    return {I:I, A:A, P:P};\n}\n\nnumeric.__solveLP = function __solveLP(c,A,b,tol,maxit,x,flag) {\n    var sum = numeric.sum, log = numeric.log, mul = numeric.mul, sub = numeric.sub, dot = numeric.dot, div = numeric.div, add = numeric.add;\n    var m = c.length, n = b.length,y;\n    var unbounded = false, cb,i0=0;\n    var alpha = 1.0;\n    var f0,df0,AT = numeric.transpose(A), svd = numeric.svd,transpose = numeric.transpose,leq = numeric.leq, sqrt = Math.sqrt, abs = Math.abs;\n    var muleq = numeric.muleq;\n    var norm = numeric.norminf, any = numeric.any,min = Math.min;\n    var all = numeric.all, gt = numeric.gt;\n    var p = Array(m), A0 = Array(n),e=numeric.rep([n],1), H;\n    var solve = numeric.solve, z = sub(b,dot(A,x)),count;\n    var dotcc = dot(c,c);\n    var g;\n    for(count=i0;count<maxit;++count) {\n        var i,j,d;\n        for(i=n-1;i!==-1;--i) A0[i] = div(A[i],z[i]);\n        var A1 = transpose(A0);\n        for(i=m-1;i!==-1;--i) p[i] = (/*x[i]+*/sum(A1[i]));\n        alpha = 0.25*abs(dotcc/dot(c,p));\n        var a1 = 100*sqrt(dotcc/dot(p,p));\n        if(!isFinite(alpha) || alpha>a1) alpha = a1;\n        g = add(c,mul(alpha,p));\n        H = dot(A1,A0);\n        for(i=m-1;i!==-1;--i) H[i][i] += 1;\n        d = solve(H,div(g,alpha),true);\n        var t0 = div(z,dot(A,d));\n        var t = 1.0;\n        for(i=n-1;i!==-1;--i) if(t0[i]<0) t = min(t,-0.999*t0[i]);\n        y = sub(x,mul(d,t));\n        z = sub(b,dot(A,y));\n        if(!all(gt(z,0))) return { solution: x, message: \"\", iterations: count };\n        x = y;\n        if(alpha<tol) return { solution: y, message: \"\", iterations: count };\n        if(flag) {\n            var s = dot(c,g), Ag = dot(A,g);\n            unbounded = true;\n            for(i=n-1;i!==-1;--i) if(s*Ag[i]<0) { unbounded = false; break; }\n        } else {\n            if(x[m-1]>=0) unbounded = false;\n            else unbounded = true;\n        }\n        if(unbounded) return { solution: y, message: \"Unbounded\", iterations: count };\n    }\n    return { solution: x, message: \"maximum iteration count exceeded\", iterations:count };\n}\n\nnumeric._solveLP = function _solveLP(c,A,b,tol,maxit) {\n    var m = c.length, n = b.length,y;\n    var sum = numeric.sum, log = numeric.log, mul = numeric.mul, sub = numeric.sub, dot = numeric.dot, div = numeric.div, add = numeric.add;\n    var c0 = numeric.rep([m],0).concat([1]);\n    var J = numeric.rep([n,1],-1);\n    var A0 = numeric.blockMatrix([[A                   ,   J  ]]);\n    var b0 = b;\n    var y = numeric.rep([m],0).concat(Math.max(0,numeric.sup(numeric.neg(b)))+1);\n    var x0 = numeric.__solveLP(c0,A0,b0,tol,maxit,y,false);\n    var x = numeric.clone(x0.solution);\n    x.length = m;\n    var foo = numeric.inf(sub(b,dot(A,x)));\n    if(foo<0) { return { solution: NaN, message: \"Infeasible\", iterations: x0.iterations }; }\n    var ret = numeric.__solveLP(c, A, b, tol, maxit-x0.iterations, x, true);\n    ret.iterations += x0.iterations;\n    return ret;\n};\n\nnumeric.solveLP = function solveLP(c,A,b,Aeq,beq,tol,maxit) {\n    if(typeof maxit === \"undefined\") maxit = 1000;\n    if(typeof tol === \"undefined\") tol = numeric.epsilon;\n    if(typeof Aeq === \"undefined\") return numeric._solveLP(c,A,b,tol,maxit);\n    var m = Aeq.length, n = Aeq[0].length, o = A.length;\n    var B = numeric.echelonize(Aeq);\n    var flags = numeric.rep([n],0);\n    var P = B.P;\n    var Q = [];\n    var i;\n    for(i=P.length-1;i!==-1;--i) flags[P[i]] = 1;\n    for(i=n-1;i!==-1;--i) if(flags[i]===0) Q.push(i);\n    var g = numeric.getRange;\n    var I = numeric.linspace(0,m-1), J = numeric.linspace(0,o-1);\n    var Aeq2 = g(Aeq,I,Q), A1 = g(A,J,P), A2 = g(A,J,Q), dot = numeric.dot, sub = numeric.sub;\n    var A3 = dot(A1,B.I);\n    var A4 = sub(A2,dot(A3,Aeq2)), b4 = sub(b,dot(A3,beq));\n    var c1 = Array(P.length), c2 = Array(Q.length);\n    for(i=P.length-1;i!==-1;--i) c1[i] = c[P[i]];\n    for(i=Q.length-1;i!==-1;--i) c2[i] = c[Q[i]];\n    var c4 = sub(c2,dot(c1,dot(B.I,Aeq2)));\n    var S = numeric._solveLP(c4,A4,b4,tol,maxit);\n    var x2 = S.solution;\n    if(x2!==x2) return S;\n    var x1 = dot(B.I,sub(beq,dot(Aeq2,x2)));\n    var x = Array(c.length);\n    for(i=P.length-1;i!==-1;--i) x[P[i]] = x1[i];\n    for(i=Q.length-1;i!==-1;--i) x[Q[i]] = x2[i];\n    return { solution: x, message:S.message, iterations: S.iterations };\n}\n\nnumeric.MPStoLP = function MPStoLP(MPS) {\n    if(MPS instanceof String) { MPS.split('\\n'); }\n    var state = 0;\n    var states = ['Initial state','NAME','ROWS','COLUMNS','RHS','BOUNDS','ENDATA'];\n    var n = MPS.length;\n    var i,j,z,N=0,rows = {}, sign = [], rl = 0, vars = {}, nv = 0;\n    var name;\n    var c = [], A = [], b = [];\n    function err(e) { throw new Error('MPStoLP: '+e+'\\nLine '+i+': '+MPS[i]+'\\nCurrent state: '+states[state]+'\\n'); }\n    for(i=0;i<n;++i) {\n        z = MPS[i];\n        var w0 = z.match(/\\S*/g);\n        var w = [];\n        for(j=0;j<w0.length;++j) if(w0[j]!==\"\") w.push(w0[j]);\n        if(w.length === 0) continue;\n        for(j=0;j<states.length;++j) if(z.substr(0,states[j].length) === states[j]) break;\n        if(j<states.length) {\n            state = j;\n            if(j===1) { name = w[1]; }\n            if(j===6) return { name:name, c:c, A:numeric.transpose(A), b:b, rows:rows, vars:vars };\n            continue;\n        }\n        switch(state) {\n        case 0: case 1: err('Unexpected line');\n        case 2: \n            switch(w[0]) {\n            case 'N': if(N===0) N = w[1]; else err('Two or more N rows'); break;\n            case 'L': rows[w[1]] = rl; sign[rl] = 1; b[rl] = 0; ++rl; break;\n            case 'G': rows[w[1]] = rl; sign[rl] = -1;b[rl] = 0; ++rl; break;\n            case 'E': rows[w[1]] = rl; sign[rl] = 0;b[rl] = 0; ++rl; break;\n            default: err('Parse error '+numeric.prettyPrint(w));\n            }\n            break;\n        case 3:\n            if(!vars.hasOwnProperty(w[0])) { vars[w[0]] = nv; c[nv] = 0; A[nv] = numeric.rep([rl],0); ++nv; }\n            var p = vars[w[0]];\n            for(j=1;j<w.length;j+=2) {\n                if(w[j] === N) { c[p] = parseFloat(w[j+1]); continue; }\n                var q = rows[w[j]];\n                A[p][q] = (sign[q]<0?-1:1)*parseFloat(w[j+1]);\n            }\n            break;\n        case 4:\n            for(j=1;j<w.length;j+=2) b[rows[w[j]]] = (sign[rows[w[j]]]<0?-1:1)*parseFloat(w[j+1]);\n            break;\n        case 5: /*FIXME*/ break;\n        case 6: err('Internal error');\n        }\n    }\n    err('Reached end of file without ENDATA');\n}\n// seedrandom.js version 2.0.\n// Author: David Bau 4/2/2011\n//\n// Defines a method Math.seedrandom() that, when called, substitutes\n// an explicitly seeded RC4-based algorithm for Math.random().  Also\n// supports automatic seeding from local or network sources of entropy.\n//\n// Usage:\n//\n//   <script src=http://davidbau.com/encode/seedrandom-min.js></script>\n//\n//   Math.seedrandom('yipee'); Sets Math.random to a function that is\n//                             initialized using the given explicit seed.\n//\n//   Math.seedrandom();        Sets Math.random to a function that is\n//                             seeded using the current time, dom state,\n//                             and other accumulated local entropy.\n//                             The generated seed string is returned.\n//\n//   Math.seedrandom('yowza', true);\n//                             Seeds using the given explicit seed mixed\n//                             together with accumulated entropy.\n//\n//   <script src=\"http://bit.ly/srandom-512\"></script>\n//                             Seeds using physical random bits downloaded\n//                             from random.org.\n//\n//   <script src=\"https://jsonlib.appspot.com/urandom?callback=Math.seedrandom\">\n//   </script>                 Seeds using urandom bits from call.jsonlib.com,\n//                             which is faster than random.org.\n//\n// Examples:\n//\n//   Math.seedrandom(\"hello\");            // Use \"hello\" as the seed.\n//   document.write(Math.random());       // Always 0.5463663768140734\n//   document.write(Math.random());       // Always 0.43973793770592234\n//   var rng1 = Math.random;              // Remember the current prng.\n//\n//   var autoseed = Math.seedrandom();    // New prng with an automatic seed.\n//   document.write(Math.random());       // Pretty much unpredictable.\n//\n//   Math.random = rng1;                  // Continue \"hello\" prng sequence.\n//   document.write(Math.random());       // Always 0.554769432473455\n//\n//   Math.seedrandom(autoseed);           // Restart at the previous seed.\n//   document.write(Math.random());       // Repeat the 'unpredictable' value.\n//\n// Notes:\n//\n// Each time seedrandom('arg') is called, entropy from the passed seed\n// is accumulated in a pool to help generate future seeds for the\n// zero-argument form of Math.seedrandom, so entropy can be injected over\n// time by calling seedrandom with explicit data repeatedly.\n//\n// On speed - This javascript implementation of Math.random() is about\n// 3-10x slower than the built-in Math.random() because it is not native\n// code, but this is typically fast enough anyway.  Seeding is more expensive,\n// especially if you use auto-seeding.  Some details (timings on Chrome 4):\n//\n// Our Math.random()            - avg less than 0.002 milliseconds per call\n// seedrandom('explicit')       - avg less than 0.5 milliseconds per call\n// seedrandom('explicit', true) - avg less than 2 milliseconds per call\n// seedrandom()                 - avg about 38 milliseconds per call\n//\n// LICENSE (BSD):\n//\n// Copyright 2010 David Bau, all rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n// \n//   1. Redistributions of source code must retain the above copyright\n//      notice, this list of conditions and the following disclaimer.\n//\n//   2. Redistributions in binary form must reproduce the above copyright\n//      notice, this list of conditions and the following disclaimer in the\n//      documentation and/or other materials provided with the distribution.\n// \n//   3. Neither the name of this module nor the names of its contributors may\n//      be used to endorse or promote products derived from this software\n//      without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n/**\n * All code is in an anonymous closure to keep the global namespace clean.\n *\n * @param {number=} overflow \n * @param {number=} startdenom\n */\n\n// Patched by Seb so that seedrandom.js does not pollute the Math object.\n// My tests suggest that doing Math.trouble = 1 makes Math lookups about 5%\n// slower.\nnumeric.seedrandom = { pow:Math.pow, random:Math.random };\n\n(function (pool, math, width, chunks, significance, overflow, startdenom) {\n\n\n//\n// seedrandom()\n// This is the seedrandom function described above.\n//\nmath['seedrandom'] = function seedrandom(seed, use_entropy) {\n  var key = [];\n  var arc4;\n\n  // Flatten the seed string or build one from local entropy if needed.\n  seed = mixkey(flatten(\n    use_entropy ? [seed, pool] :\n    arguments.length ? seed :\n    [new Date().getTime(), pool, window], 3), key);\n\n  // Use the seed to initialize an ARC4 generator.\n  arc4 = new ARC4(key);\n\n  // Mix the randomness into accumulated entropy.\n  mixkey(arc4.S, pool);\n\n  // Override Math.random\n\n  // This function returns a random double in [0, 1) that contains\n  // randomness in every bit of the mantissa of the IEEE 754 value.\n\n  math['random'] = function random() {  // Closure to return a random double:\n    var n = arc4.g(chunks);             // Start with a numerator n < 2 ^ 48\n    var d = startdenom;                 //   and denominator d = 2 ^ 48.\n    var x = 0;                          //   and no 'extra last byte'.\n    while (n < significance) {          // Fill up all significant digits by\n      n = (n + x) * width;              //   shifting numerator and\n      d *= width;                       //   denominator and generating a\n      x = arc4.g(1);                    //   new least-significant-byte.\n    }\n    while (n >= overflow) {             // To avoid rounding up, before adding\n      n /= 2;                           //   last byte, shift everything\n      d /= 2;                           //   right using integer math until\n      x >>>= 1;                         //   we have exactly the desired bits.\n    }\n    return (n + x) / d;                 // Form the number within [0, 1).\n  };\n\n  // Return the seed that was used\n  return seed;\n};\n\n//\n// ARC4\n//\n// An ARC4 implementation.  The constructor takes a key in the form of\n// an array of at most (width) integers that should be 0 <= x < (width).\n//\n// The g(count) method returns a pseudorandom integer that concatenates\n// the next (count) outputs from ARC4.  Its return value is a number x\n// that is in the range 0 <= x < (width ^ count).\n//\n/** @constructor */\nfunction ARC4(key) {\n  var t, u, me = this, keylen = key.length;\n  var i = 0, j = me.i = me.j = me.m = 0;\n  me.S = [];\n  me.c = [];\n\n  // The empty key [] is treated as [0].\n  if (!keylen) { key = [keylen++]; }\n\n  // Set up S using the standard key scheduling algorithm.\n  while (i < width) { me.S[i] = i++; }\n  for (i = 0; i < width; i++) {\n    t = me.S[i];\n    j = lowbits(j + t + key[i % keylen]);\n    u = me.S[j];\n    me.S[i] = u;\n    me.S[j] = t;\n  }\n\n  // The \"g\" method returns the next (count) outputs as one number.\n  me.g = function getnext(count) {\n    var s = me.S;\n    var i = lowbits(me.i + 1); var t = s[i];\n    var j = lowbits(me.j + t); var u = s[j];\n    s[i] = u;\n    s[j] = t;\n    var r = s[lowbits(t + u)];\n    while (--count) {\n      i = lowbits(i + 1); t = s[i];\n      j = lowbits(j + t); u = s[j];\n      s[i] = u;\n      s[j] = t;\n      r = r * width + s[lowbits(t + u)];\n    }\n    me.i = i;\n    me.j = j;\n    return r;\n  };\n  // For robust unpredictability discard an initial batch of values.\n  // See http://www.rsa.com/rsalabs/node.asp?id=2009\n  me.g(width);\n}\n\n//\n// flatten()\n// Converts an object tree to nested arrays of strings.\n//\n/** @param {Object=} result \n  * @param {string=} prop\n  * @param {string=} typ */\nfunction flatten(obj, depth, result, prop, typ) {\n  result = [];\n  typ = typeof(obj);\n  if (depth && typ == 'object') {\n    for (prop in obj) {\n      if (prop.indexOf('S') < 5) {    // Avoid FF3 bug (local/sessionStorage)\n        try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}\n      }\n    }\n  }\n  return (result.length ? result : obj + (typ != 'string' ? '\\0' : ''));\n}\n\n//\n// mixkey()\n// Mixes a string seed into a key that is an array of integers, and\n// returns a shortened string seed that is equivalent to the result key.\n//\n/** @param {number=} smear \n  * @param {number=} j */\nfunction mixkey(seed, key, smear, j) {\n  seed += '';                         // Ensure the seed is a string\n  smear = 0;\n  for (j = 0; j < seed.length; j++) {\n    key[lowbits(j)] =\n      lowbits((smear ^= key[lowbits(j)] * 19) + seed.charCodeAt(j));\n  }\n  seed = '';\n  for (j in key) { seed += String.fromCharCode(key[j]); }\n  return seed;\n}\n\n//\n// lowbits()\n// A quick \"n mod width\" for width a power of 2.\n//\nfunction lowbits(n) { return n & (width - 1); }\n\n//\n// The following constants are related to IEEE 754 limits.\n//\nstartdenom = math.pow(width, chunks);\nsignificance = math.pow(2, significance);\noverflow = significance * 2;\n\n//\n// When seedrandom.js is loaded, we immediately mix a few bits\n// from the built-in RNG into the entropy pool.  Because we do\n// not want to intefere with determinstic PRNG state later,\n// seedrandom will not call math.random on its own again after\n// initialization.\n//\nmixkey(math.random(), pool);\n\n// End anonymous scope, and pass initial values.\n}(\n  [],   // pool: entropy pool starts empty\n  numeric.seedrandom, // math: package containing random, pow, and seedrandom\n  256,  // width: each RC4 output is 0 <= x < 256\n  6,    // chunks: at least six RC4 outputs for each double\n  52    // significance: there are 52 significant digits in a double\n  ));\n/* This file is a slightly modified version of quadprog.js from Alberto Santini.\n * It has been slightly modified by Sébastien Loisel to make sure that it handles\n * 0-based Arrays instead of 1-based Arrays.\n * License is in resources/LICENSE.quadprog */\n(function(exports) {\n\nfunction base0to1(A) {\n    if(typeof A !== \"object\") { return A; }\n    var ret = [], i,n=A.length;\n    for(i=0;i<n;i++) ret[i+1] = base0to1(A[i]);\n    return ret;\n}\nfunction base1to0(A) {\n    if(typeof A !== \"object\") { return A; }\n    var ret = [], i,n=A.length;\n    for(i=1;i<n;i++) ret[i-1] = base1to0(A[i]);\n    return ret;\n}\n\nfunction dpori(a, lda, n) {\n    var i, j, k, kp1, t;\n\n    for (k = 1; k <= n; k = k + 1) {\n        a[k][k] = 1 / a[k][k];\n        t = -a[k][k];\n        //~ dscal(k - 1, t, a[1][k], 1);\n        for (i = 1; i < k; i = i + 1) {\n            a[i][k] = t * a[i][k];\n        }\n\n        kp1 = k + 1;\n        if (n < kp1) {\n            break;\n        }\n        for (j = kp1; j <= n; j = j + 1) {\n            t = a[k][j];\n            a[k][j] = 0;\n            //~ daxpy(k, t, a[1][k], 1, a[1][j], 1);\n            for (i = 1; i <= k; i = i + 1) {\n                a[i][j] = a[i][j] + (t * a[i][k]);\n            }\n        }\n    }\n\n}\n\nfunction dposl(a, lda, n, b) {\n    var i, k, kb, t;\n\n    for (k = 1; k <= n; k = k + 1) {\n        //~ t = ddot(k - 1, a[1][k], 1, b[1], 1);\n        t = 0;\n        for (i = 1; i < k; i = i + 1) {\n            t = t + (a[i][k] * b[i]);\n        }\n\n        b[k] = (b[k] - t) / a[k][k];\n    }\n\n    for (kb = 1; kb <= n; kb = kb + 1) {\n        k = n + 1 - kb;\n        b[k] = b[k] / a[k][k];\n        t = -b[k];\n        //~ daxpy(k - 1, t, a[1][k], 1, b[1], 1);\n        for (i = 1; i < k; i = i + 1) {\n            b[i] = b[i] + (t * a[i][k]);\n        }\n    }\n}\n\nfunction dpofa(a, lda, n, info) {\n    var i, j, jm1, k, t, s;\n\n    for (j = 1; j <= n; j = j + 1) {\n        info[1] = j;\n        s = 0;\n        jm1 = j - 1;\n        if (jm1 < 1) {\n            s = a[j][j] - s;\n            if (s <= 0) {\n                break;\n            }\n            a[j][j] = Math.sqrt(s);\n        } else {\n            for (k = 1; k <= jm1; k = k + 1) {\n                //~ t = a[k][j] - ddot(k - 1, a[1][k], 1, a[1][j], 1);\n                t = a[k][j];\n                for (i = 1; i < k; i = i + 1) {\n                    t = t - (a[i][j] * a[i][k]);\n                }\n                t = t / a[k][k];\n                a[k][j] = t;\n                s = s + t * t;\n            }\n            s = a[j][j] - s;\n            if (s <= 0) {\n                break;\n            }\n            a[j][j] = Math.sqrt(s);\n        }\n        info[1] = 0;\n    }\n}\n\nfunction qpgen2(dmat, dvec, fddmat, n, sol, crval, amat,\n    bvec, fdamat, q, meq, iact, nact, iter, work, ierr) {\n\n    var i, j, l, l1, info, it1, iwzv, iwrv, iwrm, iwsv, iwuv, nvl, r, iwnbv,\n        temp, sum, t1, tt, gc, gs, nu,\n        t1inf, t2min,\n        vsmall, tmpa, tmpb,\n        go;\n\n    r = Math.min(n, q);\n    l = 2 * n + (r * (r + 5)) / 2 + 2 * q + 1;\n\n    vsmall = 1.0e-60;\n    do {\n        vsmall = vsmall + vsmall;\n        tmpa = 1 + 0.1 * vsmall;\n        tmpb = 1 + 0.2 * vsmall;\n    } while (tmpa <= 1 || tmpb <= 1);\n\n    for (i = 1; i <= n; i = i + 1) {\n        work[i] = dvec[i];\n    }\n    for (i = n + 1; i <= l; i = i + 1) {\n        work[i] = 0;\n    }\n    for (i = 1; i <= q; i = i + 1) {\n        iact[i] = 0;\n    }\n\n    info = [];\n\n    if (ierr[1] === 0) {\n        dpofa(dmat, fddmat, n, info);\n        if (info[1] !== 0) {\n            ierr[1] = 2;\n            return;\n        }\n        dposl(dmat, fddmat, n, dvec);\n        dpori(dmat, fddmat, n);\n    } else {\n        for (j = 1; j <= n; j = j + 1) {\n            sol[j] = 0;\n            for (i = 1; i <= j; i = i + 1) {\n                sol[j] = sol[j] + dmat[i][j] * dvec[i];\n            }\n        }\n        for (j = 1; j <= n; j = j + 1) {\n            dvec[j] = 0;\n            for (i = j; i <= n; i = i + 1) {\n                dvec[j] = dvec[j] + dmat[j][i] * sol[i];\n            }\n        }\n    }\n\n    crval[1] = 0;\n    for (j = 1; j <= n; j = j + 1) {\n        sol[j] = dvec[j];\n        crval[1] = crval[1] + work[j] * sol[j];\n        work[j] = 0;\n        for (i = j + 1; i <= n; i = i + 1) {\n            dmat[i][j] = 0;\n        }\n    }\n    crval[1] = -crval[1] / 2;\n    ierr[1] = 0;\n\n    iwzv = n;\n    iwrv = iwzv + n;\n    iwuv = iwrv + r;\n    iwrm = iwuv + r + 1;\n    iwsv = iwrm + (r * (r + 1)) / 2;\n    iwnbv = iwsv + q;\n\n    for (i = 1; i <= q; i = i + 1) {\n        sum = 0;\n        for (j = 1; j <= n; j = j + 1) {\n            sum = sum + amat[j][i] * amat[j][i];\n        }\n        work[iwnbv + i] = Math.sqrt(sum);\n    }\n    nact = 0;\n    iter[1] = 0;\n    iter[2] = 0;\n\n    function fn_goto_50() {\n        iter[1] = iter[1] + 1;\n\n        l = iwsv;\n        for (i = 1; i <= q; i = i + 1) {\n            l = l + 1;\n            sum = -bvec[i];\n            for (j = 1; j <= n; j = j + 1) {\n                sum = sum + amat[j][i] * sol[j];\n            }\n            if (Math.abs(sum) < vsmall) {\n                sum = 0;\n            }\n            if (i > meq) {\n                work[l] = sum;\n            } else {\n                work[l] = -Math.abs(sum);\n                if (sum > 0) {\n                    for (j = 1; j <= n; j = j + 1) {\n                        amat[j][i] = -amat[j][i];\n                    }\n                    bvec[i] = -bvec[i];\n                }\n            }\n        }\n\n        for (i = 1; i <= nact; i = i + 1) {\n            work[iwsv + iact[i]] = 0;\n        }\n\n        nvl = 0;\n        temp = 0;\n        for (i = 1; i <= q; i = i + 1) {\n            if (work[iwsv + i] < temp * work[iwnbv + i]) {\n                nvl = i;\n                temp = work[iwsv + i] / work[iwnbv + i];\n            }\n        }\n        if (nvl === 0) {\n            return 999;\n        }\n\n        return 0;\n    }\n\n    function fn_goto_55() {\n        for (i = 1; i <= n; i = i + 1) {\n            sum = 0;\n            for (j = 1; j <= n; j = j + 1) {\n                sum = sum + dmat[j][i] * amat[j][nvl];\n            }\n            work[i] = sum;\n        }\n\n        l1 = iwzv;\n        for (i = 1; i <= n; i = i + 1) {\n            work[l1 + i] = 0;\n        }\n        for (j = nact + 1; j <= n; j = j + 1) {\n            for (i = 1; i <= n; i = i + 1) {\n                work[l1 + i] = work[l1 + i] + dmat[i][j] * work[j];\n            }\n        }\n\n        t1inf = true;\n        for (i = nact; i >= 1; i = i - 1) {\n            sum = work[i];\n            l = iwrm + (i * (i + 3)) / 2;\n            l1 = l - i;\n            for (j = i + 1; j <= nact; j = j + 1) {\n                sum = sum - work[l] * work[iwrv + j];\n                l = l + j;\n            }\n            sum = sum / work[l1];\n            work[iwrv + i] = sum;\n            if (iact[i] < meq) {\n                // continue;\n                break;\n            }\n            if (sum < 0) {\n                // continue;\n                break;\n            }\n            t1inf = false;\n            it1 = i;\n        }\n\n        if (!t1inf) {\n            t1 = work[iwuv + it1] / work[iwrv + it1];\n            for (i = 1; i <= nact; i = i + 1) {\n                if (iact[i] < meq) {\n                    // continue;\n                    break;\n                }\n                if (work[iwrv + i] < 0) {\n                    // continue;\n                    break;\n                }\n                temp = work[iwuv + i] / work[iwrv + i];\n                if (temp < t1) {\n                    t1 = temp;\n                    it1 = i;\n                }\n            }\n        }\n\n        sum = 0;\n        for (i = iwzv + 1; i <= iwzv + n; i = i + 1) {\n            sum = sum + work[i] * work[i];\n        }\n        if (Math.abs(sum) <= vsmall) {\n            if (t1inf) {\n                ierr[1] = 1;\n                // GOTO 999\n                return 999;\n            } else {\n                for (i = 1; i <= nact; i = i + 1) {\n                    work[iwuv + i] = work[iwuv + i] - t1 * work[iwrv + i];\n                }\n                work[iwuv + nact + 1] = work[iwuv + nact + 1] + t1;\n                // GOTO 700\n                return 700;\n            }\n        } else {\n            sum = 0;\n            for (i = 1; i <= n; i = i + 1) {\n                sum = sum + work[iwzv + i] * amat[i][nvl];\n            }\n            tt = -work[iwsv + nvl] / sum;\n            t2min = true;\n            if (!t1inf) {\n                if (t1 < tt) {\n                    tt = t1;\n                    t2min = false;\n                }\n            }\n\n            for (i = 1; i <= n; i = i + 1) {\n                sol[i] = sol[i] + tt * work[iwzv + i];\n                if (Math.abs(sol[i]) < vsmall) {\n                    sol[i] = 0;\n                }\n            }\n\n            crval[1] = crval[1] + tt * sum * (tt / 2 + work[iwuv + nact + 1]);\n            for (i = 1; i <= nact; i = i + 1) {\n                work[iwuv + i] = work[iwuv + i] - tt * work[iwrv + i];\n            }\n            work[iwuv + nact + 1] = work[iwuv + nact + 1] + tt;\n\n            if (t2min) {\n                nact = nact + 1;\n                iact[nact] = nvl;\n\n                l = iwrm + ((nact - 1) * nact) / 2 + 1;\n                for (i = 1; i <= nact - 1; i = i + 1) {\n                    work[l] = work[i];\n                    l = l + 1;\n                }\n\n                if (nact === n) {\n                    work[l] = work[n];\n                } else {\n                    for (i = n; i >= nact + 1; i = i - 1) {\n                        if (work[i] === 0) {\n                            // continue;\n                            break;\n                        }\n                        gc = Math.max(Math.abs(work[i - 1]), Math.abs(work[i]));\n                        gs = Math.min(Math.abs(work[i - 1]), Math.abs(work[i]));\n                        if (work[i - 1] >= 0) {\n                            temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));\n                        } else {\n                            temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));\n                        }\n                        gc = work[i - 1] / temp;\n                        gs = work[i] / temp;\n\n                        if (gc === 1) {\n                            // continue;\n                            break;\n                        }\n                        if (gc === 0) {\n                            work[i - 1] = gs * temp;\n                            for (j = 1; j <= n; j = j + 1) {\n                                temp = dmat[j][i - 1];\n                                dmat[j][i - 1] = dmat[j][i];\n                                dmat[j][i] = temp;\n                            }\n                        } else {\n                            work[i - 1] = temp;\n                            nu = gs / (1 + gc);\n                            for (j = 1; j <= n; j = j + 1) {\n                                temp = gc * dmat[j][i - 1] + gs * dmat[j][i];\n                                dmat[j][i] = nu * (dmat[j][i - 1] + temp) - dmat[j][i];\n                                dmat[j][i - 1] = temp;\n\n                            }\n                        }\n                    }\n                    work[l] = work[nact];\n                }\n            } else {\n                sum = -bvec[nvl];\n                for (j = 1; j <= n; j = j + 1) {\n                    sum = sum + sol[j] * amat[j][nvl];\n                }\n                if (nvl > meq) {\n                    work[iwsv + nvl] = sum;\n                } else {\n                    work[iwsv + nvl] = -Math.abs(sum);\n                    if (sum > 0) {\n                        for (j = 1; j <= n; j = j + 1) {\n                            amat[j][nvl] = -amat[j][nvl];\n                        }\n                        bvec[nvl] = -bvec[nvl];\n                    }\n                }\n                // GOTO 700\n                return 700;\n            }\n        }\n\n        return 0;\n    }\n\n    function fn_goto_797() {\n        l = iwrm + (it1 * (it1 + 1)) / 2 + 1;\n        l1 = l + it1;\n        if (work[l1] === 0) {\n            // GOTO 798\n            return 798;\n        }\n        gc = Math.max(Math.abs(work[l1 - 1]), Math.abs(work[l1]));\n        gs = Math.min(Math.abs(work[l1 - 1]), Math.abs(work[l1]));\n        if (work[l1 - 1] >= 0) {\n            temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));\n        } else {\n            temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));\n        }\n        gc = work[l1 - 1] / temp;\n        gs = work[l1] / temp;\n\n        if (gc === 1) {\n            // GOTO 798\n            return 798;\n        }\n        if (gc === 0) {\n            for (i = it1 + 1; i <= nact; i = i + 1) {\n                temp = work[l1 - 1];\n                work[l1 - 1] = work[l1];\n                work[l1] = temp;\n                l1 = l1 + i;\n            }\n            for (i = 1; i <= n; i = i + 1) {\n                temp = dmat[i][it1];\n                dmat[i][it1] = dmat[i][it1 + 1];\n                dmat[i][it1 + 1] = temp;\n            }\n        } else {\n            nu = gs / (1 + gc);\n            for (i = it1 + 1; i <= nact; i = i + 1) {\n                temp = gc * work[l1 - 1] + gs * work[l1];\n                work[l1] = nu * (work[l1 - 1] + temp) - work[l1];\n                work[l1 - 1] = temp;\n                l1 = l1 + i;\n            }\n            for (i = 1; i <= n; i = i + 1) {\n                temp = gc * dmat[i][it1] + gs * dmat[i][it1 + 1];\n                dmat[i][it1 + 1] = nu * (dmat[i][it1] + temp) - dmat[i][it1 + 1];\n                dmat[i][it1] = temp;\n            }\n        }\n\n        return 0;\n    }\n\n    function fn_goto_798() {\n        l1 = l - it1;\n        for (i = 1; i <= it1; i = i + 1) {\n            work[l1] = work[l];\n            l = l + 1;\n            l1 = l1 + 1;\n        }\n\n        work[iwuv + it1] = work[iwuv + it1 + 1];\n        iact[it1] = iact[it1 + 1];\n        it1 = it1 + 1;\n        if (it1 < nact) {\n            // GOTO 797\n            return 797;\n        }\n\n        return 0;\n    }\n\n    function fn_goto_799() {\n        work[iwuv + nact] = work[iwuv + nact + 1];\n        work[iwuv + nact + 1] = 0;\n        iact[nact] = 0;\n        nact = nact - 1;\n        iter[2] = iter[2] + 1;\n\n        return 0;\n    }\n\n    go = 0;\n    while (true) {\n        go = fn_goto_50();\n        if (go === 999) {\n            return;\n        }\n        while (true) {\n            go = fn_goto_55();\n            if (go === 0) {\n                break;\n            }\n            if (go === 999) {\n                return;\n            }\n            if (go === 700) {\n                if (it1 === nact) {\n                    fn_goto_799();\n                } else {\n                    while (true) {\n                        fn_goto_797();\n                        go = fn_goto_798();\n                        if (go !== 797) {\n                            break;\n                        }\n                    }\n                    fn_goto_799();\n                }\n            }\n        }\n    }\n\n}\n\nfunction solveQP(Dmat, dvec, Amat, bvec, meq, factorized) {\n    Dmat = base0to1(Dmat);\n    dvec = base0to1(dvec);\n    Amat = base0to1(Amat);\n    var i, n, q,\n        nact, r,\n        crval = [], iact = [], sol = [], work = [], iter = [],\n        message;\n\n    meq = meq || 0;\n    factorized = factorized ? base0to1(factorized) : [undefined, 0];\n    bvec = bvec ? base0to1(bvec) : [];\n\n    // In Fortran the array index starts from 1\n    n = Dmat.length - 1;\n    q = Amat[1].length - 1;\n\n    if (!bvec) {\n        for (i = 1; i <= q; i = i + 1) {\n            bvec[i] = 0;\n        }\n    }\n    for (i = 1; i <= q; i = i + 1) {\n        iact[i] = 0;\n    }\n    nact = 0;\n    r = Math.min(n, q);\n    for (i = 1; i <= n; i = i + 1) {\n        sol[i] = 0;\n    }\n    crval[1] = 0;\n    for (i = 1; i <= (2 * n + (r * (r + 5)) / 2 + 2 * q + 1); i = i + 1) {\n        work[i] = 0;\n    }\n    for (i = 1; i <= 2; i = i + 1) {\n        iter[i] = 0;\n    }\n\n    qpgen2(Dmat, dvec, n, n, sol, crval, Amat,\n        bvec, n, q, meq, iact, nact, iter, work, factorized);\n\n    message = \"\";\n    if (factorized[1] === 1) {\n        message = \"constraints are inconsistent, no solution!\";\n    }\n    if (factorized[1] === 2) {\n        message = \"matrix D in quadratic function is not positive definite!\";\n    }\n\n    return {\n        solution: base1to0(sol),\n        value: base1to0(crval),\n        unconstrained_solution: base1to0(dvec),\n        iterations: base1to0(iter),\n        iact: base1to0(iact),\n        message: message\n    };\n}\nexports.solveQP = solveQP;\n}(numeric));\n/*\r\nShanti Rao sent me this routine by private email. I had to modify it\r\nslightly to work on Arrays instead of using a Matrix object.\r\nIt is apparently translated from http://stitchpanorama.sourceforge.net/Python/svd.py\r\n*/\r\n\r\nnumeric.svd= function svd(A) {\r\n    var temp;\r\n//Compute the thin SVD from G. H. Golub and C. Reinsch, Numer. Math. 14, 403-420 (1970)\r\n\tvar prec= numeric.epsilon; //Math.pow(2,-52) // assumes double prec\r\n\tvar tolerance= 1.e-64/prec;\r\n\tvar itmax= 50;\r\n\tvar c=0;\r\n\tvar i=0;\r\n\tvar j=0;\r\n\tvar k=0;\r\n\tvar l=0;\r\n\t\r\n\tvar u= numeric.clone(A);\r\n\tvar m= u.length;\r\n\t\r\n\tvar n= u[0].length;\r\n\t\r\n\tif (m < n) throw \"Need more rows than columns\"\r\n\t\r\n\tvar e = new Array(n);\r\n\tvar q = new Array(n);\r\n\tfor (i=0; i<n; i++) e[i] = q[i] = 0.0;\r\n\tvar v = numeric.rep([n,n],0);\r\n//\tv.zero();\r\n\t\r\n \tfunction pythag(a,b)\r\n \t{\r\n\t\ta = Math.abs(a)\r\n\t\tb = Math.abs(b)\r\n\t\tif (a > b)\r\n\t\t\treturn a*Math.sqrt(1.0+(b*b/a/a))\r\n\t\telse if (b == 0.0) \r\n\t\t\treturn a\r\n\t\treturn b*Math.sqrt(1.0+(a*a/b/b))\r\n\t}\r\n\r\n\t//Householder's reduction to bidiagonal form\r\n\r\n\tvar f= 0.0;\r\n\tvar g= 0.0;\r\n\tvar h= 0.0;\r\n\tvar x= 0.0;\r\n\tvar y= 0.0;\r\n\tvar z= 0.0;\r\n\tvar s= 0.0;\r\n\t\r\n\tfor (i=0; i < n; i++)\r\n\t{\t\r\n\t\te[i]= g;\r\n\t\ts= 0.0;\r\n\t\tl= i+1;\r\n\t\tfor (j=i; j < m; j++) \r\n\t\t\ts += (u[j][i]*u[j][i]);\r\n\t\tif (s <= tolerance)\r\n\t\t\tg= 0.0;\r\n\t\telse\r\n\t\t{\t\r\n\t\t\tf= u[i][i];\r\n\t\t\tg= Math.sqrt(s);\r\n\t\t\tif (f >= 0.0) g= -g;\r\n\t\t\th= f*g-s\r\n\t\t\tu[i][i]=f-g;\r\n\t\t\tfor (j=l; j < n; j++)\r\n\t\t\t{\r\n\t\t\t\ts= 0.0\r\n\t\t\t\tfor (k=i; k < m; k++) \r\n\t\t\t\t\ts += u[k][i]*u[k][j]\r\n\t\t\t\tf= s/h\r\n\t\t\t\tfor (k=i; k < m; k++) \r\n\t\t\t\t\tu[k][j]+=f*u[k][i]\r\n\t\t\t}\r\n\t\t}\r\n\t\tq[i]= g\r\n\t\ts= 0.0\r\n\t\tfor (j=l; j < n; j++) \r\n\t\t\ts= s + u[i][j]*u[i][j]\r\n\t\tif (s <= tolerance)\r\n\t\t\tg= 0.0\r\n\t\telse\r\n\t\t{\t\r\n\t\t\tf= u[i][i+1]\r\n\t\t\tg= Math.sqrt(s)\r\n\t\t\tif (f >= 0.0) g= -g\r\n\t\t\th= f*g - s\r\n\t\t\tu[i][i+1] = f-g;\r\n\t\t\tfor (j=l; j < n; j++) e[j]= u[i][j]/h\r\n\t\t\tfor (j=l; j < m; j++)\r\n\t\t\t{\t\r\n\t\t\t\ts=0.0\r\n\t\t\t\tfor (k=l; k < n; k++) \r\n\t\t\t\t\ts += (u[j][k]*u[i][k])\r\n\t\t\t\tfor (k=l; k < n; k++) \r\n\t\t\t\t\tu[j][k]+=s*e[k]\r\n\t\t\t}\t\r\n\t\t}\r\n\t\ty= Math.abs(q[i])+Math.abs(e[i])\r\n\t\tif (y>x) \r\n\t\t\tx=y\r\n\t}\r\n\t\r\n\t// accumulation of right hand gtransformations\r\n\tfor (i=n-1; i != -1; i+= -1)\r\n\t{\t\r\n\t\tif (g != 0.0)\r\n\t\t{\r\n\t\t \th= g*u[i][i+1]\r\n\t\t\tfor (j=l; j < n; j++) \r\n\t\t\t\tv[j][i]=u[i][j]/h\r\n\t\t\tfor (j=l; j < n; j++)\r\n\t\t\t{\t\r\n\t\t\t\ts=0.0\r\n\t\t\t\tfor (k=l; k < n; k++) \r\n\t\t\t\t\ts += u[i][k]*v[k][j]\r\n\t\t\t\tfor (k=l; k < n; k++) \r\n\t\t\t\t\tv[k][j]+=(s*v[k][i])\r\n\t\t\t}\t\r\n\t\t}\r\n\t\tfor (j=l; j < n; j++)\r\n\t\t{\r\n\t\t\tv[i][j] = 0;\r\n\t\t\tv[j][i] = 0;\r\n\t\t}\r\n\t\tv[i][i] = 1;\r\n\t\tg= e[i]\r\n\t\tl= i\r\n\t}\r\n\t\r\n\t// accumulation of left hand transformations\r\n\tfor (i=n-1; i != -1; i+= -1)\r\n\t{\t\r\n\t\tl= i+1\r\n\t\tg= q[i]\r\n\t\tfor (j=l; j < n; j++) \r\n\t\t\tu[i][j] = 0;\r\n\t\tif (g != 0.0)\r\n\t\t{\r\n\t\t\th= u[i][i]*g\r\n\t\t\tfor (j=l; j < n; j++)\r\n\t\t\t{\r\n\t\t\t\ts=0.0\r\n\t\t\t\tfor (k=l; k < m; k++) s += u[k][i]*u[k][j];\r\n\t\t\t\tf= s/h\r\n\t\t\t\tfor (k=i; k < m; k++) u[k][j]+=f*u[k][i];\r\n\t\t\t}\r\n\t\t\tfor (j=i; j < m; j++) u[j][i] = u[j][i]/g;\r\n\t\t}\r\n\t\telse\r\n\t\t\tfor (j=i; j < m; j++) u[j][i] = 0;\r\n\t\tu[i][i] += 1;\r\n\t}\r\n\t\r\n\t// diagonalization of the bidiagonal form\r\n\tprec= prec*x\r\n\tfor (k=n-1; k != -1; k+= -1)\r\n\t{\r\n\t\tfor (var iteration=0; iteration < itmax; iteration++)\r\n\t\t{\t// test f splitting\r\n\t\t\tvar test_convergence = false\r\n\t\t\tfor (l=k; l != -1; l+= -1)\r\n\t\t\t{\t\r\n\t\t\t\tif (Math.abs(e[l]) <= prec)\r\n\t\t\t\t{\ttest_convergence= true\r\n\t\t\t\t\tbreak \r\n\t\t\t\t}\r\n\t\t\t\tif (Math.abs(q[l-1]) <= prec)\r\n\t\t\t\t\tbreak \r\n\t\t\t}\r\n\t\t\tif (!test_convergence)\r\n\t\t\t{\t// cancellation of e[l] if l>0\r\n\t\t\t\tc= 0.0\r\n\t\t\t\ts= 1.0\r\n\t\t\t\tvar l1= l-1\r\n\t\t\t\tfor (i =l; i<k+1; i++)\r\n\t\t\t\t{\t\r\n\t\t\t\t\tf= s*e[i]\r\n\t\t\t\t\te[i]= c*e[i]\r\n\t\t\t\t\tif (Math.abs(f) <= prec)\r\n\t\t\t\t\t\tbreak\r\n\t\t\t\t\tg= q[i]\r\n\t\t\t\t\th= pythag(f,g)\r\n\t\t\t\t\tq[i]= h\r\n\t\t\t\t\tc= g/h\r\n\t\t\t\t\ts= -f/h\r\n\t\t\t\t\tfor (j=0; j < m; j++)\r\n\t\t\t\t\t{\t\r\n\t\t\t\t\t\ty= u[j][l1]\r\n\t\t\t\t\t\tz= u[j][i]\r\n\t\t\t\t\t\tu[j][l1] =  y*c+(z*s)\r\n\t\t\t\t\t\tu[j][i] = -y*s+(z*c)\r\n\t\t\t\t\t} \r\n\t\t\t\t}\t\r\n\t\t\t}\r\n\t\t\t// test f convergence\r\n\t\t\tz= q[k]\r\n\t\t\tif (l== k)\r\n\t\t\t{\t//convergence\r\n\t\t\t\tif (z<0.0)\r\n\t\t\t\t{\t//q[k] is made non-negative\r\n\t\t\t\t\tq[k]= -z\r\n\t\t\t\t\tfor (j=0; j < n; j++)\r\n\t\t\t\t\t\tv[j][k] = -v[j][k]\r\n\t\t\t\t}\r\n\t\t\t\tbreak  //break out of iteration loop and move on to next k value\r\n\t\t\t}\r\n\t\t\tif (iteration >= itmax-1)\r\n\t\t\t\tthrow 'Error: no convergence.'\r\n\t\t\t// shift from bottom 2x2 minor\r\n\t\t\tx= q[l]\r\n\t\t\ty= q[k-1]\r\n\t\t\tg= e[k-1]\r\n\t\t\th= e[k]\r\n\t\t\tf= ((y-z)*(y+z)+(g-h)*(g+h))/(2.0*h*y)\r\n\t\t\tg= pythag(f,1.0)\r\n\t\t\tif (f < 0.0)\r\n\t\t\t\tf= ((x-z)*(x+z)+h*(y/(f-g)-h))/x\r\n\t\t\telse\r\n\t\t\t\tf= ((x-z)*(x+z)+h*(y/(f+g)-h))/x\r\n\t\t\t// next QR transformation\r\n\t\t\tc= 1.0\r\n\t\t\ts= 1.0\r\n\t\t\tfor (i=l+1; i< k+1; i++)\r\n\t\t\t{\t\r\n\t\t\t\tg= e[i]\r\n\t\t\t\ty= q[i]\r\n\t\t\t\th= s*g\r\n\t\t\t\tg= c*g\r\n\t\t\t\tz= pythag(f,h)\r\n\t\t\t\te[i-1]= z\r\n\t\t\t\tc= f/z\r\n\t\t\t\ts= h/z\r\n\t\t\t\tf= x*c+g*s\r\n\t\t\t\tg= -x*s+g*c\r\n\t\t\t\th= y*s\r\n\t\t\t\ty= y*c\r\n\t\t\t\tfor (j=0; j < n; j++)\r\n\t\t\t\t{\t\r\n\t\t\t\t\tx= v[j][i-1]\r\n\t\t\t\t\tz= v[j][i]\r\n\t\t\t\t\tv[j][i-1] = x*c+z*s\r\n\t\t\t\t\tv[j][i] = -x*s+z*c\r\n\t\t\t\t}\r\n\t\t\t\tz= pythag(f,h)\r\n\t\t\t\tq[i-1]= z\r\n\t\t\t\tc= f/z\r\n\t\t\t\ts= h/z\r\n\t\t\t\tf= c*g+s*y\r\n\t\t\t\tx= -s*g+c*y\r\n\t\t\t\tfor (j=0; j < m; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\ty= u[j][i-1]\r\n\t\t\t\t\tz= u[j][i]\r\n\t\t\t\t\tu[j][i-1] = y*c+z*s\r\n\t\t\t\t\tu[j][i] = -y*s+z*c\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\te[l]= 0.0\r\n\t\t\te[k]= f\r\n\t\t\tq[k]= x\r\n\t\t} \r\n\t}\r\n\t\t\r\n\t//vt= transpose(v)\r\n\t//return (u,q,vt)\r\n\tfor (i=0;i<q.length; i++) \r\n\t  if (q[i] < prec) q[i] = 0\r\n\t  \r\n\t//sort eigenvalues\t\r\n\tfor (i=0; i< n; i++)\r\n\t{\t \r\n\t//writeln(q)\r\n\t for (j=i-1; j >= 0; j--)\r\n\t {\r\n\t  if (q[j] < q[i])\r\n\t  {\r\n\t//  writeln(i,'-',j)\r\n\t   c = q[j]\r\n\t   q[j] = q[i]\r\n\t   q[i] = c\r\n\t   for(k=0;k<u.length;k++) { temp = u[k][i]; u[k][i] = u[k][j]; u[k][j] = temp; }\r\n\t   for(k=0;k<v.length;k++) { temp = v[k][i]; v[k][i] = v[k][j]; v[k][j] = temp; }\r\n//\t   u.swapCols(i,j)\r\n//\t   v.swapCols(i,j)\r\n\t   i = j\t   \r\n\t  }\r\n\t }\t\r\n\t}\r\n\t\r\n\treturn {U:u,S:q,V:v}\r\n};\r\n\r\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-savitzky-golay/~/numeric/numeric-1.2.6.js\n ** module id = 85\n ** module chunks = 0\n **/","module.exports = require('./pca');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-pca/src/index.js\n ** module id = 86\n ** module chunks = 0\n **/","'use strict';\nvar Matrix = require('ml-matrix');\nvar Stat = require('ml-stat');\nvar SVD = Matrix.DC.SVD;\n\nmodule.exports = PCA;\n\n/**\n* Creates new PCA (Principal Component Analysis) from the dataset\n* @param {Matrix} dataset\n* @param {boolean} reload - for load purposes\n* @param {Object} model - for load purposes\n* @constructor\n* */\nfunction PCA(dataset, reload, model) {\n\n    if (reload) {\n        this.U = model.U;\n        this.S = model.S;\n        this.means = model.means;\n        this.std = model.std;\n    } else {\n        if (!Matrix.isMatrix(dataset)) {\n            dataset = new Matrix(dataset, true);\n        } else {\n            dataset = dataset.clone();\n        }\n\n        var normalization = featureNormalize(dataset);\n        var normalizedDataset = normalization.result;\n\n        var covarianceMatrix = normalizedDataset.transpose().mmul(normalizedDataset).divS(dataset.rows);\n\n        var target = new SVD(covarianceMatrix, {\n            computeLeftSingularVectors: true,\n            computeRightSingularVectors: true,\n            autoTranspose: false\n        });\n\n        this.U = target.leftSingularVectors;\n        this.S = target.diagonal;\n        this.means = normalization.means;\n        this.std = normalization.std;\n    }\n}\n\n/**\n* Load a PCA model from JSON\n* @oaram {Object} model\n* @return {PCA}\n* */\nPCA.load = function (model) {\n    if(model.modelName !== 'PCA')\n        throw new RangeError(\"The current model is invalid!\");\n\n    return new PCA(null, true, model);\n};\n\n/**\n* Exports the current model to an Object\n* @return {Object} model\n* */\nPCA.prototype.export = function () {\n    return {\n        modelName: \"PCA\",\n        U: this.U,\n        S: this.S,\n        means: this.means,\n        std: this.std\n    };\n};\n\n/**\n* Function that project the dataset into new space of k dimensions,\n* this method doesn't modify your dataset.\n* @param {Matrix} dataset.\n* @param {Number} k - dimensions to project.\n* @return {Matrix} dataset projected in k dimensions.\n* @throws {RangeError} if k is larger than the number of eigenvector\n*                      of the model.\n* */\nPCA.prototype.project = function (dataset, k) {\n    var dimensions = k - 1;\n    if(k > this.U.columns)\n        throw new RangeError(\"the number of dimensions must not be larger than \" + this.U.columns);\n\n    var X = featureNormalize(Matrix(dataset).clone()).result;\n    return X.mmul(this.U.subMatrix(0, this.U.rows - 1, 0, dimensions));\n};\n\n/**\n* This method returns the percentage variance of each eigenvector.\n* @return {Number} percentage variance of each eigenvector.\n* */\nPCA.prototype.getExplainedVariance = function () {\n    var sum = this.S.reduce(function (previous, value) {\n        return previous + value;\n    });\n    return this.S.map(function (value) {\n        return value / sum;\n    });\n};\n\n/**\n * Function that returns the Eigenvectors of the covariance matrix.\n * @returns {Matrix}\n */\nPCA.prototype.getEigenvectors = function () {\n    return this.U;\n};\n\n/**\n * Function that returns the Eigenvalues (on the diagonal).\n * @returns {*}\n */\nPCA.prototype.getEigenvalues = function () {\n    return this.S;\n};\n\n/**\n* This method returns a dataset normalized in the following form:\n* X = (X - mean) / std\n* @param dataset.\n* @return A dataset normalized.\n* */\nfunction featureNormalize(dataset) {\n    var means = Stat.matrix.mean(dataset);\n    var std = Matrix.rowVector(Stat.matrix.standardDeviation(dataset, means, true));\n    means = Matrix.rowVector(means);\n\n    var result = dataset.subRowVector(means);\n    return {\n        result: result.divRowVector(std),\n        means: means,\n        std: std\n    }\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-pca/src/pca.js\n ** module id = 87\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./matrix');\nmodule.exports.Decompositions = module.exports.DC = require('./decompositions');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-pca/~/ml-matrix/src/index.js\n ** module id = 88\n ** module chunks = 0\n **/","'use strict';\n\nvar Asplice = Array.prototype.splice,\n    Aconcat = Array.prototype.concat;\n\n// For performance : http://jsperf.com/clone-array-slice-vs-while-vs-for\nfunction slice(arr) {\n    var i = 0,\n        ii = arr.length,\n        result = new Array(ii);\n    for (; i < ii; i++) {\n        result[i] = arr[i];\n    }\n    return result;\n}\n\n/**\n * Real matrix.\n * @constructor\n * @param {number|Array} nRows - Number of rows of the new matrix or a 2D array containing the data.\n * @param {number|boolean} [nColumns] - Number of columns of the new matrix or a boolean specifying if the input array should be cloned\n */\nfunction Matrix(nRows, nColumns) {\n    var i = 0, rows, columns, matrix, newInstance;\n    if (Array.isArray(nRows)) {\n        newInstance = nColumns;\n        matrix = newInstance ? slice(nRows) : nRows;\n        nRows = matrix.length;\n        nColumns = matrix[0].length;\n        if (typeof nColumns === 'undefined') {\n            throw new TypeError('Data must be a 2D array');\n        }\n        if (nRows > 0 && nColumns > 0) {\n            for (; i < nRows; i++) {\n                if (matrix[i].length !== nColumns) {\n                    throw new RangeError('Inconsistent array dimensions');\n                } else if (newInstance) {\n                    matrix[i] = slice(matrix[i]);\n                }\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else if (typeof nRows === 'number') { // Create empty matrix\n        if (nRows > 0 && nColumns > 0) {\n            matrix = new Array(nRows);\n            for (; i < nRows; i++) {\n                matrix[i] = new Array(nColumns);\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else {\n        throw new TypeError('Invalid arguments');\n    }\n\n    Object.defineProperty(matrix, 'rows', {writable: true, value: nRows});\n    Object.defineProperty(matrix, 'columns', {writable: true, value: nColumns});\n\n    matrix.__proto__ = Matrix.prototype;\n\n    return matrix;\n}\n\n/**\n * Constructs a Matrix with the chosen dimensions from a 1D array.\n * @param {number} newRows - Number of rows\n * @param {number} newColumns - Number of columns\n * @param {Array} newData - A 1D array containing data for the matrix\n * @returns {Matrix} - The new matrix\n */\nMatrix.from1DArray = function from1DArray(newRows, newColumns, newData) {\n    var length, data, i = 0;\n\n    length = newRows * newColumns;\n    if (length !== newData.length)\n        throw new RangeError('Data length does not match given dimensions');\n\n    data = new Array(newRows);\n    for (; i < newRows; i++) {\n        data[i] = newData.slice(i * newColumns, (i + 1) * newColumns);\n    }\n    return new Matrix(data);\n};\n\n/**\n * Creates a row vector, a matrix with only one row.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.rowVector = function rowVector(newData) {\n    return new Matrix([newData]);\n};\n\n/**\n * Creates a column vector, a matrix with only one column.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.columnVector = function columnVector(newData) {\n    var l = newData.length, vector = new Array(l);\n    for (var i = 0; i < l; i++)\n        vector[i] = [newData[i]];\n    return new Matrix(vector);\n};\n\n/**\n * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.empty = function empty(rows, columns) {\n    return new Matrix(rows, columns);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to zero.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.zeros = function zeros(rows, columns) {\n    return Matrix.empty(rows, columns).fill(0);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to one.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.ones = function ones(rows, columns) {\n    return Matrix.empty(rows, columns).fill(1);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be randomly set using Math.random().\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} The new matrix\n */\nMatrix.rand = function rand(rows, columns) {\n    var matrix = Matrix.empty(rows, columns);\n    for (var i = 0, ii = matrix.rows; i < ii; i++) {\n        for (var j = 0, jj = matrix.columns; j < jj; j++) {\n            matrix[i][j] = Math.random();\n        }\n    }\n    return matrix;\n};\n\n/**\n * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and other will be 0.\n * @param {number} n - Number of rows and columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.eye = function eye(n) {\n    var matrix = Matrix.zeros(n, n), l = matrix.rows;\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = 1;\n    }\n    return matrix;\n};\n\n/**\n * Creates a diagonal matrix based on the given array.\n * @param {Array} data - Array containing the data for the diagonal\n * @returns {Matrix} - The new matrix\n */\nMatrix.diag = function diag(data) {\n    var l = data.length, matrix = Matrix.zeros(l, l);\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = data[i];\n    }\n    return matrix;\n};\n\n/**\n * Creates an array of indices between two values\n * @param {number} from\n * @param {number} to\n * @returns {Array}\n */\nMatrix.indices = function indices(from, to) {\n    var vector = new Array(to - from);\n    for (var i = 0; i < vector.length; i++)\n        vector[i] = from++;\n    return vector;\n};\n\n// TODO DOC\nMatrix.stack = function stack(arg1) {\n    var i, j, k;\n    if (Matrix.isMatrix(arg1)) {\n        var rows = 0,\n            cols = 0;\n        for (i = 0; i < arguments.length; i++) {\n            rows += arguments[i].rows;\n            if (arguments[i].columns > cols)\n                cols = arguments[i].columns;\n        }\n\n        var r = Matrix.zeros(rows, cols);\n        var c = 0;\n        for (i = 0; i < arguments.length; i++) {\n            var current = arguments[i];\n            for (j = 0; j < current.rows; j++) {\n                for (k = 0; k < current.columns; k++)\n                    r[c][k] = current[j][k];\n                c++;\n            }\n        }\n        return r;\n    }\n    else if (Array.isArray(arg1)) {\n        var matrix = Matrix.empty(arguments.length, arg1.length);\n        for (i = 0; i < arguments.length; i++)\n            matrix.setRow(i, arguments[i]);\n        return matrix;\n    }\n};\n\n// TODO DOC\nMatrix.expand = function expand(base, count) {\n    var expansion = [];\n    for (var i = 0; i < count.length; i++)\n        for (var j = 0; j < count[i]; j++)\n            expansion.push(base[i]);\n    return new Matrix(expansion);\n};\n\n/**\n * Check that the provided value is a Matrix and tries to instantiate one if not\n * @param value - The value to check\n * @returns {Matrix}\n * @throws {TypeError}\n */\nMatrix.checkMatrix = function checkMatrix(value) {\n    if (!value) {\n        throw new TypeError('Argument has to be a matrix');\n    }\n    if (value.klass !== 'Matrix') {\n        value = new Matrix(value);\n    }\n    return value;\n};\n\n/**\n * Returns true if the argument is a Matrix, false otherwise\n * @param value - The value to check\n * @returns {boolean}\n */\nMatrix.isMatrix = function isMatrix(value) {\n    return value ? value.klass === 'Matrix' : false;\n};\n\n/**\n * @property {string} - The name of this class.\n */\nObject.defineProperty(Matrix.prototype, 'klass', {\n    get: function klass() {\n        return 'Matrix';\n    }\n});\n\n/**\n * @property {number} - The number of elements in the matrix.\n */\nObject.defineProperty(Matrix.prototype, 'size', {\n    get: function size() {\n        return this.rows * this.columns;\n    }\n});\n\n/**\n * @private\n * Internal check that a row index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkRowIndex = function checkRowIndex(index) {\n    if (index < 0 || index > this.rows - 1)\n        throw new RangeError('Row index out of range.');\n};\n\n/**\n * @private\n * Internal check that a column index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkColumnIndex = function checkColumnIndex(index) {\n    if (index < 0 || index > this.columns - 1)\n        throw new RangeError('Column index out of range.');\n};\n\n/**\n * @private\n * Internal check that two matrices have the same dimensions\n * @param {Matrix} otherMatrix\n */\nMatrix.prototype.checkDimensions = function checkDimensions(otherMatrix) {\n    if ((this.rows !== otherMatrix.rows) || (this.columns !== otherMatrix.columns))\n        throw new RangeError('Matrices dimensions must be equal.');\n};\n\n/**\n * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n * @returns {Matrix} this\n */\nMatrix.prototype.apply = function apply(callback) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            callback.call(this, i, j);\n        }\n    }\n    return this;\n};\n\n/**\n * Creates an exact and independent copy of the matrix\n * @returns {Matrix}\n */\nMatrix.prototype.clone = function clone() {\n    return new Matrix(this.to2DArray());\n};\n\n/**\n * Returns a new 1D array filled row by row with the matrix values\n * @returns {Array}\n */\nMatrix.prototype.to1DArray = function to1DArray() {\n    return Aconcat.apply([], this);\n};\n\n/**\n * Returns a 2D array containing a copy of the data\n * @returns {Array}\n */\nMatrix.prototype.to2DArray = function to2DArray() {\n    var l = this.rows, copy = new Array(l);\n    for (var i = 0; i < l; i++) {\n        copy[i] = slice(this[i]);\n    }\n    return copy;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row\n */\nMatrix.prototype.isRowVector = function isRowVector() {\n    return this.rows === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one column\n */\nMatrix.prototype.isColumnVector = function isColumnVector() {\n    return this.columns === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row or one column\n */\nMatrix.prototype.isVector = function isVector() {\n    return (this.rows === 1) || (this.columns === 1);\n};\n\n/**\n * @returns {boolean} true if the matrix has the same number of rows and columns\n */\nMatrix.prototype.isSquare = function isSquare() {\n    return this.rows === this.columns;\n};\n\n/**\n * @returns {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n */\nMatrix.prototype.isSymmetric = function isSymmetric() {\n    if (this.isSquare()) {\n        var l = this.rows;\n        for (var i = 0; i < l; i++) {\n            for (var j = 0; j <= i; j++) {\n                if (this[i][j] !== this[j][i]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    return false;\n};\n\n/**\n * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @param {number} value - The new value for the element\n * @returns {Matrix} this\n */\nMatrix.prototype.set = function set(rowIndex, columnIndex, value) {\n    this[rowIndex][columnIndex] = value;\n    return this;\n};\n\n/**\n * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @returns {number}\n */\nMatrix.prototype.get = function get(rowIndex, columnIndex) {\n    return this[rowIndex][columnIndex];\n};\n\n/**\n * Fills the matrix with a given value. All elements will be set to this value.\n * @param {number} value - New value\n * @returns {Matrix} this\n */\nMatrix.prototype.fill = function fill(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = value;\n        }\n    }\n    return this;\n};\n\n/**\n * Negates the matrix. All elements will be multiplied by (-1)\n * @returns {Matrix} this\n */\nMatrix.prototype.neg = function neg() {\n    return this.mulS(-1);\n};\n\n/**\n * Adds a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number')\n        return this.addS(value);\n    value = Matrix.checkMatrix(value);\n        return this.addM(value);\n};\n\n/**\n * Adds a scalar to each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.addS = function addS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += value;\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the value of each element of matrix to the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.addM = function addM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number')\n        return this.subS(value);\n    value = Matrix.checkMatrix(value);\n        return this.subM(value);\n};\n\n/**\n * Subtracts a scalar from each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.subS = function subS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the value of each element of matrix from the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.subM = function subM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number')\n        return this.mulS(value);\n    value = Matrix.checkMatrix(value);\n        return this.mulM(value);\n};\n\n/**\n * Multiplies a scalar with each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulS = function mulS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the value of each element of matrix with the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.mulM = function mulM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides by a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number')\n        return this.divS(value);\n    value = Matrix.checkMatrix(value);\n        return this.divM(value);\n};\n\n/**\n * Divides each element of the matrix by a scalar\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.divS = function divS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Divides each element of this by the corresponding element of matrix\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.divM = function divM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Returns a new array from the given row index\n * @param {number} index - Row index\n * @returns {Array}\n */\nMatrix.prototype.getRow = function getRow(index) {\n    this.checkRowIndex(index);\n    return slice(this[index]);\n};\n\n/**\n * Returns a new row vector from the given row index\n * @param {number} index - Row index\n * @returns {Matrix}\n */\nMatrix.prototype.getRowVector = function getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n};\n\n/**\n * Sets a row at the given index\n * @param {number} index - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setRow = function setRow(index, array) {\n    this.checkRowIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    this[index] = slice(array);\n    return this;\n};\n\n/**\n * Removes a row from the given index\n * @param {number} index - Row index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeRow = function removeRow(index) {\n    this.checkRowIndex(index);\n    if (this.rows === 1)\n        throw new RangeError('A matrix cannot have less than one row');\n    Asplice.call(this, index, 1);\n    this.rows -= 1;\n    return this;\n};\n\n/**\n * Adds a row at the given index\n * @param {number} [index = this.rows] - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRow = function addRow(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.rows;\n    }\n    if (index < 0 || index > this.rows)\n        throw new RangeError('Row index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    Asplice.call(this, index, 0, slice(array));\n    this.rows += 1;\n    return this;\n};\n\n/**\n * Swaps two rows\n * @param {number} row1 - First row index\n * @param {number} row2 - Second row index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapRows = function swapRows(row1, row2) {\n    this.checkRowIndex(row1);\n    this.checkRowIndex(row2);\n    var temp = this[row1];\n    this[row1] = this[row2];\n    this[row2] = temp;\n    return this;\n};\n\n/**\n * Returns a new array from the given column index\n * @param {number} index - Column index\n * @returns {Array}\n */\nMatrix.prototype.getColumn = function getColumn(index) {\n    this.checkColumnIndex(index);\n    var l = this.rows, column = new Array(l);\n    for (var i = 0; i < l; i++) {\n        column[i] = this[i][index];\n    }\n    return column;\n};\n\n/**\n * Returns a new column vector from the given column index\n * @param {number} index - Column index\n * @returns {Matrix}\n */\nMatrix.prototype.getColumnVector = function getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n};\n\n/**\n * Sets a column at the given index\n * @param {number} index - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setColumn = function setColumn(index, array) {\n    this.checkColumnIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i][index] = array[i];\n    }\n    return this;\n};\n\n/**\n * Removes a column from the given index\n * @param {number} index - Column index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeColumn = function removeColumn(index) {\n    this.checkColumnIndex(index);\n    if (this.columns === 1)\n        throw new RangeError('A matrix cannot have less than one column');\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].splice(index, 1);\n    }\n    this.columns -= 1;\n    return this;\n};\n\n/**\n * Adds a column at the given index\n * @param {number} [index = this.columns] - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumn = function addColumn(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.columns;\n    }\n    if (index < 0 || index > this.columns)\n        throw new RangeError('Column index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i].splice(index, 0, array[i]);\n    }\n    this.columns += 1;\n    return this;\n};\n\n/**\n * Swaps two columns\n * @param {number} column1 - First column index\n * @param {number} column2 - Second column index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapColumns = function swapColumns(column1, column2) {\n    this.checkRowIndex(column1);\n    this.checkRowIndex(column2);\n    var l = this.rows, temp, row;\n    for (var i = 0; i < l; i++) {\n        row = this[i];\n        temp = row[column1];\n        row[column1] = row[column2];\n        row[column2] = temp;\n    }\n    return this;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkRowVector = function checkRowVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.columns)\n        throw new RangeError('vector size must be the same as the number of columns');\n    return vector;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkColumnVector = function checkColumnVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.rows)\n        throw new RangeError('vector size must be the same as the number of rows');\n    return vector;\n};\n\n/**\n * Adds the values of a vector to each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRowVector = function addRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subRowVector = function subRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRowVector = function mulRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each row by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divRowVector = function divRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the values of a vector to each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumnVector = function addColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subColumnVector = function subColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumnVector = function mulColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each column by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divColumnVector = function divColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a row with a scalar\n * @param {number} index - Row index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRow = function mulRow(index, value) {\n    this.checkRowIndex(index);\n    var i = 0, l = this.columns;\n    for (; i < l; i++) {\n        this[index][i] *= value;\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a column with a scalar\n * @param {number} index - Column index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumn = function mulColumn(index, value) {\n    this.checkColumnIndex(index);\n    var i = 0, l = this.rows;\n    for (; i < l; i++) {\n        this[i][index] *= value;\n    }\n};\n\n/**\n * A matrix index\n * @typedef {Object} MatrixIndex\n * @property {number} row\n * @property {number} column\n */\n\n/**\n * Returns the maximum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.max = function max() {\n    var v = -Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxIndex = function maxIndex() {\n    var v = -Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.min = function min() {\n    var v = Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minIndex = function minIndex() {\n    var v = Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.maxRow = function maxRow(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxRowIndex = function maxRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    var idx = {\n            row: index\n        };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.minRow = function minRow(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minRowIndex = function minRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: index,\n        column: 0\n    };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.maxColumn = function maxColumn(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxColumnIndex = function maxColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.minColumn = function minColumn(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minColumnIndex = function minColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns an array containing the diagonal values of the matrix\n * @returns {Array}\n */\nMatrix.prototype.diag = function diag() {\n    if (!this.isSquare())\n        throw new TypeError('Only square matrices have a diagonal.');\n    var diag = new Array(this.rows);\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        diag[i] = this[i][i];\n    }\n    return diag;\n};\n\n/**\n * Returns the sum of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.sum = function sum() {\n    var v = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            v += this[i][j];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the mean of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.mean = function mean() {\n    return this.sum() / this.size;\n};\n\n/**\n * Returns the product of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.prod = function prod() {\n    var prod = 1;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            prod *= this[i][j];\n        }\n    }\n    return prod;\n};\n\n/**\n * Computes the cumulative sum of the matrix elements (in place, row by row)\n * @returns {Matrix} this\n */\nMatrix.prototype.cumulativeSum = function cumulativeSum() {\n    var sum = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            sum += this[i][j];\n            this[i][j] = sum;\n        }\n    }\n    return this;\n};\n\n/**\n * Computes the dot (scalar) product between the matrix and another\n * @param {Matrix} other vector\n * @returns {number}\n */\nMatrix.prototype.dot = function dot(other) {\n    if (this.size !== other.size)\n        throw new RangeError('vectors do not have the same size');\n    var vector1 = this.to1DArray();\n    var vector2 = other.to1DArray();\n    var dot = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        dot += vector1[i] * vector2[i];\n    }\n    return dot;\n};\n\n/**\n * Returns the matrix product between this and other\n * @returns {Matrix}\n */\nMatrix.prototype.mmul = function mmul(other) {\n    if (!Matrix.isMatrix(other))\n        throw new TypeError('parameter \"other\" must be a matrix');\n    if (this.columns !== other.rows)\n        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n\n    var m = this.rows, n = this.columns, p = other.columns;\n    var result = new Matrix(m, p);\n\n    var Bcolj = new Array(n);\n    var i, j, k;\n    for (j = 0; j < p; j++) {\n        for (k = 0; k < n; k++)\n            Bcolj[k] = other[k][j];\n\n        for (i = 0; i < m; i++) {\n            var Arowi = this[i];\n\n            var s = 0;\n            for (k = 0; k < n; k++)\n                s += Arowi[k] * Bcolj[k];\n\n            result[i][j] = s;\n        }\n    }\n    return result;\n};\n\n/**\n * Sorts the rows (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortRows = function sortRows(compareFunction) {\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].sort(compareFunction);\n    }\n    return this;\n};\n\n/**\n * Sorts the columns (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortColumns = function sortColumns(compareFunction) {\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n};\n\n/**\n * Transposes the matrix and returns a new one containing the result\n * @returns {Matrix}\n */\nMatrix.prototype.transpose = function transpose() {\n    var result = new Matrix(this.columns, this.rows);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[j][i] = this[i][j];\n        }\n    }\n    return result;\n};\n\n/**\n * Returns a subset of the matrix\n * @param {number} startRow - First row index\n * @param {number} endRow - Last row index\n * @param {number} startColumn - First column index\n * @param {number} endColumn - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrix = function subMatrix(startRow, endRow, startColumn, endColumn) {\n    if ((startRow > endRow) || (startColumn > endColumn) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range');\n    var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n    for (var i = startRow; i <= endRow; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            newMatrix[i - startRow][j - startColumn] = this[i][j];\n        }\n    }\n    return newMatrix;\n};\n\n/**\n * Returns a subset of the matrix based on an array of row indices\n * @param {Array} indices - Array containing the row indices\n * @param {number} [startColumn = 0] - First column index\n * @param {number} [endColumn = this.columns-1] - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixRow = function subMatrixRow(indices, startColumn, endColumn) {\n    if (typeof startColumn === 'undefined') {\n        startColumn = 0;\n        endColumn = this.columns - 1;\n    } else if (typeof endColumn === 'undefined') {\n        endColumn = this.columns - 1;\n    }\n    if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, rows = this.rows,\n        X = new Matrix(l, endColumn - startColumn + 1);\n    for (var i = 0; i < l; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            if ((indices[i] < 0) || (indices[i] >= rows))\n                throw new RangeError('Argument out of range.');\n            X[i][j - startColumn] = this[indices[i]][j];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns a subset of the matrix based on an array of column indices\n * @param {Array} indices - Array containing the column indices\n * @param {number} [startRow = 0] - First row index\n * @param {number} [endRow = this.rows-1] - Last row index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixColumn = function subMatrixColumn(indices, startRow, endRow) {\n    if (typeof startRow === 'undefined') {\n        startRow = 0;\n        endRow = this.rows - 1;\n    } else if (typeof endRow === 'undefined') {\n        endRow = this.rows - 1;\n    }\n    if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, columns = this.columns,\n        X = new Matrix(endRow - startRow + 1, l);\n    for (var i = 0; i < l; i++) {\n        for (var j = startRow; j <= endRow; j++) {\n            if ((indices[i] < 0) || (indices[i] >= columns))\n                throw new RangeError('Argument out of range.');\n            X[j - startRow][i] = this[j][indices[i]];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns the trace of the matrix (sum of the diagonal elements)\n * @returns {number}\n */\nMatrix.prototype.trace = function trace() {\n    if (!this.isSquare())\n        throw new TypeError('The matrix is not square');\n    var trace = 0, i = 0, l = this.rows;\n    for (; i < l; i++) {\n        trace += this[i][i];\n    }\n    return trace;\n};\n\n/**\n * Sets each element of the matrix to its absolute value\n * @returns {Matrix} this\n */\nMatrix.prototype.abs = function abs() {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = Math.abs(this[i][j]);\n        }\n    }\n};\n\nmodule.exports = Matrix;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-pca/~/ml-matrix/src/matrix.js\n ** module id = 89\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('./matrix');\n\nvar SingularValueDecomposition = require('./dc/svd');\nvar EigenvalueDecomposition = require('./dc/evd');\nvar LuDecomposition = require('./dc/lu');\nvar QrDecomposition = require('./dc/qr');\nvar CholeskyDecomposition = require('./dc/cholesky');\n\nfunction inverse(matrix) {\n    return solve(matrix, Matrix.eye(matrix.rows));\n}\n\nMatrix.prototype.inverse = function () {\n    return inverse(this);\n};\n\nfunction solve(leftHandSide, rightHandSide) {\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n}\n\nMatrix.prototype.solve = function (other) {\n    return solve(this, other);\n};\n\nmodule.exports = {\n    SingularValueDecomposition: SingularValueDecomposition,\n    SVD: SingularValueDecomposition,\n    EigenvalueDecomposition: EigenvalueDecomposition,\n    EVD: EigenvalueDecomposition,\n    LuDecomposition: LuDecomposition,\n    LU: LuDecomposition,\n    QrDecomposition: QrDecomposition,\n    QR: QrDecomposition,\n    CholeskyDecomposition: CholeskyDecomposition,\n    CHO: CholeskyDecomposition,\n    inverse: inverse,\n    solve: solve\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-pca/~/ml-matrix/src/decompositions.js\n ** module id = 90\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\nfunction SingularValueDecomposition(value, options) {\n    if (!(this instanceof SingularValueDecomposition)) {\n        return new SingularValueDecomposition(value, options);\n    }\n    value = Matrix.checkMatrix(value);\n\n    options = options || {};\n\n    var a = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        nu = Math.min(m, n);\n\n    var wantu = true, wantv = true;\n    if (options.computeLeftSingularVectors === false)\n        wantu = false;\n    if (options.computeRightSingularVectors === false)\n        wantv = false;\n    var autoTranspose = options.autoTranspose === true;\n\n    var swapped = false;\n    if (m < n) {\n        if (!autoTranspose) {\n            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n        } else {\n            a = a.transpose();\n            m = a.rows;\n            n = a.columns;\n            swapped = true;\n            var aux = wantu;\n            wantu = wantv;\n            wantv = aux;\n        }\n    }\n\n    var s = new Array(Math.min(m + 1, n)),\n        U = Matrix.zeros(m, nu),\n        V = Matrix.zeros(n, n),\n        e = new Array(n),\n        work = new Array(m);\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n\n    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\n    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n        if (k < nct) {\n            s[k] = 0;\n            for (i = k; i < m; i++) {\n                s[k] = hypotenuse(s[k], a[i][k]);\n            }\n            if (s[k] !== 0) {\n                if (a[k][k] < 0) {\n                    s[k] = -s[k];\n                }\n                for (i = k; i < m; i++) {\n                    a[i][k] /= s[k];\n                }\n                a[k][k] += 1;\n            }\n            s[k] = -s[k];\n        }\n\n        for (j = k + 1; j < n; j++) {\n            if ((k < nct) && (s[k] !== 0)) {\n                t = 0;\n                for (i = k; i < m; i++) {\n                    t += a[i][k] * a[i][j];\n                }\n                t = -t / a[k][k];\n                for (i = k; i < m; i++) {\n                    a[i][j] += t * a[i][k];\n                }\n            }\n            e[j] = a[k][j];\n        }\n\n        if (wantu && (k < nct)) {\n            for (i = k; i < m; i++) {\n                U[i][k] = a[i][k];\n            }\n        }\n\n        if (k < nrt) {\n            e[k] = 0;\n            for (i = k + 1; i < n; i++) {\n                e[k] = hypotenuse(e[k], e[i]);\n            }\n            if (e[k] !== 0) {\n                if (e[k + 1] < 0)\n                    e[k] = -e[k];\n                for (i = k + 1; i < n; i++) {\n                    e[i] /= e[k];\n                }\n                e[k + 1] += 1;\n            }\n            e[k] = -e[k];\n            if ((k + 1 < m) && (e[k] !== 0)) {\n                for (i = k + 1; i < m; i++) {\n                    work[i] = 0;\n                }\n                for (j = k + 1; j < n; j++) {\n                    for (i = k + 1; i < m; i++) {\n                        work[i] += e[j] * a[i][j];\n                    }\n                }\n                for (j = k + 1; j < n; j++) {\n                    t = -e[j] / e[k + 1];\n                    for (i = k + 1; i < m; i++) {\n                        a[i][j] += t * work[i];\n                    }\n                }\n            }\n            if (wantv) {\n                for (i = k + 1; i < n; i++) {\n                    V[i][k] = e[i];\n                }\n            }\n        }\n    }\n\n    p = Math.min(n, m + 1);\n    if (nct < n) {\n        s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n        s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n        e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n        for (j = nct; j < nu; j++) {\n            for (i = 0; i < m; i++) {\n                U[i][j] = 0;\n            }\n            U[j][j] = 1;\n        }\n        for (k = nct - 1; k >= 0; k--) {\n            if (s[k] !== 0) {\n                for (j = k + 1; j < nu; j++) {\n                    t = 0;\n                    for (i = k; i < m; i++) {\n                        t += U[i][k] * U[i][j];\n                    }\n                    t = -t / U[k][k];\n                    for (i = k; i < m; i++) {\n                        U[i][j] += t * U[i][k];\n                    }\n                }\n                for (i = k; i < m; i++) {\n                    U[i][k] = -U[i][k];\n                }\n                U[k][k] = 1 + U[k][k];\n                for (i = 0; i < k - 1; i++) {\n                    U[i][k] = 0;\n                }\n            } else {\n                for (i = 0; i < m; i++) {\n                    U[i][k] = 0;\n                }\n                U[k][k] = 1;\n            }\n        }\n    }\n\n    if (wantv) {\n        for (k = n - 1; k >= 0; k--) {\n            if ((k < nrt) && (e[k] !== 0)) {\n                for (j = k + 1; j < n; j++) {\n                    t = 0;\n                    for (i = k + 1; i < n; i++) {\n                        t += V[i][k] * V[i][j];\n                    }\n                    t = -t / V[k + 1][k];\n                    for (i = k + 1; i < n; i++) {\n                        V[i][j] += t * V[i][k];\n                    }\n                }\n            }\n            for (i = 0; i < n; i++) {\n                V[i][k] = 0;\n            }\n            V[k][k] = 1;\n        }\n    }\n\n    var pp = p - 1,\n        iter = 0,\n        eps = Math.pow(2, -52);\n    while (p > 0) {\n        for (k = p - 2; k >= -1; k--) {\n            if (k === -1) {\n                break;\n            }\n            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n                e[k] = 0;\n                break;\n            }\n        }\n        if (k === p - 2) {\n            kase = 4;\n        } else {\n            for (ks = p - 1; ks >= k; ks--) {\n                if (ks === k) {\n                    break;\n                }\n                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n                if (Math.abs(s[ks]) <= eps * t) {\n                    s[ks] = 0;\n                    break;\n                }\n            }\n            if (ks === k) {\n                kase = 3;\n            } else if (ks === p - 1) {\n                kase = 1;\n            } else {\n                kase = 2;\n                k = ks;\n            }\n        }\n\n        k++;\n\n        switch (kase) {\n            case 1: {\n                f = e[p - 2];\n                e[p - 2] = 0;\n                for (j = p - 2; j >= k; j--) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    if (j !== k) {\n                        f = -sn * e[j - 1];\n                        e[j - 1] = cs * e[j - 1];\n                    }\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][p - 1];\n                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                            V[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 2 : {\n                f = e[k - 1];\n                e[k - 1] = 0;\n                for (j = k; j < p; j++) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    f = -sn * e[j];\n                    e[j] = cs * e[j];\n                    if (wantu) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][k - 1];\n                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 3 : {\n                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n                sp = s[p - 1] / scale;\n                spm1 = s[p - 2] / scale;\n                epm1 = e[p - 2] / scale;\n                sk = s[k] / scale;\n                ek = e[k] / scale;\n                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n                c = (sp * epm1) * (sp * epm1);\n                shift = 0;\n                if ((b !== 0) || (c !== 0)) {\n                    shift = Math.sqrt(b * b + c);\n                    if (b < 0) {\n                        shift = -shift;\n                    }\n                    shift = c / (b + shift);\n                }\n                f = (sk + sp) * (sk - sp) + shift;\n                g = sk * ek;\n                for (j = k; j < p - 1; j++) {\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    if (j !== k) {\n                        e[j - 1] = t;\n                    }\n                    f = cs * s[j] + sn * e[j];\n                    e[j] = cs * e[j] - sn * s[j];\n                    g = sn * s[j + 1];\n                    s[j + 1] = cs * s[j + 1];\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][j + 1];\n                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                            V[i][j] = t;\n                        }\n                    }\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    s[j] = t;\n                    f = cs * e[j] + sn * s[j + 1];\n                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n                    g = sn * e[j + 1];\n                    e[j + 1] = cs * e[j + 1];\n                    if (wantu && (j < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][j + 1];\n                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                e[p - 2] = f;\n                iter = iter + 1;\n                break;\n            }\n            case 4: {\n                if (s[k] <= 0) {\n                    s[k] = (s[k] < 0 ? -s[k] : 0);\n                    if (wantv) {\n                        for (i = 0; i <= pp; i++) {\n                            V[i][k] = -V[i][k];\n                        }\n                    }\n                }\n                while (k < pp) {\n                    if (s[k] >= s[k + 1]) {\n                        break;\n                    }\n                    t = s[k];\n                    s[k] = s[k + 1];\n                    s[k + 1] = t;\n                    if (wantv && (k < n - 1)) {\n                        for (i = 0; i < n; i++) {\n                            t = V[i][k + 1];\n                            V[i][k + 1] = V[i][k];\n                            V[i][k] = t;\n                        }\n                    }\n                    if (wantu && (k < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = U[i][k + 1];\n                            U[i][k + 1] = U[i][k];\n                            U[i][k] = t;\n                        }\n                    }\n                    k++;\n                }\n                iter = 0;\n                p--;\n                break;\n            }\n        }\n    }\n\n    if (swapped) {\n        var tmp = V;\n        V = U;\n        U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n}\n\nSingularValueDecomposition.prototype = {\n    get condition() {\n        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    get norm2() {\n        return this.s[0];\n    },\n    get rank() {\n        var eps = Math.pow(2, -52),\n            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n            r = 0,\n            s = this.s;\n        for (var i = 0, ii = s.length; i < ii; i++) {\n            if (s[i] > tol) {\n                r++;\n            }\n        }\n        return r;\n    },\n    get diagonal() {\n        return this.s;\n    },\n    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n    get threshold() {\n        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n    },\n    get leftSingularVectors() {\n        return this.U;\n    },\n    get rightSingularVectors() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        return Matrix.diag(this.s);\n    },\n    solve: function (value) {\n\n        var Y = value,\n            e = this.threshold,\n            scols = this.s.length,\n            Ls = Matrix.zeros(scols, scols),\n            i;\n\n        for (i = 0; i < scols; i++) {\n            if (Math.abs(this.s[i]) <= e) {\n                Ls[i][i] = 0;\n            } else {\n                Ls[i][i] = 1 / this.s[i];\n            }\n        }\n\n\n        var VL = this.V.mmul(Ls),\n            vrows = this.V.rows,\n            urows = this.U.rows,\n            VLU = Matrix.zeros(vrows, urows),\n            j, k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < scols; k++) {\n                    sum += VL[i][k] * this.U[j][k];\n                }\n                VLU[i][j] = sum;\n            }\n        }\n\n        return VLU.mmul(Y);\n    },\n    solveForDiagonal: function (value) {\n        return this.solve(Matrix.diag(value));\n    },\n    inverse: function () {\n        var e = this.threshold,\n            vrows = this.V.rows,\n            vcols = this.V.columns,\n            X = new Matrix(vrows, this.s.length),\n            i, j;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < vcols; j++) {\n                if (Math.abs(this.s[j]) > e) {\n                    X[i][j] = this.V[i][j] / this.s[j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n\n        var urows = this.U.rows,\n            ucols = this.U.columns,\n            Y = new Matrix(vrows, urows),\n            k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < ucols; k++) {\n                    sum += X[i][k] * this.U[j][k];\n                }\n                Y[i][j] = sum;\n            }\n        }\n\n        return Y;\n    }\n};\n\nmodule.exports = SingularValueDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-pca/~/ml-matrix/src/dc/svd.js\n ** module id = 91\n ** module chunks = 0\n **/","'use strict';\n\nexports.hypotenuse = function hypotenuse(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n        r = b / a;\n        return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n        r = a / b;\n        return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-pca/~/ml-matrix/src/dc/util.js\n ** module id = 92\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\nfunction EigenvalueDecomposition(matrix) {\n    if (!(this instanceof EigenvalueDecomposition)) {\n        return new EigenvalueDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n        throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns,\n        V = Matrix.zeros(n, n),\n        d = new Array(n),\n        e = new Array(n),\n        value = matrix,\n        i, j;\n\n    if (matrix.isSymmetric()) {\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                V[i][j] = value[i][j];\n            }\n        }\n        tred2(n, e, d, V);\n        tql2(n, e, d, V);\n    }\n    else {\n        var H = Matrix.zeros(n, n),\n            ort = new Array(n);\n        for (j = 0; j < n; j++) {\n            for (i = 0; i < n; i++) {\n                H[i][j] = value[i][j];\n            }\n        }\n        orthes(n, H, ort, V);\n        hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n}\n\nEigenvalueDecomposition.prototype = {\n    get realEigenvalues() {\n        return this.d;\n    },\n    get imaginaryEigenvalues() {\n        return this.e;\n    },\n    get eigenvectorMatrix() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        var n = this.n,\n            e = this.e,\n            d = this.d,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                X[i][j] = 0;\n            }\n            X[i][i] = d[i];\n            if (e[i] > 0) {\n                X[i][i + 1] = e[i];\n            }\n            else if (e[i] < 0) {\n                X[i][i - 1] = e[i];\n            }\n        }\n        return X;\n    }\n};\n\nfunction tred2(n, e, d, V) {\n\n    var f, g, h, i, j, k,\n        hh, scale;\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n    }\n\n    for (i = n - 1; i > 0; i--) {\n        scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n            scale = scale + Math.abs(d[k]);\n        }\n\n        if (scale === 0) {\n            e[i] = d[i - 1];\n            for (j = 0; j < i; j++) {\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n                V[j][i] = 0;\n            }\n        } else {\n            for (k = 0; k < i; k++) {\n                d[k] /= scale;\n                h += d[k] * d[k];\n            }\n\n            f = d[i - 1];\n            g = Math.sqrt(h);\n            if (f > 0) {\n                g = -g;\n            }\n\n            e[i] = scale * g;\n            h = h - f * g;\n            d[i - 1] = f - g;\n            for (j = 0; j < i; j++) {\n                e[j] = 0;\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                V[j][i] = f;\n                g = e[j] + V[j][j] * f;\n                for (k = j + 1; k <= i - 1; k++) {\n                    g += V[k][j] * d[k];\n                    e[k] += V[k][j] * f;\n                }\n                e[j] = g;\n            }\n\n            f = 0;\n            for (j = 0; j < i; j++) {\n                e[j] /= h;\n                f += e[j] * d[j];\n            }\n\n            hh = f / (h + h);\n            for (j = 0; j < i; j++) {\n                e[j] -= hh * d[j];\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                g = e[j];\n                for (k = j; k <= i - 1; k++) {\n                    V[k][j] -= (f * e[k] + g * d[k]);\n                }\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n            }\n        }\n        d[i] = h;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        V[n - 1][i] = V[i][i];\n        V[i][i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n            for (k = 0; k <= i; k++) {\n                d[k] = V[k][i + 1] / h;\n            }\n\n            for (j = 0; j <= i; j++) {\n                g = 0;\n                for (k = 0; k <= i; k++) {\n                    g += V[k][i + 1] * V[k][j];\n                }\n                for (k = 0; k <= i; k++) {\n                    V[k][j] -= g * d[k];\n                }\n            }\n        }\n\n        for (k = 0; k <= i; k++) {\n            V[k][i + 1] = 0;\n        }\n    }\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n        V[n - 1][j] = 0;\n    }\n\n    V[n - 1][n - 1] = 1;\n    e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n\n    var g, h, i, j, k, l, m, p, r,\n        dl1, c, c2, c3, el1, s, s2,\n        iter;\n\n    for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n    }\n\n    e[n - 1] = 0;\n\n    var f = 0,\n        tst1 = 0,\n        eps = Math.pow(2, -52);\n\n    for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        m = l;\n        while (m < n) {\n            if (Math.abs(e[m]) <= eps * tst1) {\n                break;\n            }\n            m++;\n        }\n\n        if (m > l) {\n            iter = 0;\n            do {\n                iter = iter + 1;\n\n                g = d[l];\n                p = (d[l + 1] - g) / (2 * e[l]);\n                r = hypotenuse(p, 1);\n                if (p < 0) {\n                    r = -r;\n                }\n\n                d[l] = e[l] / (p + r);\n                d[l + 1] = e[l] * (p + r);\n                dl1 = d[l + 1];\n                h = g - d[l];\n                for (i = l + 2; i < n; i++) {\n                    d[i] -= h;\n                }\n\n                f = f + h;\n\n                p = d[m];\n                c = 1;\n                c2 = c;\n                c3 = c;\n                el1 = e[l + 1];\n                s = 0;\n                s2 = 0;\n                for (i = m - 1; i >= l; i--) {\n                    c3 = c2;\n                    c2 = c;\n                    s2 = s;\n                    g = c * e[i];\n                    h = c * p;\n                    r = hypotenuse(p, e[i]);\n                    e[i + 1] = s * r;\n                    s = e[i] / r;\n                    c = p / r;\n                    p = c * d[i] - s * g;\n                    d[i + 1] = h + s * (c * g + s * d[i]);\n\n                    for (k = 0; k < n; k++) {\n                        h = V[k][i + 1];\n                        V[k][i + 1] = s * V[k][i] + c * h;\n                        V[k][i] = c * V[k][i] - s * h;\n                    }\n                }\n\n                p = -s * s2 * c3 * el1 * e[l] / dl1;\n                e[l] = s * p;\n                d[l] = c * p;\n\n            }\n            while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n            if (d[j] < p) {\n                k = j;\n                p = d[j];\n            }\n        }\n\n        if (k !== i) {\n            d[k] = d[i];\n            d[i] = p;\n            for (j = 0; j < n; j++) {\n                p = V[j][i];\n                V[j][i] = V[j][k];\n                V[j][k] = p;\n            }\n        }\n    }\n}\n\nfunction orthes(n, H, ort, V) {\n\n    var low = 0,\n        high = n - 1,\n        f, g, h, i, j, m,\n        scale;\n\n    for (m = low + 1; m <= high - 1; m++) {\n        scale = 0;\n        for (i = m; i <= high; i++) {\n            scale = scale + Math.abs(H[i][m - 1]);\n        }\n\n        if (scale !== 0) {\n            h = 0;\n            for (i = high; i >= m; i--) {\n                ort[i] = H[i][m - 1] / scale;\n                h += ort[i] * ort[i];\n            }\n\n            g = Math.sqrt(h);\n            if (ort[m] > 0) {\n                g = -g;\n            }\n\n            h = h - ort[m] * g;\n            ort[m] = ort[m] - g;\n\n            for (j = m; j < n; j++) {\n                f = 0;\n                for (i = high; i >= m; i--) {\n                    f += ort[i] * H[i][j];\n                }\n\n                f = f / h;\n                for (i = m; i <= high; i++) {\n                    H[i][j] -= f * ort[i];\n                }\n            }\n\n            for (i = 0; i <= high; i++) {\n                f = 0;\n                for (j = high; j >= m; j--) {\n                    f += ort[j] * H[i][j];\n                }\n\n                f = f / h;\n                for (j = m; j <= high; j++) {\n                    H[i][j] -= f * ort[j];\n                }\n            }\n\n            ort[m] = scale * ort[m];\n            H[m][m - 1] = scale * g;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            V[i][j] = (i === j ? 1 : 0);\n        }\n    }\n\n    for (m = high - 1; m >= low + 1; m--) {\n        if (H[m][m - 1] !== 0) {\n            for (i = m + 1; i <= high; i++) {\n                ort[i] = H[i][m - 1];\n            }\n\n            for (j = m; j <= high; j++) {\n                g = 0;\n                for (i = m; i <= high; i++) {\n                    g += ort[i] * V[i][j];\n                }\n\n                g = (g / ort[m]) / H[m][m - 1];\n                for (i = m; i <= high; i++) {\n                    V[i][j] += g * ort[i];\n                }\n            }\n        }\n    }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n    var n = nn - 1,\n        low = 0,\n        high = nn - 1,\n        eps = Math.pow(2, -52),\n        exshift = 0,\n        norm = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n        s = 0,\n        z = 0,\n        iter = 0,\n        i, j, k, l, m, t, w, x, y,\n        ra, sa, vr, vi,\n        notlast, cdivres;\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            d[i] = H[i][i];\n            e[i] = 0;\n        }\n\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n            norm = norm + Math.abs(H[i][j]);\n        }\n    }\n\n    while (n >= low) {\n        l = n;\n        while (l > low) {\n            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n            if (s === 0) {\n                s = norm;\n            }\n            if (Math.abs(H[l][l - 1]) < eps * s) {\n                break;\n            }\n            l--;\n        }\n\n        if (l === n) {\n            H[n][n] = H[n][n] + exshift;\n            d[n] = H[n][n];\n            e[n] = 0;\n            n--;\n            iter = 0;\n        } else if (l === n - 1) {\n            w = H[n][n - 1] * H[n - 1][n];\n            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n            q = p * p + w;\n            z = Math.sqrt(Math.abs(q));\n            H[n][n] = H[n][n] + exshift;\n            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n            x = H[n][n];\n\n            if (q >= 0) {\n                z = (p >= 0) ? (p + z) : (p - z);\n                d[n - 1] = x + z;\n                d[n] = d[n - 1];\n                if (z !== 0) {\n                    d[n] = x - w / z;\n                }\n                e[n - 1] = 0;\n                e[n] = 0;\n                x = H[n][n - 1];\n                s = Math.abs(x) + Math.abs(z);\n                p = x / s;\n                q = z / s;\n                r = Math.sqrt(p * p + q * q);\n                p = p / r;\n                q = q / r;\n\n                for (j = n - 1; j < nn; j++) {\n                    z = H[n - 1][j];\n                    H[n - 1][j] = q * z + p * H[n][j];\n                    H[n][j] = q * H[n][j] - p * z;\n                }\n\n                for (i = 0; i <= n; i++) {\n                    z = H[i][n - 1];\n                    H[i][n - 1] = q * z + p * H[i][n];\n                    H[i][n] = q * H[i][n] - p * z;\n                }\n\n                for (i = low; i <= high; i++) {\n                    z = V[i][n - 1];\n                    V[i][n - 1] = q * z + p * V[i][n];\n                    V[i][n] = q * V[i][n] - p * z;\n                }\n            } else {\n                d[n - 1] = x + p;\n                d[n] = x + p;\n                e[n - 1] = z;\n                e[n] = -z;\n            }\n\n            n = n - 2;\n            iter = 0;\n        } else {\n            x = H[n][n];\n            y = 0;\n            w = 0;\n            if (l < n) {\n                y = H[n - 1][n - 1];\n                w = H[n][n - 1] * H[n - 1][n];\n            }\n\n            if (iter === 10) {\n                exshift += x;\n                for (i = low; i <= n; i++) {\n                    H[i][i] -= x;\n                }\n                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n                x = y = 0.75 * s;\n                w = -0.4375 * s * s;\n            }\n\n            if (iter === 30) {\n                s = (y - x) / 2;\n                s = s * s + w;\n                if (s > 0) {\n                    s = Math.sqrt(s);\n                    if (y < x) {\n                        s = -s;\n                    }\n                    s = x - w / ((y - x) / 2 + s);\n                    for (i = low; i <= n; i++) {\n                        H[i][i] -= s;\n                    }\n                    exshift += s;\n                    x = y = w = 0.964;\n                }\n            }\n\n            iter = iter + 1;\n\n            m = n - 2;\n            while (m >= l) {\n                z = H[m][m];\n                r = x - z;\n                s = y - z;\n                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n                q = H[m + 1][m + 1] - z - r - s;\n                r = H[m + 2][m + 1];\n                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                p = p / s;\n                q = q / s;\n                r = r / s;\n                if (m === l) {\n                    break;\n                }\n                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n                    break;\n                }\n                m--;\n            }\n\n            for (i = m + 2; i <= n; i++) {\n                H[i][i - 2] = 0;\n                if (i > m + 2) {\n                    H[i][i - 3] = 0;\n                }\n            }\n\n            for (k = m; k <= n - 1; k++) {\n                notlast = (k !== n - 1);\n                if (k !== m) {\n                    p = H[k][k - 1];\n                    q = H[k + 1][k - 1];\n                    r = (notlast ? H[k + 2][k - 1] : 0);\n                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                    if (x !== 0) {\n                        p = p / x;\n                        q = q / x;\n                        r = r / x;\n                    }\n                }\n\n                if (x === 0) {\n                    break;\n                }\n\n                s = Math.sqrt(p * p + q * q + r * r);\n                if (p < 0) {\n                    s = -s;\n                }\n\n                if (s !== 0) {\n                    if (k !== m) {\n                        H[k][k - 1] = -s * x;\n                    } else if (l !== m) {\n                        H[k][k - 1] = -H[k][k - 1];\n                    }\n\n                    p = p + s;\n                    x = p / s;\n                    y = q / s;\n                    z = r / s;\n                    q = q / p;\n                    r = r / p;\n\n                    for (j = k; j < nn; j++) {\n                        p = H[k][j] + q * H[k + 1][j];\n                        if (notlast) {\n                            p = p + r * H[k + 2][j];\n                            H[k + 2][j] = H[k + 2][j] - p * z;\n                        }\n\n                        H[k][j] = H[k][j] - p * x;\n                        H[k + 1][j] = H[k + 1][j] - p * y;\n                    }\n\n                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n                        p = x * H[i][k] + y * H[i][k + 1];\n                        if (notlast) {\n                            p = p + z * H[i][k + 2];\n                            H[i][k + 2] = H[i][k + 2] - p * r;\n                        }\n\n                        H[i][k] = H[i][k] - p;\n                        H[i][k + 1] = H[i][k + 1] - p * q;\n                    }\n\n                    for (i = low; i <= high; i++) {\n                        p = x * V[i][k] + y * V[i][k + 1];\n                        if (notlast) {\n                            p = p + z * V[i][k + 2];\n                            V[i][k + 2] = V[i][k + 2] - p * r;\n                        }\n\n                        V[i][k] = V[i][k] - p;\n                        V[i][k + 1] = V[i][k + 1] - p * q;\n                    }\n                }\n            }\n        }\n    }\n\n    if (norm === 0) {\n        return;\n    }\n\n    for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n\n        if (q === 0) {\n            l = n;\n            H[n][n] = 1;\n            for (i = n - 1; i >= 0; i--) {\n                w = H[i][i] - p;\n                r = 0;\n                for (j = l; j <= n; j++) {\n                    r = r + H[i][j] * H[j][n];\n                }\n\n                if (e[i] < 0) {\n                    z = w;\n                    s = r;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                        t = (x * s - z * r) / q;\n                        H[i][n] = t;\n                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n                    }\n\n                    t = Math.abs(H[i][n]);\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        } else if (q < 0) {\n            l = n - 1;\n\n            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n                H[n - 1][n - 1] = q / H[n][n - 1];\n                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n            } else {\n                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n                H[n - 1][n - 1] = cdivres[0];\n                H[n - 1][n] = cdivres[1];\n            }\n\n            H[n][n - 1] = 0;\n            H[n][n] = 1;\n            for (i = n - 2; i >= 0; i--) {\n                ra = 0;\n                sa = 0;\n                for (j = l; j <= n; j++) {\n                    ra = ra + H[i][j] * H[j][n - 1];\n                    sa = sa + H[i][j] * H[j][n];\n                }\n\n                w = H[i][i] - p;\n\n                if (e[i] < 0) {\n                    z = w;\n                    r = ra;\n                    s = sa;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        cdivres = cdiv(-ra, -sa, w, q);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                        vi = (d[i] - p) * 2 * q;\n                        if (vr === 0 && vi === 0) {\n                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                        }\n                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n                        } else {\n                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n                            H[i + 1][n - 1] = cdivres[0];\n                            H[i + 1][n] = cdivres[1];\n                        }\n                    }\n\n                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n - 1] = H[j][n - 1] / t;\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            for (j = i; j < nn; j++) {\n                V[i][j] = H[i][j];\n            }\n        }\n    }\n\n    for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n            z = 0;\n            for (k = low; k <= Math.min(j, high); k++) {\n                z = z + V[i][k] * H[k][j];\n            }\n            V[i][j] = z;\n        }\n    }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n    var r, d;\n    if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        return [(xr + r * xi) / d, (xi - r * xr) / d];\n    }\n    else {\n        r = yr / yi;\n        d = yi + r * yr;\n        return [(r * xr + xi) / d, (r * xi - xr) / d];\n    }\n}\n\nmodule.exports = EigenvalueDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-pca/~/ml-matrix/src/dc/evd.js\n ** module id = 93\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\nfunction LuDecomposition(matrix) {\n    if (!(this instanceof LuDecomposition)) {\n        return new LuDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n\n    var lu = matrix.clone(),\n        rows = lu.rows,\n        columns = lu.columns,\n        pivotVector = new Array(rows),\n        pivotSign = 1,\n        i, j, k, p, s, t, v,\n        LUrowi, LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n        pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n\n        for (i = 0; i < rows; i++) {\n            LUcolj[i] = lu[i][j];\n        }\n\n        for (i = 0; i < rows; i++) {\n            LUrowi = lu[i];\n            kmax = Math.min(i, j);\n            s = 0;\n            for (k = 0; k < kmax; k++) {\n                s += LUrowi[k] * LUcolj[k];\n            }\n            LUrowi[j] = LUcolj[i] -= s;\n        }\n\n        p = j;\n        for (i = j + 1; i < rows; i++) {\n            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n                p = i;\n            }\n        }\n\n        if (p !== j) {\n            for (k = 0; k < columns; k++) {\n                t = lu[p][k];\n                lu[p][k] = lu[j][k];\n                lu[j][k] = t;\n            }\n\n            v = pivotVector[p];\n            pivotVector[p] = pivotVector[j];\n            pivotVector[j] = v;\n\n            pivotSign = -pivotSign;\n        }\n\n        if (j < rows && lu[j][j] !== 0) {\n            for (i = j + 1; i < rows; i++) {\n                lu[i][j] /= lu[j][j];\n            }\n        }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n}\n\nLuDecomposition.prototype = {\n    isSingular: function () {\n        var data = this.LU,\n            col = data.columns;\n        for (var j = 0; j < col; j++) {\n            if (data[j][j] === 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    get determinant() {\n        var data = this.LU;\n        if (!data.isSquare())\n            throw new Error('Matrix must be square');\n        var determinant = this.pivotSign, col = data.columns;\n        for (var j = 0; j < col; j++)\n            determinant *= data[j][j];\n        return determinant;\n    },\n    get lowerTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i > j) {\n                    X[i][j] = data[i][j];\n                } else if (i === j) {\n                    X[i][j] = 1;\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get upperTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i <= j) {\n                    X[i][j] = data[i][j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get pivotPermutationVector() {\n        return this.pivotVector.slice();\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var lu = this.LU,\n            rows = lu.rows;\n\n        if (rows !== value.rows)\n            throw new Error('Invalid matrix dimensions');\n        if (this.isSingular())\n            throw new Error('LU matrix is singular');\n\n        var count = value.columns,\n            X = value.subMatrixRow(this.pivotVector, 0, count - 1),\n            columns = lu.columns,\n            i, j, k;\n\n        for (k = 0; k < columns; k++) {\n            for (i = k + 1; i < columns; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        for (k = columns - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= lu[k][k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = LuDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-pca/~/ml-matrix/src/dc/lu.js\n ** module id = 94\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\nfunction QrDecomposition(value) {\n    if (!(this instanceof QrDecomposition)) {\n        return new QrDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n\n    var qr = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        rdiag = new Array(n),\n        i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) {\n            nrm = hypotenuse(nrm, qr[i][k]);\n        }\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) {\n                nrm = -nrm;\n            }\n            for (i = k; i < m; i++) {\n                qr[i][k] /= nrm;\n            }\n            qr[k][k] += 1;\n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * qr[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    qr[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n}\n\nQrDecomposition.prototype = {\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var qr = this.QR,\n            m = qr.rows;\n\n        if (value.rows !== m)\n            throw new Error('Matrix row dimensions must agree');\n        if (!this.isFullRank())\n            throw new Error('Matrix is rank deficient');\n\n        var count = value.columns,\n            X = value.clone(),\n            n = qr.columns,\n            i, j, k, s;\n\n        for (k = 0; k < n; k++) {\n            for (j = 0; j < count; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * X[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    X[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        for (k = n - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= this.Rdiag[k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * qr[i][k];\n                }\n            }\n        }\n\n        return X.subMatrix(0, n - 1, 0, count - 1);\n    },\n    isFullRank: function () {\n        var columns = this.QR.columns;\n        for (var i = 0; i < columns; i++) {\n            if (this.Rdiag[i] === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n    get upperTriangularFactor() {\n        var qr = this.QR,\n            n = qr.columns,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                if (i < j) {\n                    X[i][j] = qr[i][j];\n                } else if (i === j) {\n                    X[i][j] = this.Rdiag[i];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get orthogonalFactor() {\n        var qr = this.QR,\n            rows = qr.rows,\n            columns = qr.columns,\n            X = new Matrix(rows, columns),\n            i, j, k, s;\n\n        for (k = columns - 1; k >= 0; k--) {\n            for (i = 0; i < rows; i++) {\n                X[i][k] = 0;\n            }\n            X[k][k] = 1;\n            for (j = k; j < columns; j++) {\n                if (qr[k][k] !== 0) {\n                    s = 0;\n                    for (i = k; i < rows; i++) {\n                        s += qr[i][k] * X[i][j];\n                    }\n\n                    s = -s / qr[k][k];\n\n                    for (i = k; i < rows; i++) {\n                        X[i][j] += s * qr[i][k];\n                    }\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = QrDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-pca/~/ml-matrix/src/dc/qr.js\n ** module id = 95\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\nfunction CholeskyDecomposition(value) {\n    if (!(this instanceof CholeskyDecomposition)) {\n        return new CholeskyDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n    if (!value.isSymmetric())\n        throw new Error('Matrix is not symmetric');\n\n    var a = value,\n        dimension = a.rows,\n        l = new Matrix(dimension, dimension),\n        positiveDefinite = true,\n        i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n        var Lrowj = l[j];\n        var d = 0;\n        for (k = 0; k < j; k++) {\n            var Lrowk = l[k];\n            var s = 0;\n            for (i = 0; i < k; i++) {\n                s += Lrowk[i] * Lrowj[i];\n            }\n            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n            d = d + s * s;\n        }\n\n        d = a[j][j] - d;\n\n        positiveDefinite &= (d > 0);\n        l[j][j] = Math.sqrt(Math.max(d, 0));\n        for (k = j + 1; k < dimension; k++) {\n            l[j][k] = 0;\n        }\n    }\n\n    if (!positiveDefinite) {\n        throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n}\n\nCholeskyDecomposition.prototype = {\n    get leftTriangularFactor() {\n        return this.L;\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var l = this.L,\n            dimension = l.rows;\n\n        if (value.rows !== dimension) {\n            throw new Error('Matrix dimensions do not match');\n        }\n\n        var count = value.columns,\n            B = value.clone(),\n            i, j, k;\n\n        for (k = 0; k < dimension; k++) {\n            for (j = 0; j < count; j++) {\n                for (i = 0; i < k; i++) {\n                    B[k][j] -= B[i][j] * l[k][i];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        for (k = dimension - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                for (i = k + 1; i < dimension; i++) {\n                    B[k][j] -= B[i][j] * l[i][k];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        return B;\n    }\n};\n\nmodule.exports = CholeskyDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-pca/~/ml-matrix/src/dc/cholesky.js\n ** module id = 96\n ** module chunks = 0\n **/","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar LOOP = 8;\nvar FLOAT_MUL = 1 / 16777216;\n\nfunction multiply_uint32(n, m) {\n    n >>>= 0;\n    m >>>= 0;\n    var nlo = n & 0xffff;\n    var nhi = n - nlo;\n    return (nhi * m >>> 0) + nlo * m >>> 0;\n}\n\nvar XSadd = (function () {\n    function XSadd() {\n        var seed = arguments.length <= 0 || arguments[0] === undefined ? Date.now() : arguments[0];\n\n        _classCallCheck(this, XSadd);\n\n        this.state = new Uint32Array(4);\n        this.init(seed);\n    }\n\n    _createClass(XSadd, [{\n        key: \"init\",\n        value: function init(seed) {\n            this.state[0] = seed;\n            this.state[1] = 0;\n            this.state[2] = 0;\n            this.state[3] = 0;\n            for (var i = 1; i < LOOP; i++) {\n                this.state[i & 3] ^= i + multiply_uint32(1812433253, this.state[i - 1 & 3] ^ this.state[i - 1 & 3] >>> 30 >>> 0) >>> 0;\n            }\n            period_certification(this);\n            for (var i = 0; i < LOOP; i++) {\n                next_state(this);\n            }\n        }\n\n        /**\n         * Returns a 32-bit integer r (0 <= r < 2^32)\n         */\n    }, {\n        key: \"getUint32\",\n        value: function getUint32() {\n            next_state(this);\n            return this.state[3] + this.state[2] >>> 0;\n        }\n\n        /**\n         * Returns a floating point number r (0.0 <= r < 1.0)\n         */\n    }, {\n        key: \"getFloat\",\n        value: function getFloat() {\n            return (this.getUint32() >>> 8) * FLOAT_MUL;\n        }\n    }, {\n        key: \"random\",\n        get: function get() {\n            if (!this._random) {\n                this._random = this.getFloat.bind(this);\n            }\n            return this._random;\n        }\n    }]);\n\n    return XSadd;\n})();\n\nexports[\"default\"] = XSadd;\n\nfunction period_certification(xsadd) {\n    if (xsadd.state[0] === 0 && xsadd.state[1] === 0 && xsadd.state[2] === 0 && xsadd.state[3] === 0) {\n        xsadd.state[0] = 88; // X\n        xsadd.state[1] = 83; // S\n        xsadd.state[2] = 65; // A\n        xsadd.state[3] = 68; // D\n    }\n}\n\nvar sh1 = 15;\nvar sh2 = 18;\nvar sh3 = 11;\nfunction next_state(xsadd) {\n    var t = xsadd.state[0];\n    t ^= t << sh1;\n    t ^= t >>> sh2;\n    t ^= xsadd.state[3] << sh3;\n    xsadd.state[0] = xsadd.state[1];\n    xsadd.state[1] = xsadd.state[2];\n    xsadd.state[2] = xsadd.state[3];\n    xsadd.state[3] = t;\n}\nmodule.exports = exports[\"default\"];\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-xsadd/xsadd-es5.js\n ** module id = 97\n ** module chunks = 0\n **/","module.exports = exports = require('./svm');\nexports.kernel = require('./kernel').kernel;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-svm/src/index.js\n ** module id = 98\n ** module chunks = 0\n **/","'use strict';\nvar kernel = require(\"./kernel\").kernel;\nvar getKernel = require(\"./kernel\").getKernel;\n\n/**\n * Parameters to implement function\n * @type {{C: number, tol: number, max_passes: number, par: number, k: string}}\n * @param {number} C - regularization parameter\n * @param {number} tol - numerical tolerance\n * @param {number} max_passes - max number of times to iterate over alphas without\n * changing\n * @param {string} k - the kind of kernel\n * @param {number} par - parameter used in the polynomial and the radial function\n * of the kernel\n */\nvar defaultOptions = {\n    C: 10,\n    tol: 10e-2,\n    max_passes: 100,\n    par: 2,\n    k: 'lineal'\n};\n\n/**\n * Function to calculate the estimated prediction\n * @param {Array <number>} x - point where calculate the function prediction\n * @param {Array <Array <number>>} X - training data point in the form (x1, x2)\n * @param {Array <number>} Y - training data labels in the domain {1,-1}\n * @param {Array <number>} alpha - Lagrange multipliers\n * @param {number} b - threshold of the function\n * @param {string} k - the kind of kernel\n * @param {number} par - parameter used in the polynomial and the radial function\n * of the kernel\n * @returns {number}\n */\nfunction f(x, X, Y, alpha, b, kernel, par) {\n    var m = X.length;\n    var aux = b;\n    for (var i = 0; i < m; i++) {\n        b += alpha[i]*Y[i]*kernel(X[i],x, par)\n    }\n    return aux;\n}\n\n/**\n * Simplified version of the Sequential Minimal Optimization algorithm for training\n * support vector machines\n * @param {{json}} options - parameters to implement function\n * @constructor\n */\nfunction SVM(options) {\n    options = options || {};\n    this.options = {};\n    for (var o in defaultOptions) {\n        if (options.hasOwnProperty(o)) {\n            this.options[o] = options[o];\n        } else {\n            this.options[o] = defaultOptions[o];\n        }\n    }\n    this.kernel = getKernel(this.options.k);\n    this.b = 0;\n}\n\n/**\n * Train the SVM model\n * @param {Array <Array <number>>} X - training data point in the form (x1, x2)\n * @param {Array <number>} Y - training data labels in the domain {1,-1}\n */\nSVM.prototype.train = function (X, Y) {\n    var m = Y.length;\n    var alpha = new Array(m);\n    for (var a = 0; a < m; a++)\n        alpha[a] = 0;\n    if (X.length !== m)\n        throw new TypeError('Arrays should have the same length');\n    var b = 0,\n        b1 = 0,\n        b2 = 0,\n        iter = 0,\n        Ei = 0,\n        Ej = 0,\n        ai = 0,\n        aj = 0,\n        L = 0,\n        H = 0,\n        eta = 0;\n\n    while (iter < this.options.max_passes) {\n        var numChange = 0;\n        for (var i = 0; i < m; i++) {\n            Ei = f(X[i],X,Y,alpha,b,this.kernel,this.options.par) - Y[i];\n            if (((Y[i]*Ei < -this.options.tol) && (alpha[i] < this.options.C)) || ((Y[i]*Ei > this.options.tol) && (alpha[i] > 0))) {\n                var j = 0;\n                do {\n                    j = Math.ceil(Math.random()*(m - 1));\n                }\n                while (j === i);\n                Ej = f(X[j],X,Y,alpha,b,this.kernel,this.options.par) - Y[j];\n                ai = alpha[i];\n                aj = alpha[j];\n                if (Y[i] === Y[j]) {\n                    L = Math.max(0, ai+aj-this.options.C);\n                    H = Math.min(this.options.C, ai+aj);\n                }\n                else  {\n                    L = Math.max(0, ai-aj);\n                    H = Math.min(this.options.C, this.options.C-ai+aj);\n                }\n                if (L !== H) {\n                    eta = 2*this.kernel(X[i],X[j], this.options.par) - this.kernel(X[i],X[i], this.options.par) - this.kernel(X[j],X[j], this.options.par);\n                    if (eta < 0) {\n                        alpha[j] = alpha[j] - (Y[j]*(Ei - Ej)) / eta;\n                        if (alpha[j] > H)\n                            alpha[j] = H;\n                        else if (alpha[j] < L)\n                            alpha[j] = L;\n                        if (Math.abs(aj - alpha[j]) >= 10e-5) {\n                            alpha[i] = alpha[i] + Y[i]*Y[j]*(aj - alpha[j]);\n                            b1 = b - Ei - Y[i]*(alpha[i] - ai)*this.kernel(X[i],X[i], this.options.par) - Y[j]*(alpha[j] - aj)*this.kernel(X[i],X[j], this.options.par);\n                            b2 = b - Ej - Y[i]*(alpha[i] - ai)*this.kernel(X[i],X[j], this.options.par) - Y[j]*(alpha[j] - aj)*this.kernel(X[j],X[j], this.options.par);\n                            if ((alpha[i] < this.options.C) && (alpha[i] > 0))\n                                b = b1;\n                            else if ((alpha[j] < this.options.C) && (alpha[j] > 0))\n                                b = b2;\n                            else\n                                b = (b1 + b2) / 2;\n                            numChange += 1;\n                        }\n                    }\n                }\n            }\n        }\n        if (numChange == 0)\n            iter += 1;\n        else\n            iter = 0;\n    }\n    this.b = b;\n    var s = X[0].length;\n    this.W = new Array(s);\n    for (var r = 0; r < s; r++) {\n        this.W[r] = 0;\n        for (var w = 0; w < m; w++)\n            this.W[r] += Y[w]*alpha[w]*X[w][r];\n    }\n    this.alphas = alpha.splice();\n};\n\n/**\n * Recreates a SVM based in the exported model\n * @param {{name: string, ,options: {json} ,alpha: Array<number>, b: number}} model\n * @returns {SVM}\n */\nSVM.load = function (model) {\n    if (model.name === 'SVM') {\n        var svm = new SVM(model.options);\n        svm.W = model.W.slice();\n        svm.b = model.b;\n        return svm;\n    } else {\n        throw new TypeError('expecting a SVM model');\n    }\n};\n\n/**\n * Let's have a JSON to recreate the model\n * @returns {{name: String(\"SVM\"), ,options: {json} ,alpha: Array<number>, b: number}}\n * name identifier, options to recreate model, the Lagrange multipliers and the\n * threshold of the objective function\n */\nSVM.prototype.export = function () {\n    var model = {\n        name: 'SVM'\n    };\n    model.options = this.options;\n    model.W = this.W;\n    model.b = this.b;\n    return model;\n};\n\n/**\n * Return the Lagrange multipliers\n * @returns {Array <number>}\n */\nSVM.prototype.getAlphas = function () {\n    return this.alphas.slice();\n};\n\n/**\n * Returns the threshold of the model function\n * @returns {number} threshold of the function\n */\nSVM.prototype.getThreshold = function () {\n    return this.b;\n};\n\n/**\n * Use the train model to make predictions\n * @param {Array} p - An array or a single dot to have the prediction\n * @returns {*} An array or a single {-1, 1} value of the prediction\n */\nSVM.prototype.predict = function (p) {\n    var ev;\n    if (Array.isArray(p) && (Array.isArray(p[0]) || (typeof p[0] === 'object'))) {\n        var ans = new Array(p.length);\n        for (var i = 0; i < ans.length; i++) {\n            ev = this.b;\n            for (var j = 0; j < this.W.length; j++)\n                ev += this.W[j]*p[j];\n            if (ev < 0)\n                ans[i] = -1;\n            else\n                ans[i] = 1;\n        }\n        return ans;\n    }\n    else {\n        ev = this.b;\n        for (var e = 0; e < this.W.length; e++)\n            ev += this.W[e]*p[e];\n        if (ev < 0)\n            return -1;\n        else\n            return 1;\n    }\n};\n\nmodule.exports = SVM;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-svm/src/svm.js\n ** module id = 99\n ** module chunks = 0\n **/","'use strict';\n\n/**\n * Kernel function to return the dot product for different spaces\n * @param {Array <number>} x1 - input first vector\n * @param {Array <number>} x2 - input second vector\n * @param {string} func - the kind of transformation\n * @param {number} par - parameter used in the polynomial and the radial function\n * @return {number} calculus of the dot product using the function\n * */\nfunction kernel(x1,x2,func,par) {\n    return getKernel(func)(x1, x2, par);\n}\n\n/**\n * The dot product between the p1 and p2 vectors\n * @param {Array <number>} p1 - first vector to get dot product\n * @param {Array <number>} p2 - second vector to get dot product\n * @returns {number} dot product between the p1 and p2 vectors\n */\nfunction dot(p1, p2) {\n    var l = p1.length;\n    var prod = 0;\n\n    for (var i = 0; i < l; i++) {\n        prod += p1[i] * p2[i];\n    }\n\n    return prod;\n}\n\nfunction getKernel(func) {\n    func = (typeof func === 'undefined') ? 'lineal' : func;\n\n    switch(func) {\n        case 'lineal':\n            return kernelLineal;\n        case 'polynomial':\n            return kernelPolynomial;\n        case 'radial':\n            return kernelRadial;\n        default:\n            throw new TypeError('Function kernel undefined: ' + func);\n    }\n}\n\nfunction kernelLineal(x1,x2) {\n    return dot(x1,x2);\n}\n\nfunction kernelPolynomial(x1, x2, par) {\n    par = (typeof par === 'undefined') ? 2 : par;\n    return Math.pow((dot(x1, x2) + 1), par);\n}\n\nfunction kernelRadial(x1, x2, par) {\n    par = (typeof par === 'undefined') ? 2 : par;\n    var l = x1.length;\n    var rest = new Array(l);\n    for (var i = 0; i < l; i++) {\n        rest[i] = x1[i] - x2[i];\n    }\n    var norm = dot(rest, rest);\n    return Math.exp((norm)/(-2*par*par));\n}\n\nmodule.exports = {\n    kernel: kernel,\n    getKernel: getKernel,\n    lineal : kernelLineal,\n    polynomial : kernelPolynomial,\n    radial : kernelRadial\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-svm/src/kernel.js\n ** module id = 100\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./knn');\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-knn/src/index.js\n ** module id = 101\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = KNN;\n\nvar KDTree = require('./kdtree').kdTree;\nvar Distances = require('ml-distance');\n\n/**\n * K-Nearest neighboor constructor.\n *\n * @param reload - loading purposes.\n * @param model - loading purposes\n * @constructor\n */\nfunction KNN(reload, model) {\n    if(reload) {\n        this.kdtree = model.kdtree;\n        this.k = model.k;\n        this.classes = model.classes;\n    }\n}\n\n/**\n * Function that trains the KNN with the given trainingSet and trainingLabels.\n * The third argument is an object with the following options.\n *  * distance: that represent the distance function applied (default: euclidean)\n *  * k: the number of neighboors to take in count for classify (default: number of features + 1)\n *\n * @param trainingSet\n * @param trainingLabels\n * @param options\n */\nKNN.prototype.train = function (trainingSet, trainingLabels, options) {\n    if(options === undefined) options = {};\n    if(options.distance === undefined) options.distance = Distances.distance.euclidean;\n    if(options.k === undefined) options.k = trainingSet[0].length + 1;\n\n    var classes = 0;\n    var exist = new Array(1000);\n    var j = 0;\n    for(var i = 0; i < trainingLabels.length; ++i) {\n        if(exist.indexOf(trainingLabels[i]) === -1) {\n            classes++;\n            exist[j] = trainingLabels[i];\n            j++;\n        }\n    }\n\n    // copy dataset\n    var points = new Array(trainingSet.length);\n    for(i = 0; i < points.length; ++i) {\n        points[i] = trainingSet[i].slice();\n    }\n\n    this.features = trainingSet[0].length;\n    for(i = 0; i < trainingLabels.length; ++i) {\n        points[i].push(trainingLabels[i]);\n    }\n\n    var dimensions = new Array(trainingSet[0].length);\n    for(i = 0; i < dimensions.length; ++i) {\n        dimensions[i] = i;\n    }\n\n    this.kdtree = new KDTree(points, options.distance, dimensions);\n    this.k = options.k;\n    this.classes = classes;\n};\n\n/**\n * Function that returns the predictions given the dataset.\n * \n * @param dataset\n * @returns {Array}\n */\nKNN.prototype.predict = function (dataset) {\n    var predictions = new Array(dataset.length);\n    for(var i = 0; i < dataset.length; ++i) {\n        predictions[i] = this.getSinglePrediction(dataset[i]);\n    }\n\n    return predictions;\n};\n\n/**\n * function that returns a prediction for a single case.\n * @param currentCase\n * @returns {number}\n */\nKNN.prototype.getSinglePrediction = function (currentCase) {\n    var nearestPoints = this.kdtree.nearest(currentCase, this.k);\n    var pointsPerClass = new Array(this.classes);\n    var predictedClass = -1;\n    var maxPoints = -1;\n    var lastElement = nearestPoints[0][0].length - 1;\n\n    for(var i = 0; i < pointsPerClass.length; ++i) {\n        pointsPerClass[i] = 0;\n    }\n\n    for(i = 0; i < nearestPoints.length; ++i) {\n        var currentClass = nearestPoints[i][0][lastElement];\n        var currentPoints = ++pointsPerClass[currentClass];\n        if(currentPoints > maxPoints) {\n            predictedClass = currentClass;\n            maxPoints = currentPoints;\n        }\n    }\n\n    return predictedClass;\n};\n\n/**\n * function that returns a KNN classifier with the given model.\n *\n * @param model\n */\nKNN.load = function (model) {\n    if(model.modelName !== \"KNN\")\n        throw new RangeError(\"The given model is invalid!\");\n\n    return new KNN(true, model);\n};\n\n/**\n * function that exports the current KNN classifier.\n */\nKNN.prototype.export = function () {\n    return {\n        modelName: \"KNN\",\n        kdtree: this.kdtree,\n        k: this.k,\n        classes: this.classes\n    };\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-knn/src/knn.js\n ** module id = 102\n ** module chunks = 0\n **/","'use strict';\n\n/**\n* k-d Tree JavaScript - V 1.01\n*\n* https://github.com/ubilabs/kd-tree-javascript\n*\n* @author Mircea Pricop <pricop@ubilabs.net>, 2012\n* @author Martin Kleppe <kleppe@ubilabs.net>, 2012\n* @author Ubilabs http://ubilabs.net, 2012\n* @license MIT License <http://www.opensource.org/licenses/mit-license.php>\n*/\n\n\nfunction Node(obj, dimension, parent) {\n    this.obj = obj;\n    this.left = null;\n    this.right = null;\n    this.parent = parent;\n    this.dimension = dimension;\n}\n\nfunction kdTree(points, metric, dimensions) {\n\n    var self = this;\n\n    function buildTree(points, depth, parent) {\n        var dim = depth % dimensions.length,\n            median,\n            node;\n\n        if (points.length === 0) {\n            return null;\n        }\n        if (points.length === 1) {\n            return new Node(points[0], dim, parent);\n        }\n\n        points.sort(function (a, b) {\n            return a[dimensions[dim]] - b[dimensions[dim]];\n        });\n\n        median = Math.floor(points.length / 2);\n        node = new Node(points[median], dim, parent);\n        node.left = buildTree(points.slice(0, median), depth + 1, node);\n        node.right = buildTree(points.slice(median + 1), depth + 1, node);\n\n        return node;\n    }\n\n    // Reloads a serialied tree\n    function loadTree (data) {\n        // Just need to restore the `parent` parameter\n        self.root = data;\n\n        function restoreParent (root) {\n            if (root.left) {\n                root.left.parent = root;\n                restoreParent(root.left);\n            }\n\n            if (root.right) {\n                root.right.parent = root;\n                restoreParent(root.right);\n            }\n        }\n\n        restoreParent(self.root);\n    }\n\n    // If points is not an array, assume we're loading a pre-built tree\n    if (!Array.isArray(points)) loadTree(points, metric, dimensions);\n    else this.root = buildTree(points, 0, null);\n\n    // Convert to a JSON serializable structure; this just requires removing\n    // the `parent` property\n    this.toJSON = function (src) {\n        if (!src) src = this.root;\n        var dest = new Node(src.obj, src.dimension, null);\n        if (src.left) dest.left = self.toJSON(src.left);\n        if (src.right) dest.right = self.toJSON(src.right);\n        return dest;\n    };\n\n    this.insert = function (point) {\n        function innerSearch(node, parent) {\n\n            if (node === null) {\n                return parent;\n            }\n\n            var dimension = dimensions[node.dimension];\n            if (point[dimension] < node.obj[dimension]) {\n                return innerSearch(node.left, node);\n            } else {\n                return innerSearch(node.right, node);\n            }\n        }\n\n        var insertPosition = innerSearch(this.root, null),\n            newNode,\n            dimension;\n\n        if (insertPosition === null) {\n            this.root = new Node(point, 0, null);\n            return;\n        }\n\n        newNode = new Node(point, (insertPosition.dimension + 1) % dimensions.length, insertPosition);\n        dimension = dimensions[insertPosition.dimension];\n\n        if (point[dimension] < insertPosition.obj[dimension]) {\n            insertPosition.left = newNode;\n        } else {\n            insertPosition.right = newNode;\n        }\n    };\n\n    this.remove = function (point) {\n        var node;\n\n        function nodeSearch(node) {\n            if (node === null) {\n                return null;\n            }\n\n            if (node.obj === point) {\n                return node;\n            }\n\n            var dimension = dimensions[node.dimension];\n\n            if (point[dimension] < node.obj[dimension]) {\n                return nodeSearch(node.left, node);\n            } else {\n                return nodeSearch(node.right, node);\n            }\n        }\n\n        function removeNode(node) {\n            var nextNode,\n                nextObj,\n                pDimension;\n\n            function findMin(node, dim) {\n                var dimension,\n                    own,\n                    left,\n                    right,\n                    min;\n\n                if (node === null) {\n                    return null;\n                }\n\n                dimension = dimensions[dim];\n\n                if (node.dimension === dim) {\n                    if (node.left !== null) {\n                        return findMin(node.left, dim);\n                    }\n                    return node;\n                }\n\n                own = node.obj[dimension];\n                left = findMin(node.left, dim);\n                right = findMin(node.right, dim);\n                min = node;\n\n                if (left !== null && left.obj[dimension] < own) {\n                    min = left;\n                }\n                if (right !== null && right.obj[dimension] < min.obj[dimension]) {\n                    min = right;\n                }\n                return min;\n            }\n\n            if (node.left === null && node.right === null) {\n                if (node.parent === null) {\n                    self.root = null;\n                    return;\n                }\n\n                pDimension = dimensions[node.parent.dimension];\n\n                if (node.obj[pDimension] < node.parent.obj[pDimension]) {\n                    node.parent.left = null;\n                } else {\n                    node.parent.right = null;\n                }\n                return;\n            }\n\n            // If the right subtree is not empty, swap with the minimum element on the\n            // node's dimension. If it is empty, we swap the left and right subtrees and\n            // do the same.\n            if (node.right !== null) {\n                nextNode = findMin(node.right, node.dimension);\n                nextObj = nextNode.obj;\n                removeNode(nextNode);\n                node.obj = nextObj;\n            } else {\n                nextNode = findMin(node.left, node.dimension);\n                nextObj = nextNode.obj;\n                removeNode(nextNode);\n                node.right = node.left;\n                node.left = null;\n                node.obj = nextObj;\n            }\n\n        }\n\n        node = nodeSearch(self.root);\n\n        if (node === null) { return; }\n\n        removeNode(node);\n    };\n\n    this.nearest = function (point, maxNodes, maxDistance) {\n        var i,\n            result,\n            bestNodes;\n\n        bestNodes = new BinaryHeap(\n            function (e) { return -e[1]; }\n        );\n\n        function nearestSearch(node) {\n            var bestChild,\n                dimension = dimensions[node.dimension],\n                ownDistance = metric(point, node.obj),\n                linearPoint = {},\n                linearDistance,\n                otherChild,\n                i;\n\n            function saveNode(node, distance) {\n                bestNodes.push([node, distance]);\n                if (bestNodes.size() > maxNodes) {\n                    bestNodes.pop();\n                }\n            }\n\n            for (i = 0; i < dimensions.length; i += 1) {\n                if (i === node.dimension) {\n                    linearPoint[dimensions[i]] = point[dimensions[i]];\n                } else {\n                    linearPoint[dimensions[i]] = node.obj[dimensions[i]];\n                }\n            }\n\n            linearDistance = metric(linearPoint, node.obj);\n\n            if (node.right === null && node.left === null) {\n                if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {\n                    saveNode(node, ownDistance);\n                }\n                return;\n            }\n\n            if (node.right === null) {\n                bestChild = node.left;\n            } else if (node.left === null) {\n                bestChild = node.right;\n            } else {\n                if (point[dimension] < node.obj[dimension]) {\n                    bestChild = node.left;\n                } else {\n                    bestChild = node.right;\n                }\n            }\n\n            nearestSearch(bestChild);\n\n            if (bestNodes.size() < maxNodes || ownDistance < bestNodes.peek()[1]) {\n                saveNode(node, ownDistance);\n            }\n\n            if (bestNodes.size() < maxNodes || Math.abs(linearDistance) < bestNodes.peek()[1]) {\n                if (bestChild === node.left) {\n                    otherChild = node.right;\n                } else {\n                    otherChild = node.left;\n                }\n                if (otherChild !== null) {\n                    nearestSearch(otherChild);\n                }\n            }\n        }\n\n        if (maxDistance) {\n            for (i = 0; i < maxNodes; i += 1) {\n                bestNodes.push([null, maxDistance]);\n            }\n        }\n\n        if(self.root)\n            nearestSearch(self.root);\n\n        result = [];\n\n        for (i = 0; i < Math.min(maxNodes, bestNodes.content.length); i += 1) {\n            if (bestNodes.content[i][0]) {\n                result.push([bestNodes.content[i][0].obj, bestNodes.content[i][1]]);\n            }\n        }\n        return result;\n    };\n\n    this.balanceFactor = function () {\n        function height(node) {\n            if (node === null) {\n                return 0;\n            }\n            return Math.max(height(node.left), height(node.right)) + 1;\n        }\n\n        function count(node) {\n            if (node === null) {\n                return 0;\n            }\n            return count(node.left) + count(node.right) + 1;\n        }\n\n        return height(self.root) / (Math.log(count(self.root)) / Math.log(2));\n    };\n}\n\n// Binary heap implementation from:\n// http://eloquentjavascript.net/appendix2.html\n\nfunction BinaryHeap(scoreFunction){\n    this.content = [];\n    this.scoreFunction = scoreFunction;\n}\n\nBinaryHeap.prototype = {\n    push: function(element) {\n        // Add the new element to the end of the array.\n        this.content.push(element);\n        // Allow it to bubble up.\n        this.bubbleUp(this.content.length - 1);\n    },\n\n    pop: function() {\n        // Store the first element so we can return it later.\n        var result = this.content[0];\n        // Get the element at the end of the array.\n        var end = this.content.pop();\n        // If there are any elements left, put the end element at the\n        // start, and let it sink down.\n        if (this.content.length > 0) {\n            this.content[0] = end;\n            this.sinkDown(0);\n        }\n        return result;\n    },\n\n    peek: function() {\n        return this.content[0];\n    },\n\n    remove: function(node) {\n        var len = this.content.length;\n        // To remove a value, we must search through the array to find\n        // it.\n        for (var i = 0; i < len; i++) {\n            if (this.content[i] == node) {\n                // When it is found, the process seen in 'pop' is repeated\n                // to fill up the hole.\n                var end = this.content.pop();\n                if (i != len - 1) {\n                    this.content[i] = end;\n                    if (this.scoreFunction(end) < this.scoreFunction(node))\n                        this.bubbleUp(i);\n                    else\n                        this.sinkDown(i);\n                }\n                return;\n            }\n        }\n        throw new Error(\"Node not found.\");\n    },\n\n    size: function() {\n        return this.content.length;\n    },\n\n    bubbleUp: function(n) {\n        // Fetch the element that has to be moved.\n        var element = this.content[n];\n        // When at 0, an element can not go up any further.\n        while (n > 0) {\n            // Compute the parent element's index, and fetch it.\n            var parentN = Math.floor((n + 1) / 2) - 1,\n                parent = this.content[parentN];\n            // Swap the elements if the parent is greater.\n            if (this.scoreFunction(element) < this.scoreFunction(parent)) {\n                this.content[parentN] = element;\n                this.content[n] = parent;\n                // Update 'n' to continue at the new position.\n                n = parentN;\n            }\n            // Found a parent that is less, no need to move it further.\n            else {\n                break;\n            }\n        }\n    },\n\n    sinkDown: function(n) {\n        // Look up the target element and its score.\n        var length = this.content.length,\n            element = this.content[n],\n            elemScore = this.scoreFunction(element);\n\n        while(true) {\n            // Compute the indices of the child elements.\n            var child2N = (n + 1) * 2, child1N = child2N - 1;\n            // This is used to store the new position of the element,\n            // if any.\n            var swap = null;\n            // If the first child exists (is inside the array)...\n            if (child1N < length) {\n                // Look it up and compute its score.\n                var child1 = this.content[child1N],\n                    child1Score = this.scoreFunction(child1);\n                // If the score is less than our element's, we need to swap.\n                if (child1Score < elemScore)\n                    swap = child1N;\n            }\n            // Do the same checks for the other child.\n            if (child2N < length) {\n                var child2 = this.content[child2N],\n                    child2Score = this.scoreFunction(child2);\n                if (child2Score < (swap == null ? elemScore : child1Score)){\n                    swap = child2N;\n                }\n            }\n\n            // If the element needs to be moved, swap it, and continue.\n            if (swap != null) {\n                this.content[n] = this.content[swap];\n                this.content[swap] = element;\n                n = swap;\n            }\n            // Otherwise, we are done.\n            else {\n                break;\n            }\n        }\n    }\n};\n\nthis.kdTree = kdTree;\n\nexports.kdTree = kdTree;\nexports.BinaryHeap = BinaryHeap;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-knn/src/kdtree.js\n ** module id = 103\n ** module chunks = 0\n **/","module.exports = exports = require('./naiveBayes').NaiveBayes;\nexports.separateClasses = require('./naiveBayes').separateClasses;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-naivebayes/src/index.js\n ** module id = 104\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('ml-matrix');\nvar Stat = require('ml-stat');\n\nmodule.exports.NaiveBayes = NaiveBayes;\nmodule.exports.separateClasses = separateClasses;\n\n/**\n * Constructor for the Naive Bayes classifier, the parameters here is just for loading purposes.\n *\n * @param reload\n * @param model\n * @constructor\n */\nfunction NaiveBayes(reload, model) {\n    if(reload) {\n        this.means = model.means;\n        this.calculateProbabilities = model.calculateProbabilities;\n    }\n}\n\n/**\n * Function that trains the classifier with a matrix that represents the training set and an array that\n * represents the label of each row in the training set. the labels must be numbers between 0 to n-1 where\n * n represents the number of classes.\n *\n * WARNING: in the case that one class, all the cases in one or more features have the same value, the\n * Naive Bayes classifier will not work well.\n * @param trainingSet\n * @param trainingLabels\n */\nNaiveBayes.prototype.train = function (trainingSet, trainingLabels) {\n    var C1 = Math.sqrt(2*Math.PI); // constant to precalculate the squared root\n    if(!Matrix.isMatrix(trainingSet)) var X = Matrix(trainingSet);\n    else X = trainingSet.clone();\n\n    if(X.rows !== trainingLabels.length)\n        throw new RangeError(\"the size of the training set and the training labels must be the same.\");\n\n    var separatedClasses = separateClasses(trainingSet, trainingLabels);\n    var calculateProbabilities = new Array(separatedClasses.length);\n    this.means = new Array(separatedClasses.length);\n    for(var i = 0; i < separatedClasses.length; ++i) {\n        var means = Stat.matrix.mean(separatedClasses[i]);\n        var std = Stat.matrix.standardDeviation(separatedClasses[i], means);\n\n        var logPriorProbability = Math.log(separatedClasses[i].rows / X.rows);\n        calculateProbabilities[i] = new Array(means.length + 1);\n\n        calculateProbabilities[i][0] = logPriorProbability;\n        for(var j = 1; j < means.length + 1; ++j) {\n            var currentStd = std[j - 1];\n            calculateProbabilities[i][j] = [(1 / (C1 * currentStd)), -2*currentStd*currentStd];\n        }\n\n        this.means[i] = means;\n    }\n\n    this.calculateProbabilities = calculateProbabilities;\n};\n\n/**\n * function that predicts each row of the dataset (must be a matrix).\n *\n * @param dataset\n * @returns {Array}\n */\nNaiveBayes.prototype.predict = function (dataset) {\n    if(dataset[0].length === this.calculateProbabilities[0].length)\n        throw new RangeError('the dataset must have the same features as the training set');\n\n    var predictions = new Array(dataset.length);\n\n    for(var i = 0; i < predictions.length; ++i) {\n        predictions[i] = getCurrentClass(dataset[i], this.means, this.calculateProbabilities);\n    }\n\n    return predictions;\n};\n\n/**\n * Function the retrieves a prediction with one case.\n *\n * @param currentCase\n * @param mean - Precalculated means of each class trained\n * @param classes - Precalculated value of each class (Prior probability and probability function of each feature)\n * @returns {number}\n */\nfunction getCurrentClass(currentCase, mean, classes) {\n    var maxProbability = 0;\n    var predictedClass = -1;\n\n    // going through all precalculated values for the classes\n    for(var i = 0; i < classes.length; ++i) {\n        var currentProbability = classes[i][0]; // initialize with the prior probability\n        for(var j = 1; j < classes[0][1].length + 1; ++j) {\n            currentProbability += calculateLogProbability(currentCase[j - 1], mean[i][j - 1], classes[i][j][0], classes[i][j][1]);\n        }\n\n        currentProbability = Math.exp(currentProbability);\n        if(currentProbability > maxProbability) {\n            maxProbability = currentProbability;\n            predictedClass = i;\n        }\n    }\n\n    return predictedClass;\n}\n\n/**\n * Function that export the NaiveBayes model.\n * @returns {{modelName: string, means: *, calculateProbabilities: *}}\n */\nNaiveBayes.prototype.export = function () {\n    return {\n        modelName: \"NaiveBayes\",\n        means: this.means,\n        calculateProbabilities: this.calculateProbabilities\n    };\n};\n\n/**\n * Function that create a Naive Bayes classifier with the given model.\n * @param model\n * @returns {NaiveBayes}\n */\nNaiveBayes.load = function (model) {\n    if(model.modelName !== 'NaiveBayes')\n        throw new RangeError(\"The given model is invalid!\");\n\n    return new NaiveBayes(true, model);\n};\n\n/**\n * function that retrieves the probability of the feature given the class.\n * @param value - value of the feature.\n * @param mean - mean of the feature for the given class.\n * @param C1 - precalculated value of (1 / (sqrt(2*pi) * std)).\n * @param C2 - precalculated value of (2 * std^2) for the denominator of the exponential.\n * @returns {number}\n */\nfunction calculateLogProbability(value, mean, C1, C2) {\n    var value = value - mean;\n    return Math.log(C1 * Math.exp((value * value) / C2))\n}\n\n/**\n * Function that retuns an array of matrices of the cases that belong to each class.\n * @param X - dataset\n * @param y - predictions\n * @returns {Array}\n */\nfunction separateClasses(X, y) {\n    var features = X.columns;\n\n    var classes = 0;\n    var totalPerClasses = new Array(100); // max upperbound of classes\n    for (var i = 0; i < y.length; i++) {\n        if(totalPerClasses[y[i]] === undefined) {\n            totalPerClasses[y[i]] = 0;\n            classes++;\n        }\n        totalPerClasses[y[i]]++;\n    }\n    var separatedClasses = new Array(classes);\n    var currentIndex = new Array(classes);\n    for(i = 0; i < classes; ++i) {\n        separatedClasses[i] = new Matrix(totalPerClasses[i], features);\n        currentIndex[i] = 0;\n    }\n    for(i = 0; i < X.rows; ++i) {\n        separatedClasses[y[i]].setRow(currentIndex[y[i]], X.getRow(i));\n        currentIndex[y[i]]++;\n    }\n    return separatedClasses;\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-naivebayes/src/naiveBayes.js\n ** module id = 105\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./matrix');\nmodule.exports.Decompositions = module.exports.DC = require('./decompositions');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-naivebayes/~/ml-matrix/src/index.js\n ** module id = 106\n ** module chunks = 0\n **/","'use strict';\n\nvar Asplice = Array.prototype.splice,\n    Aconcat = Array.prototype.concat;\n\n// For performance : http://jsperf.com/clone-array-slice-vs-while-vs-for\nfunction slice(arr) {\n    var i = 0,\n        ii = arr.length,\n        result = new Array(ii);\n    for (; i < ii; i++) {\n        result[i] = arr[i];\n    }\n    return result;\n}\n\n/**\n * Real matrix.\n * @constructor\n * @param {number|Array} nRows - Number of rows of the new matrix or a 2D array containing the data.\n * @param {number|boolean} [nColumns] - Number of columns of the new matrix or a boolean specifying if the input array should be cloned\n */\nfunction Matrix(nRows, nColumns) {\n    var i = 0, rows, columns, matrix, newInstance;\n    if (Array.isArray(nRows)) {\n        newInstance = nColumns;\n        matrix = newInstance ? slice(nRows) : nRows;\n        nRows = matrix.length;\n        nColumns = matrix[0].length;\n        if (typeof nColumns === 'undefined') {\n            throw new TypeError('Data must be a 2D array');\n        }\n        if (nRows > 0 && nColumns > 0) {\n            for (; i < nRows; i++) {\n                if (matrix[i].length !== nColumns) {\n                    throw new RangeError('Inconsistent array dimensions');\n                } else if (newInstance) {\n                    matrix[i] = slice(matrix[i]);\n                }\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else if (typeof nRows === 'number') { // Create empty matrix\n        if (nRows > 0 && nColumns > 0) {\n            matrix = new Array(nRows);\n            for (; i < nRows; i++) {\n                matrix[i] = new Array(nColumns);\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else {\n        throw new TypeError('Invalid arguments');\n    }\n\n    Object.defineProperty(matrix, 'rows', {writable: true, value: nRows});\n    Object.defineProperty(matrix, 'columns', {writable: true, value: nColumns});\n\n    matrix.__proto__ = Matrix.prototype;\n\n    return matrix;\n}\n\n/**\n * Constructs a Matrix with the chosen dimensions from a 1D array.\n * @param {number} newRows - Number of rows\n * @param {number} newColumns - Number of columns\n * @param {Array} newData - A 1D array containing data for the matrix\n * @returns {Matrix} - The new matrix\n */\nMatrix.from1DArray = function from1DArray(newRows, newColumns, newData) {\n    var length, data, i = 0;\n\n    length = newRows * newColumns;\n    if (length !== newData.length)\n        throw new RangeError('Data length does not match given dimensions');\n\n    data = new Array(newRows);\n    for (; i < newRows; i++) {\n        data[i] = newData.slice(i * newColumns, (i + 1) * newColumns);\n    }\n    return new Matrix(data);\n};\n\n/**\n * Creates a row vector, a matrix with only one row.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.rowVector = function rowVector(newData) {\n    return new Matrix([newData]);\n};\n\n/**\n * Creates a column vector, a matrix with only one column.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.columnVector = function columnVector(newData) {\n    var l = newData.length, vector = new Array(l);\n    for (var i = 0; i < l; i++)\n        vector[i] = [newData[i]];\n    return new Matrix(vector);\n};\n\n/**\n * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.empty = function empty(rows, columns) {\n    return new Matrix(rows, columns);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to zero.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.zeros = function zeros(rows, columns) {\n    return Matrix.empty(rows, columns).fill(0);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to one.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.ones = function ones(rows, columns) {\n    return Matrix.empty(rows, columns).fill(1);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be randomly set using Math.random().\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} The new matrix\n */\nMatrix.rand = function rand(rows, columns) {\n    var matrix = Matrix.empty(rows, columns);\n    for (var i = 0, ii = matrix.rows; i < ii; i++) {\n        for (var j = 0, jj = matrix.columns; j < jj; j++) {\n            matrix[i][j] = Math.random();\n        }\n    }\n    return matrix;\n};\n\n/**\n * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and other will be 0.\n * @param {number} n - Number of rows and columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.eye = function eye(n) {\n    var matrix = Matrix.zeros(n, n), l = matrix.rows;\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = 1;\n    }\n    return matrix;\n};\n\n/**\n * Creates a diagonal matrix based on the given array.\n * @param {Array} data - Array containing the data for the diagonal\n * @returns {Matrix} - The new matrix\n */\nMatrix.diag = function diag(data) {\n    var l = data.length, matrix = Matrix.zeros(l, l);\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = data[i];\n    }\n    return matrix;\n};\n\n/**\n * Creates an array of indices between two values\n * @param {number} from\n * @param {number} to\n * @returns {Array}\n */\nMatrix.indices = function indices(from, to) {\n    var vector = new Array(to - from);\n    for (var i = 0; i < vector.length; i++)\n        vector[i] = from++;\n    return vector;\n};\n\n// TODO DOC\nMatrix.stack = function stack(arg1) {\n    var i, j, k;\n    if (Matrix.isMatrix(arg1)) {\n        var rows = 0,\n            cols = 0;\n        for (i = 0; i < arguments.length; i++) {\n            rows += arguments[i].rows;\n            if (arguments[i].columns > cols)\n                cols = arguments[i].columns;\n        }\n\n        var r = Matrix.zeros(rows, cols);\n        var c = 0;\n        for (i = 0; i < arguments.length; i++) {\n            var current = arguments[i];\n            for (j = 0; j < current.rows; j++) {\n                for (k = 0; k < current.columns; k++)\n                    r[c][k] = current[j][k];\n                c++;\n            }\n        }\n        return r;\n    }\n    else if (Array.isArray(arg1)) {\n        var matrix = Matrix.empty(arguments.length, arg1.length);\n        for (i = 0; i < arguments.length; i++)\n            matrix.setRow(i, arguments[i]);\n        return matrix;\n    }\n};\n\n// TODO DOC\nMatrix.expand = function expand(base, count) {\n    var expansion = [];\n    for (var i = 0; i < count.length; i++)\n        for (var j = 0; j < count[i]; j++)\n            expansion.push(base[i]);\n    return new Matrix(expansion);\n};\n\n/**\n * Check that the provided value is a Matrix and tries to instantiate one if not\n * @param value - The value to check\n * @returns {Matrix}\n * @throws {TypeError}\n */\nMatrix.checkMatrix = function checkMatrix(value) {\n    if (!value) {\n        throw new TypeError('Argument has to be a matrix');\n    }\n    if (value.klass !== 'Matrix') {\n        value = new Matrix(value);\n    }\n    return value;\n};\n\n/**\n * Returns true if the argument is a Matrix, false otherwise\n * @param value - The value to check\n * @returns {boolean}\n */\nMatrix.isMatrix = function isMatrix(value) {\n    return value ? value.klass === 'Matrix' : false;\n};\n\n/**\n * @property {string} - The name of this class.\n */\nObject.defineProperty(Matrix.prototype, 'klass', {\n    get: function klass() {\n        return 'Matrix';\n    }\n});\n\n/**\n * @property {number} - The number of elements in the matrix.\n */\nObject.defineProperty(Matrix.prototype, 'size', {\n    get: function size() {\n        return this.rows * this.columns;\n    }\n});\n\n/**\n * @private\n * Internal check that a row index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkRowIndex = function checkRowIndex(index) {\n    if (index < 0 || index > this.rows - 1)\n        throw new RangeError('Row index out of range.');\n};\n\n/**\n * @private\n * Internal check that a column index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkColumnIndex = function checkColumnIndex(index) {\n    if (index < 0 || index > this.columns - 1)\n        throw new RangeError('Column index out of range.');\n};\n\n/**\n * @private\n * Internal check that two matrices have the same dimensions\n * @param {Matrix} otherMatrix\n */\nMatrix.prototype.checkDimensions = function checkDimensions(otherMatrix) {\n    if ((this.rows !== otherMatrix.rows) || (this.columns !== otherMatrix.columns))\n        throw new RangeError('Matrices dimensions must be equal.');\n};\n\n/**\n * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n * @returns {Matrix} this\n */\nMatrix.prototype.apply = function apply(callback) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            callback.call(this, i, j);\n        }\n    }\n    return this;\n};\n\n/**\n * Creates an exact and independent copy of the matrix\n * @returns {Matrix}\n */\nMatrix.prototype.clone = function clone() {\n    return new Matrix(this.to2DArray());\n};\n\n/**\n * Returns a new 1D array filled row by row with the matrix values\n * @returns {Array}\n */\nMatrix.prototype.to1DArray = function to1DArray() {\n    return Aconcat.apply([], this);\n};\n\n/**\n * Returns a 2D array containing a copy of the data\n * @returns {Array}\n */\nMatrix.prototype.to2DArray = function to2DArray() {\n    var l = this.rows, copy = new Array(l);\n    for (var i = 0; i < l; i++) {\n        copy[i] = slice(this[i]);\n    }\n    return copy;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row\n */\nMatrix.prototype.isRowVector = function isRowVector() {\n    return this.rows === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one column\n */\nMatrix.prototype.isColumnVector = function isColumnVector() {\n    return this.columns === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row or one column\n */\nMatrix.prototype.isVector = function isVector() {\n    return (this.rows === 1) || (this.columns === 1);\n};\n\n/**\n * @returns {boolean} true if the matrix has the same number of rows and columns\n */\nMatrix.prototype.isSquare = function isSquare() {\n    return this.rows === this.columns;\n};\n\n/**\n * @returns {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n */\nMatrix.prototype.isSymmetric = function isSymmetric() {\n    if (this.isSquare()) {\n        var l = this.rows;\n        for (var i = 0; i < l; i++) {\n            for (var j = 0; j <= i; j++) {\n                if (this[i][j] !== this[j][i]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    return false;\n};\n\n/**\n * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @param {number} value - The new value for the element\n * @returns {Matrix} this\n */\nMatrix.prototype.set = function set(rowIndex, columnIndex, value) {\n    this[rowIndex][columnIndex] = value;\n    return this;\n};\n\n/**\n * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @returns {number}\n */\nMatrix.prototype.get = function get(rowIndex, columnIndex) {\n    return this[rowIndex][columnIndex];\n};\n\n/**\n * Fills the matrix with a given value. All elements will be set to this value.\n * @param {number} value - New value\n * @returns {Matrix} this\n */\nMatrix.prototype.fill = function fill(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = value;\n        }\n    }\n    return this;\n};\n\n/**\n * Negates the matrix. All elements will be multiplied by (-1)\n * @returns {Matrix} this\n */\nMatrix.prototype.neg = function neg() {\n    return this.mulS(-1);\n};\n\n/**\n * Adds a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number')\n        return this.addS(value);\n    value = Matrix.checkMatrix(value);\n        return this.addM(value);\n};\n\n/**\n * Adds a scalar to each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.addS = function addS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += value;\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the value of each element of matrix to the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.addM = function addM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number')\n        return this.subS(value);\n    value = Matrix.checkMatrix(value);\n        return this.subM(value);\n};\n\n/**\n * Subtracts a scalar from each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.subS = function subS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the value of each element of matrix from the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.subM = function subM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number')\n        return this.mulS(value);\n    value = Matrix.checkMatrix(value);\n        return this.mulM(value);\n};\n\n/**\n * Multiplies a scalar with each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulS = function mulS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the value of each element of matrix with the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.mulM = function mulM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides by a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number')\n        return this.divS(value);\n    value = Matrix.checkMatrix(value);\n        return this.divM(value);\n};\n\n/**\n * Divides each element of the matrix by a scalar\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.divS = function divS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Divides each element of this by the corresponding element of matrix\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.divM = function divM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Returns a new array from the given row index\n * @param {number} index - Row index\n * @returns {Array}\n */\nMatrix.prototype.getRow = function getRow(index) {\n    this.checkRowIndex(index);\n    return slice(this[index]);\n};\n\n/**\n * Returns a new row vector from the given row index\n * @param {number} index - Row index\n * @returns {Matrix}\n */\nMatrix.prototype.getRowVector = function getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n};\n\n/**\n * Sets a row at the given index\n * @param {number} index - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setRow = function setRow(index, array) {\n    this.checkRowIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    this[index] = slice(array);\n    return this;\n};\n\n/**\n * Removes a row from the given index\n * @param {number} index - Row index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeRow = function removeRow(index) {\n    this.checkRowIndex(index);\n    if (this.rows === 1)\n        throw new RangeError('A matrix cannot have less than one row');\n    Asplice.call(this, index, 1);\n    this.rows -= 1;\n    return this;\n};\n\n/**\n * Adds a row at the given index\n * @param {number} [index = this.rows] - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRow = function addRow(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.rows;\n    }\n    if (index < 0 || index > this.rows)\n        throw new RangeError('Row index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    Asplice.call(this, index, 0, slice(array));\n    this.rows += 1;\n    return this;\n};\n\n/**\n * Swaps two rows\n * @param {number} row1 - First row index\n * @param {number} row2 - Second row index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapRows = function swapRows(row1, row2) {\n    this.checkRowIndex(row1);\n    this.checkRowIndex(row2);\n    var temp = this[row1];\n    this[row1] = this[row2];\n    this[row2] = temp;\n    return this;\n};\n\n/**\n * Returns a new array from the given column index\n * @param {number} index - Column index\n * @returns {Array}\n */\nMatrix.prototype.getColumn = function getColumn(index) {\n    this.checkColumnIndex(index);\n    var l = this.rows, column = new Array(l);\n    for (var i = 0; i < l; i++) {\n        column[i] = this[i][index];\n    }\n    return column;\n};\n\n/**\n * Returns a new column vector from the given column index\n * @param {number} index - Column index\n * @returns {Matrix}\n */\nMatrix.prototype.getColumnVector = function getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n};\n\n/**\n * Sets a column at the given index\n * @param {number} index - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setColumn = function setColumn(index, array) {\n    this.checkColumnIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i][index] = array[i];\n    }\n    return this;\n};\n\n/**\n * Removes a column from the given index\n * @param {number} index - Column index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeColumn = function removeColumn(index) {\n    this.checkColumnIndex(index);\n    if (this.columns === 1)\n        throw new RangeError('A matrix cannot have less than one column');\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].splice(index, 1);\n    }\n    this.columns -= 1;\n    return this;\n};\n\n/**\n * Adds a column at the given index\n * @param {number} [index = this.columns] - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumn = function addColumn(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.columns;\n    }\n    if (index < 0 || index > this.columns)\n        throw new RangeError('Column index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i].splice(index, 0, array[i]);\n    }\n    this.columns += 1;\n    return this;\n};\n\n/**\n * Swaps two columns\n * @param {number} column1 - First column index\n * @param {number} column2 - Second column index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapColumns = function swapColumns(column1, column2) {\n    this.checkRowIndex(column1);\n    this.checkRowIndex(column2);\n    var l = this.rows, temp, row;\n    for (var i = 0; i < l; i++) {\n        row = this[i];\n        temp = row[column1];\n        row[column1] = row[column2];\n        row[column2] = temp;\n    }\n    return this;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkRowVector = function checkRowVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.columns)\n        throw new RangeError('vector size must be the same as the number of columns');\n    return vector;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkColumnVector = function checkColumnVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.rows)\n        throw new RangeError('vector size must be the same as the number of rows');\n    return vector;\n};\n\n/**\n * Adds the values of a vector to each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRowVector = function addRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subRowVector = function subRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRowVector = function mulRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each row by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divRowVector = function divRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the values of a vector to each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumnVector = function addColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subColumnVector = function subColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumnVector = function mulColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each column by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divColumnVector = function divColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a row with a scalar\n * @param {number} index - Row index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRow = function mulRow(index, value) {\n    this.checkRowIndex(index);\n    var i = 0, l = this.columns;\n    for (; i < l; i++) {\n        this[index][i] *= value;\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a column with a scalar\n * @param {number} index - Column index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumn = function mulColumn(index, value) {\n    this.checkColumnIndex(index);\n    var i = 0, l = this.rows;\n    for (; i < l; i++) {\n        this[i][index] *= value;\n    }\n};\n\n/**\n * A matrix index\n * @typedef {Object} MatrixIndex\n * @property {number} row\n * @property {number} column\n */\n\n/**\n * Returns the maximum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.max = function max() {\n    var v = -Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxIndex = function maxIndex() {\n    var v = -Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.min = function min() {\n    var v = Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minIndex = function minIndex() {\n    var v = Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.maxRow = function maxRow(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxRowIndex = function maxRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    var idx = {\n            row: index\n        };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.minRow = function minRow(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minRowIndex = function minRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: index,\n        column: 0\n    };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.maxColumn = function maxColumn(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxColumnIndex = function maxColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.minColumn = function minColumn(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minColumnIndex = function minColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns an array containing the diagonal values of the matrix\n * @returns {Array}\n */\nMatrix.prototype.diag = function diag() {\n    if (!this.isSquare())\n        throw new TypeError('Only square matrices have a diagonal.');\n    var diag = new Array(this.rows);\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        diag[i] = this[i][i];\n    }\n    return diag;\n};\n\n/**\n * Returns the sum of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.sum = function sum() {\n    var v = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            v += this[i][j];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the mean of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.mean = function mean() {\n    return this.sum() / this.size;\n};\n\n/**\n * Returns the product of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.prod = function prod() {\n    var prod = 1;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            prod *= this[i][j];\n        }\n    }\n    return prod;\n};\n\n/**\n * Computes the cumulative sum of the matrix elements (in place, row by row)\n * @returns {Matrix} this\n */\nMatrix.prototype.cumulativeSum = function cumulativeSum() {\n    var sum = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            sum += this[i][j];\n            this[i][j] = sum;\n        }\n    }\n    return this;\n};\n\n/**\n * Computes the dot (scalar) product between the matrix and another\n * @param {Matrix} other vector\n * @returns {number}\n */\nMatrix.prototype.dot = function dot(other) {\n    if (this.size !== other.size)\n        throw new RangeError('vectors do not have the same size');\n    var vector1 = this.to1DArray();\n    var vector2 = other.to1DArray();\n    var dot = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        dot += vector1[i] * vector2[i];\n    }\n    return dot;\n};\n\n/**\n * Returns the matrix product between this and other\n * @returns {Matrix}\n */\nMatrix.prototype.mmul = function mmul(other) {\n    if (!Matrix.isMatrix(other))\n        throw new TypeError('parameter \"other\" must be a matrix');\n    if (this.columns !== other.rows)\n        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n\n    var m = this.rows, n = this.columns, p = other.columns;\n    var result = new Matrix(m, p);\n\n    var Bcolj = new Array(n);\n    var i, j, k;\n    for (j = 0; j < p; j++) {\n        for (k = 0; k < n; k++)\n            Bcolj[k] = other[k][j];\n\n        for (i = 0; i < m; i++) {\n            var Arowi = this[i];\n\n            var s = 0;\n            for (k = 0; k < n; k++)\n                s += Arowi[k] * Bcolj[k];\n\n            result[i][j] = s;\n        }\n    }\n    return result;\n};\n\n/**\n * Sorts the rows (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortRows = function sortRows(compareFunction) {\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].sort(compareFunction);\n    }\n    return this;\n};\n\n/**\n * Sorts the columns (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortColumns = function sortColumns(compareFunction) {\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n};\n\n/**\n * Transposes the matrix and returns a new one containing the result\n * @returns {Matrix}\n */\nMatrix.prototype.transpose = function transpose() {\n    var result = new Matrix(this.columns, this.rows);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[j][i] = this[i][j];\n        }\n    }\n    return result;\n};\n\n/**\n * Returns a subset of the matrix\n * @param {number} startRow - First row index\n * @param {number} endRow - Last row index\n * @param {number} startColumn - First column index\n * @param {number} endColumn - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrix = function subMatrix(startRow, endRow, startColumn, endColumn) {\n    if ((startRow > endRow) || (startColumn > endColumn) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range');\n    var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n    for (var i = startRow; i <= endRow; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            newMatrix[i - startRow][j - startColumn] = this[i][j];\n        }\n    }\n    return newMatrix;\n};\n\n/**\n * Returns a subset of the matrix based on an array of row indices\n * @param {Array} indices - Array containing the row indices\n * @param {number} [startColumn = 0] - First column index\n * @param {number} [endColumn = this.columns-1] - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixRow = function subMatrixRow(indices, startColumn, endColumn) {\n    if (typeof startColumn === 'undefined') {\n        startColumn = 0;\n        endColumn = this.columns - 1;\n    } else if (typeof endColumn === 'undefined') {\n        endColumn = this.columns - 1;\n    }\n    if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, rows = this.rows,\n        X = new Matrix(l, endColumn - startColumn + 1);\n    for (var i = 0; i < l; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            if ((indices[i] < 0) || (indices[i] >= rows))\n                throw new RangeError('Argument out of range.');\n            X[i][j - startColumn] = this[indices[i]][j];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns a subset of the matrix based on an array of column indices\n * @param {Array} indices - Array containing the column indices\n * @param {number} [startRow = 0] - First row index\n * @param {number} [endRow = this.rows-1] - Last row index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixColumn = function subMatrixColumn(indices, startRow, endRow) {\n    if (typeof startRow === 'undefined') {\n        startRow = 0;\n        endRow = this.rows - 1;\n    } else if (typeof endRow === 'undefined') {\n        endRow = this.rows - 1;\n    }\n    if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, columns = this.columns,\n        X = new Matrix(endRow - startRow + 1, l);\n    for (var i = 0; i < l; i++) {\n        for (var j = startRow; j <= endRow; j++) {\n            if ((indices[i] < 0) || (indices[i] >= columns))\n                throw new RangeError('Argument out of range.');\n            X[j - startRow][i] = this[j][indices[i]];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns the trace of the matrix (sum of the diagonal elements)\n * @returns {number}\n */\nMatrix.prototype.trace = function trace() {\n    if (!this.isSquare())\n        throw new TypeError('The matrix is not square');\n    var trace = 0, i = 0, l = this.rows;\n    for (; i < l; i++) {\n        trace += this[i][i];\n    }\n    return trace;\n};\n\n/**\n * Sets each element of the matrix to its absolute value\n * @returns {Matrix} this\n */\nMatrix.prototype.abs = function abs() {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = Math.abs(this[i][j]);\n        }\n    }\n};\n\nmodule.exports = Matrix;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-naivebayes/~/ml-matrix/src/matrix.js\n ** module id = 107\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('./matrix');\n\nvar SingularValueDecomposition = require('./dc/svd');\nvar EigenvalueDecomposition = require('./dc/evd');\nvar LuDecomposition = require('./dc/lu');\nvar QrDecomposition = require('./dc/qr');\nvar CholeskyDecomposition = require('./dc/cholesky');\n\nfunction inverse(matrix) {\n    return solve(matrix, Matrix.eye(matrix.rows));\n}\n\nMatrix.prototype.inverse = function () {\n    return inverse(this);\n};\n\nfunction solve(leftHandSide, rightHandSide) {\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n}\n\nMatrix.prototype.solve = function (other) {\n    return solve(this, other);\n};\n\nmodule.exports = {\n    SingularValueDecomposition: SingularValueDecomposition,\n    SVD: SingularValueDecomposition,\n    EigenvalueDecomposition: EigenvalueDecomposition,\n    EVD: EigenvalueDecomposition,\n    LuDecomposition: LuDecomposition,\n    LU: LuDecomposition,\n    QrDecomposition: QrDecomposition,\n    QR: QrDecomposition,\n    CholeskyDecomposition: CholeskyDecomposition,\n    CHO: CholeskyDecomposition,\n    inverse: inverse,\n    solve: solve\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-naivebayes/~/ml-matrix/src/decompositions.js\n ** module id = 108\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\nfunction SingularValueDecomposition(value, options) {\n    if (!(this instanceof SingularValueDecomposition)) {\n        return new SingularValueDecomposition(value, options);\n    }\n    value = Matrix.checkMatrix(value);\n\n    options = options || {};\n\n    var a = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        nu = Math.min(m, n);\n\n    var wantu = true, wantv = true;\n    if (options.computeLeftSingularVectors === false)\n        wantu = false;\n    if (options.computeRightSingularVectors === false)\n        wantv = false;\n    var autoTranspose = options.autoTranspose === true;\n\n    var swapped = false;\n    if (m < n) {\n        if (!autoTranspose) {\n            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n        } else {\n            a = a.transpose();\n            m = a.rows;\n            n = a.columns;\n            swapped = true;\n            var aux = wantu;\n            wantu = wantv;\n            wantv = aux;\n        }\n    }\n\n    var s = new Array(Math.min(m + 1, n)),\n        U = Matrix.zeros(m, nu),\n        V = Matrix.zeros(n, n),\n        e = new Array(n),\n        work = new Array(m);\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n\n    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\n    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n        if (k < nct) {\n            s[k] = 0;\n            for (i = k; i < m; i++) {\n                s[k] = hypotenuse(s[k], a[i][k]);\n            }\n            if (s[k] !== 0) {\n                if (a[k][k] < 0) {\n                    s[k] = -s[k];\n                }\n                for (i = k; i < m; i++) {\n                    a[i][k] /= s[k];\n                }\n                a[k][k] += 1;\n            }\n            s[k] = -s[k];\n        }\n\n        for (j = k + 1; j < n; j++) {\n            if ((k < nct) && (s[k] !== 0)) {\n                t = 0;\n                for (i = k; i < m; i++) {\n                    t += a[i][k] * a[i][j];\n                }\n                t = -t / a[k][k];\n                for (i = k; i < m; i++) {\n                    a[i][j] += t * a[i][k];\n                }\n            }\n            e[j] = a[k][j];\n        }\n\n        if (wantu && (k < nct)) {\n            for (i = k; i < m; i++) {\n                U[i][k] = a[i][k];\n            }\n        }\n\n        if (k < nrt) {\n            e[k] = 0;\n            for (i = k + 1; i < n; i++) {\n                e[k] = hypotenuse(e[k], e[i]);\n            }\n            if (e[k] !== 0) {\n                if (e[k + 1] < 0)\n                    e[k] = -e[k];\n                for (i = k + 1; i < n; i++) {\n                    e[i] /= e[k];\n                }\n                e[k + 1] += 1;\n            }\n            e[k] = -e[k];\n            if ((k + 1 < m) && (e[k] !== 0)) {\n                for (i = k + 1; i < m; i++) {\n                    work[i] = 0;\n                }\n                for (j = k + 1; j < n; j++) {\n                    for (i = k + 1; i < m; i++) {\n                        work[i] += e[j] * a[i][j];\n                    }\n                }\n                for (j = k + 1; j < n; j++) {\n                    t = -e[j] / e[k + 1];\n                    for (i = k + 1; i < m; i++) {\n                        a[i][j] += t * work[i];\n                    }\n                }\n            }\n            if (wantv) {\n                for (i = k + 1; i < n; i++) {\n                    V[i][k] = e[i];\n                }\n            }\n        }\n    }\n\n    p = Math.min(n, m + 1);\n    if (nct < n) {\n        s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n        s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n        e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n        for (j = nct; j < nu; j++) {\n            for (i = 0; i < m; i++) {\n                U[i][j] = 0;\n            }\n            U[j][j] = 1;\n        }\n        for (k = nct - 1; k >= 0; k--) {\n            if (s[k] !== 0) {\n                for (j = k + 1; j < nu; j++) {\n                    t = 0;\n                    for (i = k; i < m; i++) {\n                        t += U[i][k] * U[i][j];\n                    }\n                    t = -t / U[k][k];\n                    for (i = k; i < m; i++) {\n                        U[i][j] += t * U[i][k];\n                    }\n                }\n                for (i = k; i < m; i++) {\n                    U[i][k] = -U[i][k];\n                }\n                U[k][k] = 1 + U[k][k];\n                for (i = 0; i < k - 1; i++) {\n                    U[i][k] = 0;\n                }\n            } else {\n                for (i = 0; i < m; i++) {\n                    U[i][k] = 0;\n                }\n                U[k][k] = 1;\n            }\n        }\n    }\n\n    if (wantv) {\n        for (k = n - 1; k >= 0; k--) {\n            if ((k < nrt) && (e[k] !== 0)) {\n                for (j = k + 1; j < n; j++) {\n                    t = 0;\n                    for (i = k + 1; i < n; i++) {\n                        t += V[i][k] * V[i][j];\n                    }\n                    t = -t / V[k + 1][k];\n                    for (i = k + 1; i < n; i++) {\n                        V[i][j] += t * V[i][k];\n                    }\n                }\n            }\n            for (i = 0; i < n; i++) {\n                V[i][k] = 0;\n            }\n            V[k][k] = 1;\n        }\n    }\n\n    var pp = p - 1,\n        iter = 0,\n        eps = Math.pow(2, -52);\n    while (p > 0) {\n        for (k = p - 2; k >= -1; k--) {\n            if (k === -1) {\n                break;\n            }\n            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n                e[k] = 0;\n                break;\n            }\n        }\n        if (k === p - 2) {\n            kase = 4;\n        } else {\n            for (ks = p - 1; ks >= k; ks--) {\n                if (ks === k) {\n                    break;\n                }\n                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n                if (Math.abs(s[ks]) <= eps * t) {\n                    s[ks] = 0;\n                    break;\n                }\n            }\n            if (ks === k) {\n                kase = 3;\n            } else if (ks === p - 1) {\n                kase = 1;\n            } else {\n                kase = 2;\n                k = ks;\n            }\n        }\n\n        k++;\n\n        switch (kase) {\n            case 1: {\n                f = e[p - 2];\n                e[p - 2] = 0;\n                for (j = p - 2; j >= k; j--) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    if (j !== k) {\n                        f = -sn * e[j - 1];\n                        e[j - 1] = cs * e[j - 1];\n                    }\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][p - 1];\n                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                            V[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 2 : {\n                f = e[k - 1];\n                e[k - 1] = 0;\n                for (j = k; j < p; j++) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    f = -sn * e[j];\n                    e[j] = cs * e[j];\n                    if (wantu) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][k - 1];\n                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 3 : {\n                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n                sp = s[p - 1] / scale;\n                spm1 = s[p - 2] / scale;\n                epm1 = e[p - 2] / scale;\n                sk = s[k] / scale;\n                ek = e[k] / scale;\n                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n                c = (sp * epm1) * (sp * epm1);\n                shift = 0;\n                if ((b !== 0) || (c !== 0)) {\n                    shift = Math.sqrt(b * b + c);\n                    if (b < 0) {\n                        shift = -shift;\n                    }\n                    shift = c / (b + shift);\n                }\n                f = (sk + sp) * (sk - sp) + shift;\n                g = sk * ek;\n                for (j = k; j < p - 1; j++) {\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    if (j !== k) {\n                        e[j - 1] = t;\n                    }\n                    f = cs * s[j] + sn * e[j];\n                    e[j] = cs * e[j] - sn * s[j];\n                    g = sn * s[j + 1];\n                    s[j + 1] = cs * s[j + 1];\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][j + 1];\n                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                            V[i][j] = t;\n                        }\n                    }\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    s[j] = t;\n                    f = cs * e[j] + sn * s[j + 1];\n                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n                    g = sn * e[j + 1];\n                    e[j + 1] = cs * e[j + 1];\n                    if (wantu && (j < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][j + 1];\n                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                e[p - 2] = f;\n                iter = iter + 1;\n                break;\n            }\n            case 4: {\n                if (s[k] <= 0) {\n                    s[k] = (s[k] < 0 ? -s[k] : 0);\n                    if (wantv) {\n                        for (i = 0; i <= pp; i++) {\n                            V[i][k] = -V[i][k];\n                        }\n                    }\n                }\n                while (k < pp) {\n                    if (s[k] >= s[k + 1]) {\n                        break;\n                    }\n                    t = s[k];\n                    s[k] = s[k + 1];\n                    s[k + 1] = t;\n                    if (wantv && (k < n - 1)) {\n                        for (i = 0; i < n; i++) {\n                            t = V[i][k + 1];\n                            V[i][k + 1] = V[i][k];\n                            V[i][k] = t;\n                        }\n                    }\n                    if (wantu && (k < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = U[i][k + 1];\n                            U[i][k + 1] = U[i][k];\n                            U[i][k] = t;\n                        }\n                    }\n                    k++;\n                }\n                iter = 0;\n                p--;\n                break;\n            }\n        }\n    }\n\n    if (swapped) {\n        var tmp = V;\n        V = U;\n        U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n}\n\nSingularValueDecomposition.prototype = {\n    get condition() {\n        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    get norm2() {\n        return this.s[0];\n    },\n    get rank() {\n        var eps = Math.pow(2, -52),\n            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n            r = 0,\n            s = this.s;\n        for (var i = 0, ii = s.length; i < ii; i++) {\n            if (s[i] > tol) {\n                r++;\n            }\n        }\n        return r;\n    },\n    get diagonal() {\n        return this.s;\n    },\n    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n    get threshold() {\n        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n    },\n    get leftSingularVectors() {\n        return this.U;\n    },\n    get rightSingularVectors() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        return Matrix.diag(this.s);\n    },\n    solve: function (value) {\n\n        var Y = value,\n            e = this.threshold,\n            scols = this.s.length,\n            Ls = Matrix.zeros(scols, scols),\n            i;\n\n        for (i = 0; i < scols; i++) {\n            if (Math.abs(this.s[i]) <= e) {\n                Ls[i][i] = 0;\n            } else {\n                Ls[i][i] = 1 / this.s[i];\n            }\n        }\n\n\n        var VL = this.V.mmul(Ls),\n            vrows = this.V.rows,\n            urows = this.U.rows,\n            VLU = Matrix.zeros(vrows, urows),\n            j, k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < scols; k++) {\n                    sum += VL[i][k] * this.U[j][k];\n                }\n                VLU[i][j] = sum;\n            }\n        }\n\n        return VLU.mmul(Y);\n    },\n    solveForDiagonal: function (value) {\n        return this.solve(Matrix.diag(value));\n    },\n    inverse: function () {\n        var e = this.threshold,\n            vrows = this.V.rows,\n            vcols = this.V.columns,\n            X = new Matrix(vrows, this.s.length),\n            i, j;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < vcols; j++) {\n                if (Math.abs(this.s[j]) > e) {\n                    X[i][j] = this.V[i][j] / this.s[j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n\n        var urows = this.U.rows,\n            ucols = this.U.columns,\n            Y = new Matrix(vrows, urows),\n            k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < ucols; k++) {\n                    sum += X[i][k] * this.U[j][k];\n                }\n                Y[i][j] = sum;\n            }\n        }\n\n        return Y;\n    }\n};\n\nmodule.exports = SingularValueDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-naivebayes/~/ml-matrix/src/dc/svd.js\n ** module id = 109\n ** module chunks = 0\n **/","'use strict';\n\nexports.hypotenuse = function hypotenuse(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n        r = b / a;\n        return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n        r = a / b;\n        return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-naivebayes/~/ml-matrix/src/dc/util.js\n ** module id = 110\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\nfunction EigenvalueDecomposition(matrix) {\n    if (!(this instanceof EigenvalueDecomposition)) {\n        return new EigenvalueDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n        throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns,\n        V = Matrix.zeros(n, n),\n        d = new Array(n),\n        e = new Array(n),\n        value = matrix,\n        i, j;\n\n    if (matrix.isSymmetric()) {\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                V[i][j] = value[i][j];\n            }\n        }\n        tred2(n, e, d, V);\n        tql2(n, e, d, V);\n    }\n    else {\n        var H = Matrix.zeros(n, n),\n            ort = new Array(n);\n        for (j = 0; j < n; j++) {\n            for (i = 0; i < n; i++) {\n                H[i][j] = value[i][j];\n            }\n        }\n        orthes(n, H, ort, V);\n        hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n}\n\nEigenvalueDecomposition.prototype = {\n    get realEigenvalues() {\n        return this.d;\n    },\n    get imaginaryEigenvalues() {\n        return this.e;\n    },\n    get eigenvectorMatrix() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        var n = this.n,\n            e = this.e,\n            d = this.d,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                X[i][j] = 0;\n            }\n            X[i][i] = d[i];\n            if (e[i] > 0) {\n                X[i][i + 1] = e[i];\n            }\n            else if (e[i] < 0) {\n                X[i][i - 1] = e[i];\n            }\n        }\n        return X;\n    }\n};\n\nfunction tred2(n, e, d, V) {\n\n    var f, g, h, i, j, k,\n        hh, scale;\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n    }\n\n    for (i = n - 1; i > 0; i--) {\n        scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n            scale = scale + Math.abs(d[k]);\n        }\n\n        if (scale === 0) {\n            e[i] = d[i - 1];\n            for (j = 0; j < i; j++) {\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n                V[j][i] = 0;\n            }\n        } else {\n            for (k = 0; k < i; k++) {\n                d[k] /= scale;\n                h += d[k] * d[k];\n            }\n\n            f = d[i - 1];\n            g = Math.sqrt(h);\n            if (f > 0) {\n                g = -g;\n            }\n\n            e[i] = scale * g;\n            h = h - f * g;\n            d[i - 1] = f - g;\n            for (j = 0; j < i; j++) {\n                e[j] = 0;\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                V[j][i] = f;\n                g = e[j] + V[j][j] * f;\n                for (k = j + 1; k <= i - 1; k++) {\n                    g += V[k][j] * d[k];\n                    e[k] += V[k][j] * f;\n                }\n                e[j] = g;\n            }\n\n            f = 0;\n            for (j = 0; j < i; j++) {\n                e[j] /= h;\n                f += e[j] * d[j];\n            }\n\n            hh = f / (h + h);\n            for (j = 0; j < i; j++) {\n                e[j] -= hh * d[j];\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                g = e[j];\n                for (k = j; k <= i - 1; k++) {\n                    V[k][j] -= (f * e[k] + g * d[k]);\n                }\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n            }\n        }\n        d[i] = h;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        V[n - 1][i] = V[i][i];\n        V[i][i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n            for (k = 0; k <= i; k++) {\n                d[k] = V[k][i + 1] / h;\n            }\n\n            for (j = 0; j <= i; j++) {\n                g = 0;\n                for (k = 0; k <= i; k++) {\n                    g += V[k][i + 1] * V[k][j];\n                }\n                for (k = 0; k <= i; k++) {\n                    V[k][j] -= g * d[k];\n                }\n            }\n        }\n\n        for (k = 0; k <= i; k++) {\n            V[k][i + 1] = 0;\n        }\n    }\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n        V[n - 1][j] = 0;\n    }\n\n    V[n - 1][n - 1] = 1;\n    e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n\n    var g, h, i, j, k, l, m, p, r,\n        dl1, c, c2, c3, el1, s, s2,\n        iter;\n\n    for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n    }\n\n    e[n - 1] = 0;\n\n    var f = 0,\n        tst1 = 0,\n        eps = Math.pow(2, -52);\n\n    for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        m = l;\n        while (m < n) {\n            if (Math.abs(e[m]) <= eps * tst1) {\n                break;\n            }\n            m++;\n        }\n\n        if (m > l) {\n            iter = 0;\n            do {\n                iter = iter + 1;\n\n                g = d[l];\n                p = (d[l + 1] - g) / (2 * e[l]);\n                r = hypotenuse(p, 1);\n                if (p < 0) {\n                    r = -r;\n                }\n\n                d[l] = e[l] / (p + r);\n                d[l + 1] = e[l] * (p + r);\n                dl1 = d[l + 1];\n                h = g - d[l];\n                for (i = l + 2; i < n; i++) {\n                    d[i] -= h;\n                }\n\n                f = f + h;\n\n                p = d[m];\n                c = 1;\n                c2 = c;\n                c3 = c;\n                el1 = e[l + 1];\n                s = 0;\n                s2 = 0;\n                for (i = m - 1; i >= l; i--) {\n                    c3 = c2;\n                    c2 = c;\n                    s2 = s;\n                    g = c * e[i];\n                    h = c * p;\n                    r = hypotenuse(p, e[i]);\n                    e[i + 1] = s * r;\n                    s = e[i] / r;\n                    c = p / r;\n                    p = c * d[i] - s * g;\n                    d[i + 1] = h + s * (c * g + s * d[i]);\n\n                    for (k = 0; k < n; k++) {\n                        h = V[k][i + 1];\n                        V[k][i + 1] = s * V[k][i] + c * h;\n                        V[k][i] = c * V[k][i] - s * h;\n                    }\n                }\n\n                p = -s * s2 * c3 * el1 * e[l] / dl1;\n                e[l] = s * p;\n                d[l] = c * p;\n\n            }\n            while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n            if (d[j] < p) {\n                k = j;\n                p = d[j];\n            }\n        }\n\n        if (k !== i) {\n            d[k] = d[i];\n            d[i] = p;\n            for (j = 0; j < n; j++) {\n                p = V[j][i];\n                V[j][i] = V[j][k];\n                V[j][k] = p;\n            }\n        }\n    }\n}\n\nfunction orthes(n, H, ort, V) {\n\n    var low = 0,\n        high = n - 1,\n        f, g, h, i, j, m,\n        scale;\n\n    for (m = low + 1; m <= high - 1; m++) {\n        scale = 0;\n        for (i = m; i <= high; i++) {\n            scale = scale + Math.abs(H[i][m - 1]);\n        }\n\n        if (scale !== 0) {\n            h = 0;\n            for (i = high; i >= m; i--) {\n                ort[i] = H[i][m - 1] / scale;\n                h += ort[i] * ort[i];\n            }\n\n            g = Math.sqrt(h);\n            if (ort[m] > 0) {\n                g = -g;\n            }\n\n            h = h - ort[m] * g;\n            ort[m] = ort[m] - g;\n\n            for (j = m; j < n; j++) {\n                f = 0;\n                for (i = high; i >= m; i--) {\n                    f += ort[i] * H[i][j];\n                }\n\n                f = f / h;\n                for (i = m; i <= high; i++) {\n                    H[i][j] -= f * ort[i];\n                }\n            }\n\n            for (i = 0; i <= high; i++) {\n                f = 0;\n                for (j = high; j >= m; j--) {\n                    f += ort[j] * H[i][j];\n                }\n\n                f = f / h;\n                for (j = m; j <= high; j++) {\n                    H[i][j] -= f * ort[j];\n                }\n            }\n\n            ort[m] = scale * ort[m];\n            H[m][m - 1] = scale * g;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            V[i][j] = (i === j ? 1 : 0);\n        }\n    }\n\n    for (m = high - 1; m >= low + 1; m--) {\n        if (H[m][m - 1] !== 0) {\n            for (i = m + 1; i <= high; i++) {\n                ort[i] = H[i][m - 1];\n            }\n\n            for (j = m; j <= high; j++) {\n                g = 0;\n                for (i = m; i <= high; i++) {\n                    g += ort[i] * V[i][j];\n                }\n\n                g = (g / ort[m]) / H[m][m - 1];\n                for (i = m; i <= high; i++) {\n                    V[i][j] += g * ort[i];\n                }\n            }\n        }\n    }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n    var n = nn - 1,\n        low = 0,\n        high = nn - 1,\n        eps = Math.pow(2, -52),\n        exshift = 0,\n        norm = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n        s = 0,\n        z = 0,\n        iter = 0,\n        i, j, k, l, m, t, w, x, y,\n        ra, sa, vr, vi,\n        notlast, cdivres;\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            d[i] = H[i][i];\n            e[i] = 0;\n        }\n\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n            norm = norm + Math.abs(H[i][j]);\n        }\n    }\n\n    while (n >= low) {\n        l = n;\n        while (l > low) {\n            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n            if (s === 0) {\n                s = norm;\n            }\n            if (Math.abs(H[l][l - 1]) < eps * s) {\n                break;\n            }\n            l--;\n        }\n\n        if (l === n) {\n            H[n][n] = H[n][n] + exshift;\n            d[n] = H[n][n];\n            e[n] = 0;\n            n--;\n            iter = 0;\n        } else if (l === n - 1) {\n            w = H[n][n - 1] * H[n - 1][n];\n            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n            q = p * p + w;\n            z = Math.sqrt(Math.abs(q));\n            H[n][n] = H[n][n] + exshift;\n            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n            x = H[n][n];\n\n            if (q >= 0) {\n                z = (p >= 0) ? (p + z) : (p - z);\n                d[n - 1] = x + z;\n                d[n] = d[n - 1];\n                if (z !== 0) {\n                    d[n] = x - w / z;\n                }\n                e[n - 1] = 0;\n                e[n] = 0;\n                x = H[n][n - 1];\n                s = Math.abs(x) + Math.abs(z);\n                p = x / s;\n                q = z / s;\n                r = Math.sqrt(p * p + q * q);\n                p = p / r;\n                q = q / r;\n\n                for (j = n - 1; j < nn; j++) {\n                    z = H[n - 1][j];\n                    H[n - 1][j] = q * z + p * H[n][j];\n                    H[n][j] = q * H[n][j] - p * z;\n                }\n\n                for (i = 0; i <= n; i++) {\n                    z = H[i][n - 1];\n                    H[i][n - 1] = q * z + p * H[i][n];\n                    H[i][n] = q * H[i][n] - p * z;\n                }\n\n                for (i = low; i <= high; i++) {\n                    z = V[i][n - 1];\n                    V[i][n - 1] = q * z + p * V[i][n];\n                    V[i][n] = q * V[i][n] - p * z;\n                }\n            } else {\n                d[n - 1] = x + p;\n                d[n] = x + p;\n                e[n - 1] = z;\n                e[n] = -z;\n            }\n\n            n = n - 2;\n            iter = 0;\n        } else {\n            x = H[n][n];\n            y = 0;\n            w = 0;\n            if (l < n) {\n                y = H[n - 1][n - 1];\n                w = H[n][n - 1] * H[n - 1][n];\n            }\n\n            if (iter === 10) {\n                exshift += x;\n                for (i = low; i <= n; i++) {\n                    H[i][i] -= x;\n                }\n                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n                x = y = 0.75 * s;\n                w = -0.4375 * s * s;\n            }\n\n            if (iter === 30) {\n                s = (y - x) / 2;\n                s = s * s + w;\n                if (s > 0) {\n                    s = Math.sqrt(s);\n                    if (y < x) {\n                        s = -s;\n                    }\n                    s = x - w / ((y - x) / 2 + s);\n                    for (i = low; i <= n; i++) {\n                        H[i][i] -= s;\n                    }\n                    exshift += s;\n                    x = y = w = 0.964;\n                }\n            }\n\n            iter = iter + 1;\n\n            m = n - 2;\n            while (m >= l) {\n                z = H[m][m];\n                r = x - z;\n                s = y - z;\n                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n                q = H[m + 1][m + 1] - z - r - s;\n                r = H[m + 2][m + 1];\n                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                p = p / s;\n                q = q / s;\n                r = r / s;\n                if (m === l) {\n                    break;\n                }\n                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n                    break;\n                }\n                m--;\n            }\n\n            for (i = m + 2; i <= n; i++) {\n                H[i][i - 2] = 0;\n                if (i > m + 2) {\n                    H[i][i - 3] = 0;\n                }\n            }\n\n            for (k = m; k <= n - 1; k++) {\n                notlast = (k !== n - 1);\n                if (k !== m) {\n                    p = H[k][k - 1];\n                    q = H[k + 1][k - 1];\n                    r = (notlast ? H[k + 2][k - 1] : 0);\n                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                    if (x !== 0) {\n                        p = p / x;\n                        q = q / x;\n                        r = r / x;\n                    }\n                }\n\n                if (x === 0) {\n                    break;\n                }\n\n                s = Math.sqrt(p * p + q * q + r * r);\n                if (p < 0) {\n                    s = -s;\n                }\n\n                if (s !== 0) {\n                    if (k !== m) {\n                        H[k][k - 1] = -s * x;\n                    } else if (l !== m) {\n                        H[k][k - 1] = -H[k][k - 1];\n                    }\n\n                    p = p + s;\n                    x = p / s;\n                    y = q / s;\n                    z = r / s;\n                    q = q / p;\n                    r = r / p;\n\n                    for (j = k; j < nn; j++) {\n                        p = H[k][j] + q * H[k + 1][j];\n                        if (notlast) {\n                            p = p + r * H[k + 2][j];\n                            H[k + 2][j] = H[k + 2][j] - p * z;\n                        }\n\n                        H[k][j] = H[k][j] - p * x;\n                        H[k + 1][j] = H[k + 1][j] - p * y;\n                    }\n\n                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n                        p = x * H[i][k] + y * H[i][k + 1];\n                        if (notlast) {\n                            p = p + z * H[i][k + 2];\n                            H[i][k + 2] = H[i][k + 2] - p * r;\n                        }\n\n                        H[i][k] = H[i][k] - p;\n                        H[i][k + 1] = H[i][k + 1] - p * q;\n                    }\n\n                    for (i = low; i <= high; i++) {\n                        p = x * V[i][k] + y * V[i][k + 1];\n                        if (notlast) {\n                            p = p + z * V[i][k + 2];\n                            V[i][k + 2] = V[i][k + 2] - p * r;\n                        }\n\n                        V[i][k] = V[i][k] - p;\n                        V[i][k + 1] = V[i][k + 1] - p * q;\n                    }\n                }\n            }\n        }\n    }\n\n    if (norm === 0) {\n        return;\n    }\n\n    for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n\n        if (q === 0) {\n            l = n;\n            H[n][n] = 1;\n            for (i = n - 1; i >= 0; i--) {\n                w = H[i][i] - p;\n                r = 0;\n                for (j = l; j <= n; j++) {\n                    r = r + H[i][j] * H[j][n];\n                }\n\n                if (e[i] < 0) {\n                    z = w;\n                    s = r;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                        t = (x * s - z * r) / q;\n                        H[i][n] = t;\n                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n                    }\n\n                    t = Math.abs(H[i][n]);\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        } else if (q < 0) {\n            l = n - 1;\n\n            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n                H[n - 1][n - 1] = q / H[n][n - 1];\n                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n            } else {\n                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n                H[n - 1][n - 1] = cdivres[0];\n                H[n - 1][n] = cdivres[1];\n            }\n\n            H[n][n - 1] = 0;\n            H[n][n] = 1;\n            for (i = n - 2; i >= 0; i--) {\n                ra = 0;\n                sa = 0;\n                for (j = l; j <= n; j++) {\n                    ra = ra + H[i][j] * H[j][n - 1];\n                    sa = sa + H[i][j] * H[j][n];\n                }\n\n                w = H[i][i] - p;\n\n                if (e[i] < 0) {\n                    z = w;\n                    r = ra;\n                    s = sa;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        cdivres = cdiv(-ra, -sa, w, q);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                        vi = (d[i] - p) * 2 * q;\n                        if (vr === 0 && vi === 0) {\n                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                        }\n                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n                        } else {\n                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n                            H[i + 1][n - 1] = cdivres[0];\n                            H[i + 1][n] = cdivres[1];\n                        }\n                    }\n\n                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n - 1] = H[j][n - 1] / t;\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            for (j = i; j < nn; j++) {\n                V[i][j] = H[i][j];\n            }\n        }\n    }\n\n    for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n            z = 0;\n            for (k = low; k <= Math.min(j, high); k++) {\n                z = z + V[i][k] * H[k][j];\n            }\n            V[i][j] = z;\n        }\n    }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n    var r, d;\n    if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        return [(xr + r * xi) / d, (xi - r * xr) / d];\n    }\n    else {\n        r = yr / yi;\n        d = yi + r * yr;\n        return [(r * xr + xi) / d, (r * xi - xr) / d];\n    }\n}\n\nmodule.exports = EigenvalueDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-naivebayes/~/ml-matrix/src/dc/evd.js\n ** module id = 111\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\nfunction LuDecomposition(matrix) {\n    if (!(this instanceof LuDecomposition)) {\n        return new LuDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n\n    var lu = matrix.clone(),\n        rows = lu.rows,\n        columns = lu.columns,\n        pivotVector = new Array(rows),\n        pivotSign = 1,\n        i, j, k, p, s, t, v,\n        LUrowi, LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n        pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n\n        for (i = 0; i < rows; i++) {\n            LUcolj[i] = lu[i][j];\n        }\n\n        for (i = 0; i < rows; i++) {\n            LUrowi = lu[i];\n            kmax = Math.min(i, j);\n            s = 0;\n            for (k = 0; k < kmax; k++) {\n                s += LUrowi[k] * LUcolj[k];\n            }\n            LUrowi[j] = LUcolj[i] -= s;\n        }\n\n        p = j;\n        for (i = j + 1; i < rows; i++) {\n            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n                p = i;\n            }\n        }\n\n        if (p !== j) {\n            for (k = 0; k < columns; k++) {\n                t = lu[p][k];\n                lu[p][k] = lu[j][k];\n                lu[j][k] = t;\n            }\n\n            v = pivotVector[p];\n            pivotVector[p] = pivotVector[j];\n            pivotVector[j] = v;\n\n            pivotSign = -pivotSign;\n        }\n\n        if (j < rows && lu[j][j] !== 0) {\n            for (i = j + 1; i < rows; i++) {\n                lu[i][j] /= lu[j][j];\n            }\n        }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n}\n\nLuDecomposition.prototype = {\n    isSingular: function () {\n        var data = this.LU,\n            col = data.columns;\n        for (var j = 0; j < col; j++) {\n            if (data[j][j] === 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    get determinant() {\n        var data = this.LU;\n        if (!data.isSquare())\n            throw new Error('Matrix must be square');\n        var determinant = this.pivotSign, col = data.columns;\n        for (var j = 0; j < col; j++)\n            determinant *= data[j][j];\n        return determinant;\n    },\n    get lowerTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i > j) {\n                    X[i][j] = data[i][j];\n                } else if (i === j) {\n                    X[i][j] = 1;\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get upperTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i <= j) {\n                    X[i][j] = data[i][j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get pivotPermutationVector() {\n        return this.pivotVector.slice();\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var lu = this.LU,\n            rows = lu.rows;\n\n        if (rows !== value.rows)\n            throw new Error('Invalid matrix dimensions');\n        if (this.isSingular())\n            throw new Error('LU matrix is singular');\n\n        var count = value.columns,\n            X = value.subMatrixRow(this.pivotVector, 0, count - 1),\n            columns = lu.columns,\n            i, j, k;\n\n        for (k = 0; k < columns; k++) {\n            for (i = k + 1; i < columns; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        for (k = columns - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= lu[k][k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = LuDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-naivebayes/~/ml-matrix/src/dc/lu.js\n ** module id = 112\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\nfunction QrDecomposition(value) {\n    if (!(this instanceof QrDecomposition)) {\n        return new QrDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n\n    var qr = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        rdiag = new Array(n),\n        i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) {\n            nrm = hypotenuse(nrm, qr[i][k]);\n        }\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) {\n                nrm = -nrm;\n            }\n            for (i = k; i < m; i++) {\n                qr[i][k] /= nrm;\n            }\n            qr[k][k] += 1;\n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * qr[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    qr[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n}\n\nQrDecomposition.prototype = {\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var qr = this.QR,\n            m = qr.rows;\n\n        if (value.rows !== m)\n            throw new Error('Matrix row dimensions must agree');\n        if (!this.isFullRank())\n            throw new Error('Matrix is rank deficient');\n\n        var count = value.columns,\n            X = value.clone(),\n            n = qr.columns,\n            i, j, k, s;\n\n        for (k = 0; k < n; k++) {\n            for (j = 0; j < count; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * X[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    X[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        for (k = n - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= this.Rdiag[k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * qr[i][k];\n                }\n            }\n        }\n\n        return X.subMatrix(0, n - 1, 0, count - 1);\n    },\n    isFullRank: function () {\n        var columns = this.QR.columns;\n        for (var i = 0; i < columns; i++) {\n            if (this.Rdiag[i] === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n    get upperTriangularFactor() {\n        var qr = this.QR,\n            n = qr.columns,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                if (i < j) {\n                    X[i][j] = qr[i][j];\n                } else if (i === j) {\n                    X[i][j] = this.Rdiag[i];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get orthogonalFactor() {\n        var qr = this.QR,\n            rows = qr.rows,\n            columns = qr.columns,\n            X = new Matrix(rows, columns),\n            i, j, k, s;\n\n        for (k = columns - 1; k >= 0; k--) {\n            for (i = 0; i < rows; i++) {\n                X[i][k] = 0;\n            }\n            X[k][k] = 1;\n            for (j = k; j < columns; j++) {\n                if (qr[k][k] !== 0) {\n                    s = 0;\n                    for (i = k; i < rows; i++) {\n                        s += qr[i][k] * X[i][j];\n                    }\n\n                    s = -s / qr[k][k];\n\n                    for (i = k; i < rows; i++) {\n                        X[i][j] += s * qr[i][k];\n                    }\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = QrDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-naivebayes/~/ml-matrix/src/dc/qr.js\n ** module id = 113\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\nfunction CholeskyDecomposition(value) {\n    if (!(this instanceof CholeskyDecomposition)) {\n        return new CholeskyDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n    if (!value.isSymmetric())\n        throw new Error('Matrix is not symmetric');\n\n    var a = value,\n        dimension = a.rows,\n        l = new Matrix(dimension, dimension),\n        positiveDefinite = true,\n        i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n        var Lrowj = l[j];\n        var d = 0;\n        for (k = 0; k < j; k++) {\n            var Lrowk = l[k];\n            var s = 0;\n            for (i = 0; i < k; i++) {\n                s += Lrowk[i] * Lrowj[i];\n            }\n            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n            d = d + s * s;\n        }\n\n        d = a[j][j] - d;\n\n        positiveDefinite &= (d > 0);\n        l[j][j] = Math.sqrt(Math.max(d, 0));\n        for (k = j + 1; k < dimension; k++) {\n            l[j][k] = 0;\n        }\n    }\n\n    if (!positiveDefinite) {\n        throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n}\n\nCholeskyDecomposition.prototype = {\n    get leftTriangularFactor() {\n        return this.L;\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var l = this.L,\n            dimension = l.rows;\n\n        if (value.rows !== dimension) {\n            throw new Error('Matrix dimensions do not match');\n        }\n\n        var count = value.columns,\n            B = value.clone(),\n            i, j, k;\n\n        for (k = 0; k < dimension; k++) {\n            for (j = 0; j < count; j++) {\n                for (i = 0; i < k; i++) {\n                    B[k][j] -= B[i][j] * l[k][i];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        for (k = dimension - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                for (i = k + 1; i < dimension; i++) {\n                    B[k][j] -= B[i][j] * l[i][k];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        return B;\n    }\n};\n\nmodule.exports = CholeskyDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-naivebayes/~/ml-matrix/src/dc/cholesky.js\n ** module id = 114\n ** module chunks = 0\n **/","module.exports = exports = require(\"./pls\");\nexports.Utils = require('./utils');\nexports.OPLS = require('./opls');\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-pls/src/index.js\n ** module id = 115\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = PLS;\nvar Matrix = require('ml-matrix');\nvar Utils = require('./utils');\n\n/**\n * Retrieves the sum at the column of the given matrix.\n * @param matrix\n * @param column\n * @returns {number}\n */\nfunction getColSum(matrix, column) {\n    var sum = 0;\n    for (var i = 0; i < matrix.rows; i++) {\n        sum += matrix[i][column];\n    }\n    return sum;\n}\n\n/**\n * Function that returns the index where the sum of each\n * column vector is maximum.\n * @param {Matrix} data\n * @returns {number} index of the maximum\n */\nfunction maxSumColIndex(data) {\n    var maxIndex = 0;\n    var maxSum = -Infinity;\n    for(var i = 0; i < data.columns; ++i) {\n        var currentSum = getColSum(data, i);\n        if(currentSum > maxSum) {\n            maxSum = currentSum;\n            maxIndex = i;\n        }\n    }\n    return maxIndex;\n}\n\n/**\n * Constructor of the PLS model.\n * @param reload - used for load purposes.\n * @param model - used for load purposes.\n * @constructor\n */\nfunction PLS(reload, model) {\n    if(reload) {\n        this.E = model.E;\n        this.F = model.F;\n        this.ssqYcal = model.ssqYcal;\n        this.R2X = model.R2X;\n        this.ymean = model.ymean;\n        this.ystd = model.ystd;\n        this.PBQ = model.PBQ;\n        this.T = model.T;\n        this.P = model.P;\n        this.U = model.U;\n        this.Q = model.Q;\n        this.W = model.W;\n        this.B = model.B;\n    }\n}\n\n/**\n * Function that fit the model with the given data and predictions, in this function is calculated the\n * following outputs:\n *\n * T - Score matrix of X\n * P - Loading matrix of X\n * U - Score matrix of Y\n * Q - Loading matrix of Y\n * B - Matrix of regression coefficient\n * W - Weight matrix of X\n *\n * @param {Matrix} trainingSet - Dataset to be apply the model\n * @param {Matrix} predictions - Predictions over each case of the dataset\n * @param {Number} options - recieves the latentVectors and the tolerance of each step of the PLS\n */\nPLS.prototype.train = function (trainingSet, predictions, options) {\n\n    if(options === undefined) options = {};\n\n    var latentVectors = options.latentVectors;\n    if(latentVectors === undefined || isNaN(latentVectors)) {\n        throw new RangeError(\"Latent vector must be a number.\");\n    }\n\n    var tolerance = options.tolerance;\n    if(tolerance === undefined || isNaN(tolerance)) {\n        throw new RangeError(\"Tolerance must be a number\");\n    }\n\n    if(trainingSet.length !== predictions.length)\n        throw new RangeError(\"The number of predictions and elements in the dataset must be the same\");\n\n    //var tolerance = 1e-9;\n    var X = Utils.featureNormalize(Matrix(trainingSet, true)).result;\n    var resultY = Utils.featureNormalize(Matrix(predictions, true));\n    this.ymean = resultY.means.neg();\n    this.ystd = resultY.std;\n    var Y = resultY.result;\n\n    var rx = X.rows;\n    var cx = X.columns;\n    var ry = Y.rows;\n    var cy = Y.columns;\n\n    if(rx != ry) {\n        throw new RangeError(\"dataset cases is not the same as the predictions\");\n    }\n\n    var ssqXcal = X.clone().mul(X).sum(); // for the r²\n    var sumOfSquaresY = Y.clone().mul(Y).sum();\n\n    var n = latentVectors; //Math.max(cx, cy); // components of the pls\n    var T = Matrix.zeros(rx, n);\n    var P = Matrix.zeros(cx, n);\n    var U = Matrix.zeros(ry, n);\n    var Q = Matrix.zeros(cy, n);\n    var B = Matrix.zeros(n, n);\n    var W = P.clone();\n    var k = 0;\n    var R2X = new Array(n);\n\n    while(Utils.norm(Y) > tolerance && k < n) {\n        var transposeX = X.transpose();\n        var transposeY = Y.transpose();\n\n        var tIndex = maxSumColIndex(X.clone().mulM(X));\n        var uIndex = maxSumColIndex(Y.clone().mulM(Y));\n\n        var t1 = X.getColumnVector(tIndex);\n        var u = Y.getColumnVector(uIndex);\n        var t = Matrix.zeros(rx, 1);\n\n        while(Utils.norm(t1.clone().sub(t)) > tolerance) {\n            var w = transposeX.mmul(u);\n            w.div(Utils.norm(w));\n            t = t1;\n            t1 = X.mmul(w);\n            var q = transposeY.mmul(t1);\n            q.div(Utils.norm(q));\n            u = Y.mmul(q);\n        }\n\n        t = t1;\n        var num = transposeX.mmul(t);\n        var den = (t.transpose().mmul(t))[0][0];\n        var p = num.div(den);\n        var pnorm = Utils.norm(p);\n        p.div(pnorm);\n        t.mul(pnorm);\n        w.mul(pnorm);\n\n        num = u.transpose().mmul(t);\n        den = (t.transpose().mmul(t))[0][0];\n        var b = (num.div(den))[0][0];\n        X.sub(t.mmul(p.transpose()));\n        Y.sub(t.clone().mul(b).mmul(q.transpose()));\n\n        T.setColumn(k, t);\n        P.setColumn(k, p);\n        U.setColumn(k, u);\n        Q.setColumn(k, q);\n        W.setColumn(k, w);\n\n        B[k][k] = b;\n        k++;\n    }\n\n    k--;\n    T = T.subMatrix(0, T.rows - 1, 0, k);\n    P = P.subMatrix(0, P.rows - 1, 0, k);\n    U = U.subMatrix(0, U.rows - 1, 0, k);\n    Q = Q.subMatrix(0, Q.rows - 1, 0, k);\n    W = W.subMatrix(0, W.rows - 1, 0, k);\n    B = B.subMatrix(0, k, 0, k);\n\n    this.R2X = t.transpose().mmul(t).mmul(p.transpose().mmul(p)).divS(ssqXcal)[0][0];\n\n    // TODO: review of R2Y\n    //this.R2Y = t.transpose().mmul(t).mul(q[k][0]*q[k][0]).divS(ssqYcal)[0][0];\n\n    this.ssqYcal = sumOfSquaresY;\n    this.E = X;\n    this.F = Y;\n    this.T = T;\n    this.P = P;\n    this.U = U;\n    this.Q = Q;\n    this.W = W;\n    this.B = B;\n    this.PBQ = P.mmul(B).mmul(Q.transpose());\n};\n\n/**\n * Function that predict the behavior of the given dataset.\n * @param dataset - data to be predicted.\n * @returns {Matrix} - predictions of each element of the dataset.\n */\nPLS.prototype.predict = function (dataset) {\n    var X = Matrix(dataset, true);\n    var normalization = Utils.featureNormalize(X);\n    X = normalization.result;\n    var Y = X.mmul(this.PBQ);\n    Y.mulRowVector(this.ystd);\n    Y.addRowVector(this.ymean);\n    return Y;\n};\n\n/**\n * Function that returns the explained variance on training of the PLS model.\n * @returns {number}\n */\nPLS.prototype.getExplainedVariance = function () {\n    return this.R2X;\n};\n\n/**\n * Load a PLS model from an Object\n * @param model\n * @returns {PLS} - PLS object from the given model\n */\nPLS.load = function (model) {\n    if(model.modelName !== 'PLS')\n        throw new RangeError(\"The current model is invalid!\");\n\n    return new PLS(true, model);\n};\n\n/**\n * Function that exports a PLS model to an Object.\n * @returns {{modelName: string, ymean: *, ystd: *, PBQ: *}} model.\n */\nPLS.prototype.export = function () {\n    return {\n        modelName: \"PLS\",\n        E: this.E,\n        F: this.F,\n        R2X: this.R2X,\n        ssqYcal: this.ssqYcal,\n        ymean: this.ymean,\n        ystd: this.ystd,\n        PBQ: this.PBQ,\n        T: this.T,\n        P: this.P,\n        U: this.U,\n        Q: this.Q,\n        W: this.W,\n        B: this.B\n    };\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-pls/src/pls.js\n ** module id = 116\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./matrix');\nmodule.exports.Decompositions = module.exports.DC = require('./decompositions');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-pls/~/ml-matrix/src/index.js\n ** module id = 117\n ** module chunks = 0\n **/","'use strict';\n\nvar Asplice = Array.prototype.splice,\n    Aconcat = Array.prototype.concat;\n\n// For performance : http://jsperf.com/clone-array-slice-vs-while-vs-for\nfunction slice(arr) {\n    var i = 0,\n        ii = arr.length,\n        result = new Array(ii);\n    for (; i < ii; i++) {\n        result[i] = arr[i];\n    }\n    return result;\n}\n\n/**\n * Real matrix.\n * @constructor\n * @param {number|Array} nRows - Number of rows of the new matrix or a 2D array containing the data.\n * @param {number|boolean} [nColumns] - Number of columns of the new matrix or a boolean specifying if the input array should be cloned\n */\nfunction Matrix(nRows, nColumns) {\n    var i = 0, rows, columns, matrix, newInstance;\n    if (Array.isArray(nRows)) {\n        newInstance = nColumns;\n        matrix = newInstance ? slice(nRows) : nRows;\n        nRows = matrix.length;\n        nColumns = matrix[0].length;\n        if (typeof nColumns === 'undefined') {\n            throw new TypeError('Data must be a 2D array');\n        }\n        if (nRows > 0 && nColumns > 0) {\n            for (; i < nRows; i++) {\n                if (matrix[i].length !== nColumns) {\n                    throw new RangeError('Inconsistent array dimensions');\n                } else if (newInstance) {\n                    matrix[i] = slice(matrix[i]);\n                }\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else if (typeof nRows === 'number') { // Create empty matrix\n        if (nRows > 0 && nColumns > 0) {\n            matrix = new Array(nRows);\n            for (; i < nRows; i++) {\n                matrix[i] = new Array(nColumns);\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else {\n        throw new TypeError('Invalid arguments');\n    }\n\n    Object.defineProperty(matrix, 'rows', {writable: true, value: nRows});\n    Object.defineProperty(matrix, 'columns', {writable: true, value: nColumns});\n\n    matrix.__proto__ = Matrix.prototype;\n\n    return matrix;\n}\n\n/**\n * Constructs a Matrix with the chosen dimensions from a 1D array.\n * @param {number} newRows - Number of rows\n * @param {number} newColumns - Number of columns\n * @param {Array} newData - A 1D array containing data for the matrix\n * @returns {Matrix} - The new matrix\n */\nMatrix.from1DArray = function from1DArray(newRows, newColumns, newData) {\n    var length, data, i = 0;\n\n    length = newRows * newColumns;\n    if (length !== newData.length)\n        throw new RangeError('Data length does not match given dimensions');\n\n    data = new Array(newRows);\n    for (; i < newRows; i++) {\n        data[i] = newData.slice(i * newColumns, (i + 1) * newColumns);\n    }\n    return new Matrix(data);\n};\n\n/**\n * Creates a row vector, a matrix with only one row.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.rowVector = function rowVector(newData) {\n    return new Matrix([newData]);\n};\n\n/**\n * Creates a column vector, a matrix with only one column.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.columnVector = function columnVector(newData) {\n    var l = newData.length, vector = new Array(l);\n    for (var i = 0; i < l; i++)\n        vector[i] = [newData[i]];\n    return new Matrix(vector);\n};\n\n/**\n * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.empty = function empty(rows, columns) {\n    return new Matrix(rows, columns);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to zero.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.zeros = function zeros(rows, columns) {\n    return Matrix.empty(rows, columns).fill(0);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to one.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.ones = function ones(rows, columns) {\n    return Matrix.empty(rows, columns).fill(1);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be randomly set using Math.random().\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} The new matrix\n */\nMatrix.rand = function rand(rows, columns) {\n    var matrix = Matrix.empty(rows, columns);\n    for (var i = 0, ii = matrix.rows; i < ii; i++) {\n        for (var j = 0, jj = matrix.columns; j < jj; j++) {\n            matrix[i][j] = Math.random();\n        }\n    }\n    return matrix;\n};\n\n/**\n * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and other will be 0.\n * @param {number} n - Number of rows and columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.eye = function eye(n) {\n    var matrix = Matrix.zeros(n, n), l = matrix.rows;\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = 1;\n    }\n    return matrix;\n};\n\n/**\n * Creates a diagonal matrix based on the given array.\n * @param {Array} data - Array containing the data for the diagonal\n * @returns {Matrix} - The new matrix\n */\nMatrix.diag = function diag(data) {\n    var l = data.length, matrix = Matrix.zeros(l, l);\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = data[i];\n    }\n    return matrix;\n};\n\n/**\n * Creates an array of indices between two values\n * @param {number} from\n * @param {number} to\n * @returns {Array}\n */\nMatrix.indices = function indices(from, to) {\n    var vector = new Array(to - from);\n    for (var i = 0; i < vector.length; i++)\n        vector[i] = from++;\n    return vector;\n};\n\n// TODO DOC\nMatrix.stack = function stack(arg1) {\n    var i, j, k;\n    if (Matrix.isMatrix(arg1)) {\n        var rows = 0,\n            cols = 0;\n        for (i = 0; i < arguments.length; i++) {\n            rows += arguments[i].rows;\n            if (arguments[i].columns > cols)\n                cols = arguments[i].columns;\n        }\n\n        var r = Matrix.zeros(rows, cols);\n        var c = 0;\n        for (i = 0; i < arguments.length; i++) {\n            var current = arguments[i];\n            for (j = 0; j < current.rows; j++) {\n                for (k = 0; k < current.columns; k++)\n                    r[c][k] = current[j][k];\n                c++;\n            }\n        }\n        return r;\n    }\n    else if (Array.isArray(arg1)) {\n        var matrix = Matrix.empty(arguments.length, arg1.length);\n        for (i = 0; i < arguments.length; i++)\n            matrix.setRow(i, arguments[i]);\n        return matrix;\n    }\n};\n\n// TODO DOC\nMatrix.expand = function expand(base, count) {\n    var expansion = [];\n    for (var i = 0; i < count.length; i++)\n        for (var j = 0; j < count[i]; j++)\n            expansion.push(base[i]);\n    return new Matrix(expansion);\n};\n\n/**\n * Check that the provided value is a Matrix and tries to instantiate one if not\n * @param value - The value to check\n * @returns {Matrix}\n * @throws {TypeError}\n */\nMatrix.checkMatrix = function checkMatrix(value) {\n    if (!value) {\n        throw new TypeError('Argument has to be a matrix');\n    }\n    if (value.klass !== 'Matrix') {\n        value = new Matrix(value);\n    }\n    return value;\n};\n\n/**\n * Returns true if the argument is a Matrix, false otherwise\n * @param value - The value to check\n * @returns {boolean}\n */\nMatrix.isMatrix = function isMatrix(value) {\n    return value ? value.klass === 'Matrix' : false;\n};\n\n/**\n * @property {string} - The name of this class.\n */\nObject.defineProperty(Matrix.prototype, 'klass', {\n    get: function klass() {\n        return 'Matrix';\n    }\n});\n\n/**\n * @property {number} - The number of elements in the matrix.\n */\nObject.defineProperty(Matrix.prototype, 'size', {\n    get: function size() {\n        return this.rows * this.columns;\n    }\n});\n\n/**\n * @private\n * Internal check that a row index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkRowIndex = function checkRowIndex(index) {\n    if (index < 0 || index > this.rows - 1)\n        throw new RangeError('Row index out of range.');\n};\n\n/**\n * @private\n * Internal check that a column index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkColumnIndex = function checkColumnIndex(index) {\n    if (index < 0 || index > this.columns - 1)\n        throw new RangeError('Column index out of range.');\n};\n\n/**\n * @private\n * Internal check that two matrices have the same dimensions\n * @param {Matrix} otherMatrix\n */\nMatrix.prototype.checkDimensions = function checkDimensions(otherMatrix) {\n    if ((this.rows !== otherMatrix.rows) || (this.columns !== otherMatrix.columns))\n        throw new RangeError('Matrices dimensions must be equal.');\n};\n\n/**\n * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n * @returns {Matrix} this\n */\nMatrix.prototype.apply = function apply(callback) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            callback.call(this, i, j);\n        }\n    }\n    return this;\n};\n\n/**\n * Creates an exact and independent copy of the matrix\n * @returns {Matrix}\n */\nMatrix.prototype.clone = function clone() {\n    return new Matrix(this.to2DArray());\n};\n\n/**\n * Returns a new 1D array filled row by row with the matrix values\n * @returns {Array}\n */\nMatrix.prototype.to1DArray = function to1DArray() {\n    return Aconcat.apply([], this);\n};\n\n/**\n * Returns a 2D array containing a copy of the data\n * @returns {Array}\n */\nMatrix.prototype.to2DArray = function to2DArray() {\n    var l = this.rows, copy = new Array(l);\n    for (var i = 0; i < l; i++) {\n        copy[i] = slice(this[i]);\n    }\n    return copy;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row\n */\nMatrix.prototype.isRowVector = function isRowVector() {\n    return this.rows === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one column\n */\nMatrix.prototype.isColumnVector = function isColumnVector() {\n    return this.columns === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row or one column\n */\nMatrix.prototype.isVector = function isVector() {\n    return (this.rows === 1) || (this.columns === 1);\n};\n\n/**\n * @returns {boolean} true if the matrix has the same number of rows and columns\n */\nMatrix.prototype.isSquare = function isSquare() {\n    return this.rows === this.columns;\n};\n\n/**\n * @returns {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n */\nMatrix.prototype.isSymmetric = function isSymmetric() {\n    if (this.isSquare()) {\n        var l = this.rows;\n        for (var i = 0; i < l; i++) {\n            for (var j = 0; j <= i; j++) {\n                if (this[i][j] !== this[j][i]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    return false;\n};\n\n/**\n * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @param {number} value - The new value for the element\n * @returns {Matrix} this\n */\nMatrix.prototype.set = function set(rowIndex, columnIndex, value) {\n    this[rowIndex][columnIndex] = value;\n    return this;\n};\n\n/**\n * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @returns {number}\n */\nMatrix.prototype.get = function get(rowIndex, columnIndex) {\n    return this[rowIndex][columnIndex];\n};\n\n/**\n * Fills the matrix with a given value. All elements will be set to this value.\n * @param {number} value - New value\n * @returns {Matrix} this\n */\nMatrix.prototype.fill = function fill(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = value;\n        }\n    }\n    return this;\n};\n\n/**\n * Negates the matrix. All elements will be multiplied by (-1)\n * @returns {Matrix} this\n */\nMatrix.prototype.neg = function neg() {\n    return this.mulS(-1);\n};\n\n/**\n * Adds a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number')\n        return this.addS(value);\n    value = Matrix.checkMatrix(value);\n        return this.addM(value);\n};\n\n/**\n * Adds a scalar to each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.addS = function addS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += value;\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the value of each element of matrix to the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.addM = function addM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number')\n        return this.subS(value);\n    value = Matrix.checkMatrix(value);\n        return this.subM(value);\n};\n\n/**\n * Subtracts a scalar from each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.subS = function subS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the value of each element of matrix from the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.subM = function subM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number')\n        return this.mulS(value);\n    value = Matrix.checkMatrix(value);\n        return this.mulM(value);\n};\n\n/**\n * Multiplies a scalar with each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulS = function mulS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the value of each element of matrix with the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.mulM = function mulM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides by a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number')\n        return this.divS(value);\n    value = Matrix.checkMatrix(value);\n        return this.divM(value);\n};\n\n/**\n * Divides each element of the matrix by a scalar\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.divS = function divS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Divides each element of this by the corresponding element of matrix\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.divM = function divM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Returns a new array from the given row index\n * @param {number} index - Row index\n * @returns {Array}\n */\nMatrix.prototype.getRow = function getRow(index) {\n    this.checkRowIndex(index);\n    return slice(this[index]);\n};\n\n/**\n * Returns a new row vector from the given row index\n * @param {number} index - Row index\n * @returns {Matrix}\n */\nMatrix.prototype.getRowVector = function getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n};\n\n/**\n * Sets a row at the given index\n * @param {number} index - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setRow = function setRow(index, array) {\n    this.checkRowIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    this[index] = slice(array);\n    return this;\n};\n\n/**\n * Removes a row from the given index\n * @param {number} index - Row index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeRow = function removeRow(index) {\n    this.checkRowIndex(index);\n    if (this.rows === 1)\n        throw new RangeError('A matrix cannot have less than one row');\n    Asplice.call(this, index, 1);\n    this.rows -= 1;\n    return this;\n};\n\n/**\n * Adds a row at the given index\n * @param {number} [index = this.rows] - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRow = function addRow(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.rows;\n    }\n    if (index < 0 || index > this.rows)\n        throw new RangeError('Row index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    Asplice.call(this, index, 0, slice(array));\n    this.rows += 1;\n    return this;\n};\n\n/**\n * Swaps two rows\n * @param {number} row1 - First row index\n * @param {number} row2 - Second row index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapRows = function swapRows(row1, row2) {\n    this.checkRowIndex(row1);\n    this.checkRowIndex(row2);\n    var temp = this[row1];\n    this[row1] = this[row2];\n    this[row2] = temp;\n    return this;\n};\n\n/**\n * Returns a new array from the given column index\n * @param {number} index - Column index\n * @returns {Array}\n */\nMatrix.prototype.getColumn = function getColumn(index) {\n    this.checkColumnIndex(index);\n    var l = this.rows, column = new Array(l);\n    for (var i = 0; i < l; i++) {\n        column[i] = this[i][index];\n    }\n    return column;\n};\n\n/**\n * Returns a new column vector from the given column index\n * @param {number} index - Column index\n * @returns {Matrix}\n */\nMatrix.prototype.getColumnVector = function getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n};\n\n/**\n * Sets a column at the given index\n * @param {number} index - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setColumn = function setColumn(index, array) {\n    this.checkColumnIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i][index] = array[i];\n    }\n    return this;\n};\n\n/**\n * Removes a column from the given index\n * @param {number} index - Column index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeColumn = function removeColumn(index) {\n    this.checkColumnIndex(index);\n    if (this.columns === 1)\n        throw new RangeError('A matrix cannot have less than one column');\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].splice(index, 1);\n    }\n    this.columns -= 1;\n    return this;\n};\n\n/**\n * Adds a column at the given index\n * @param {number} [index = this.columns] - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumn = function addColumn(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.columns;\n    }\n    if (index < 0 || index > this.columns)\n        throw new RangeError('Column index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i].splice(index, 0, array[i]);\n    }\n    this.columns += 1;\n    return this;\n};\n\n/**\n * Swaps two columns\n * @param {number} column1 - First column index\n * @param {number} column2 - Second column index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapColumns = function swapColumns(column1, column2) {\n    this.checkRowIndex(column1);\n    this.checkRowIndex(column2);\n    var l = this.rows, temp, row;\n    for (var i = 0; i < l; i++) {\n        row = this[i];\n        temp = row[column1];\n        row[column1] = row[column2];\n        row[column2] = temp;\n    }\n    return this;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkRowVector = function checkRowVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.columns)\n        throw new RangeError('vector size must be the same as the number of columns');\n    return vector;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkColumnVector = function checkColumnVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.rows)\n        throw new RangeError('vector size must be the same as the number of rows');\n    return vector;\n};\n\n/**\n * Adds the values of a vector to each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRowVector = function addRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subRowVector = function subRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRowVector = function mulRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each row by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divRowVector = function divRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the values of a vector to each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumnVector = function addColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subColumnVector = function subColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumnVector = function mulColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each column by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divColumnVector = function divColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a row with a scalar\n * @param {number} index - Row index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRow = function mulRow(index, value) {\n    this.checkRowIndex(index);\n    var i = 0, l = this.columns;\n    for (; i < l; i++) {\n        this[index][i] *= value;\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a column with a scalar\n * @param {number} index - Column index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumn = function mulColumn(index, value) {\n    this.checkColumnIndex(index);\n    var i = 0, l = this.rows;\n    for (; i < l; i++) {\n        this[i][index] *= value;\n    }\n};\n\n/**\n * A matrix index\n * @typedef {Object} MatrixIndex\n * @property {number} row\n * @property {number} column\n */\n\n/**\n * Returns the maximum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.max = function max() {\n    var v = -Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxIndex = function maxIndex() {\n    var v = -Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.min = function min() {\n    var v = Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minIndex = function minIndex() {\n    var v = Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.maxRow = function maxRow(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxRowIndex = function maxRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    var idx = {\n            row: index\n        };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.minRow = function minRow(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minRowIndex = function minRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: index,\n        column: 0\n    };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.maxColumn = function maxColumn(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxColumnIndex = function maxColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.minColumn = function minColumn(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minColumnIndex = function minColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns an array containing the diagonal values of the matrix\n * @returns {Array}\n */\nMatrix.prototype.diag = function diag() {\n    if (!this.isSquare())\n        throw new TypeError('Only square matrices have a diagonal.');\n    var diag = new Array(this.rows);\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        diag[i] = this[i][i];\n    }\n    return diag;\n};\n\n/**\n * Returns the sum of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.sum = function sum() {\n    var v = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            v += this[i][j];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the mean of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.mean = function mean() {\n    return this.sum() / this.size;\n};\n\n/**\n * Returns the product of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.prod = function prod() {\n    var prod = 1;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            prod *= this[i][j];\n        }\n    }\n    return prod;\n};\n\n/**\n * Computes the cumulative sum of the matrix elements (in place, row by row)\n * @returns {Matrix} this\n */\nMatrix.prototype.cumulativeSum = function cumulativeSum() {\n    var sum = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            sum += this[i][j];\n            this[i][j] = sum;\n        }\n    }\n    return this;\n};\n\n/**\n * Computes the dot (scalar) product between the matrix and another\n * @param {Matrix} other vector\n * @returns {number}\n */\nMatrix.prototype.dot = function dot(other) {\n    if (this.size !== other.size)\n        throw new RangeError('vectors do not have the same size');\n    var vector1 = this.to1DArray();\n    var vector2 = other.to1DArray();\n    var dot = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        dot += vector1[i] * vector2[i];\n    }\n    return dot;\n};\n\n/**\n * Returns the matrix product between this and other\n * @returns {Matrix}\n */\nMatrix.prototype.mmul = function mmul(other) {\n    if (!Matrix.isMatrix(other))\n        throw new TypeError('parameter \"other\" must be a matrix');\n    if (this.columns !== other.rows)\n        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n\n    var m = this.rows, n = this.columns, p = other.columns;\n    var result = new Matrix(m, p);\n\n    var Bcolj = new Array(n);\n    var i, j, k;\n    for (j = 0; j < p; j++) {\n        for (k = 0; k < n; k++)\n            Bcolj[k] = other[k][j];\n\n        for (i = 0; i < m; i++) {\n            var Arowi = this[i];\n\n            var s = 0;\n            for (k = 0; k < n; k++)\n                s += Arowi[k] * Bcolj[k];\n\n            result[i][j] = s;\n        }\n    }\n    return result;\n};\n\n/**\n * Sorts the rows (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortRows = function sortRows(compareFunction) {\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].sort(compareFunction);\n    }\n    return this;\n};\n\n/**\n * Sorts the columns (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortColumns = function sortColumns(compareFunction) {\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n};\n\n/**\n * Transposes the matrix and returns a new one containing the result\n * @returns {Matrix}\n */\nMatrix.prototype.transpose = function transpose() {\n    var result = new Matrix(this.columns, this.rows);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[j][i] = this[i][j];\n        }\n    }\n    return result;\n};\n\n/**\n * Returns a subset of the matrix\n * @param {number} startRow - First row index\n * @param {number} endRow - Last row index\n * @param {number} startColumn - First column index\n * @param {number} endColumn - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrix = function subMatrix(startRow, endRow, startColumn, endColumn) {\n    if ((startRow > endRow) || (startColumn > endColumn) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range');\n    var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n    for (var i = startRow; i <= endRow; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            newMatrix[i - startRow][j - startColumn] = this[i][j];\n        }\n    }\n    return newMatrix;\n};\n\n/**\n * Returns a subset of the matrix based on an array of row indices\n * @param {Array} indices - Array containing the row indices\n * @param {number} [startColumn = 0] - First column index\n * @param {number} [endColumn = this.columns-1] - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixRow = function subMatrixRow(indices, startColumn, endColumn) {\n    if (typeof startColumn === 'undefined') {\n        startColumn = 0;\n        endColumn = this.columns - 1;\n    } else if (typeof endColumn === 'undefined') {\n        endColumn = this.columns - 1;\n    }\n    if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, rows = this.rows,\n        X = new Matrix(l, endColumn - startColumn + 1);\n    for (var i = 0; i < l; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            if ((indices[i] < 0) || (indices[i] >= rows))\n                throw new RangeError('Argument out of range.');\n            X[i][j - startColumn] = this[indices[i]][j];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns a subset of the matrix based on an array of column indices\n * @param {Array} indices - Array containing the column indices\n * @param {number} [startRow = 0] - First row index\n * @param {number} [endRow = this.rows-1] - Last row index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixColumn = function subMatrixColumn(indices, startRow, endRow) {\n    if (typeof startRow === 'undefined') {\n        startRow = 0;\n        endRow = this.rows - 1;\n    } else if (typeof endRow === 'undefined') {\n        endRow = this.rows - 1;\n    }\n    if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, columns = this.columns,\n        X = new Matrix(endRow - startRow + 1, l);\n    for (var i = 0; i < l; i++) {\n        for (var j = startRow; j <= endRow; j++) {\n            if ((indices[i] < 0) || (indices[i] >= columns))\n                throw new RangeError('Argument out of range.');\n            X[j - startRow][i] = this[j][indices[i]];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns the trace of the matrix (sum of the diagonal elements)\n * @returns {number}\n */\nMatrix.prototype.trace = function trace() {\n    if (!this.isSquare())\n        throw new TypeError('The matrix is not square');\n    var trace = 0, i = 0, l = this.rows;\n    for (; i < l; i++) {\n        trace += this[i][i];\n    }\n    return trace;\n};\n\n/**\n * Sets each element of the matrix to its absolute value\n * @returns {Matrix} this\n */\nMatrix.prototype.abs = function abs() {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = Math.abs(this[i][j]);\n        }\n    }\n};\n\nmodule.exports = Matrix;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-pls/~/ml-matrix/src/matrix.js\n ** module id = 118\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('./matrix');\n\nvar SingularValueDecomposition = require('./dc/svd');\nvar EigenvalueDecomposition = require('./dc/evd');\nvar LuDecomposition = require('./dc/lu');\nvar QrDecomposition = require('./dc/qr');\nvar CholeskyDecomposition = require('./dc/cholesky');\n\nfunction inverse(matrix) {\n    return solve(matrix, Matrix.eye(matrix.rows));\n}\n\nMatrix.prototype.inverse = function () {\n    return inverse(this);\n};\n\nfunction solve(leftHandSide, rightHandSide) {\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n}\n\nMatrix.prototype.solve = function (other) {\n    return solve(this, other);\n};\n\nmodule.exports = {\n    SingularValueDecomposition: SingularValueDecomposition,\n    SVD: SingularValueDecomposition,\n    EigenvalueDecomposition: EigenvalueDecomposition,\n    EVD: EigenvalueDecomposition,\n    LuDecomposition: LuDecomposition,\n    LU: LuDecomposition,\n    QrDecomposition: QrDecomposition,\n    QR: QrDecomposition,\n    CholeskyDecomposition: CholeskyDecomposition,\n    CHO: CholeskyDecomposition,\n    inverse: inverse,\n    solve: solve\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-pls/~/ml-matrix/src/decompositions.js\n ** module id = 119\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\nfunction SingularValueDecomposition(value, options) {\n    if (!(this instanceof SingularValueDecomposition)) {\n        return new SingularValueDecomposition(value, options);\n    }\n    value = Matrix.checkMatrix(value);\n\n    options = options || {};\n\n    var a = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        nu = Math.min(m, n);\n\n    var wantu = true, wantv = true;\n    if (options.computeLeftSingularVectors === false)\n        wantu = false;\n    if (options.computeRightSingularVectors === false)\n        wantv = false;\n    var autoTranspose = options.autoTranspose === true;\n\n    var swapped = false;\n    if (m < n) {\n        if (!autoTranspose) {\n            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n        } else {\n            a = a.transpose();\n            m = a.rows;\n            n = a.columns;\n            swapped = true;\n            var aux = wantu;\n            wantu = wantv;\n            wantv = aux;\n        }\n    }\n\n    var s = new Array(Math.min(m + 1, n)),\n        U = Matrix.zeros(m, nu),\n        V = Matrix.zeros(n, n),\n        e = new Array(n),\n        work = new Array(m);\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n\n    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\n    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n        if (k < nct) {\n            s[k] = 0;\n            for (i = k; i < m; i++) {\n                s[k] = hypotenuse(s[k], a[i][k]);\n            }\n            if (s[k] !== 0) {\n                if (a[k][k] < 0) {\n                    s[k] = -s[k];\n                }\n                for (i = k; i < m; i++) {\n                    a[i][k] /= s[k];\n                }\n                a[k][k] += 1;\n            }\n            s[k] = -s[k];\n        }\n\n        for (j = k + 1; j < n; j++) {\n            if ((k < nct) && (s[k] !== 0)) {\n                t = 0;\n                for (i = k; i < m; i++) {\n                    t += a[i][k] * a[i][j];\n                }\n                t = -t / a[k][k];\n                for (i = k; i < m; i++) {\n                    a[i][j] += t * a[i][k];\n                }\n            }\n            e[j] = a[k][j];\n        }\n\n        if (wantu && (k < nct)) {\n            for (i = k; i < m; i++) {\n                U[i][k] = a[i][k];\n            }\n        }\n\n        if (k < nrt) {\n            e[k] = 0;\n            for (i = k + 1; i < n; i++) {\n                e[k] = hypotenuse(e[k], e[i]);\n            }\n            if (e[k] !== 0) {\n                if (e[k + 1] < 0)\n                    e[k] = -e[k];\n                for (i = k + 1; i < n; i++) {\n                    e[i] /= e[k];\n                }\n                e[k + 1] += 1;\n            }\n            e[k] = -e[k];\n            if ((k + 1 < m) && (e[k] !== 0)) {\n                for (i = k + 1; i < m; i++) {\n                    work[i] = 0;\n                }\n                for (j = k + 1; j < n; j++) {\n                    for (i = k + 1; i < m; i++) {\n                        work[i] += e[j] * a[i][j];\n                    }\n                }\n                for (j = k + 1; j < n; j++) {\n                    t = -e[j] / e[k + 1];\n                    for (i = k + 1; i < m; i++) {\n                        a[i][j] += t * work[i];\n                    }\n                }\n            }\n            if (wantv) {\n                for (i = k + 1; i < n; i++) {\n                    V[i][k] = e[i];\n                }\n            }\n        }\n    }\n\n    p = Math.min(n, m + 1);\n    if (nct < n) {\n        s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n        s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n        e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n        for (j = nct; j < nu; j++) {\n            for (i = 0; i < m; i++) {\n                U[i][j] = 0;\n            }\n            U[j][j] = 1;\n        }\n        for (k = nct - 1; k >= 0; k--) {\n            if (s[k] !== 0) {\n                for (j = k + 1; j < nu; j++) {\n                    t = 0;\n                    for (i = k; i < m; i++) {\n                        t += U[i][k] * U[i][j];\n                    }\n                    t = -t / U[k][k];\n                    for (i = k; i < m; i++) {\n                        U[i][j] += t * U[i][k];\n                    }\n                }\n                for (i = k; i < m; i++) {\n                    U[i][k] = -U[i][k];\n                }\n                U[k][k] = 1 + U[k][k];\n                for (i = 0; i < k - 1; i++) {\n                    U[i][k] = 0;\n                }\n            } else {\n                for (i = 0; i < m; i++) {\n                    U[i][k] = 0;\n                }\n                U[k][k] = 1;\n            }\n        }\n    }\n\n    if (wantv) {\n        for (k = n - 1; k >= 0; k--) {\n            if ((k < nrt) && (e[k] !== 0)) {\n                for (j = k + 1; j < n; j++) {\n                    t = 0;\n                    for (i = k + 1; i < n; i++) {\n                        t += V[i][k] * V[i][j];\n                    }\n                    t = -t / V[k + 1][k];\n                    for (i = k + 1; i < n; i++) {\n                        V[i][j] += t * V[i][k];\n                    }\n                }\n            }\n            for (i = 0; i < n; i++) {\n                V[i][k] = 0;\n            }\n            V[k][k] = 1;\n        }\n    }\n\n    var pp = p - 1,\n        iter = 0,\n        eps = Math.pow(2, -52);\n    while (p > 0) {\n        for (k = p - 2; k >= -1; k--) {\n            if (k === -1) {\n                break;\n            }\n            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n                e[k] = 0;\n                break;\n            }\n        }\n        if (k === p - 2) {\n            kase = 4;\n        } else {\n            for (ks = p - 1; ks >= k; ks--) {\n                if (ks === k) {\n                    break;\n                }\n                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n                if (Math.abs(s[ks]) <= eps * t) {\n                    s[ks] = 0;\n                    break;\n                }\n            }\n            if (ks === k) {\n                kase = 3;\n            } else if (ks === p - 1) {\n                kase = 1;\n            } else {\n                kase = 2;\n                k = ks;\n            }\n        }\n\n        k++;\n\n        switch (kase) {\n            case 1: {\n                f = e[p - 2];\n                e[p - 2] = 0;\n                for (j = p - 2; j >= k; j--) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    if (j !== k) {\n                        f = -sn * e[j - 1];\n                        e[j - 1] = cs * e[j - 1];\n                    }\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][p - 1];\n                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                            V[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 2 : {\n                f = e[k - 1];\n                e[k - 1] = 0;\n                for (j = k; j < p; j++) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    f = -sn * e[j];\n                    e[j] = cs * e[j];\n                    if (wantu) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][k - 1];\n                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 3 : {\n                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n                sp = s[p - 1] / scale;\n                spm1 = s[p - 2] / scale;\n                epm1 = e[p - 2] / scale;\n                sk = s[k] / scale;\n                ek = e[k] / scale;\n                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n                c = (sp * epm1) * (sp * epm1);\n                shift = 0;\n                if ((b !== 0) || (c !== 0)) {\n                    shift = Math.sqrt(b * b + c);\n                    if (b < 0) {\n                        shift = -shift;\n                    }\n                    shift = c / (b + shift);\n                }\n                f = (sk + sp) * (sk - sp) + shift;\n                g = sk * ek;\n                for (j = k; j < p - 1; j++) {\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    if (j !== k) {\n                        e[j - 1] = t;\n                    }\n                    f = cs * s[j] + sn * e[j];\n                    e[j] = cs * e[j] - sn * s[j];\n                    g = sn * s[j + 1];\n                    s[j + 1] = cs * s[j + 1];\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][j + 1];\n                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                            V[i][j] = t;\n                        }\n                    }\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    s[j] = t;\n                    f = cs * e[j] + sn * s[j + 1];\n                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n                    g = sn * e[j + 1];\n                    e[j + 1] = cs * e[j + 1];\n                    if (wantu && (j < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][j + 1];\n                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                e[p - 2] = f;\n                iter = iter + 1;\n                break;\n            }\n            case 4: {\n                if (s[k] <= 0) {\n                    s[k] = (s[k] < 0 ? -s[k] : 0);\n                    if (wantv) {\n                        for (i = 0; i <= pp; i++) {\n                            V[i][k] = -V[i][k];\n                        }\n                    }\n                }\n                while (k < pp) {\n                    if (s[k] >= s[k + 1]) {\n                        break;\n                    }\n                    t = s[k];\n                    s[k] = s[k + 1];\n                    s[k + 1] = t;\n                    if (wantv && (k < n - 1)) {\n                        for (i = 0; i < n; i++) {\n                            t = V[i][k + 1];\n                            V[i][k + 1] = V[i][k];\n                            V[i][k] = t;\n                        }\n                    }\n                    if (wantu && (k < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = U[i][k + 1];\n                            U[i][k + 1] = U[i][k];\n                            U[i][k] = t;\n                        }\n                    }\n                    k++;\n                }\n                iter = 0;\n                p--;\n                break;\n            }\n        }\n    }\n\n    if (swapped) {\n        var tmp = V;\n        V = U;\n        U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n}\n\nSingularValueDecomposition.prototype = {\n    get condition() {\n        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    get norm2() {\n        return this.s[0];\n    },\n    get rank() {\n        var eps = Math.pow(2, -52),\n            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n            r = 0,\n            s = this.s;\n        for (var i = 0, ii = s.length; i < ii; i++) {\n            if (s[i] > tol) {\n                r++;\n            }\n        }\n        return r;\n    },\n    get diagonal() {\n        return this.s;\n    },\n    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n    get threshold() {\n        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n    },\n    get leftSingularVectors() {\n        return this.U;\n    },\n    get rightSingularVectors() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        return Matrix.diag(this.s);\n    },\n    solve: function (value) {\n\n        var Y = value,\n            e = this.threshold,\n            scols = this.s.length,\n            Ls = Matrix.zeros(scols, scols),\n            i;\n\n        for (i = 0; i < scols; i++) {\n            if (Math.abs(this.s[i]) <= e) {\n                Ls[i][i] = 0;\n            } else {\n                Ls[i][i] = 1 / this.s[i];\n            }\n        }\n\n\n        var VL = this.V.mmul(Ls),\n            vrows = this.V.rows,\n            urows = this.U.rows,\n            VLU = Matrix.zeros(vrows, urows),\n            j, k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < scols; k++) {\n                    sum += VL[i][k] * this.U[j][k];\n                }\n                VLU[i][j] = sum;\n            }\n        }\n\n        return VLU.mmul(Y);\n    },\n    solveForDiagonal: function (value) {\n        return this.solve(Matrix.diag(value));\n    },\n    inverse: function () {\n        var e = this.threshold,\n            vrows = this.V.rows,\n            vcols = this.V.columns,\n            X = new Matrix(vrows, this.s.length),\n            i, j;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < vcols; j++) {\n                if (Math.abs(this.s[j]) > e) {\n                    X[i][j] = this.V[i][j] / this.s[j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n\n        var urows = this.U.rows,\n            ucols = this.U.columns,\n            Y = new Matrix(vrows, urows),\n            k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < ucols; k++) {\n                    sum += X[i][k] * this.U[j][k];\n                }\n                Y[i][j] = sum;\n            }\n        }\n\n        return Y;\n    }\n};\n\nmodule.exports = SingularValueDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-pls/~/ml-matrix/src/dc/svd.js\n ** module id = 120\n ** module chunks = 0\n **/","'use strict';\n\nexports.hypotenuse = function hypotenuse(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n        r = b / a;\n        return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n        r = a / b;\n        return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-pls/~/ml-matrix/src/dc/util.js\n ** module id = 121\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\nfunction EigenvalueDecomposition(matrix) {\n    if (!(this instanceof EigenvalueDecomposition)) {\n        return new EigenvalueDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n        throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns,\n        V = Matrix.zeros(n, n),\n        d = new Array(n),\n        e = new Array(n),\n        value = matrix,\n        i, j;\n\n    if (matrix.isSymmetric()) {\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                V[i][j] = value[i][j];\n            }\n        }\n        tred2(n, e, d, V);\n        tql2(n, e, d, V);\n    }\n    else {\n        var H = Matrix.zeros(n, n),\n            ort = new Array(n);\n        for (j = 0; j < n; j++) {\n            for (i = 0; i < n; i++) {\n                H[i][j] = value[i][j];\n            }\n        }\n        orthes(n, H, ort, V);\n        hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n}\n\nEigenvalueDecomposition.prototype = {\n    get realEigenvalues() {\n        return this.d;\n    },\n    get imaginaryEigenvalues() {\n        return this.e;\n    },\n    get eigenvectorMatrix() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        var n = this.n,\n            e = this.e,\n            d = this.d,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                X[i][j] = 0;\n            }\n            X[i][i] = d[i];\n            if (e[i] > 0) {\n                X[i][i + 1] = e[i];\n            }\n            else if (e[i] < 0) {\n                X[i][i - 1] = e[i];\n            }\n        }\n        return X;\n    }\n};\n\nfunction tred2(n, e, d, V) {\n\n    var f, g, h, i, j, k,\n        hh, scale;\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n    }\n\n    for (i = n - 1; i > 0; i--) {\n        scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n            scale = scale + Math.abs(d[k]);\n        }\n\n        if (scale === 0) {\n            e[i] = d[i - 1];\n            for (j = 0; j < i; j++) {\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n                V[j][i] = 0;\n            }\n        } else {\n            for (k = 0; k < i; k++) {\n                d[k] /= scale;\n                h += d[k] * d[k];\n            }\n\n            f = d[i - 1];\n            g = Math.sqrt(h);\n            if (f > 0) {\n                g = -g;\n            }\n\n            e[i] = scale * g;\n            h = h - f * g;\n            d[i - 1] = f - g;\n            for (j = 0; j < i; j++) {\n                e[j] = 0;\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                V[j][i] = f;\n                g = e[j] + V[j][j] * f;\n                for (k = j + 1; k <= i - 1; k++) {\n                    g += V[k][j] * d[k];\n                    e[k] += V[k][j] * f;\n                }\n                e[j] = g;\n            }\n\n            f = 0;\n            for (j = 0; j < i; j++) {\n                e[j] /= h;\n                f += e[j] * d[j];\n            }\n\n            hh = f / (h + h);\n            for (j = 0; j < i; j++) {\n                e[j] -= hh * d[j];\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                g = e[j];\n                for (k = j; k <= i - 1; k++) {\n                    V[k][j] -= (f * e[k] + g * d[k]);\n                }\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n            }\n        }\n        d[i] = h;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        V[n - 1][i] = V[i][i];\n        V[i][i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n            for (k = 0; k <= i; k++) {\n                d[k] = V[k][i + 1] / h;\n            }\n\n            for (j = 0; j <= i; j++) {\n                g = 0;\n                for (k = 0; k <= i; k++) {\n                    g += V[k][i + 1] * V[k][j];\n                }\n                for (k = 0; k <= i; k++) {\n                    V[k][j] -= g * d[k];\n                }\n            }\n        }\n\n        for (k = 0; k <= i; k++) {\n            V[k][i + 1] = 0;\n        }\n    }\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n        V[n - 1][j] = 0;\n    }\n\n    V[n - 1][n - 1] = 1;\n    e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n\n    var g, h, i, j, k, l, m, p, r,\n        dl1, c, c2, c3, el1, s, s2,\n        iter;\n\n    for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n    }\n\n    e[n - 1] = 0;\n\n    var f = 0,\n        tst1 = 0,\n        eps = Math.pow(2, -52);\n\n    for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        m = l;\n        while (m < n) {\n            if (Math.abs(e[m]) <= eps * tst1) {\n                break;\n            }\n            m++;\n        }\n\n        if (m > l) {\n            iter = 0;\n            do {\n                iter = iter + 1;\n\n                g = d[l];\n                p = (d[l + 1] - g) / (2 * e[l]);\n                r = hypotenuse(p, 1);\n                if (p < 0) {\n                    r = -r;\n                }\n\n                d[l] = e[l] / (p + r);\n                d[l + 1] = e[l] * (p + r);\n                dl1 = d[l + 1];\n                h = g - d[l];\n                for (i = l + 2; i < n; i++) {\n                    d[i] -= h;\n                }\n\n                f = f + h;\n\n                p = d[m];\n                c = 1;\n                c2 = c;\n                c3 = c;\n                el1 = e[l + 1];\n                s = 0;\n                s2 = 0;\n                for (i = m - 1; i >= l; i--) {\n                    c3 = c2;\n                    c2 = c;\n                    s2 = s;\n                    g = c * e[i];\n                    h = c * p;\n                    r = hypotenuse(p, e[i]);\n                    e[i + 1] = s * r;\n                    s = e[i] / r;\n                    c = p / r;\n                    p = c * d[i] - s * g;\n                    d[i + 1] = h + s * (c * g + s * d[i]);\n\n                    for (k = 0; k < n; k++) {\n                        h = V[k][i + 1];\n                        V[k][i + 1] = s * V[k][i] + c * h;\n                        V[k][i] = c * V[k][i] - s * h;\n                    }\n                }\n\n                p = -s * s2 * c3 * el1 * e[l] / dl1;\n                e[l] = s * p;\n                d[l] = c * p;\n\n            }\n            while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n            if (d[j] < p) {\n                k = j;\n                p = d[j];\n            }\n        }\n\n        if (k !== i) {\n            d[k] = d[i];\n            d[i] = p;\n            for (j = 0; j < n; j++) {\n                p = V[j][i];\n                V[j][i] = V[j][k];\n                V[j][k] = p;\n            }\n        }\n    }\n}\n\nfunction orthes(n, H, ort, V) {\n\n    var low = 0,\n        high = n - 1,\n        f, g, h, i, j, m,\n        scale;\n\n    for (m = low + 1; m <= high - 1; m++) {\n        scale = 0;\n        for (i = m; i <= high; i++) {\n            scale = scale + Math.abs(H[i][m - 1]);\n        }\n\n        if (scale !== 0) {\n            h = 0;\n            for (i = high; i >= m; i--) {\n                ort[i] = H[i][m - 1] / scale;\n                h += ort[i] * ort[i];\n            }\n\n            g = Math.sqrt(h);\n            if (ort[m] > 0) {\n                g = -g;\n            }\n\n            h = h - ort[m] * g;\n            ort[m] = ort[m] - g;\n\n            for (j = m; j < n; j++) {\n                f = 0;\n                for (i = high; i >= m; i--) {\n                    f += ort[i] * H[i][j];\n                }\n\n                f = f / h;\n                for (i = m; i <= high; i++) {\n                    H[i][j] -= f * ort[i];\n                }\n            }\n\n            for (i = 0; i <= high; i++) {\n                f = 0;\n                for (j = high; j >= m; j--) {\n                    f += ort[j] * H[i][j];\n                }\n\n                f = f / h;\n                for (j = m; j <= high; j++) {\n                    H[i][j] -= f * ort[j];\n                }\n            }\n\n            ort[m] = scale * ort[m];\n            H[m][m - 1] = scale * g;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            V[i][j] = (i === j ? 1 : 0);\n        }\n    }\n\n    for (m = high - 1; m >= low + 1; m--) {\n        if (H[m][m - 1] !== 0) {\n            for (i = m + 1; i <= high; i++) {\n                ort[i] = H[i][m - 1];\n            }\n\n            for (j = m; j <= high; j++) {\n                g = 0;\n                for (i = m; i <= high; i++) {\n                    g += ort[i] * V[i][j];\n                }\n\n                g = (g / ort[m]) / H[m][m - 1];\n                for (i = m; i <= high; i++) {\n                    V[i][j] += g * ort[i];\n                }\n            }\n        }\n    }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n    var n = nn - 1,\n        low = 0,\n        high = nn - 1,\n        eps = Math.pow(2, -52),\n        exshift = 0,\n        norm = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n        s = 0,\n        z = 0,\n        iter = 0,\n        i, j, k, l, m, t, w, x, y,\n        ra, sa, vr, vi,\n        notlast, cdivres;\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            d[i] = H[i][i];\n            e[i] = 0;\n        }\n\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n            norm = norm + Math.abs(H[i][j]);\n        }\n    }\n\n    while (n >= low) {\n        l = n;\n        while (l > low) {\n            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n            if (s === 0) {\n                s = norm;\n            }\n            if (Math.abs(H[l][l - 1]) < eps * s) {\n                break;\n            }\n            l--;\n        }\n\n        if (l === n) {\n            H[n][n] = H[n][n] + exshift;\n            d[n] = H[n][n];\n            e[n] = 0;\n            n--;\n            iter = 0;\n        } else if (l === n - 1) {\n            w = H[n][n - 1] * H[n - 1][n];\n            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n            q = p * p + w;\n            z = Math.sqrt(Math.abs(q));\n            H[n][n] = H[n][n] + exshift;\n            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n            x = H[n][n];\n\n            if (q >= 0) {\n                z = (p >= 0) ? (p + z) : (p - z);\n                d[n - 1] = x + z;\n                d[n] = d[n - 1];\n                if (z !== 0) {\n                    d[n] = x - w / z;\n                }\n                e[n - 1] = 0;\n                e[n] = 0;\n                x = H[n][n - 1];\n                s = Math.abs(x) + Math.abs(z);\n                p = x / s;\n                q = z / s;\n                r = Math.sqrt(p * p + q * q);\n                p = p / r;\n                q = q / r;\n\n                for (j = n - 1; j < nn; j++) {\n                    z = H[n - 1][j];\n                    H[n - 1][j] = q * z + p * H[n][j];\n                    H[n][j] = q * H[n][j] - p * z;\n                }\n\n                for (i = 0; i <= n; i++) {\n                    z = H[i][n - 1];\n                    H[i][n - 1] = q * z + p * H[i][n];\n                    H[i][n] = q * H[i][n] - p * z;\n                }\n\n                for (i = low; i <= high; i++) {\n                    z = V[i][n - 1];\n                    V[i][n - 1] = q * z + p * V[i][n];\n                    V[i][n] = q * V[i][n] - p * z;\n                }\n            } else {\n                d[n - 1] = x + p;\n                d[n] = x + p;\n                e[n - 1] = z;\n                e[n] = -z;\n            }\n\n            n = n - 2;\n            iter = 0;\n        } else {\n            x = H[n][n];\n            y = 0;\n            w = 0;\n            if (l < n) {\n                y = H[n - 1][n - 1];\n                w = H[n][n - 1] * H[n - 1][n];\n            }\n\n            if (iter === 10) {\n                exshift += x;\n                for (i = low; i <= n; i++) {\n                    H[i][i] -= x;\n                }\n                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n                x = y = 0.75 * s;\n                w = -0.4375 * s * s;\n            }\n\n            if (iter === 30) {\n                s = (y - x) / 2;\n                s = s * s + w;\n                if (s > 0) {\n                    s = Math.sqrt(s);\n                    if (y < x) {\n                        s = -s;\n                    }\n                    s = x - w / ((y - x) / 2 + s);\n                    for (i = low; i <= n; i++) {\n                        H[i][i] -= s;\n                    }\n                    exshift += s;\n                    x = y = w = 0.964;\n                }\n            }\n\n            iter = iter + 1;\n\n            m = n - 2;\n            while (m >= l) {\n                z = H[m][m];\n                r = x - z;\n                s = y - z;\n                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n                q = H[m + 1][m + 1] - z - r - s;\n                r = H[m + 2][m + 1];\n                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                p = p / s;\n                q = q / s;\n                r = r / s;\n                if (m === l) {\n                    break;\n                }\n                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n                    break;\n                }\n                m--;\n            }\n\n            for (i = m + 2; i <= n; i++) {\n                H[i][i - 2] = 0;\n                if (i > m + 2) {\n                    H[i][i - 3] = 0;\n                }\n            }\n\n            for (k = m; k <= n - 1; k++) {\n                notlast = (k !== n - 1);\n                if (k !== m) {\n                    p = H[k][k - 1];\n                    q = H[k + 1][k - 1];\n                    r = (notlast ? H[k + 2][k - 1] : 0);\n                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                    if (x !== 0) {\n                        p = p / x;\n                        q = q / x;\n                        r = r / x;\n                    }\n                }\n\n                if (x === 0) {\n                    break;\n                }\n\n                s = Math.sqrt(p * p + q * q + r * r);\n                if (p < 0) {\n                    s = -s;\n                }\n\n                if (s !== 0) {\n                    if (k !== m) {\n                        H[k][k - 1] = -s * x;\n                    } else if (l !== m) {\n                        H[k][k - 1] = -H[k][k - 1];\n                    }\n\n                    p = p + s;\n                    x = p / s;\n                    y = q / s;\n                    z = r / s;\n                    q = q / p;\n                    r = r / p;\n\n                    for (j = k; j < nn; j++) {\n                        p = H[k][j] + q * H[k + 1][j];\n                        if (notlast) {\n                            p = p + r * H[k + 2][j];\n                            H[k + 2][j] = H[k + 2][j] - p * z;\n                        }\n\n                        H[k][j] = H[k][j] - p * x;\n                        H[k + 1][j] = H[k + 1][j] - p * y;\n                    }\n\n                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n                        p = x * H[i][k] + y * H[i][k + 1];\n                        if (notlast) {\n                            p = p + z * H[i][k + 2];\n                            H[i][k + 2] = H[i][k + 2] - p * r;\n                        }\n\n                        H[i][k] = H[i][k] - p;\n                        H[i][k + 1] = H[i][k + 1] - p * q;\n                    }\n\n                    for (i = low; i <= high; i++) {\n                        p = x * V[i][k] + y * V[i][k + 1];\n                        if (notlast) {\n                            p = p + z * V[i][k + 2];\n                            V[i][k + 2] = V[i][k + 2] - p * r;\n                        }\n\n                        V[i][k] = V[i][k] - p;\n                        V[i][k + 1] = V[i][k + 1] - p * q;\n                    }\n                }\n            }\n        }\n    }\n\n    if (norm === 0) {\n        return;\n    }\n\n    for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n\n        if (q === 0) {\n            l = n;\n            H[n][n] = 1;\n            for (i = n - 1; i >= 0; i--) {\n                w = H[i][i] - p;\n                r = 0;\n                for (j = l; j <= n; j++) {\n                    r = r + H[i][j] * H[j][n];\n                }\n\n                if (e[i] < 0) {\n                    z = w;\n                    s = r;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                        t = (x * s - z * r) / q;\n                        H[i][n] = t;\n                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n                    }\n\n                    t = Math.abs(H[i][n]);\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        } else if (q < 0) {\n            l = n - 1;\n\n            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n                H[n - 1][n - 1] = q / H[n][n - 1];\n                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n            } else {\n                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n                H[n - 1][n - 1] = cdivres[0];\n                H[n - 1][n] = cdivres[1];\n            }\n\n            H[n][n - 1] = 0;\n            H[n][n] = 1;\n            for (i = n - 2; i >= 0; i--) {\n                ra = 0;\n                sa = 0;\n                for (j = l; j <= n; j++) {\n                    ra = ra + H[i][j] * H[j][n - 1];\n                    sa = sa + H[i][j] * H[j][n];\n                }\n\n                w = H[i][i] - p;\n\n                if (e[i] < 0) {\n                    z = w;\n                    r = ra;\n                    s = sa;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        cdivres = cdiv(-ra, -sa, w, q);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                        vi = (d[i] - p) * 2 * q;\n                        if (vr === 0 && vi === 0) {\n                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                        }\n                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n                        } else {\n                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n                            H[i + 1][n - 1] = cdivres[0];\n                            H[i + 1][n] = cdivres[1];\n                        }\n                    }\n\n                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n - 1] = H[j][n - 1] / t;\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            for (j = i; j < nn; j++) {\n                V[i][j] = H[i][j];\n            }\n        }\n    }\n\n    for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n            z = 0;\n            for (k = low; k <= Math.min(j, high); k++) {\n                z = z + V[i][k] * H[k][j];\n            }\n            V[i][j] = z;\n        }\n    }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n    var r, d;\n    if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        return [(xr + r * xi) / d, (xi - r * xr) / d];\n    }\n    else {\n        r = yr / yi;\n        d = yi + r * yr;\n        return [(r * xr + xi) / d, (r * xi - xr) / d];\n    }\n}\n\nmodule.exports = EigenvalueDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-pls/~/ml-matrix/src/dc/evd.js\n ** module id = 122\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\nfunction LuDecomposition(matrix) {\n    if (!(this instanceof LuDecomposition)) {\n        return new LuDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n\n    var lu = matrix.clone(),\n        rows = lu.rows,\n        columns = lu.columns,\n        pivotVector = new Array(rows),\n        pivotSign = 1,\n        i, j, k, p, s, t, v,\n        LUrowi, LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n        pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n\n        for (i = 0; i < rows; i++) {\n            LUcolj[i] = lu[i][j];\n        }\n\n        for (i = 0; i < rows; i++) {\n            LUrowi = lu[i];\n            kmax = Math.min(i, j);\n            s = 0;\n            for (k = 0; k < kmax; k++) {\n                s += LUrowi[k] * LUcolj[k];\n            }\n            LUrowi[j] = LUcolj[i] -= s;\n        }\n\n        p = j;\n        for (i = j + 1; i < rows; i++) {\n            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n                p = i;\n            }\n        }\n\n        if (p !== j) {\n            for (k = 0; k < columns; k++) {\n                t = lu[p][k];\n                lu[p][k] = lu[j][k];\n                lu[j][k] = t;\n            }\n\n            v = pivotVector[p];\n            pivotVector[p] = pivotVector[j];\n            pivotVector[j] = v;\n\n            pivotSign = -pivotSign;\n        }\n\n        if (j < rows && lu[j][j] !== 0) {\n            for (i = j + 1; i < rows; i++) {\n                lu[i][j] /= lu[j][j];\n            }\n        }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n}\n\nLuDecomposition.prototype = {\n    isSingular: function () {\n        var data = this.LU,\n            col = data.columns;\n        for (var j = 0; j < col; j++) {\n            if (data[j][j] === 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    get determinant() {\n        var data = this.LU;\n        if (!data.isSquare())\n            throw new Error('Matrix must be square');\n        var determinant = this.pivotSign, col = data.columns;\n        for (var j = 0; j < col; j++)\n            determinant *= data[j][j];\n        return determinant;\n    },\n    get lowerTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i > j) {\n                    X[i][j] = data[i][j];\n                } else if (i === j) {\n                    X[i][j] = 1;\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get upperTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i <= j) {\n                    X[i][j] = data[i][j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get pivotPermutationVector() {\n        return this.pivotVector.slice();\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var lu = this.LU,\n            rows = lu.rows;\n\n        if (rows !== value.rows)\n            throw new Error('Invalid matrix dimensions');\n        if (this.isSingular())\n            throw new Error('LU matrix is singular');\n\n        var count = value.columns,\n            X = value.subMatrixRow(this.pivotVector, 0, count - 1),\n            columns = lu.columns,\n            i, j, k;\n\n        for (k = 0; k < columns; k++) {\n            for (i = k + 1; i < columns; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        for (k = columns - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= lu[k][k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = LuDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-pls/~/ml-matrix/src/dc/lu.js\n ** module id = 123\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\nfunction QrDecomposition(value) {\n    if (!(this instanceof QrDecomposition)) {\n        return new QrDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n\n    var qr = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        rdiag = new Array(n),\n        i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) {\n            nrm = hypotenuse(nrm, qr[i][k]);\n        }\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) {\n                nrm = -nrm;\n            }\n            for (i = k; i < m; i++) {\n                qr[i][k] /= nrm;\n            }\n            qr[k][k] += 1;\n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * qr[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    qr[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n}\n\nQrDecomposition.prototype = {\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var qr = this.QR,\n            m = qr.rows;\n\n        if (value.rows !== m)\n            throw new Error('Matrix row dimensions must agree');\n        if (!this.isFullRank())\n            throw new Error('Matrix is rank deficient');\n\n        var count = value.columns,\n            X = value.clone(),\n            n = qr.columns,\n            i, j, k, s;\n\n        for (k = 0; k < n; k++) {\n            for (j = 0; j < count; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * X[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    X[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        for (k = n - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= this.Rdiag[k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * qr[i][k];\n                }\n            }\n        }\n\n        return X.subMatrix(0, n - 1, 0, count - 1);\n    },\n    isFullRank: function () {\n        var columns = this.QR.columns;\n        for (var i = 0; i < columns; i++) {\n            if (this.Rdiag[i] === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n    get upperTriangularFactor() {\n        var qr = this.QR,\n            n = qr.columns,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                if (i < j) {\n                    X[i][j] = qr[i][j];\n                } else if (i === j) {\n                    X[i][j] = this.Rdiag[i];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get orthogonalFactor() {\n        var qr = this.QR,\n            rows = qr.rows,\n            columns = qr.columns,\n            X = new Matrix(rows, columns),\n            i, j, k, s;\n\n        for (k = columns - 1; k >= 0; k--) {\n            for (i = 0; i < rows; i++) {\n                X[i][k] = 0;\n            }\n            X[k][k] = 1;\n            for (j = k; j < columns; j++) {\n                if (qr[k][k] !== 0) {\n                    s = 0;\n                    for (i = k; i < rows; i++) {\n                        s += qr[i][k] * X[i][j];\n                    }\n\n                    s = -s / qr[k][k];\n\n                    for (i = k; i < rows; i++) {\n                        X[i][j] += s * qr[i][k];\n                    }\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = QrDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-pls/~/ml-matrix/src/dc/qr.js\n ** module id = 124\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\nfunction CholeskyDecomposition(value) {\n    if (!(this instanceof CholeskyDecomposition)) {\n        return new CholeskyDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n    if (!value.isSymmetric())\n        throw new Error('Matrix is not symmetric');\n\n    var a = value,\n        dimension = a.rows,\n        l = new Matrix(dimension, dimension),\n        positiveDefinite = true,\n        i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n        var Lrowj = l[j];\n        var d = 0;\n        for (k = 0; k < j; k++) {\n            var Lrowk = l[k];\n            var s = 0;\n            for (i = 0; i < k; i++) {\n                s += Lrowk[i] * Lrowj[i];\n            }\n            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n            d = d + s * s;\n        }\n\n        d = a[j][j] - d;\n\n        positiveDefinite &= (d > 0);\n        l[j][j] = Math.sqrt(Math.max(d, 0));\n        for (k = j + 1; k < dimension; k++) {\n            l[j][k] = 0;\n        }\n    }\n\n    if (!positiveDefinite) {\n        throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n}\n\nCholeskyDecomposition.prototype = {\n    get leftTriangularFactor() {\n        return this.L;\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var l = this.L,\n            dimension = l.rows;\n\n        if (value.rows !== dimension) {\n            throw new Error('Matrix dimensions do not match');\n        }\n\n        var count = value.columns,\n            B = value.clone(),\n            i, j, k;\n\n        for (k = 0; k < dimension; k++) {\n            for (j = 0; j < count; j++) {\n                for (i = 0; i < k; i++) {\n                    B[k][j] -= B[i][j] * l[k][i];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        for (k = dimension - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                for (i = k + 1; i < dimension; i++) {\n                    B[k][j] -= B[i][j] * l[i][k];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        return B;\n    }\n};\n\nmodule.exports = CholeskyDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-pls/~/ml-matrix/src/dc/cholesky.js\n ** module id = 125\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('ml-matrix');\nvar Stat = require('ml-stat');\n\n/**\n * Function that given vector, returns his norm\n * @param {Vector} X\n * @returns {number} Norm of the vector\n */\nfunction norm(X) {\n    return Math.sqrt(X.clone().apply(pow2array).sum());\n}\n\n/**\n * Function that pow 2 each element of a Matrix or a Vector,\n * used in the apply method of the Matrix object\n * @param i - index i.\n * @param j - index j.\n * @return The Matrix object modified at the index i, j.\n * */\nfunction pow2array(i, j) {\n    this[i][j] = this[i][j] * this[i][j];\n    return this;\n}\n\n/**\n * Function that normalize the dataset and return the means and\n * standard deviation of each feature.\n * @param dataset\n * @returns {{result: Matrix, means: (*|number), std: Matrix}} dataset normalized, means\n *                                                             and standard deviations\n */\nfunction featureNormalize(dataset) {\n    var means = Stat.matrix.mean(dataset);\n    var std = Matrix.rowVector(Stat.matrix.standardDeviation(dataset, means, true));\n    means = Matrix.rowVector(means);\n\n    var result = dataset.addRowVector(means.neg());\n    return {result: result.divRowVector(std), means: means, std: std};\n}\n\nmodule.exports = {\n    norm: norm,\n    pow2array: pow2array,\n    featureNormalize: featureNormalize\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-pls/src/utils.js\n ** module id = 126\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('ml-matrix');\nvar Utils = require('./utils');\n\nmodule.exports = OPLS;\n\nfunction OPLS(dataset, predictions, numberOSC) {\n    var X = Matrix(dataset).clone();\n    var y = Matrix(predictions).clone();\n\n    X = Utils.featureNormalize(X).result;\n    y = Utils.featureNormalize(y).result;\n\n    var rows = X.rows;\n    var columns = X.columns;\n\n    var sumOfSquaresX = X.clone().mul(X).sum();\n    var w = X.transpose().mmul(y);\n    w.div(Utils.norm(w));\n\n    var orthoW = new Array(numberOSC);\n    var orthoT = new Array(numberOSC);\n    var orthoP = new Array(numberOSC);\n    for (var i = 0; i < numberOSC; i++) {\n        var t = X.mmul(w);\n\n        var numerator = X.transpose().mmul(t);\n        var denominator = t.transpose().mmul(t)[0][0];\n        var p =  numerator.div(denominator);\n\n        numerator = w.transpose().mmul(p)[0][0];\n        denominator = w.transpose().mmul(w)[0][0];\n        var wOsc = p.sub(w.clone().mul(numerator / denominator));\n        wOsc.div(Utils.norm(wOsc));\n\n        var tOsc = X.mmul(wOsc);\n\n        numerator = X.transpose().mmul(tOsc);\n        denominator = tOsc.transpose().mmul(tOsc)[0][0];\n        var pOsc = numerator.div(denominator);\n\n        X.sub(tOsc.mmul(pOsc.transpose()));\n        orthoW[i] = wOsc.getColumn(0);\n        orthoT[i] = tOsc.getColumn(0);\n        orthoP[i] = pOsc.getColumn(0);\n    }\n\n    this.Xosc = X;\n\n    var sumOfSquaresXosx = this.Xosc.clone().mul(this.Xosc).sum();\n    this.R2X = 1 - sumOfSquaresXosx/sumOfSquaresX;\n\n    this.W = orthoW;\n    this.T = orthoT;\n    this.P = orthoP;\n    this.numberOSC = numberOSC;\n}\n\nOPLS.prototype.correctDataset = function (dataset) {\n    var X = Matrix(dataset).clone();\n    //X = Utils.featureNormalize(dataset).result;\n\n    var sumOfSquaresX = X.clone().mul(X).sum();\n    for (var i = 0; i < this.numberOSC; i++) {\n        var currentW = this.W.getColumnVector(i);\n        var currentP = this.P.getColumnVector(i);\n\n        var t = X.mmul(currentW);\n        X.sub(t.mmul(currentP));\n    }\n    var sumOfSquaresXosx = X.clone().mul(X).sum();\n\n    var R2X = 1 - sumOfSquaresXosx / sumOfSquaresX;\n\n    return {\n        datasetOsc: X,\n        R2Dataset: R2X\n    };\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-pls/src/opls.js\n ** module id = 127\n ** module chunks = 0\n **/","module.exports = require('./kmeans');\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-kmeans/src/index.js\n ** module id = 128\n ** module chunks = 0\n **/","'use strict';\n\n/**\n * Calculates the squared distance between two vectors\n * @param {Array<number>} vec1 - the x vector\n * @param {Array<number>} vec2 - the y vector\n * @returns {number} sum - the calculated distance\n */\nfunction squaredDistance(vec1, vec2) {\n    var sum = 0;\n    var dim = vec1.length;\n    for (var i = 0; i < dim; i++)\n        sum += (vec1[i] - vec2[i]) * (vec1[i] - vec2[i]);\n    return sum;\n}\n\n/**\n * Calculates the sum of squared errors\n * @param {Array <Array <number>>} data - the (x,y) points to cluster\n * @param {Array <Array <number>>} centers - the K centers in format (x,y)\n * @param {Array <number>} clusterID - the cluster identifier for each data dot\n * @returns {number} the sum of squared errors\n */\nfunction computeSSE(data, centers, clusterID) {\n    var sse = 0;\n    var nData = data.length;\n    var c = 0;\n    for (var i = 0; i < nData;i++) {\n        c = clusterID[i];\n        sse += squaredDistance(data[i], centers[c]);\n    }\n    return sse;\n}\n\n/**\n * Updates the cluster identifier based in the new data\n * @param {Array <Array <number>>} data - the (x,y) points to cluster\n * @param {Array <Array <number>>} centers - the K centers in format (x,y)\n * @returns {Array} the cluster identifier for each data dot\n */\nfunction updateClusterID (data, centers) {\n    var nData = data.length;\n    var k = centers.length;\n    var aux = 0;\n    var clusterID = new Array(nData);\n    for (var i = 0; i < nData; i++)\n        clusterID[i] = 0;\n    var d = new Array(nData);\n    for (var i = 0; i < nData; i++) {\n        d[i] = new Array(k);\n        for (var j = 0; j < k; j++) {\n            aux = squaredDistance(data[i], centers[j]);\n            d[i][j] = new Array(2);\n            d[i][j][0] = aux;\n            d[i][j][1] = j;\n        }\n        var min = d[i][0][0];\n        var id = 0;\n        for (var j = 0; j < k; j++)\n            if (d[i][j][0] < min) {\n                min  = d[i][j][0];\n                id = d[i][j][1];\n            }\n        clusterID[i] = id;\n    }\n    return clusterID;\n}\n\n/**\n * Update the center values based in the new configurations of the clusters\n * @param {Array <Array <number>>} data - the (x,y) points to cluster\n * @param {Array <number>} clusterID - the cluster identifier for each data dot\n * @param K - number of clusters\n * @returns {Array} he K centers in format (x,y)\n */\nfunction updateCenters(data, clusterID, K) {\n    var nDim = data[0].length;\n    var nData = data.length;\n    var centers = new Array(K);\n    for (var i = 0; i < K; i++) {\n        centers[i] = new Array(nDim);\n        for (var j = 0; j < nDim; j++)\n            centers[i][j] = 0;\n    }\n\n    for (var k = 0; k < K; k++) {\n        var cluster = [];\n        for (var i = 0; i < nData;i++)\n            if (clusterID[i] == k)\n                cluster.push(data[i]);\n        for (var d = 0; d < nDim; d++) {\n            var x = [];\n            for (var i = 0; i < nData; i++)\n                if (clusterID[i] == k)\n                    x.push(data[i][d]);\n            var sum = 0;\n            var l = x.length;\n            for (var i = 0; i < l; i++)\n                sum += x[i];\n            centers[k][d] = sum / l;\n        }\n    }\n    return centers;\n}\n\n/**\n * K-means algorithm\n * @param {Array <Array <number>>} data - the (x,y) points to cluster\n * @param {Array <Array <number>>} centers - the K centers in format (x,y)\n * @param {Object} props - properties\n * @param {number} maxIter - maximum of iterations allowed\n * @param {number} tol - the error tolerance\n * @param {boolean} withIter - store clusters and centroids for each iteration\n * @returns {Object} the cluster identifier for each data dot and centroids\n */\nfunction kmeans(data, centers, props) {\n    var maxIter, tol, withIter;\n    if (typeof props === \"undefined\") {\n        maxIter = 100;\n        tol = 1e-6;\n        withIter = false;\n    } else {\n        maxIter = (typeof props.maxIter === \"undefined\") ? 100 : props.maxIter;\n        tol = (typeof props.tol === \"undefined\") ? 1e-6 : props.tol;\n        withIter = (typeof props.withIter === \"undefined\") ? false : props.withIter;\n    }\n\n    var nData = data.length;\n    if (nData == 0) {\n        return [];\n    }\n    var K = centers.length;\n    var clusterID = new Array(nData);\n    for (var i = 0; i < nData; i++)\n        clusterID[i] = 0;\n    if (K >= nData) {\n        for (var i = 0; i < nData; i++)\n            clusterID[i] = i;\n        return clusterID;\n    }\n    var lastDistance;\n    lastDistance = 1e100;\n    var curDistance = 0;\n    var iterations = [];\n    for (var iter = 0; iter < maxIter; iter++) {\n        clusterID = updateClusterID(data, centers);\n        centers = updateCenters(data, clusterID, K);\n        curDistance = computeSSE(data, centers, clusterID);\n        if (withIter) {\n            iterations.push({\n                \"clusters\": clusterID,\n                \"centroids\": centers\n            });\n        }\n\n        if ((lastDistance - curDistance < tol) || ((lastDistance - curDistance)/lastDistance < tol)) {\n            if (withIter) {\n                return {\n                    \"clusters\": clusterID,\n                    \"centroids\": centers,\n                    \"iterations\": iterations\n                };\n            } else {\n                return {\n                    \"clusters\": clusterID,\n                    \"centroids\": centers\n                };\n            }\n        }\n        lastDistance = curDistance;\n    }\n    if (withIter) {\n        return {\n            \"clusters\": clusterID,\n            \"centroids\": centers,\n            \"iterations\": iterations\n        };\n    } else {\n        return {\n            \"clusters\": clusterID,\n            \"centroids\": centers\n        };\n    }\n}\n\nmodule.exports = kmeans;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-kmeans/src/kmeans.js\n ** module id = 129\n ** module chunks = 0\n **/","exports.agnes = require('./agnes');\nexports.diana = require('./diana');\n//exports.birch = require('./birch');\n//exports.cure = require('./cure');\n//exports.chameleon = require('./chameleon');\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-hclust/src/index.js\n ** module id = 130\n ** module chunks = 0\n **/","'use strict';\n\nvar euclidean = require('ml-euclidean-distance');\nvar ClusterLeaf = require('./ClusterLeaf');\nvar Cluster = require('./Cluster');\n\n/**\n * @param cluster1\n * @param cluster2\n * @param disFun\n * @returns {number}\n */\nfunction simpleLink(cluster1, cluster2, disFun) {\n    var m = 10e100;\n    for (var i = 0; i < cluster1.length; i++)\n        for (var j = i; j < cluster2.length; j++) {\n            var d = disFun(cluster1[i], cluster2[j]);\n            m = Math.min(d,m);\n        }\n    return m;\n}\n\n/**\n * @param cluster1\n * @param cluster2\n * @param disFun\n * @returns {number}\n */\nfunction completeLink(cluster1, cluster2, disFun) {\n    var m = -1;\n    for (var i = 0; i < cluster1.length; i++)\n        for (var j = i; j < cluster2.length; j++) {\n            var d = disFun(cluster1[i], cluster2[j]);\n            m = Math.max(d,m);\n        }\n    return m;\n}\n\n/**\n * @param cluster1\n * @param cluster2\n * @param disFun\n * @returns {number}\n */\nfunction averageLink(cluster1, cluster2, disFun) {\n    var m = 0;\n    for (var i = 0; i < cluster1.length; i++)\n        for (var j = 0; j < cluster2.length; j++)\n            m += disFun(cluster1[i], cluster2[j]);\n    return m / (cluster1.length * cluster2.length);\n}\n\n/**\n * @param cluster1\n * @param cluster2\n * @param disFun\n * @returns {*}\n */\nfunction centroidLink(cluster1, cluster2, disFun) {\n    var x1 = 0,\n        y1 = 0,\n        x2 = 0,\n        y2 = 0;\n    for (var i = 0; i < cluster1.length; i++) {\n        x1 += cluster1[i][0];\n        y1 += cluster1[i][1];\n    }\n    for (var j = 0; j < cluster2.length; j++) {\n        x2 += cluster2[j][0];\n        y2 += cluster2[j][1];\n    }\n    x1 /= cluster1.length;\n    y1 /= cluster1.length;\n    x2 /= cluster2.length;\n    y2 /= cluster2.length;\n    return disFun([x1,y1], [x2,y2]);\n}\n\n/**\n * @param cluster1\n * @param cluster2\n * @param disFun\n * @returns {number}\n */\nfunction wardLink(cluster1, cluster2, disFun) {\n    var x1 = 0,\n        y1 = 0,\n        x2 = 0,\n        y2 = 0;\n    for (var i = 0; i < cluster1.length; i++) {\n        x1 += cluster1[i][0];\n        y1 += cluster1[i][1];\n    }\n    for (var j = 0; j < cluster2.length; j++) {\n        x2 += cluster2[j][0];\n        y2 += cluster2[j][1];\n    }\n    x1 /= cluster1.length;\n    y1 /= cluster1.length;\n    x2 /= cluster2.length;\n    y2 /= cluster2.length;\n    return disFun([x1,y1], [x2,y2])*cluster1.length*cluster2.length / (cluster1.length+cluster2.length);\n}\n\nvar defaultOptions = {\n    disFunc: euclidean,\n    kind: 'single'\n};\n\n/**\n * Continuously merge nodes that have the least dissimilarity\n * @param {Array <Array <number>>} data - Array of points to be clustered\n * @param {json} options\n * @constructor\n */\nfunction agnes(data, options) {\n    options = options || {};\n    for (var o in defaultOptions)\n        if (!(options.hasOwnProperty(o)))\n            options[o] = defaultOptions[o];\n    var len = data.length;\n\n    // allows to use a string or a given function\n    if (typeof options.kind === \"string\") {\n        switch (options.kind) {\n            case 'single':\n                options.kind = simpleLink;\n                break;\n            case 'complete':\n                options.kind = completeLink;\n                break;\n            case 'average':\n                options.kind = averageLink;\n                break;\n            case 'centroid':\n                options.kind = centroidLink;\n                break;\n            case 'ward':\n                options.kind = wardLink;\n                break;\n            default:\n                throw new RangeError('Unknown kind of similarity');\n        }\n    }\n    else if (typeof options.kind !== \"function\")\n        throw new TypeError('Undefined kind of similarity');\n\n    var list = new Array(len);\n    for (var i = 0; i < data.length; i++)\n        list[i] = new ClusterLeaf(i);\n    var min  = 10e5,\n        d = {},\n        dis = 0;\n\n    while (list.length > 1) {\n\n        // calculates the minimum distance\n        d = {};\n        min = 10e5;\n        for (var j = 0; j < list.length; j++)\n            for (var k = j + 1; k < list.length; k++) {\n                var fData, sData;\n                if (list[j] instanceof ClusterLeaf)\n                    fData = [data[list[j].index]];\n                else {\n                    fData = new Array(list[j].index.length);\n                    for (var e = 0; e < fData.length; e++)\n                        fData[e] = data[list[j].index[e].index];\n                }\n                if (list[k] instanceof ClusterLeaf)\n                    sData = [data[list[k].index]];\n                else {\n                    sData = new Array(list[k].index.length);\n                    for (var f = 0; f < sData.length; f++)\n                        sData[f] = data[list[k].index[f].index];\n                }\n                dis = options.kind(fData, sData, options.disFunc).toFixed(4);\n                if (dis in d) {\n                    d[dis].push([list[j], list[k]]);\n                }\n                else {\n                    d[dis] = [[list[j], list[k]]];\n                }\n                min = Math.min(dis, min);\n            }\n\n        // cluster dots\n        var dmin = d[min.toFixed(4)];\n        var clustered = new Array(dmin.length);\n        var aux,\n            count = 0;\n        while (dmin.length > 0) {\n            aux = dmin.shift();\n            for (var q = 0; q < dmin.length; q++) {\n                var int = dmin[q].filter(function(n) {\n                    //noinspection JSReferencingMutableVariableFromClosure\n                    return aux.indexOf(n) !== -1\n                });\n                if (int.length > 0) {\n                    var diff = dmin[q].filter(function(n) {\n                        //noinspection JSReferencingMutableVariableFromClosure\n                        return aux.indexOf(n) === -1\n                    });\n                    aux = aux.concat(diff);\n                    dmin.splice(q-- ,1);\n                }\n            }\n            clustered[count++] = aux;\n        }\n        clustered.length = count;\n\n        for (var ii = 0; ii < clustered.length; ii++) {\n            var obj = new Cluster();\n            obj.children = clustered[ii].concat();\n            obj.distance = min;\n            obj.index = new Array(len);\n            var indCount = 0;\n            for (var jj = 0; jj < clustered[ii].length; jj++) {\n                if (clustered[ii][jj] instanceof ClusterLeaf)\n                    obj.index[indCount++] = clustered[ii][jj];\n                else {\n                    indCount += clustered[ii][jj].index.length;\n                    obj.index = clustered[ii][jj].index.concat(obj.index);\n                }\n                list.splice((list.indexOf(clustered[ii][jj])), 1);\n            }\n            obj.index.length = indCount;\n            list.push(obj);\n        }\n    }\n    return list[0];\n}\n\nmodule.exports = agnes;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-hclust/src/agnes.js\n ** module id = 131\n ** module chunks = 0\n **/","'use strict';\n\nfunction squaredEuclidean(p, q) {\n    var d = 0;\n    for (var i = 0; i < p.length; i++) {\n        d += (p[i] - q[i]) * (p[i] - q[i]);\n    }\n    return d;\n}\n\nfunction euclidean(p, q) {\n    return Math.sqrt(squaredEuclidean(p, q));\n}\n\nmodule.exports = euclidean;\neuclidean.squared = squaredEuclidean;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-hclust/~/ml-euclidean-distance/euclidean.js\n ** module id = 132\n ** module chunks = 0\n **/","'use strict';\n\nvar Cluster = require('./Cluster');\nvar util = require('util');\n\nfunction ClusterLeaf (index) {\n    Cluster.call(this);\n    this.index = index;\n    this.distance = 0;\n    this.children = undefined;\n}\n\nutil.inherits(ClusterLeaf, Cluster);\n\nmodule.exports = ClusterLeaf;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-hclust/src/ClusterLeaf.js\n ** module id = 133\n ** module chunks = 0\n **/","'use strict';\n\nfunction Cluster () {\n    this.children = [];\n    this.distance = -1;\n    this.index = [];\n}\n\n/**\n * Creates an array of values where maximum distance smaller than the threshold\n * @param {number} threshold\n * @return {Array <Cluster>}\n */\nCluster.prototype.cut = function (threshold) {\n    if (threshold < 0) throw new RangeError('Threshold too small');\n    var root = new Cluster();\n    root.children = this.children;\n    root.distance = this.distance;\n    root.index = this.index;\n    var list = [root];\n    var ans = [];\n    while (list.length > 0) {\n        var aux = list.shift();\n        if (threshold >= aux.distance)\n            ans.push(aux);\n        else\n            list = list.concat(aux.children);\n    }\n    return ans;\n};\n\n/**\n * Merge the leaves in the minimum way to have 'minGroups' number of clusters\n * @param {number} minGroups\n * @return {Cluster}\n */\nCluster.prototype.group = function (minGroups) {\n    if (minGroups < 1) throw new RangeError('Number of groups too small');\n    var root = new Cluster();\n    root.children = this.children;\n    root.distance = this.distance;\n    root.index = this.index;\n    if (minGroups === 1)\n        return root;\n    var list = [root];\n    var aux;\n    while (list.length < minGroups && list.length !== 0) {\n        aux = list.shift();\n        list = list.concat(aux.children);\n    }\n    if (list.length === 0) throw new RangeError('Number of groups too big');\n    for (var i = 0; i < list.length; i++)\n        if (list[i].distance === aux.distance) {\n            list.concat(list[i].children.slice(1));\n            list[i] = list[i].children[0];\n        }\n    for (var j = 0; j < list.length; j++)\n        if (list[j].distance !== 0) {\n            var obj = list[j];\n            obj.children = obj.index;\n        }\n    return root;\n};\n\nmodule.exports = Cluster;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-hclust/src/Cluster.js\n ** module id = 134\n ** module chunks = 0\n **/","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  // Allow for deprecating things in the process of starting up.\n  if (isUndefined(global.process)) {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  if (process.noDeprecation === true) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/util/util.js\n ** module id = 135\n ** module chunks = 0\n **/","// shim for using process in browser\n\nvar process = module.exports = {};\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = setTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            currentQueue[queueIndex].run();\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    clearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        setTimeout(drainQueue, 0);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/process/browser.js\n ** module id = 136\n ** module chunks = 0\n **/","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/util/support/isBufferBrowser.js\n ** module id = 137\n ** module chunks = 0\n **/","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** (webpack)/~/node-libs-browser/~/util/~/inherits/inherits_browser.js\n ** module id = 138\n ** module chunks = 0\n **/","'use strict';\n\nvar euclidean = require('ml-euclidean-distance');\nvar ClusterLeaf = require('./ClusterLeaf');\nvar Cluster = require('./Cluster');\n\n/**\n * @param {Array <Array <number>>} cluster1\n * @param {Array <Array <number>>} cluster2\n * @param {function} disFun\n * @returns {number}\n */\nfunction simpleLink(cluster1, cluster2, disFun) {\n    var m = 10e100;\n    for (var i = 0; i < cluster1.length; i++)\n        for (var j = i; j < cluster2.length; j++) {\n            var d = disFun(cluster1[i], cluster2[j]);\n            m = Math.min(d,m);\n        }\n    return m;\n}\n\n/**\n * @param {Array <Array <number>>} cluster1\n * @param {Array <Array <number>>} cluster2\n * @param {function} disFun\n * @returns {number}\n */\nfunction completeLink(cluster1, cluster2, disFun) {\n    var m = -1;\n    for (var i = 0; i < cluster1.length; i++)\n        for (var j = i; j < cluster2.length; j++) {\n            var d = disFun(cluster1[i], cluster2[j]);\n            m = Math.max(d,m);\n        }\n    return m;\n}\n\n/**\n * @param {Array <Array <number>>} cluster1\n * @param {Array <Array <number>>} cluster2\n * @param {function} disFun\n * @returns {number}\n */\nfunction averageLink(cluster1, cluster2, disFun) {\n    var m = 0;\n    for (var i = 0; i < cluster1.length; i++)\n        for (var j = 0; j < cluster2.length; j++)\n            m += disFun(cluster1[i], cluster2[j]);\n    return m / (cluster1.length * cluster2.length);\n}\n\n/**\n * @param {Array <Array <number>>} cluster1\n * @param {Array <Array <number>>} cluster2\n * @param {function} disFun\n * @returns {number}\n */\nfunction centroidLink(cluster1, cluster2, disFun) {\n    var x1 = 0,\n        y1 = 0,\n        x2 = 0,\n        y2 = 0;\n    for (var i = 0; i < cluster1.length; i++) {\n        x1 += cluster1[i][0];\n        y1 += cluster1[i][1];\n    }\n    for (var j = 0; j < cluster2.length; j++) {\n        x2 += cluster2[j][0];\n        y2 += cluster2[j][1];\n    }\n    x1 /= cluster1.length;\n    y1 /= cluster1.length;\n    x2 /= cluster2.length;\n    y2 /= cluster2.length;\n    return disFun([x1,y1], [x2,y2]);\n}\n\n/**\n * @param {Array <Array <number>>} cluster1\n * @param {Array <Array <number>>} cluster2\n * @param {function} disFun\n * @returns {number}\n */\nfunction wardLink(cluster1, cluster2, disFun) {\n    var x1 = 0,\n        y1 = 0,\n        x2 = 0,\n        y2 = 0;\n    for (var i = 0; i < cluster1.length; i++) {\n        x1 += cluster1[i][0];\n        y1 += cluster1[i][1];\n    }\n    for (var j = 0; j < cluster2.length; j++) {\n        x2 += cluster2[j][0];\n        y2 += cluster2[j][1];\n    }\n    x1 /= cluster1.length;\n    y1 /= cluster1.length;\n    x2 /= cluster2.length;\n    y2 /= cluster2.length;\n    return disFun([x1,y1], [x2,y2])*cluster1.length*cluster2.length / (cluster1.length+cluster2.length);\n}\n\n/**\n * Returns the most distant point and his distance\n * @param {Array <Array <number>>} splitting - Clusters to split\n * @param {Array <Array <number>>} data - Original data\n * @param {function} disFun - Distance function\n * @returns {{d: number, p: number}} - d: maximum difference between points, p: the point more distant\n */\nfunction diff(splitting, data, disFun) {\n    var ans = {\n        d:0,\n        p:0\n    };\n\n    var Ci = new Array(splitting[0].length);\n    for (var e = 0; e < splitting[0].length; e++)\n        Ci[e] = data[splitting[0][e]];\n    var Cj = new Array(splitting[1].length);\n    for (var f = 0; f < splitting[1].length; f++)\n        Cj[f] = data[splitting[1][f]];\n\n    var dist, ndist;\n    for (var i = 0; i < Ci.length; i++) {\n        dist = 0;\n        for (var j = 0; j < Ci.length; j++)\n            if (i !== j)\n                dist += disFun(Ci[i], Ci[j]);\n        dist /= (Ci.length - 1);\n        ndist = 0;\n        for (var k = 0; k < Cj.length; k++)\n            ndist += disFun(Ci[i], Cj[k]);\n        ndist /= Cj.length;\n        if ((dist - ndist) > ans.d) {\n            ans.d = (dist - ndist);\n            ans.p = i;\n        }\n    }\n    return ans;\n}\n\nvar defaultOptions = {\n    dist: euclidean,\n    kind: 'single'\n};\n\n/**\n * Intra-cluster distance\n * @param {Array} index\n * @param {Array} data\n * @param {function} disFun\n * @returns {number}\n */\nfunction intrDist(index, data, disFun) {\n    var dist = 0,\n        count = 0;\n    for (var i = 0; i < index.length; i++)\n        for (var j = i; j < index.length; j++) {\n            dist += disFun(data[index[i].index], data[index[j].index]);\n            count++\n        }\n    return dist / count;\n}\n\n/**\n * Splits the higher level clusters\n * @param {Array <Array <number>>} data - Array of points to be clustered\n * @param {json} options\n * @constructor\n */\nfunction diana(data, options) {\n    options = options || {};\n    for (var o in defaultOptions)\n        if (!(options.hasOwnProperty(o)))\n            options[o] = defaultOptions[o];\n    if (typeof options.kind === \"string\") {\n        switch (options.kind) {\n            case 'single':\n                options.kind = simpleLink;\n                break;\n            case 'complete':\n                options.kind = completeLink;\n                break;\n            case 'average':\n                options.kind = averageLink;\n                break;\n            case 'centroid':\n                options.kind = centroidLink;\n                break;\n            case 'ward':\n                options.kind = wardLink;\n                break;\n            default:\n                throw new RangeError('Unknown kind of similarity');\n        }\n    }\n    else if (typeof options.kind !== \"function\")\n        throw new TypeError('Undefined kind of similarity');\n    var tree = new Cluster();\n    tree.children = new Array(data.length);\n    tree.index = new Array(data.length);\n    for (var ind = 0; ind < data.length; ind++) {\n        tree.children[ind] = new ClusterLeaf(ind);\n        tree.index[ind] = new ClusterLeaf(ind);\n    }\n\n    tree.distance = intrDist(tree.index, data, options.dist);\n    var m, M, clId,\n        dist, rebel;\n    var list = [tree];\n    while (list.length > 0) {\n        M = 0;\n        clId = 0;\n        for (var i = 0; i < list.length; i++) {\n            m = 0;\n            for (var j = 0; j < list[i].length; j++) {\n                for (var l = (j + 1); l < list[i].length; l++) {\n                    m = Math.max(options.dist(data[list[i].index[j].index], data[list[i].index[l].index]), m);\n                }\n            }\n            if (m > M) {\n                M = m;\n                clId = i;\n            }\n        }\n        M = 0;\n        if (list[clId].index.length === 2) {\n            list[clId].children = [list[clId].index[0], list[clId].index[1]];\n            list[clId].distance = options.dist(data[list[clId].index[0].index], data[list[clId].index[1].index]);\n        }\n        else if (list[clId].index.length === 3) {\n            list[clId].children = [list[clId].index[0], list[clId].index[1], list[clId].index[2]];\n            var d = [\n                options.dist(data[list[clId].index[0].index], data[list[clId].index[1].index]),\n                options.dist(data[list[clId].index[1].index], data[list[clId].index[2].index])\n            ];\n            list[clId].distance = (d[0] + d[1]) / 2;\n        }\n        else {\n            var C = new Cluster();\n            var sG = new Cluster();\n            var splitting = [new Array(list[clId].index.length), []];\n            for (var spl = 0; spl < splitting[0].length; spl++)\n                splitting[0][spl] = spl;\n            for (var ii = 0; ii < splitting[0].length; ii++) {\n                dist = 0;\n                for (var jj = 0; jj < splitting[0].length; jj++)\n                    if (ii !== jj)\n                        dist += options.dist(data[list[clId].index[splitting[0][jj]].index], data[list[clId].index[splitting[0][ii]].index]);\n                dist /= (splitting[0].length - 1);\n                if (dist > M) {\n                    M = dist;\n                    rebel = ii;\n                }\n            }\n            splitting[1] = [rebel];\n            splitting[0].splice(rebel, 1);\n            dist = diff(splitting, data, options.dist);\n            while (dist.d > 0) {\n                splitting[1].push(splitting[0][dist.p]);\n                splitting[0].splice(dist.p, 1);\n                dist = diff(splitting, data, options.dist);\n            }\n            var fData = new Array(splitting[0].length);\n            C.index = new Array(splitting[0].length);\n            for (var e = 0; e < fData.length; e++) {\n                fData[e] = data[list[clId].index[splitting[0][e]].index];\n                C.index[e] = list[clId].index[splitting[0][e]];\n                C.children[e] = list[clId].index[splitting[0][e]];\n            }\n            var sData = new Array(splitting[1].length);\n            sG.index = new Array(splitting[1].length);\n            for (var f = 0; f < sData.length; f++) {\n                sData[f] = data[list[clId].index[splitting[1][f]].index];\n                sG.index[f] = list[clId].index[splitting[1][f]];\n                sG.children[f] = list[clId].index[splitting[1][f]];\n            }\n            C.distance = intrDist(C.index, data, options.dist);\n            sG.distance = intrDist(sG.index, data, options.dist);\n            list.push(C);\n            list.push(sG);\n            list[clId].children = [C, sG];\n        }\n        list.splice(clId, 1);\n    }\n    return tree;\n}\n\nmodule.exports = diana;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-hclust/src/diana.js\n ** module id = 139\n ** module chunks = 0\n **/","'use strict';\n\nvar NodeSquare = require('./node-square'),\n    NodeHexagonal = require('./node-hexagonal');\n\nvar defaultOptions = {\n    fields: 3,\n    randomizer: Math.random,\n    distance: squareEuclidean,\n    iterations: 10,\n    learningRate: 0.1,\n    gridType: 'rect',\n    torus: true,\n    method: 'random'\n};\n\nfunction SOM(x, y, options, reload) {\n\n    this.x = x;\n    this.y = y;\n\n    options = options || {};\n    this.options = {};\n    for (var i in defaultOptions) {\n        if (options.hasOwnProperty(i)) {\n            this.options[i] = options[i];\n        } else {\n            this.options[i] = defaultOptions[i];\n        }\n    }\n\n    if (typeof this.options.fields === 'number') {\n        this.numWeights = this.options.fields;\n    } else if (Array.isArray(this.options.fields)) {\n        this.numWeights = this.options.fields.length;\n        var converters = getConverters(this.options.fields);\n        this.extractor = converters.extractor;\n        this.creator = converters.creator;\n    } else {\n        throw new Error('Invalid fields definition');\n    }\n\n    if (this.options.gridType === 'rect') {\n        this.nodeType = NodeSquare;\n        this.gridDim = {\n            x: x,\n            y: y\n        };\n    } else {\n        this.nodeType = NodeHexagonal;\n        var hx = this.x - Math.floor(this.y / 2);\n        this.gridDim = {\n            x: hx,\n            y: this.y,\n            z: -(0 - hx - this.y)\n        };\n    }\n\n    this.torus = this.options.torus;\n    this.distanceMethod = this.torus ? 'getDistanceTorus' : 'getDistance';\n\n    this.distance = this.options.distance;\n\n    this.maxDistance = getMaxDistance(this.distance, this.numWeights);\n\n    if (reload === true) { // For model loading\n        this.done = true;\n        return;\n    }\n    if (!(x > 0 && y > 0)) {\n        throw new Error('x and y must be positive');\n    }\n\n    this.times = {\n        findBMU: 0,\n        adjust: 0\n    };\n\n    this.randomizer = this.options.randomizer;\n\n    this.iterationCount = 0;\n    this.iterations = this.options.iterations;\n\n    this.startLearningRate = this.learningRate = this.options.learningRate;\n\n    this.mapRadius = Math.floor(Math.max(x, y) / 2);\n\n    this.algorithmMethod = this.options.method;\n\n    this._initNodes();\n\n    this.done = false;\n}\n\nSOM.load = function loadModel(model, distance) {\n    if (model.name === 'SOM') {\n        var x = model.data.length,\n            y = model.data[0].length;\n        if (distance) {\n            model.options.distance = distance;\n        } else if (model.options.distance) {\n            model.options.distance = eval('(' + model.options.distance + ')');\n        }\n        var som = new SOM(x, y, model.options, true);\n        som.nodes = new Array(x);\n        for (var i = 0; i < x; i++) {\n            som.nodes[i] = new Array(y);\n            for (var j = 0; j < y; j++) {\n                som.nodes[i][j] = new som.nodeType(i, j, model.data[i][j], som);\n            }\n        }\n        return som;\n    } else {\n        throw new Error('expecting a SOM model');\n    }\n};\n\nSOM.prototype.export = function exportModel(includeDistance) {\n    if (!this.done) {\n        throw new Error('model is not ready yet');\n    }\n    var model = {\n        name: 'SOM'\n    };\n    model.options = {\n        fields: this.options.fields,\n        gridType: this.options.gridType,\n        torus: this.options.torus\n    };\n    model.data = new Array(this.x);\n    for (var i = 0; i < this.x; i++) {\n        model.data[i] = new Array(this.y);\n        for (var j = 0; j < this.y; j++) {\n            model.data[i][j] = this.nodes[i][j].weights;\n        }\n    }\n    if (includeDistance) {\n        model.options.distance = this.distance.toString();\n    }\n    return model;\n};\n\nSOM.prototype._initNodes = function initNodes() {\n    var now = Date.now(),\n        i, j, k;\n    this.nodes = new Array(this.x);\n    for (i = 0; i < this.x; i++) {\n        this.nodes[i] = new Array(this.y);\n        for (j = 0; j < this.y; j++) {\n            var weights = new Array(this.numWeights);\n            for (k = 0; k < this.numWeights; k++) {\n                weights[k] = this.randomizer();\n            }\n            this.nodes[i][j] = new this.nodeType(i, j, weights, this);\n        }\n    }\n    this.times.initNodes = Date.now() - now;\n};\n\nSOM.prototype.setTraining = function setTraining(trainingSet) {\n    if (this.trainingSet) {\n        throw new Error('training set has already been set');\n    }\n    var now = Date.now();\n    var convertedSet = trainingSet;\n    var i, l = trainingSet.length;\n    if (this.extractor) {\n        convertedSet = new Array(l);\n        for (i = 0; i < l; i++) {\n            convertedSet[i] = this.extractor(trainingSet[i]);\n        }\n    }\n    this.numIterations = this.iterations * l;\n\n    if (this.algorithmMethod === 'random') {\n        this.timeConstant = this.numIterations / Math.log(this.mapRadius);\n    } else {\n        this.timeConstant = l / Math.log(this.mapRadius);\n    }\n    this.trainingSet = convertedSet;\n    this.times.setTraining = Date.now() - now;\n};\n\nSOM.prototype.trainOne = function trainOne() {\n    if (this.done) {\n\n        return false;\n\n    } else if (this.numIterations-- > 0) {\n\n        var neighbourhoodRadius,\n            trainingValue,\n            trainingSetFactor;\n\n        if (this.algorithmMethod === 'random') { // Pick a random value of the training set at each step\n            neighbourhoodRadius = this.mapRadius * Math.exp(-this.iterationCount / this.timeConstant);\n            trainingValue = getRandomValue(this.trainingSet, this.randomizer);\n            this._adjust(trainingValue, neighbourhoodRadius);\n            this.learningRate = this.startLearningRate * Math.exp(-this.iterationCount / this.numIterations);\n        } else { // Get next input vector\n            trainingSetFactor = -Math.floor(this.iterationCount / this.trainingSet.length);\n            neighbourhoodRadius = this.mapRadius * Math.exp(trainingSetFactor / this.timeConstant);\n            trainingValue = this.trainingSet[this.iterationCount % this.trainingSet.length];\n            this._adjust(trainingValue, neighbourhoodRadius);\n            if (((this.iterationCount + 1) % this.trainingSet.length) === 0) {\n                this.learningRate = this.startLearningRate * Math.exp(trainingSetFactor / Math.floor(this.numIterations / this.trainingSet.length));\n            }\n        }\n\n        this.iterationCount++;\n\n        return true;\n\n    } else {\n\n        this.done = true;\n        return false;\n\n    }\n};\n\nSOM.prototype._adjust = function adjust(trainingValue, neighbourhoodRadius) {\n    var now = Date.now(),\n        x, y, dist, influence;\n\n    var bmu = this._findBestMatchingUnit(trainingValue);\n\n    var now2 = Date.now();\n    this.times.findBMU += now2 - now;\n\n    var radiusLimit = Math.floor(neighbourhoodRadius);\n    var xMin = bmu.x - radiusLimit,\n        xMax = bmu.x + radiusLimit,\n        yMin = bmu.y - radiusLimit,\n        yMax = bmu.y + radiusLimit;\n\n    for (x = xMin; x <= xMax; x++) {\n        var theX = x;\n        if (x < 0) {\n            theX += this.x;\n        } else if (x >= this.x) {\n            theX -= this.x;\n        }\n        for (y = yMin; y <= yMax; y++) {\n            var theY = y;\n            if (y < 0) {\n                theY += this.y;\n            } else if (y >= this.y) {\n                theY -= this.y;\n            }\n\n            dist = bmu[this.distanceMethod](this.nodes[theX][theY]);\n\n            if (dist < neighbourhoodRadius) {\n                influence = Math.exp(-dist / (2 * neighbourhoodRadius));\n                this.nodes[theX][theY].adjustWeights(trainingValue, this.learningRate, influence);\n            }\n\n        }\n    }\n\n    this.times.adjust += (Date.now() - now2);\n\n};\n\nSOM.prototype.train = function train(trainingSet) {\n    if (!this.done) {\n        this.setTraining(trainingSet);\n        while (this.trainOne()) {\n        }\n    }\n};\n\nSOM.prototype.getConvertedNodes = function getConvertedNodes() {\n    var result = new Array(this.x);\n    for (var i = 0; i < this.x; i++) {\n        result[i] = new Array(this.y);\n        for (var j = 0; j < this.y; j++) {\n            var node = this.nodes[i][j];\n            result[i][j] = this.creator ? this.creator(node.weights) : node.weights;\n        }\n    }\n    return result;\n};\n\nSOM.prototype._findBestMatchingUnit = function findBestMatchingUnit(candidate) {\n\n    var bmu,\n        lowest = Infinity,\n        dist;\n\n    for (var i = 0; i < this.x; i++) {\n        for (var j = 0; j < this.y; j++) {\n            dist = this.distance(this.nodes[i][j].weights, candidate);\n            if (dist < lowest) {\n                lowest = dist;\n                bmu = this.nodes[i][j];\n            }\n        }\n    }\n\n    return bmu;\n\n};\n\nSOM.prototype.predict = function predict(data, computePosition) {\n    if (typeof data === 'boolean') {\n        computePosition = data;\n        data = null;\n    }\n    if (!data) {\n        data = this.trainingSet;\n    }\n    if (Array.isArray(data) && (Array.isArray(data[0]) || (typeof data[0] === 'object'))) { // predict a dataset\n        var self = this;\n        return data.map(function (element) {\n            return self._predict(element, computePosition);\n        });\n    } else { // predict a single element\n        return this._predict(data, computePosition);\n    }\n};\n\nSOM.prototype._predict = function _predict(element, computePosition) {\n    if (!Array.isArray(element)) {\n        element = this.extractor(element);\n    }\n    var bmu = this._findBestMatchingUnit(element);\n    var result = [bmu.x, bmu.y];\n    if (computePosition) {\n        result[2] = bmu.getPosition(element);\n    }\n    return result;\n};\n\n// As seen in http://www.scholarpedia.org/article/Kohonen_network\nSOM.prototype.getQuantizationError = function getQuantizationError() {\n    var fit = this.getFit(),\n        l = fit.length,\n        sum = 0;\n    for (var i = 0; i < l; i++) {\n        sum += fit[i];\n    }\n    return sum / l;\n};\n\nSOM.prototype.getFit = function getFit(dataset) {\n    if (!dataset) {\n        dataset = this.trainingSet;\n    }\n    var l = dataset.length,\n        bmu,\n        result = new Array(l);\n    for (var i = 0; i < l; i++) {\n        bmu = this._findBestMatchingUnit(dataset[i]);\n        result[i] = Math.sqrt(this.distance(dataset[i], bmu.weights));\n    }\n    return result;\n};\n\nfunction getConverters(fields) {\n    var l = fields.length,\n        normalizers = new Array(l),\n        denormalizers = new Array(l);\n    for (var i = 0; i < l; i++) {\n        normalizers[i] = getNormalizer(fields[i].range);\n        denormalizers[i] = getDenormalizer(fields[i].range);\n    }\n    return {\n        extractor: function extractor(value) {\n            var result = new Array(l);\n            for (var i = 0; i < l; i++) {\n                result[i] = normalizers[i](value[fields[i].name]);\n            }\n            return result;\n        },\n        creator: function creator(value) {\n            var result = {};\n            for (var i = 0; i < l; i++) {\n                result[fields[i].name] = denormalizers[i](value[i]);\n            }\n            return result;\n        }\n    };\n}\n\nfunction getNormalizer(minMax) {\n    return function normalizer(value) {\n        return (value - minMax[0]) / (minMax[1] - minMax[0]);\n    };\n}\n\nfunction getDenormalizer(minMax) {\n    return function denormalizer(value) {\n        return (minMax[0] + value * (minMax[1] - minMax[0]));\n    };\n}\n\nfunction squareEuclidean(a, b) {\n    var d = 0;\n    for (var i = 0, ii = a.length; i < ii; i++) {\n        d += (a[i] - b[i]) * (a[i] - b[i]);\n    }\n    return d;\n}\n\nfunction getRandomValue(arr, randomizer) {\n    return arr[Math.floor(randomizer() * arr.length)];\n}\n\nfunction getMaxDistance(distance, numWeights) {\n    var zero = new Array(numWeights),\n        one = new Array(numWeights);\n    for (var i = 0; i < numWeights; i++) {\n        zero[i] = 0;\n        one[i] = 1;\n    }\n    return distance(zero, one);\n}\n\nmodule.exports = SOM;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-som/src/index.js\n ** module id = 140\n ** module chunks = 0\n **/","function NodeSquare(x, y, weights, som) {\n    this.x = x;\n    this.y = y;\n    this.weights = weights;\n    this.som = som;\n    this.neighbors = {};\n}\n\nNodeSquare.prototype.adjustWeights = function adjustWeights(target, learningRate, influence) {\n    for (var i = 0, ii = this.weights.length; i < ii; i++) {\n        this.weights[i] += learningRate * influence * (target[i] - this.weights[i]);\n    }\n};\n\nNodeSquare.prototype.getDistance = function getDistance(otherNode) {\n    return Math.max(Math.abs(this.x - otherNode.x), Math.abs(this.y - otherNode.y));\n};\n\nNodeSquare.prototype.getDistanceTorus = function getDistanceTorus(otherNode) {\n    var distX = Math.abs(this.x - otherNode.x),\n        distY = Math.abs(this.y - otherNode.y);\n    return Math.max(Math.min(distX, this.som.gridDim.x - distX), Math.min(distY, this.som.gridDim.y - distY));\n};\n\nNodeSquare.prototype.getNeighbors = function getNeighbors(xy) {\n    if (!this.neighbors[xy]) {\n        this.neighbors[xy] = new Array(2);\n\n        // left or bottom neighbor\n        var v;\n        if (this[xy] > 0) {\n            v = this[xy] - 1;\n        } else if (this.som.torus) {\n            v = this.som.gridDim[xy] - 1\n        }\n        if (typeof v !== 'undefined') {\n            var x, y;\n            if (xy === 'x') {\n                x = v;\n                y = this.y;\n            } else {\n                x = this.x;\n                y = v;\n            }\n            this.neighbors[xy][0] = this.som.nodes[x][y];\n        }\n\n        // top or right neighbor\n        var w;\n        if (this[xy] < (this.som.gridDim[xy] - 1)) {\n            w = this[xy] + 1;\n        } else if (this.som.torus) {\n            w = 0;\n        }\n        if (typeof w !== 'undefined') {\n            if (xy === 'x') {\n                x = w;\n                y = this.y;\n            } else {\n                x = this.x;\n                y = w;\n            }\n            this.neighbors[xy][1] = this.som.nodes[x][y];\n        }\n    }\n    return this.neighbors[xy];\n};\n\nNodeSquare.prototype.getPos = function getPos(xy, element) {\n    var neighbors = this.getNeighbors(xy),\n        distance = this.som.distance,\n        bestNeighbor,\n        direction;\n    if(neighbors[0]) {\n        if (neighbors[1]) {\n            var dist1 = distance(element, neighbors[0].weights),\n                dist2 = distance(element, neighbors[1].weights);\n            if(dist1 < dist2) {\n                bestNeighbor = neighbors[0];\n                direction = -1;\n            } else {\n                bestNeighbor = neighbors[1];\n                direction = 1;\n            }\n        } else {\n            bestNeighbor = neighbors[0];\n            direction = -1;\n        }\n    } else {\n        bestNeighbor = neighbors[1];\n        direction = 1;\n    }\n    var simA = 1 - distance(element, this.weights),\n        simB = 1 - distance(element, bestNeighbor.weights);\n    var factor = ((simA - simB) / (2 - simA - simB));\n    return 0.5 + 0.5 * factor * direction;\n};\n\nNodeSquare.prototype.getPosition = function getPosition(element) {\n    return [\n        this.getPos('x', element),\n        this.getPos('y', element)\n    ];\n};\n\nmodule.exports = NodeSquare;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-som/src/node-square.js\n ** module id = 141\n ** module chunks = 0\n **/","var NodeSquare = require('./node-square');\n\nfunction NodeHexagonal(x, y, weights, som) {\n\n    NodeSquare.call(this, x, y, weights, som);\n\n    this.hX = x - Math.floor(y / 2);\n    this.z = 0 - this.hX - y;\n\n}\n\nNodeHexagonal.prototype = new NodeSquare;\nNodeHexagonal.prototype.constructor = NodeHexagonal;\n\nNodeHexagonal.prototype.getDistance = function getDistanceHexagonal(otherNode) {\n    return Math.max(Math.abs(this.hX - otherNode.hX), Math.abs(this.y - otherNode.y), Math.abs(this.z - otherNode.z));\n};\n\nNodeHexagonal.prototype.getDistanceTorus = function getDistanceTorus(otherNode) {\n    var distX = Math.abs(this.hX - otherNode.hX),\n        distY = Math.abs(this.y - otherNode.y),\n        distZ = Math.abs(this.z - otherNode.z);\n    return Math.max(Math.min(distX, this.som.gridDim.x - distX), Math.min(distY, this.som.gridDim.y - distY), Math.min(distZ, this.som.gridDim.z - distZ));\n};\n\nNodeHexagonal.prototype.getPosition = function getPosition() {\n    throw new Error('Unimplemented : cannot get position of the points for hexagonal grid');\n};\n\nmodule.exports = NodeHexagonal;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-som/src/node-hexagonal.js\n ** module id = 142\n ** module chunks = 0\n **/","module.exports = require('./feedforwardNeuralNetwork');\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-fnn/src/index.js\n ** module id = 143\n ** module chunks = 0\n **/","\"use strict\";\n\nvar Layer = require(\"./layer\");\nvar Matrix = require(\"ml-matrix\");\n\nmodule.exports = FeedforwardNeuralNetwork;\n\n/**\n * Function that returns a random number between two numbers (inclusive)\n * @param {number} min - lower bound\n * @param {number} max - upper bound.\n * @returns {number} random number\n */\nfunction randomIntegerFromInterval(min, max) {\n    return Math.floor(Math.random()*(max - min + 1) + min);\n}\n\n/**\n * Constructor for the FNN (Feedforward Neural Networks) that takes an Array of Numbers,\n * those numbers corresponds to the size of each layer in the FNN, the first and the last number of the array corresponds to the input and the\n * output layer respectively.\n *\n * @param reload - for load purposes.\n * @param model - for load purposes.\n * @constructor\n */\nfunction FeedforwardNeuralNetwork(reload, model) {\n    if(reload) {\n        this.layers = model.layers;\n        this.inputSize = model.inputSize;\n        this.outputSize = model.outputSize;\n    }\n}\n\n/**\n * Build the Neural Network with an array that represent each hidden layer size.\n *\n * @param {Array} layersSize - Array of sizes of each layer.\n */\nFeedforwardNeuralNetwork.prototype.buildNetwork = function (layersSize) {\n    layersSize.push(this.outputSize);\n\n    this.layers = new Array(layersSize.length);\n\n    for (var i = 0; i < layersSize.length; ++i) {\n        var inSize = (i == 0) ? this.inputSize : layersSize[i - 1];\n        this.layers[i] = new Layer(inSize, layersSize[i]);\n    }\n\n    this.layers[this.layers.length - 1].isSigmoid = false;\n};\n\n/**\n * Function that applies a forward propagation over the Neural Network\n * with one case of the dataset.\n * @param {Array} input - case of the dataset.\n * @returns {Array} result of the forward propagation.\n */\nFeedforwardNeuralNetwork.prototype.forwardNN = function (input) {\n    var results = input.slice();\n\n    for(var i = 0; i < this.layers.length; ++i) {\n        results = this.layers[i].forward(results);\n    }\n\n    return results;\n};\n\n/**\n * Function that makes one iteration (epoch) over the Neural Network with one element\n * of the dataset with corresponding prediction; the other two arguments are the\n * learning rate and the momentum that is the regularization term for the parameters\n * of each perceptron in the Neural Network.\n * @param {Array} data - Element of the dataset.\n * @param {Array} prediction - Prediction over the data object.\n * @param {Number} learningRate\n * @param momentum - the regularization term.\n */\nFeedforwardNeuralNetwork.prototype.iteration = function (data, prediction, learningRate, momentum) {\n    var forwardResult = this.forwardNN(data);\n    var error = new Array(forwardResult.length);\n\n    if(typeof(prediction) === 'number')\n        prediction = [prediction];\n\n    for (var i = 0; i < error.length; i++) {\n        error[i] = prediction[i] - forwardResult[i];\n    }\n\n    var lengthLayers = this.layers.length;\n\n    for(i = 0; i < lengthLayers; ++i) {\n        error = this.layers[lengthLayers - 1 - i].train(error, learningRate, momentum);\n    }\n};\n\n/**\n * Method that train the neural network with a given training set with corresponding\n * predictions. The options argument has an array of the number of perceptrons that we want in each hidden layer, the\n * number of iterations (default 50) that we want to perform, the learning rate and the momentum that is the\n * regularization term (default 0.1 for both) for the parameters of each perceptron in the Neural Network.\n *\n * options:\n * * hiddenLayers - Array of number with each hidden layer size.\n * * iterations - Number\n * * learningRate - Number\n * * momentum - Number\n *\n * @param {Matrix} trainingSet\n * @param {Matrix} predictions\n * @param {Number} options\n */\nFeedforwardNeuralNetwork.prototype.train = function (trainingSet, predictions, options) {\n    if(options === undefined) options = {};\n\n    if(trainingSet.length !== predictions.length)\n        throw new RangeError(\"the training and prediction set must have the same size.\");\n\n    this.inputSize = trainingSet[0].length;\n    this.outputSize = predictions[0].length;\n\n    var hiddenLayers = options.hiddenLayers === undefined ? [10] : options.hiddenLayers;\n    var iterations = options.iterations === undefined ? 50 : options.iterations;\n    var learningRate = options.learningRate === undefined ? 0.1 : options.learningRate;\n    var momentum = options.momentum === undefined ? 0.1 : options.momentum;\n\n    this.buildNetwork(options.hiddenLayers);\n\n    for(var i = 0; i < iterations; ++i) {\n        for(var j = 0; j < predictions.length; ++j) {\n            var index = randomIntegerFromInterval(0, predictions.length - 1);\n            this.iteration(trainingSet[index], predictions[index], learningRate, momentum);\n        }\n    }\n};\n\n/**\n * Function that with a dataset, gives all the predictions for this dataset.\n * @param {Matrix} dataset.\n * @returns {Array} predictions\n */\nFeedforwardNeuralNetwork.prototype.predict = function (dataset) {\n    if(dataset[0].length !== this.inputSize)\n        throw new RangeError(\"The dataset columns must have the same size of the \" +\n                             \"input layer\");\n    var result = new Array(dataset.length);\n    for (var i = 0; i < dataset.length; i++) {\n        result[i] = this.forwardNN(dataset[i]);\n    }\n\n    result = Matrix(result);\n    return result.columns === 1 ? result.getColumn(0) : result;\n};\n\n/**\n * function that loads a object model into the Neural Network.\n * @param model\n * @returns {FeedforwardNeuralNetwork} with the provided model.\n */\nFeedforwardNeuralNetwork.load = function (model) {\n    if(model.modelName !== \"FNN\")\n        throw new RangeError(\"The given model is invalid!\");\n\n    return new FeedforwardNeuralNetwork(true, model);\n};\n\n/**\n * Function that exports the actual Neural Network to an object.\n * @returns {{modelName: string, layers: *, inputSize: *, outputSize: *}}\n */\nFeedforwardNeuralNetwork.prototype.export = function () {\n    return {\n        modelName: \"FNN\",\n        layers: this.layers,\n        inputSize: this.inputSize,\n        outputSize: this.outputSize\n    };\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-fnn/src/feedforwardNeuralNetwork.js\n ** module id = 144\n ** module chunks = 0\n **/","\"use strict\";\n\nvar Matrix = require(\"ml-matrix\");\n\nmodule.exports = Layer;\n\n/**\n * Function that create a random array of numbers between value depending\n * on the input and output size given the following formula:\n *\n *    sqrt(6) / sqrt(l_in + l_out);\n *\n * Taken from the coursera course of machine learning from Andrew Ng,\n * Exercise 4, Page 7 of the exercise PDF.\n *\n * @param numberOfWeights - size of the array.\n * @param inputSize - number of input of the current layer\n * @param outputSize - number of output of the current layer\n * @returns {Array} random array of numbers.\n */\nfunction randomInitialzeWeights(numberOfWeights, inputSize, outputSize) {\n    var epsilon = 2.449489742783 / Math.sqrt(inputSize + outputSize);\n    return Matrix.rand(1, numberOfWeights).mul(2 * epsilon).sub(epsilon).getRow(0);\n}\n\n/**\n * Function that calculates the sigmoid (logistic) function.\n * @param value\n * @returns {number}\n */\nfunction sigmoid(value) {\n    return 1.0 / (1 + Math.exp(-value));\n}\n\n/**\n * Function that calculates the derivate of the sigmoid function.\n * @param value\n * @returns {number}\n */\nfunction sigmoidGradient(value) {\n    return value * (1 - value);\n}\n\n/**\n * Constructor that creates a layer for the neural network given the number of inputs\n * and outputs.\n * @param inputSize\n * @param outputSize\n * @constructor\n */\nfunction Layer(inputSize, outputSize) {\n    this.output = Matrix.zeros(1, outputSize).getRow(0);\n    this.input = Matrix.zeros(1, inputSize + 1).getRow(0); //+1 for bias term\n    this.deltaWeights = Matrix.zeros(1, (1 + inputSize) * outputSize).getRow(0);\n    this.weights = randomInitialzeWeights(this.deltaWeights.length, inputSize, outputSize);\n    this.isSigmoid = true;\n}\n\n/**\n * Function that performs the forward propagation for the current layer\n * @param {Array} input - output from the previous layer.\n * @returns {Array} output - output for the next layer.\n */\nLayer.prototype.forward = function (input) {\n    this.input = input.slice();\n    this.input.push(1); // bias\n    var offs = 0; // offset used to get the current weights in the current perceptron\n    this.output = Matrix.zeros(1, this.output.length).getRow(0);\n\n    for(var i = 0; i < this.output.length; ++i) {\n        for(var j = 0 ; j < this.input.length; ++j) {\n            this.output[i] += this.weights[offs + j] * this.input[j];\n        }\n        if(this.isSigmoid)\n            this.output[i] = sigmoid(this.output[i]);\n\n        offs += this.input.length;\n    }\n\n    return this.output.slice();\n};\n\n/**\n * Function that performs the backpropagation algorithm for the current layer.\n * @param {Array} error - errors from the previous layer.\n * @param {Number} learningRate - Learning rate for the actual layer.\n * @param {Number} momentum - The regularizarion term.\n * @returns {Array} the error for the next layer.\n */\nLayer.prototype.train = function (error, learningRate, momentum) {\n    var offs = 0;\n    var nextError = Matrix.zeros(1, this.input.length).getRow(0);//new Array(this.input.length);\n\n    for(var i = 0; i < this.output.length; ++i) {\n        var delta = error[i];\n\n        if(this.isSigmoid)\n            delta *= sigmoidGradient(this.output[i]);\n\n        for(var j = 0; j < this.input.length; ++j) {\n            var index = offs + j;\n            nextError[j] += this.weights[index] * delta;\n\n            var deltaWeight = this.input[j] * delta * learningRate;\n            this.weights[index] += this.deltaWeights[index] * momentum + deltaWeight;\n            this.deltaWeights[index] = deltaWeight;\n        }\n\n        offs += this.input.length;\n    }\n\n    return nextError;\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-fnn/src/layer.js\n ** module id = 145\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./matrix');\nmodule.exports.Decompositions = module.exports.DC = require('./decompositions');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-fnn/~/ml-matrix/src/index.js\n ** module id = 146\n ** module chunks = 0\n **/","'use strict';\n\nvar Asplice = Array.prototype.splice,\n    Aconcat = Array.prototype.concat;\n\n// For performance : http://jsperf.com/clone-array-slice-vs-while-vs-for\nfunction slice(arr) {\n    var i = 0,\n        ii = arr.length,\n        result = new Array(ii);\n    for (; i < ii; i++) {\n        result[i] = arr[i];\n    }\n    return result;\n}\n\n/**\n * Real matrix.\n * @constructor\n * @param {number|Array} nRows - Number of rows of the new matrix or a 2D array containing the data.\n * @param {number|boolean} [nColumns] - Number of columns of the new matrix or a boolean specifying if the input array should be cloned\n */\nfunction Matrix(nRows, nColumns) {\n    var i = 0, rows, columns, matrix, newInstance;\n    if (Array.isArray(nRows)) {\n        newInstance = nColumns;\n        matrix = newInstance ? slice(nRows) : nRows;\n        nRows = matrix.length;\n        nColumns = matrix[0].length;\n        if (typeof nColumns === 'undefined') {\n            throw new TypeError('Data must be a 2D array');\n        }\n        if (nRows > 0 && nColumns > 0) {\n            for (; i < nRows; i++) {\n                if (matrix[i].length !== nColumns) {\n                    throw new RangeError('Inconsistent array dimensions');\n                } else if (newInstance) {\n                    matrix[i] = slice(matrix[i]);\n                }\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else if (typeof nRows === 'number') { // Create empty matrix\n        if (nRows > 0 && nColumns > 0) {\n            matrix = new Array(nRows);\n            for (; i < nRows; i++) {\n                matrix[i] = new Array(nColumns);\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else {\n        throw new TypeError('Invalid arguments');\n    }\n\n    Object.defineProperty(matrix, 'rows', {writable: true, value: nRows});\n    Object.defineProperty(matrix, 'columns', {writable: true, value: nColumns});\n\n    matrix.__proto__ = Matrix.prototype;\n\n    return matrix;\n}\n\n/**\n * Constructs a Matrix with the chosen dimensions from a 1D array.\n * @param {number} newRows - Number of rows\n * @param {number} newColumns - Number of columns\n * @param {Array} newData - A 1D array containing data for the matrix\n * @returns {Matrix} - The new matrix\n */\nMatrix.from1DArray = function from1DArray(newRows, newColumns, newData) {\n    var length, data, i = 0;\n\n    length = newRows * newColumns;\n    if (length !== newData.length)\n        throw new RangeError('Data length does not match given dimensions');\n\n    data = new Array(newRows);\n    for (; i < newRows; i++) {\n        data[i] = newData.slice(i * newColumns, (i + 1) * newColumns);\n    }\n    return new Matrix(data);\n};\n\n/**\n * Creates a row vector, a matrix with only one row.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.rowVector = function rowVector(newData) {\n    return new Matrix([newData]);\n};\n\n/**\n * Creates a column vector, a matrix with only one column.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.columnVector = function columnVector(newData) {\n    var l = newData.length, vector = new Array(l);\n    for (var i = 0; i < l; i++)\n        vector[i] = [newData[i]];\n    return new Matrix(vector);\n};\n\n/**\n * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.empty = function empty(rows, columns) {\n    return new Matrix(rows, columns);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to zero.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.zeros = function zeros(rows, columns) {\n    return Matrix.empty(rows, columns).fill(0);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to one.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.ones = function ones(rows, columns) {\n    return Matrix.empty(rows, columns).fill(1);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be randomly set using Math.random().\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} The new matrix\n */\nMatrix.rand = function rand(rows, columns) {\n    var matrix = Matrix.empty(rows, columns);\n    for (var i = 0, ii = matrix.rows; i < ii; i++) {\n        for (var j = 0, jj = matrix.columns; j < jj; j++) {\n            matrix[i][j] = Math.random();\n        }\n    }\n    return matrix;\n};\n\n/**\n * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and other will be 0.\n * @param {number} n - Number of rows and columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.eye = function eye(n) {\n    var matrix = Matrix.zeros(n, n), l = matrix.rows;\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = 1;\n    }\n    return matrix;\n};\n\n/**\n * Creates a diagonal matrix based on the given array.\n * @param {Array} data - Array containing the data for the diagonal\n * @returns {Matrix} - The new matrix\n */\nMatrix.diag = function diag(data) {\n    var l = data.length, matrix = Matrix.zeros(l, l);\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = data[i];\n    }\n    return matrix;\n};\n\n/**\n * Creates an array of indices between two values\n * @param {number} from\n * @param {number} to\n * @returns {Array}\n */\nMatrix.indices = function indices(from, to) {\n    var vector = new Array(to - from);\n    for (var i = 0; i < vector.length; i++)\n        vector[i] = from++;\n    return vector;\n};\n\n// TODO DOC\nMatrix.stack = function stack(arg1) {\n    var i, j, k;\n    if (Matrix.isMatrix(arg1)) {\n        var rows = 0,\n            cols = 0;\n        for (i = 0; i < arguments.length; i++) {\n            rows += arguments[i].rows;\n            if (arguments[i].columns > cols)\n                cols = arguments[i].columns;\n        }\n\n        var r = Matrix.zeros(rows, cols);\n        var c = 0;\n        for (i = 0; i < arguments.length; i++) {\n            var current = arguments[i];\n            for (j = 0; j < current.rows; j++) {\n                for (k = 0; k < current.columns; k++)\n                    r[c][k] = current[j][k];\n                c++;\n            }\n        }\n        return r;\n    }\n    else if (Array.isArray(arg1)) {\n        var matrix = Matrix.empty(arguments.length, arg1.length);\n        for (i = 0; i < arguments.length; i++)\n            matrix.setRow(i, arguments[i]);\n        return matrix;\n    }\n};\n\n// TODO DOC\nMatrix.expand = function expand(base, count) {\n    var expansion = [];\n    for (var i = 0; i < count.length; i++)\n        for (var j = 0; j < count[i]; j++)\n            expansion.push(base[i]);\n    return new Matrix(expansion);\n};\n\n/**\n * Check that the provided value is a Matrix and tries to instantiate one if not\n * @param value - The value to check\n * @returns {Matrix}\n * @throws {TypeError}\n */\nMatrix.checkMatrix = function checkMatrix(value) {\n    if (!value) {\n        throw new TypeError('Argument has to be a matrix');\n    }\n    if (value.klass !== 'Matrix') {\n        value = new Matrix(value);\n    }\n    return value;\n};\n\n/**\n * Returns true if the argument is a Matrix, false otherwise\n * @param value - The value to check\n * @returns {boolean}\n */\nMatrix.isMatrix = function isMatrix(value) {\n    return value ? value.klass === 'Matrix' : false;\n};\n\n/**\n * @property {string} - The name of this class.\n */\nObject.defineProperty(Matrix.prototype, 'klass', {\n    get: function klass() {\n        return 'Matrix';\n    }\n});\n\n/**\n * @property {number} - The number of elements in the matrix.\n */\nObject.defineProperty(Matrix.prototype, 'size', {\n    get: function size() {\n        return this.rows * this.columns;\n    }\n});\n\n/**\n * @private\n * Internal check that a row index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkRowIndex = function checkRowIndex(index) {\n    if (index < 0 || index > this.rows - 1)\n        throw new RangeError('Row index out of range.');\n};\n\n/**\n * @private\n * Internal check that a column index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkColumnIndex = function checkColumnIndex(index) {\n    if (index < 0 || index > this.columns - 1)\n        throw new RangeError('Column index out of range.');\n};\n\n/**\n * @private\n * Internal check that two matrices have the same dimensions\n * @param {Matrix} otherMatrix\n */\nMatrix.prototype.checkDimensions = function checkDimensions(otherMatrix) {\n    if ((this.rows !== otherMatrix.rows) || (this.columns !== otherMatrix.columns))\n        throw new RangeError('Matrices dimensions must be equal.');\n};\n\n/**\n * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n * @returns {Matrix} this\n */\nMatrix.prototype.apply = function apply(callback) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            callback.call(this, i, j);\n        }\n    }\n    return this;\n};\n\n/**\n * Creates an exact and independent copy of the matrix\n * @returns {Matrix}\n */\nMatrix.prototype.clone = function clone() {\n    return new Matrix(this.to2DArray());\n};\n\n/**\n * Returns a new 1D array filled row by row with the matrix values\n * @returns {Array}\n */\nMatrix.prototype.to1DArray = function to1DArray() {\n    return Aconcat.apply([], this);\n};\n\n/**\n * Returns a 2D array containing a copy of the data\n * @returns {Array}\n */\nMatrix.prototype.to2DArray = function to2DArray() {\n    var l = this.rows, copy = new Array(l);\n    for (var i = 0; i < l; i++) {\n        copy[i] = slice(this[i]);\n    }\n    return copy;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row\n */\nMatrix.prototype.isRowVector = function isRowVector() {\n    return this.rows === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one column\n */\nMatrix.prototype.isColumnVector = function isColumnVector() {\n    return this.columns === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row or one column\n */\nMatrix.prototype.isVector = function isVector() {\n    return (this.rows === 1) || (this.columns === 1);\n};\n\n/**\n * @returns {boolean} true if the matrix has the same number of rows and columns\n */\nMatrix.prototype.isSquare = function isSquare() {\n    return this.rows === this.columns;\n};\n\n/**\n * @returns {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n */\nMatrix.prototype.isSymmetric = function isSymmetric() {\n    if (this.isSquare()) {\n        var l = this.rows;\n        for (var i = 0; i < l; i++) {\n            for (var j = 0; j <= i; j++) {\n                if (this[i][j] !== this[j][i]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    return false;\n};\n\n/**\n * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @param {number} value - The new value for the element\n * @returns {Matrix} this\n */\nMatrix.prototype.set = function set(rowIndex, columnIndex, value) {\n    this[rowIndex][columnIndex] = value;\n    return this;\n};\n\n/**\n * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @returns {number}\n */\nMatrix.prototype.get = function get(rowIndex, columnIndex) {\n    return this[rowIndex][columnIndex];\n};\n\n/**\n * Fills the matrix with a given value. All elements will be set to this value.\n * @param {number} value - New value\n * @returns {Matrix} this\n */\nMatrix.prototype.fill = function fill(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = value;\n        }\n    }\n    return this;\n};\n\n/**\n * Negates the matrix. All elements will be multiplied by (-1)\n * @returns {Matrix} this\n */\nMatrix.prototype.neg = function neg() {\n    return this.mulS(-1);\n};\n\n/**\n * Adds a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number')\n        return this.addS(value);\n    value = Matrix.checkMatrix(value);\n        return this.addM(value);\n};\n\n/**\n * Adds a scalar to each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.addS = function addS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += value;\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the value of each element of matrix to the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.addM = function addM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number')\n        return this.subS(value);\n    value = Matrix.checkMatrix(value);\n        return this.subM(value);\n};\n\n/**\n * Subtracts a scalar from each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.subS = function subS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the value of each element of matrix from the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.subM = function subM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number')\n        return this.mulS(value);\n    value = Matrix.checkMatrix(value);\n        return this.mulM(value);\n};\n\n/**\n * Multiplies a scalar with each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulS = function mulS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the value of each element of matrix with the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.mulM = function mulM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides by a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number')\n        return this.divS(value);\n    value = Matrix.checkMatrix(value);\n        return this.divM(value);\n};\n\n/**\n * Divides each element of the matrix by a scalar\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.divS = function divS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Divides each element of this by the corresponding element of matrix\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.divM = function divM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Returns a new array from the given row index\n * @param {number} index - Row index\n * @returns {Array}\n */\nMatrix.prototype.getRow = function getRow(index) {\n    this.checkRowIndex(index);\n    return slice(this[index]);\n};\n\n/**\n * Returns a new row vector from the given row index\n * @param {number} index - Row index\n * @returns {Matrix}\n */\nMatrix.prototype.getRowVector = function getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n};\n\n/**\n * Sets a row at the given index\n * @param {number} index - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setRow = function setRow(index, array) {\n    this.checkRowIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    this[index] = slice(array);\n    return this;\n};\n\n/**\n * Removes a row from the given index\n * @param {number} index - Row index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeRow = function removeRow(index) {\n    this.checkRowIndex(index);\n    if (this.rows === 1)\n        throw new RangeError('A matrix cannot have less than one row');\n    Asplice.call(this, index, 1);\n    this.rows -= 1;\n    return this;\n};\n\n/**\n * Adds a row at the given index\n * @param {number} [index = this.rows] - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRow = function addRow(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.rows;\n    }\n    if (index < 0 || index > this.rows)\n        throw new RangeError('Row index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    Asplice.call(this, index, 0, slice(array));\n    this.rows += 1;\n    return this;\n};\n\n/**\n * Swaps two rows\n * @param {number} row1 - First row index\n * @param {number} row2 - Second row index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapRows = function swapRows(row1, row2) {\n    this.checkRowIndex(row1);\n    this.checkRowIndex(row2);\n    var temp = this[row1];\n    this[row1] = this[row2];\n    this[row2] = temp;\n    return this;\n};\n\n/**\n * Returns a new array from the given column index\n * @param {number} index - Column index\n * @returns {Array}\n */\nMatrix.prototype.getColumn = function getColumn(index) {\n    this.checkColumnIndex(index);\n    var l = this.rows, column = new Array(l);\n    for (var i = 0; i < l; i++) {\n        column[i] = this[i][index];\n    }\n    return column;\n};\n\n/**\n * Returns a new column vector from the given column index\n * @param {number} index - Column index\n * @returns {Matrix}\n */\nMatrix.prototype.getColumnVector = function getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n};\n\n/**\n * Sets a column at the given index\n * @param {number} index - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setColumn = function setColumn(index, array) {\n    this.checkColumnIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i][index] = array[i];\n    }\n    return this;\n};\n\n/**\n * Removes a column from the given index\n * @param {number} index - Column index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeColumn = function removeColumn(index) {\n    this.checkColumnIndex(index);\n    if (this.columns === 1)\n        throw new RangeError('A matrix cannot have less than one column');\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].splice(index, 1);\n    }\n    this.columns -= 1;\n    return this;\n};\n\n/**\n * Adds a column at the given index\n * @param {number} [index = this.columns] - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumn = function addColumn(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.columns;\n    }\n    if (index < 0 || index > this.columns)\n        throw new RangeError('Column index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i].splice(index, 0, array[i]);\n    }\n    this.columns += 1;\n    return this;\n};\n\n/**\n * Swaps two columns\n * @param {number} column1 - First column index\n * @param {number} column2 - Second column index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapColumns = function swapColumns(column1, column2) {\n    this.checkRowIndex(column1);\n    this.checkRowIndex(column2);\n    var l = this.rows, temp, row;\n    for (var i = 0; i < l; i++) {\n        row = this[i];\n        temp = row[column1];\n        row[column1] = row[column2];\n        row[column2] = temp;\n    }\n    return this;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkRowVector = function checkRowVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.columns)\n        throw new RangeError('vector size must be the same as the number of columns');\n    return vector;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkColumnVector = function checkColumnVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.rows)\n        throw new RangeError('vector size must be the same as the number of rows');\n    return vector;\n};\n\n/**\n * Adds the values of a vector to each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRowVector = function addRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subRowVector = function subRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRowVector = function mulRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each row by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divRowVector = function divRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the values of a vector to each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumnVector = function addColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subColumnVector = function subColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumnVector = function mulColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each column by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divColumnVector = function divColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a row with a scalar\n * @param {number} index - Row index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRow = function mulRow(index, value) {\n    this.checkRowIndex(index);\n    var i = 0, l = this.columns;\n    for (; i < l; i++) {\n        this[index][i] *= value;\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a column with a scalar\n * @param {number} index - Column index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumn = function mulColumn(index, value) {\n    this.checkColumnIndex(index);\n    var i = 0, l = this.rows;\n    for (; i < l; i++) {\n        this[i][index] *= value;\n    }\n};\n\n/**\n * A matrix index\n * @typedef {Object} MatrixIndex\n * @property {number} row\n * @property {number} column\n */\n\n/**\n * Returns the maximum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.max = function max() {\n    var v = -Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxIndex = function maxIndex() {\n    var v = -Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.min = function min() {\n    var v = Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minIndex = function minIndex() {\n    var v = Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.maxRow = function maxRow(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxRowIndex = function maxRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    var idx = {\n            row: index\n        };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.minRow = function minRow(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minRowIndex = function minRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: index,\n        column: 0\n    };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.maxColumn = function maxColumn(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxColumnIndex = function maxColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.minColumn = function minColumn(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minColumnIndex = function minColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns an array containing the diagonal values of the matrix\n * @returns {Array}\n */\nMatrix.prototype.diag = function diag() {\n    if (!this.isSquare())\n        throw new TypeError('Only square matrices have a diagonal.');\n    var diag = new Array(this.rows);\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        diag[i] = this[i][i];\n    }\n    return diag;\n};\n\n/**\n * Returns the sum of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.sum = function sum() {\n    var v = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            v += this[i][j];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the mean of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.mean = function mean() {\n    return this.sum() / this.size;\n};\n\n/**\n * Returns the product of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.prod = function prod() {\n    var prod = 1;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            prod *= this[i][j];\n        }\n    }\n    return prod;\n};\n\n/**\n * Computes the cumulative sum of the matrix elements (in place, row by row)\n * @returns {Matrix} this\n */\nMatrix.prototype.cumulativeSum = function cumulativeSum() {\n    var sum = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            sum += this[i][j];\n            this[i][j] = sum;\n        }\n    }\n    return this;\n};\n\n/**\n * Computes the dot (scalar) product between the matrix and another\n * @param {Matrix} other vector\n * @returns {number}\n */\nMatrix.prototype.dot = function dot(other) {\n    if (this.size !== other.size)\n        throw new RangeError('vectors do not have the same size');\n    var vector1 = this.to1DArray();\n    var vector2 = other.to1DArray();\n    var dot = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        dot += vector1[i] * vector2[i];\n    }\n    return dot;\n};\n\n/**\n * Returns the matrix product between this and other\n * @returns {Matrix}\n */\nMatrix.prototype.mmul = function mmul(other) {\n    if (!Matrix.isMatrix(other))\n        throw new TypeError('parameter \"other\" must be a matrix');\n    if (this.columns !== other.rows)\n        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n\n    var m = this.rows, n = this.columns, p = other.columns;\n    var result = new Matrix(m, p);\n\n    var Bcolj = new Array(n);\n    var i, j, k;\n    for (j = 0; j < p; j++) {\n        for (k = 0; k < n; k++)\n            Bcolj[k] = other[k][j];\n\n        for (i = 0; i < m; i++) {\n            var Arowi = this[i];\n\n            var s = 0;\n            for (k = 0; k < n; k++)\n                s += Arowi[k] * Bcolj[k];\n\n            result[i][j] = s;\n        }\n    }\n    return result;\n};\n\n/**\n * Sorts the rows (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortRows = function sortRows(compareFunction) {\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].sort(compareFunction);\n    }\n    return this;\n};\n\n/**\n * Sorts the columns (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortColumns = function sortColumns(compareFunction) {\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n};\n\n/**\n * Transposes the matrix and returns a new one containing the result\n * @returns {Matrix}\n */\nMatrix.prototype.transpose = function transpose() {\n    var result = new Matrix(this.columns, this.rows);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[j][i] = this[i][j];\n        }\n    }\n    return result;\n};\n\n/**\n * Returns a subset of the matrix\n * @param {number} startRow - First row index\n * @param {number} endRow - Last row index\n * @param {number} startColumn - First column index\n * @param {number} endColumn - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrix = function subMatrix(startRow, endRow, startColumn, endColumn) {\n    if ((startRow > endRow) || (startColumn > endColumn) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range');\n    var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n    for (var i = startRow; i <= endRow; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            newMatrix[i - startRow][j - startColumn] = this[i][j];\n        }\n    }\n    return newMatrix;\n};\n\n/**\n * Returns a subset of the matrix based on an array of row indices\n * @param {Array} indices - Array containing the row indices\n * @param {number} [startColumn = 0] - First column index\n * @param {number} [endColumn = this.columns-1] - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixRow = function subMatrixRow(indices, startColumn, endColumn) {\n    if (typeof startColumn === 'undefined') {\n        startColumn = 0;\n        endColumn = this.columns - 1;\n    } else if (typeof endColumn === 'undefined') {\n        endColumn = this.columns - 1;\n    }\n    if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, rows = this.rows,\n        X = new Matrix(l, endColumn - startColumn + 1);\n    for (var i = 0; i < l; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            if ((indices[i] < 0) || (indices[i] >= rows))\n                throw new RangeError('Argument out of range.');\n            X[i][j - startColumn] = this[indices[i]][j];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns a subset of the matrix based on an array of column indices\n * @param {Array} indices - Array containing the column indices\n * @param {number} [startRow = 0] - First row index\n * @param {number} [endRow = this.rows-1] - Last row index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixColumn = function subMatrixColumn(indices, startRow, endRow) {\n    if (typeof startRow === 'undefined') {\n        startRow = 0;\n        endRow = this.rows - 1;\n    } else if (typeof endRow === 'undefined') {\n        endRow = this.rows - 1;\n    }\n    if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, columns = this.columns,\n        X = new Matrix(endRow - startRow + 1, l);\n    for (var i = 0; i < l; i++) {\n        for (var j = startRow; j <= endRow; j++) {\n            if ((indices[i] < 0) || (indices[i] >= columns))\n                throw new RangeError('Argument out of range.');\n            X[j - startRow][i] = this[j][indices[i]];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns the trace of the matrix (sum of the diagonal elements)\n * @returns {number}\n */\nMatrix.prototype.trace = function trace() {\n    if (!this.isSquare())\n        throw new TypeError('The matrix is not square');\n    var trace = 0, i = 0, l = this.rows;\n    for (; i < l; i++) {\n        trace += this[i][i];\n    }\n    return trace;\n};\n\n/**\n * Sets each element of the matrix to its absolute value\n * @returns {Matrix} this\n */\nMatrix.prototype.abs = function abs() {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = Math.abs(this[i][j]);\n        }\n    }\n};\n\nmodule.exports = Matrix;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-fnn/~/ml-matrix/src/matrix.js\n ** module id = 147\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('./matrix');\n\nvar SingularValueDecomposition = require('./dc/svd');\nvar EigenvalueDecomposition = require('./dc/evd');\nvar LuDecomposition = require('./dc/lu');\nvar QrDecomposition = require('./dc/qr');\nvar CholeskyDecomposition = require('./dc/cholesky');\n\nfunction inverse(matrix) {\n    return solve(matrix, Matrix.eye(matrix.rows));\n}\n\nMatrix.prototype.inverse = function () {\n    return inverse(this);\n};\n\nfunction solve(leftHandSide, rightHandSide) {\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n}\n\nMatrix.prototype.solve = function (other) {\n    return solve(this, other);\n};\n\nmodule.exports = {\n    SingularValueDecomposition: SingularValueDecomposition,\n    SVD: SingularValueDecomposition,\n    EigenvalueDecomposition: EigenvalueDecomposition,\n    EVD: EigenvalueDecomposition,\n    LuDecomposition: LuDecomposition,\n    LU: LuDecomposition,\n    QrDecomposition: QrDecomposition,\n    QR: QrDecomposition,\n    CholeskyDecomposition: CholeskyDecomposition,\n    CHO: CholeskyDecomposition,\n    inverse: inverse,\n    solve: solve\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-fnn/~/ml-matrix/src/decompositions.js\n ** module id = 148\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\nfunction SingularValueDecomposition(value, options) {\n    if (!(this instanceof SingularValueDecomposition)) {\n        return new SingularValueDecomposition(value, options);\n    }\n    value = Matrix.checkMatrix(value);\n\n    options = options || {};\n\n    var a = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        nu = Math.min(m, n);\n\n    var wantu = true, wantv = true;\n    if (options.computeLeftSingularVectors === false)\n        wantu = false;\n    if (options.computeRightSingularVectors === false)\n        wantv = false;\n    var autoTranspose = options.autoTranspose === true;\n\n    var swapped = false;\n    if (m < n) {\n        if (!autoTranspose) {\n            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n        } else {\n            a = a.transpose();\n            m = a.rows;\n            n = a.columns;\n            swapped = true;\n            var aux = wantu;\n            wantu = wantv;\n            wantv = aux;\n        }\n    }\n\n    var s = new Array(Math.min(m + 1, n)),\n        U = Matrix.zeros(m, nu),\n        V = Matrix.zeros(n, n),\n        e = new Array(n),\n        work = new Array(m);\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n\n    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\n    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n        if (k < nct) {\n            s[k] = 0;\n            for (i = k; i < m; i++) {\n                s[k] = hypotenuse(s[k], a[i][k]);\n            }\n            if (s[k] !== 0) {\n                if (a[k][k] < 0) {\n                    s[k] = -s[k];\n                }\n                for (i = k; i < m; i++) {\n                    a[i][k] /= s[k];\n                }\n                a[k][k] += 1;\n            }\n            s[k] = -s[k];\n        }\n\n        for (j = k + 1; j < n; j++) {\n            if ((k < nct) && (s[k] !== 0)) {\n                t = 0;\n                for (i = k; i < m; i++) {\n                    t += a[i][k] * a[i][j];\n                }\n                t = -t / a[k][k];\n                for (i = k; i < m; i++) {\n                    a[i][j] += t * a[i][k];\n                }\n            }\n            e[j] = a[k][j];\n        }\n\n        if (wantu && (k < nct)) {\n            for (i = k; i < m; i++) {\n                U[i][k] = a[i][k];\n            }\n        }\n\n        if (k < nrt) {\n            e[k] = 0;\n            for (i = k + 1; i < n; i++) {\n                e[k] = hypotenuse(e[k], e[i]);\n            }\n            if (e[k] !== 0) {\n                if (e[k + 1] < 0)\n                    e[k] = -e[k];\n                for (i = k + 1; i < n; i++) {\n                    e[i] /= e[k];\n                }\n                e[k + 1] += 1;\n            }\n            e[k] = -e[k];\n            if ((k + 1 < m) && (e[k] !== 0)) {\n                for (i = k + 1; i < m; i++) {\n                    work[i] = 0;\n                }\n                for (j = k + 1; j < n; j++) {\n                    for (i = k + 1; i < m; i++) {\n                        work[i] += e[j] * a[i][j];\n                    }\n                }\n                for (j = k + 1; j < n; j++) {\n                    t = -e[j] / e[k + 1];\n                    for (i = k + 1; i < m; i++) {\n                        a[i][j] += t * work[i];\n                    }\n                }\n            }\n            if (wantv) {\n                for (i = k + 1; i < n; i++) {\n                    V[i][k] = e[i];\n                }\n            }\n        }\n    }\n\n    p = Math.min(n, m + 1);\n    if (nct < n) {\n        s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n        s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n        e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n        for (j = nct; j < nu; j++) {\n            for (i = 0; i < m; i++) {\n                U[i][j] = 0;\n            }\n            U[j][j] = 1;\n        }\n        for (k = nct - 1; k >= 0; k--) {\n            if (s[k] !== 0) {\n                for (j = k + 1; j < nu; j++) {\n                    t = 0;\n                    for (i = k; i < m; i++) {\n                        t += U[i][k] * U[i][j];\n                    }\n                    t = -t / U[k][k];\n                    for (i = k; i < m; i++) {\n                        U[i][j] += t * U[i][k];\n                    }\n                }\n                for (i = k; i < m; i++) {\n                    U[i][k] = -U[i][k];\n                }\n                U[k][k] = 1 + U[k][k];\n                for (i = 0; i < k - 1; i++) {\n                    U[i][k] = 0;\n                }\n            } else {\n                for (i = 0; i < m; i++) {\n                    U[i][k] = 0;\n                }\n                U[k][k] = 1;\n            }\n        }\n    }\n\n    if (wantv) {\n        for (k = n - 1; k >= 0; k--) {\n            if ((k < nrt) && (e[k] !== 0)) {\n                for (j = k + 1; j < n; j++) {\n                    t = 0;\n                    for (i = k + 1; i < n; i++) {\n                        t += V[i][k] * V[i][j];\n                    }\n                    t = -t / V[k + 1][k];\n                    for (i = k + 1; i < n; i++) {\n                        V[i][j] += t * V[i][k];\n                    }\n                }\n            }\n            for (i = 0; i < n; i++) {\n                V[i][k] = 0;\n            }\n            V[k][k] = 1;\n        }\n    }\n\n    var pp = p - 1,\n        iter = 0,\n        eps = Math.pow(2, -52);\n    while (p > 0) {\n        for (k = p - 2; k >= -1; k--) {\n            if (k === -1) {\n                break;\n            }\n            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n                e[k] = 0;\n                break;\n            }\n        }\n        if (k === p - 2) {\n            kase = 4;\n        } else {\n            for (ks = p - 1; ks >= k; ks--) {\n                if (ks === k) {\n                    break;\n                }\n                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n                if (Math.abs(s[ks]) <= eps * t) {\n                    s[ks] = 0;\n                    break;\n                }\n            }\n            if (ks === k) {\n                kase = 3;\n            } else if (ks === p - 1) {\n                kase = 1;\n            } else {\n                kase = 2;\n                k = ks;\n            }\n        }\n\n        k++;\n\n        switch (kase) {\n            case 1: {\n                f = e[p - 2];\n                e[p - 2] = 0;\n                for (j = p - 2; j >= k; j--) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    if (j !== k) {\n                        f = -sn * e[j - 1];\n                        e[j - 1] = cs * e[j - 1];\n                    }\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][p - 1];\n                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                            V[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 2 : {\n                f = e[k - 1];\n                e[k - 1] = 0;\n                for (j = k; j < p; j++) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    f = -sn * e[j];\n                    e[j] = cs * e[j];\n                    if (wantu) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][k - 1];\n                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 3 : {\n                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n                sp = s[p - 1] / scale;\n                spm1 = s[p - 2] / scale;\n                epm1 = e[p - 2] / scale;\n                sk = s[k] / scale;\n                ek = e[k] / scale;\n                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n                c = (sp * epm1) * (sp * epm1);\n                shift = 0;\n                if ((b !== 0) || (c !== 0)) {\n                    shift = Math.sqrt(b * b + c);\n                    if (b < 0) {\n                        shift = -shift;\n                    }\n                    shift = c / (b + shift);\n                }\n                f = (sk + sp) * (sk - sp) + shift;\n                g = sk * ek;\n                for (j = k; j < p - 1; j++) {\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    if (j !== k) {\n                        e[j - 1] = t;\n                    }\n                    f = cs * s[j] + sn * e[j];\n                    e[j] = cs * e[j] - sn * s[j];\n                    g = sn * s[j + 1];\n                    s[j + 1] = cs * s[j + 1];\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][j + 1];\n                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                            V[i][j] = t;\n                        }\n                    }\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    s[j] = t;\n                    f = cs * e[j] + sn * s[j + 1];\n                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n                    g = sn * e[j + 1];\n                    e[j + 1] = cs * e[j + 1];\n                    if (wantu && (j < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][j + 1];\n                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                e[p - 2] = f;\n                iter = iter + 1;\n                break;\n            }\n            case 4: {\n                if (s[k] <= 0) {\n                    s[k] = (s[k] < 0 ? -s[k] : 0);\n                    if (wantv) {\n                        for (i = 0; i <= pp; i++) {\n                            V[i][k] = -V[i][k];\n                        }\n                    }\n                }\n                while (k < pp) {\n                    if (s[k] >= s[k + 1]) {\n                        break;\n                    }\n                    t = s[k];\n                    s[k] = s[k + 1];\n                    s[k + 1] = t;\n                    if (wantv && (k < n - 1)) {\n                        for (i = 0; i < n; i++) {\n                            t = V[i][k + 1];\n                            V[i][k + 1] = V[i][k];\n                            V[i][k] = t;\n                        }\n                    }\n                    if (wantu && (k < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = U[i][k + 1];\n                            U[i][k + 1] = U[i][k];\n                            U[i][k] = t;\n                        }\n                    }\n                    k++;\n                }\n                iter = 0;\n                p--;\n                break;\n            }\n        }\n    }\n\n    if (swapped) {\n        var tmp = V;\n        V = U;\n        U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n}\n\nSingularValueDecomposition.prototype = {\n    get condition() {\n        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    get norm2() {\n        return this.s[0];\n    },\n    get rank() {\n        var eps = Math.pow(2, -52),\n            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n            r = 0,\n            s = this.s;\n        for (var i = 0, ii = s.length; i < ii; i++) {\n            if (s[i] > tol) {\n                r++;\n            }\n        }\n        return r;\n    },\n    get diagonal() {\n        return this.s;\n    },\n    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n    get threshold() {\n        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n    },\n    get leftSingularVectors() {\n        return this.U;\n    },\n    get rightSingularVectors() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        return Matrix.diag(this.s);\n    },\n    solve: function (value) {\n\n        var Y = value,\n            e = this.threshold,\n            scols = this.s.length,\n            Ls = Matrix.zeros(scols, scols),\n            i;\n\n        for (i = 0; i < scols; i++) {\n            if (Math.abs(this.s[i]) <= e) {\n                Ls[i][i] = 0;\n            } else {\n                Ls[i][i] = 1 / this.s[i];\n            }\n        }\n\n\n        var VL = this.V.mmul(Ls),\n            vrows = this.V.rows,\n            urows = this.U.rows,\n            VLU = Matrix.zeros(vrows, urows),\n            j, k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < scols; k++) {\n                    sum += VL[i][k] * this.U[j][k];\n                }\n                VLU[i][j] = sum;\n            }\n        }\n\n        return VLU.mmul(Y);\n    },\n    solveForDiagonal: function (value) {\n        return this.solve(Matrix.diag(value));\n    },\n    inverse: function () {\n        var e = this.threshold,\n            vrows = this.V.rows,\n            vcols = this.V.columns,\n            X = new Matrix(vrows, this.s.length),\n            i, j;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < vcols; j++) {\n                if (Math.abs(this.s[j]) > e) {\n                    X[i][j] = this.V[i][j] / this.s[j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n\n        var urows = this.U.rows,\n            ucols = this.U.columns,\n            Y = new Matrix(vrows, urows),\n            k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < ucols; k++) {\n                    sum += X[i][k] * this.U[j][k];\n                }\n                Y[i][j] = sum;\n            }\n        }\n\n        return Y;\n    }\n};\n\nmodule.exports = SingularValueDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-fnn/~/ml-matrix/src/dc/svd.js\n ** module id = 149\n ** module chunks = 0\n **/","'use strict';\n\nexports.hypotenuse = function hypotenuse(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n        r = b / a;\n        return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n        r = a / b;\n        return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-fnn/~/ml-matrix/src/dc/util.js\n ** module id = 150\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\nfunction EigenvalueDecomposition(matrix) {\n    if (!(this instanceof EigenvalueDecomposition)) {\n        return new EigenvalueDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n        throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns,\n        V = Matrix.zeros(n, n),\n        d = new Array(n),\n        e = new Array(n),\n        value = matrix,\n        i, j;\n\n    if (matrix.isSymmetric()) {\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                V[i][j] = value[i][j];\n            }\n        }\n        tred2(n, e, d, V);\n        tql2(n, e, d, V);\n    }\n    else {\n        var H = Matrix.zeros(n, n),\n            ort = new Array(n);\n        for (j = 0; j < n; j++) {\n            for (i = 0; i < n; i++) {\n                H[i][j] = value[i][j];\n            }\n        }\n        orthes(n, H, ort, V);\n        hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n}\n\nEigenvalueDecomposition.prototype = {\n    get realEigenvalues() {\n        return this.d;\n    },\n    get imaginaryEigenvalues() {\n        return this.e;\n    },\n    get eigenvectorMatrix() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        var n = this.n,\n            e = this.e,\n            d = this.d,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                X[i][j] = 0;\n            }\n            X[i][i] = d[i];\n            if (e[i] > 0) {\n                X[i][i + 1] = e[i];\n            }\n            else if (e[i] < 0) {\n                X[i][i - 1] = e[i];\n            }\n        }\n        return X;\n    }\n};\n\nfunction tred2(n, e, d, V) {\n\n    var f, g, h, i, j, k,\n        hh, scale;\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n    }\n\n    for (i = n - 1; i > 0; i--) {\n        scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n            scale = scale + Math.abs(d[k]);\n        }\n\n        if (scale === 0) {\n            e[i] = d[i - 1];\n            for (j = 0; j < i; j++) {\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n                V[j][i] = 0;\n            }\n        } else {\n            for (k = 0; k < i; k++) {\n                d[k] /= scale;\n                h += d[k] * d[k];\n            }\n\n            f = d[i - 1];\n            g = Math.sqrt(h);\n            if (f > 0) {\n                g = -g;\n            }\n\n            e[i] = scale * g;\n            h = h - f * g;\n            d[i - 1] = f - g;\n            for (j = 0; j < i; j++) {\n                e[j] = 0;\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                V[j][i] = f;\n                g = e[j] + V[j][j] * f;\n                for (k = j + 1; k <= i - 1; k++) {\n                    g += V[k][j] * d[k];\n                    e[k] += V[k][j] * f;\n                }\n                e[j] = g;\n            }\n\n            f = 0;\n            for (j = 0; j < i; j++) {\n                e[j] /= h;\n                f += e[j] * d[j];\n            }\n\n            hh = f / (h + h);\n            for (j = 0; j < i; j++) {\n                e[j] -= hh * d[j];\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                g = e[j];\n                for (k = j; k <= i - 1; k++) {\n                    V[k][j] -= (f * e[k] + g * d[k]);\n                }\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n            }\n        }\n        d[i] = h;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        V[n - 1][i] = V[i][i];\n        V[i][i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n            for (k = 0; k <= i; k++) {\n                d[k] = V[k][i + 1] / h;\n            }\n\n            for (j = 0; j <= i; j++) {\n                g = 0;\n                for (k = 0; k <= i; k++) {\n                    g += V[k][i + 1] * V[k][j];\n                }\n                for (k = 0; k <= i; k++) {\n                    V[k][j] -= g * d[k];\n                }\n            }\n        }\n\n        for (k = 0; k <= i; k++) {\n            V[k][i + 1] = 0;\n        }\n    }\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n        V[n - 1][j] = 0;\n    }\n\n    V[n - 1][n - 1] = 1;\n    e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n\n    var g, h, i, j, k, l, m, p, r,\n        dl1, c, c2, c3, el1, s, s2,\n        iter;\n\n    for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n    }\n\n    e[n - 1] = 0;\n\n    var f = 0,\n        tst1 = 0,\n        eps = Math.pow(2, -52);\n\n    for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        m = l;\n        while (m < n) {\n            if (Math.abs(e[m]) <= eps * tst1) {\n                break;\n            }\n            m++;\n        }\n\n        if (m > l) {\n            iter = 0;\n            do {\n                iter = iter + 1;\n\n                g = d[l];\n                p = (d[l + 1] - g) / (2 * e[l]);\n                r = hypotenuse(p, 1);\n                if (p < 0) {\n                    r = -r;\n                }\n\n                d[l] = e[l] / (p + r);\n                d[l + 1] = e[l] * (p + r);\n                dl1 = d[l + 1];\n                h = g - d[l];\n                for (i = l + 2; i < n; i++) {\n                    d[i] -= h;\n                }\n\n                f = f + h;\n\n                p = d[m];\n                c = 1;\n                c2 = c;\n                c3 = c;\n                el1 = e[l + 1];\n                s = 0;\n                s2 = 0;\n                for (i = m - 1; i >= l; i--) {\n                    c3 = c2;\n                    c2 = c;\n                    s2 = s;\n                    g = c * e[i];\n                    h = c * p;\n                    r = hypotenuse(p, e[i]);\n                    e[i + 1] = s * r;\n                    s = e[i] / r;\n                    c = p / r;\n                    p = c * d[i] - s * g;\n                    d[i + 1] = h + s * (c * g + s * d[i]);\n\n                    for (k = 0; k < n; k++) {\n                        h = V[k][i + 1];\n                        V[k][i + 1] = s * V[k][i] + c * h;\n                        V[k][i] = c * V[k][i] - s * h;\n                    }\n                }\n\n                p = -s * s2 * c3 * el1 * e[l] / dl1;\n                e[l] = s * p;\n                d[l] = c * p;\n\n            }\n            while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n            if (d[j] < p) {\n                k = j;\n                p = d[j];\n            }\n        }\n\n        if (k !== i) {\n            d[k] = d[i];\n            d[i] = p;\n            for (j = 0; j < n; j++) {\n                p = V[j][i];\n                V[j][i] = V[j][k];\n                V[j][k] = p;\n            }\n        }\n    }\n}\n\nfunction orthes(n, H, ort, V) {\n\n    var low = 0,\n        high = n - 1,\n        f, g, h, i, j, m,\n        scale;\n\n    for (m = low + 1; m <= high - 1; m++) {\n        scale = 0;\n        for (i = m; i <= high; i++) {\n            scale = scale + Math.abs(H[i][m - 1]);\n        }\n\n        if (scale !== 0) {\n            h = 0;\n            for (i = high; i >= m; i--) {\n                ort[i] = H[i][m - 1] / scale;\n                h += ort[i] * ort[i];\n            }\n\n            g = Math.sqrt(h);\n            if (ort[m] > 0) {\n                g = -g;\n            }\n\n            h = h - ort[m] * g;\n            ort[m] = ort[m] - g;\n\n            for (j = m; j < n; j++) {\n                f = 0;\n                for (i = high; i >= m; i--) {\n                    f += ort[i] * H[i][j];\n                }\n\n                f = f / h;\n                for (i = m; i <= high; i++) {\n                    H[i][j] -= f * ort[i];\n                }\n            }\n\n            for (i = 0; i <= high; i++) {\n                f = 0;\n                for (j = high; j >= m; j--) {\n                    f += ort[j] * H[i][j];\n                }\n\n                f = f / h;\n                for (j = m; j <= high; j++) {\n                    H[i][j] -= f * ort[j];\n                }\n            }\n\n            ort[m] = scale * ort[m];\n            H[m][m - 1] = scale * g;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            V[i][j] = (i === j ? 1 : 0);\n        }\n    }\n\n    for (m = high - 1; m >= low + 1; m--) {\n        if (H[m][m - 1] !== 0) {\n            for (i = m + 1; i <= high; i++) {\n                ort[i] = H[i][m - 1];\n            }\n\n            for (j = m; j <= high; j++) {\n                g = 0;\n                for (i = m; i <= high; i++) {\n                    g += ort[i] * V[i][j];\n                }\n\n                g = (g / ort[m]) / H[m][m - 1];\n                for (i = m; i <= high; i++) {\n                    V[i][j] += g * ort[i];\n                }\n            }\n        }\n    }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n    var n = nn - 1,\n        low = 0,\n        high = nn - 1,\n        eps = Math.pow(2, -52),\n        exshift = 0,\n        norm = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n        s = 0,\n        z = 0,\n        iter = 0,\n        i, j, k, l, m, t, w, x, y,\n        ra, sa, vr, vi,\n        notlast, cdivres;\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            d[i] = H[i][i];\n            e[i] = 0;\n        }\n\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n            norm = norm + Math.abs(H[i][j]);\n        }\n    }\n\n    while (n >= low) {\n        l = n;\n        while (l > low) {\n            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n            if (s === 0) {\n                s = norm;\n            }\n            if (Math.abs(H[l][l - 1]) < eps * s) {\n                break;\n            }\n            l--;\n        }\n\n        if (l === n) {\n            H[n][n] = H[n][n] + exshift;\n            d[n] = H[n][n];\n            e[n] = 0;\n            n--;\n            iter = 0;\n        } else if (l === n - 1) {\n            w = H[n][n - 1] * H[n - 1][n];\n            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n            q = p * p + w;\n            z = Math.sqrt(Math.abs(q));\n            H[n][n] = H[n][n] + exshift;\n            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n            x = H[n][n];\n\n            if (q >= 0) {\n                z = (p >= 0) ? (p + z) : (p - z);\n                d[n - 1] = x + z;\n                d[n] = d[n - 1];\n                if (z !== 0) {\n                    d[n] = x - w / z;\n                }\n                e[n - 1] = 0;\n                e[n] = 0;\n                x = H[n][n - 1];\n                s = Math.abs(x) + Math.abs(z);\n                p = x / s;\n                q = z / s;\n                r = Math.sqrt(p * p + q * q);\n                p = p / r;\n                q = q / r;\n\n                for (j = n - 1; j < nn; j++) {\n                    z = H[n - 1][j];\n                    H[n - 1][j] = q * z + p * H[n][j];\n                    H[n][j] = q * H[n][j] - p * z;\n                }\n\n                for (i = 0; i <= n; i++) {\n                    z = H[i][n - 1];\n                    H[i][n - 1] = q * z + p * H[i][n];\n                    H[i][n] = q * H[i][n] - p * z;\n                }\n\n                for (i = low; i <= high; i++) {\n                    z = V[i][n - 1];\n                    V[i][n - 1] = q * z + p * V[i][n];\n                    V[i][n] = q * V[i][n] - p * z;\n                }\n            } else {\n                d[n - 1] = x + p;\n                d[n] = x + p;\n                e[n - 1] = z;\n                e[n] = -z;\n            }\n\n            n = n - 2;\n            iter = 0;\n        } else {\n            x = H[n][n];\n            y = 0;\n            w = 0;\n            if (l < n) {\n                y = H[n - 1][n - 1];\n                w = H[n][n - 1] * H[n - 1][n];\n            }\n\n            if (iter === 10) {\n                exshift += x;\n                for (i = low; i <= n; i++) {\n                    H[i][i] -= x;\n                }\n                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n                x = y = 0.75 * s;\n                w = -0.4375 * s * s;\n            }\n\n            if (iter === 30) {\n                s = (y - x) / 2;\n                s = s * s + w;\n                if (s > 0) {\n                    s = Math.sqrt(s);\n                    if (y < x) {\n                        s = -s;\n                    }\n                    s = x - w / ((y - x) / 2 + s);\n                    for (i = low; i <= n; i++) {\n                        H[i][i] -= s;\n                    }\n                    exshift += s;\n                    x = y = w = 0.964;\n                }\n            }\n\n            iter = iter + 1;\n\n            m = n - 2;\n            while (m >= l) {\n                z = H[m][m];\n                r = x - z;\n                s = y - z;\n                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n                q = H[m + 1][m + 1] - z - r - s;\n                r = H[m + 2][m + 1];\n                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                p = p / s;\n                q = q / s;\n                r = r / s;\n                if (m === l) {\n                    break;\n                }\n                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n                    break;\n                }\n                m--;\n            }\n\n            for (i = m + 2; i <= n; i++) {\n                H[i][i - 2] = 0;\n                if (i > m + 2) {\n                    H[i][i - 3] = 0;\n                }\n            }\n\n            for (k = m; k <= n - 1; k++) {\n                notlast = (k !== n - 1);\n                if (k !== m) {\n                    p = H[k][k - 1];\n                    q = H[k + 1][k - 1];\n                    r = (notlast ? H[k + 2][k - 1] : 0);\n                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                    if (x !== 0) {\n                        p = p / x;\n                        q = q / x;\n                        r = r / x;\n                    }\n                }\n\n                if (x === 0) {\n                    break;\n                }\n\n                s = Math.sqrt(p * p + q * q + r * r);\n                if (p < 0) {\n                    s = -s;\n                }\n\n                if (s !== 0) {\n                    if (k !== m) {\n                        H[k][k - 1] = -s * x;\n                    } else if (l !== m) {\n                        H[k][k - 1] = -H[k][k - 1];\n                    }\n\n                    p = p + s;\n                    x = p / s;\n                    y = q / s;\n                    z = r / s;\n                    q = q / p;\n                    r = r / p;\n\n                    for (j = k; j < nn; j++) {\n                        p = H[k][j] + q * H[k + 1][j];\n                        if (notlast) {\n                            p = p + r * H[k + 2][j];\n                            H[k + 2][j] = H[k + 2][j] - p * z;\n                        }\n\n                        H[k][j] = H[k][j] - p * x;\n                        H[k + 1][j] = H[k + 1][j] - p * y;\n                    }\n\n                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n                        p = x * H[i][k] + y * H[i][k + 1];\n                        if (notlast) {\n                            p = p + z * H[i][k + 2];\n                            H[i][k + 2] = H[i][k + 2] - p * r;\n                        }\n\n                        H[i][k] = H[i][k] - p;\n                        H[i][k + 1] = H[i][k + 1] - p * q;\n                    }\n\n                    for (i = low; i <= high; i++) {\n                        p = x * V[i][k] + y * V[i][k + 1];\n                        if (notlast) {\n                            p = p + z * V[i][k + 2];\n                            V[i][k + 2] = V[i][k + 2] - p * r;\n                        }\n\n                        V[i][k] = V[i][k] - p;\n                        V[i][k + 1] = V[i][k + 1] - p * q;\n                    }\n                }\n            }\n        }\n    }\n\n    if (norm === 0) {\n        return;\n    }\n\n    for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n\n        if (q === 0) {\n            l = n;\n            H[n][n] = 1;\n            for (i = n - 1; i >= 0; i--) {\n                w = H[i][i] - p;\n                r = 0;\n                for (j = l; j <= n; j++) {\n                    r = r + H[i][j] * H[j][n];\n                }\n\n                if (e[i] < 0) {\n                    z = w;\n                    s = r;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                        t = (x * s - z * r) / q;\n                        H[i][n] = t;\n                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n                    }\n\n                    t = Math.abs(H[i][n]);\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        } else if (q < 0) {\n            l = n - 1;\n\n            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n                H[n - 1][n - 1] = q / H[n][n - 1];\n                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n            } else {\n                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n                H[n - 1][n - 1] = cdivres[0];\n                H[n - 1][n] = cdivres[1];\n            }\n\n            H[n][n - 1] = 0;\n            H[n][n] = 1;\n            for (i = n - 2; i >= 0; i--) {\n                ra = 0;\n                sa = 0;\n                for (j = l; j <= n; j++) {\n                    ra = ra + H[i][j] * H[j][n - 1];\n                    sa = sa + H[i][j] * H[j][n];\n                }\n\n                w = H[i][i] - p;\n\n                if (e[i] < 0) {\n                    z = w;\n                    r = ra;\n                    s = sa;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        cdivres = cdiv(-ra, -sa, w, q);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                        vi = (d[i] - p) * 2 * q;\n                        if (vr === 0 && vi === 0) {\n                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                        }\n                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n                        } else {\n                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n                            H[i + 1][n - 1] = cdivres[0];\n                            H[i + 1][n] = cdivres[1];\n                        }\n                    }\n\n                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n - 1] = H[j][n - 1] / t;\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            for (j = i; j < nn; j++) {\n                V[i][j] = H[i][j];\n            }\n        }\n    }\n\n    for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n            z = 0;\n            for (k = low; k <= Math.min(j, high); k++) {\n                z = z + V[i][k] * H[k][j];\n            }\n            V[i][j] = z;\n        }\n    }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n    var r, d;\n    if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        return [(xr + r * xi) / d, (xi - r * xr) / d];\n    }\n    else {\n        r = yr / yi;\n        d = yi + r * yr;\n        return [(r * xr + xi) / d, (r * xi - xr) / d];\n    }\n}\n\nmodule.exports = EigenvalueDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-fnn/~/ml-matrix/src/dc/evd.js\n ** module id = 151\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\nfunction LuDecomposition(matrix) {\n    if (!(this instanceof LuDecomposition)) {\n        return new LuDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n\n    var lu = matrix.clone(),\n        rows = lu.rows,\n        columns = lu.columns,\n        pivotVector = new Array(rows),\n        pivotSign = 1,\n        i, j, k, p, s, t, v,\n        LUrowi, LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n        pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n\n        for (i = 0; i < rows; i++) {\n            LUcolj[i] = lu[i][j];\n        }\n\n        for (i = 0; i < rows; i++) {\n            LUrowi = lu[i];\n            kmax = Math.min(i, j);\n            s = 0;\n            for (k = 0; k < kmax; k++) {\n                s += LUrowi[k] * LUcolj[k];\n            }\n            LUrowi[j] = LUcolj[i] -= s;\n        }\n\n        p = j;\n        for (i = j + 1; i < rows; i++) {\n            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n                p = i;\n            }\n        }\n\n        if (p !== j) {\n            for (k = 0; k < columns; k++) {\n                t = lu[p][k];\n                lu[p][k] = lu[j][k];\n                lu[j][k] = t;\n            }\n\n            v = pivotVector[p];\n            pivotVector[p] = pivotVector[j];\n            pivotVector[j] = v;\n\n            pivotSign = -pivotSign;\n        }\n\n        if (j < rows && lu[j][j] !== 0) {\n            for (i = j + 1; i < rows; i++) {\n                lu[i][j] /= lu[j][j];\n            }\n        }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n}\n\nLuDecomposition.prototype = {\n    isSingular: function () {\n        var data = this.LU,\n            col = data.columns;\n        for (var j = 0; j < col; j++) {\n            if (data[j][j] === 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    get determinant() {\n        var data = this.LU;\n        if (!data.isSquare())\n            throw new Error('Matrix must be square');\n        var determinant = this.pivotSign, col = data.columns;\n        for (var j = 0; j < col; j++)\n            determinant *= data[j][j];\n        return determinant;\n    },\n    get lowerTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i > j) {\n                    X[i][j] = data[i][j];\n                } else if (i === j) {\n                    X[i][j] = 1;\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get upperTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i <= j) {\n                    X[i][j] = data[i][j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get pivotPermutationVector() {\n        return this.pivotVector.slice();\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var lu = this.LU,\n            rows = lu.rows;\n\n        if (rows !== value.rows)\n            throw new Error('Invalid matrix dimensions');\n        if (this.isSingular())\n            throw new Error('LU matrix is singular');\n\n        var count = value.columns,\n            X = value.subMatrixRow(this.pivotVector, 0, count - 1),\n            columns = lu.columns,\n            i, j, k;\n\n        for (k = 0; k < columns; k++) {\n            for (i = k + 1; i < columns; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        for (k = columns - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= lu[k][k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = LuDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-fnn/~/ml-matrix/src/dc/lu.js\n ** module id = 152\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\nfunction QrDecomposition(value) {\n    if (!(this instanceof QrDecomposition)) {\n        return new QrDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n\n    var qr = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        rdiag = new Array(n),\n        i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) {\n            nrm = hypotenuse(nrm, qr[i][k]);\n        }\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) {\n                nrm = -nrm;\n            }\n            for (i = k; i < m; i++) {\n                qr[i][k] /= nrm;\n            }\n            qr[k][k] += 1;\n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * qr[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    qr[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n}\n\nQrDecomposition.prototype = {\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var qr = this.QR,\n            m = qr.rows;\n\n        if (value.rows !== m)\n            throw new Error('Matrix row dimensions must agree');\n        if (!this.isFullRank())\n            throw new Error('Matrix is rank deficient');\n\n        var count = value.columns,\n            X = value.clone(),\n            n = qr.columns,\n            i, j, k, s;\n\n        for (k = 0; k < n; k++) {\n            for (j = 0; j < count; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * X[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    X[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        for (k = n - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= this.Rdiag[k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * qr[i][k];\n                }\n            }\n        }\n\n        return X.subMatrix(0, n - 1, 0, count - 1);\n    },\n    isFullRank: function () {\n        var columns = this.QR.columns;\n        for (var i = 0; i < columns; i++) {\n            if (this.Rdiag[i] === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n    get upperTriangularFactor() {\n        var qr = this.QR,\n            n = qr.columns,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                if (i < j) {\n                    X[i][j] = qr[i][j];\n                } else if (i === j) {\n                    X[i][j] = this.Rdiag[i];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get orthogonalFactor() {\n        var qr = this.QR,\n            rows = qr.rows,\n            columns = qr.columns,\n            X = new Matrix(rows, columns),\n            i, j, k, s;\n\n        for (k = columns - 1; k >= 0; k--) {\n            for (i = 0; i < rows; i++) {\n                X[i][k] = 0;\n            }\n            X[k][k] = 1;\n            for (j = k; j < columns; j++) {\n                if (qr[k][k] !== 0) {\n                    s = 0;\n                    for (i = k; i < rows; i++) {\n                        s += qr[i][k] * X[i][j];\n                    }\n\n                    s = -s / qr[k][k];\n\n                    for (i = k; i < rows; i++) {\n                        X[i][j] += s * qr[i][k];\n                    }\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = QrDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-fnn/~/ml-matrix/src/dc/qr.js\n ** module id = 153\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\nfunction CholeskyDecomposition(value) {\n    if (!(this instanceof CholeskyDecomposition)) {\n        return new CholeskyDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n    if (!value.isSymmetric())\n        throw new Error('Matrix is not symmetric');\n\n    var a = value,\n        dimension = a.rows,\n        l = new Matrix(dimension, dimension),\n        positiveDefinite = true,\n        i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n        var Lrowj = l[j];\n        var d = 0;\n        for (k = 0; k < j; k++) {\n            var Lrowk = l[k];\n            var s = 0;\n            for (i = 0; i < k; i++) {\n                s += Lrowk[i] * Lrowj[i];\n            }\n            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n            d = d + s * s;\n        }\n\n        d = a[j][j] - d;\n\n        positiveDefinite &= (d > 0);\n        l[j][j] = Math.sqrt(Math.max(d, 0));\n        for (k = j + 1; k < dimension; k++) {\n            l[j][k] = 0;\n        }\n    }\n\n    if (!positiveDefinite) {\n        throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n}\n\nCholeskyDecomposition.prototype = {\n    get leftTriangularFactor() {\n        return this.L;\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var l = this.L,\n            dimension = l.rows;\n\n        if (value.rows !== dimension) {\n            throw new Error('Matrix dimensions do not match');\n        }\n\n        var count = value.columns,\n            B = value.clone(),\n            i, j, k;\n\n        for (k = 0; k < dimension; k++) {\n            for (j = 0; j < count; j++) {\n                for (i = 0; i < k; i++) {\n                    B[k][j] -= B[i][j] * l[k][i];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        for (k = dimension - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                for (i = k + 1; i < dimension; i++) {\n                    B[k][j] -= B[i][j] * l[i][k];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        return B;\n    }\n};\n\nmodule.exports = CholeskyDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-fnn/~/ml-matrix/src/dc/cholesky.js\n ** module id = 154\n ** module chunks = 0\n **/"],"sourceRoot":""}